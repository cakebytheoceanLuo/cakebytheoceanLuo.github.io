<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>关于数据库的一切</title>
  <icon>https://www.gravatar.com/avatar/60437615b712b01d1a7c334c61fc1a4f</icon>
  <subtitle>罗济高的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cakebytheoceanluo.github.io/"/>
  <updated>2020-04-16T12:04:40.144Z</updated>
  <id>https://cakebytheoceanluo.github.io/</id>
  
  <author>
    <name>罗济高</name>
    <email>luojigao@outlook.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[CMU-15445]17_18_Project0</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/16/CMU-15445-17-18-Project0/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/16/CMU-15445-17-18-Project0/</id>
    <published>2020-04-16T12:02:27.000Z</published>
    <updated>2020-04-16T12:04:40.144Z</updated>
    
    <content type="html"><![CDATA[<p>我目前正在写CMU-15445的课程项目。这篇文章关注17Fall和18Fall的课程项目，因为这两年的作业类似，而且基于同一个代码框架。(18Fall应该去掉该代码框架中的一些bug，但是大体框架是类似)</p><p>我整理了一些我网上能搜到的相关博客文章和代码实现。我自己的实现文章中，我和下面的实现对比。</p><a id="more"></a><h1 id="博客文章"><a href="#博客文章" class="headerlink" title="博客文章"></a>博客文章</h1><p>west_liu (liu-jianhao): <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlc3Ricm9va2xpdS9hcnRpY2xlL2RldGFpbHMvODM5MjcwODM=" title="https://blog.csdn.net/westbrookliu/article/details/83927083">https://blog.csdn.net/westbrookliu/article/details/83927083<i class="fa fa-external-link"></i></span></p><p>Gatsby123 (gatsbyd): <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ2F0c2J5MTIzL3AvMTIwNzU1ODMuaHRtbA==" title="https://www.cnblogs.com/gatsby123/p/12075583.html">https://www.cnblogs.com/gatsby123/p/12075583.html<i class="fa fa-external-link"></i></span></p><p>西部小笼包 (yixuaz): <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vbmIvMzYyNjU4NDE=" title="https://www.jianshu.com/nb/36265841">https://www.jianshu.com/nb/36265841<i class="fa fa-external-link"></i></span></p><p>丁浩羚 HDing Blog: <span class="exturl" data-url="aHR0cHM6Ly9obGRpbmd6eWRvbmcuZ2l0aHViLmlvL3RhZ3MvI2RhdGFiYXNl" title="https://hldingzydong.github.io/tags/#database">https://hldingzydong.github.io/tags/#database<i class="fa fa-external-link"></i></span></p><!-- TODO:还有我 --><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>west_liu (liu-jianhao): <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdS1qaWFuaGFvL0NNVS0xNS00NDU=" title="https://github.com/liu-jianhao/CMU-15-445">https://github.com/liu-jianhao/CMU-15-445<i class="fa fa-external-link"></i></span><br><!-- - Fork : https://github.com/YvetteCh/dbms (only Project1 Task1)　这人没劲 --></p><p>Gatsby123 (gatsbyd): <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dhdHNieWQvY211XzE1NDQ1XzIwMTg=" title="https://github.com/gatsbyd/cmu_15445_2018">https://github.com/gatsbyd/cmu_15445_2018<i class="fa fa-external-link"></i></span></p><p>西部小笼包 (yixuaz): <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lpeHVhei9DTVUtMTU0NDU=" title="https://github.com/yixuaz/CMU-15445">https://github.com/yixuaz/CMU-15445<i class="fa fa-external-link"></i></span></p><!-- TODO:还有我 --><!-- 丁浩羚 HDing Blog: https://github.com/hldingzydong/CMU15-445-lab　和west_liu (liu-jianhao)一样 --><p><br></p><p>下面是没有对应博客的实现:</p><p>lancecopper: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xhbmNlY29wcGVyL2NtdTE1NDQ1X2ZhbGwyMDE3" title="https://github.com/lancecopper/cmu15445_fall2017">https://github.com/lancecopper/cmu15445_fall2017<i class="fa fa-external-link"></i></span> <!-- 很好 --></p><p>liujxing: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdWp4aW5nL0NNVV8xNTQ0NV9GYWxsMjAxN19EYXRhYmFzZVN5c3RlbXM=" title="https://github.com/liujxing/CMU_15445_Fall2017_DatabaseSystems">https://github.com/liujxing/CMU_15445_Fall2017_DatabaseSystems<i class="fa fa-external-link"></i></span> <!-- TODO:中文注释 --></p><p>Nov11: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RheWE2NjYvMTUtNDQ1" title="https://github.com/Taya666/15-445">https://github.com/Taya666/15-445<i class="fa fa-external-link"></i></span>　(原repo中已删除)</p><p>gigimushroom: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpZ2ltdXNocm9vbS9EYXRhYmFzZUJhY2tlbmRFbmdpbmU=" title="https://github.com/gigimushroom/DatabaseBackendEngine">https://github.com/gigimushroom/DatabaseBackendEngine<i class="fa fa-external-link"></i></span></p><p>xc42: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hjNDIvdG95REI=" title="https://github.com/xc42/toyDB">https://github.com/xc42/toyDB<i class="fa fa-external-link"></i></span></p><p>761417898: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzc2MTQxNzg5OC9jbXUxNS00NDVsYWI=" title="https://github.com/761417898/cmu15-445lab">https://github.com/761417898/cmu15-445lab<i class="fa fa-external-link"></i></span></p><p>程嵇邢滑 xingdl2007: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpbmdkbDIwMDcvY211MTUtNDQ1" title="https://github.com/xingdl2007/cmu15-445">https://github.com/xingdl2007/cmu15-445<i class="fa fa-external-link"></i></span></p><p>hqnddw: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hxbmRkdy9DTVUtMTU0NDUtZGF0YWJhc2U=" title="https://github.com/hqnddw/CMU-15445-database">https://github.com/hqnddw/CMU-15445-database<i class="fa fa-external-link"></i></span></p><p>ssujeen: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NzdWplZW4vMTU0NDUtZGI=" title="https://github.com/ssujeen/15445-db">https://github.com/ssujeen/15445-db<i class="fa fa-external-link"></i></span> <!-- TODO: 很一般--></p><p>junjieliu2910: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2p1bmppZWxpdTI5MTAvY211LTE1LTQ0NQ==" title="https://github.com/junjieliu2910/cmu-15-445">https://github.com/junjieliu2910/cmu-15-445<i class="fa fa-external-link"></i></span> <!-- BUGGY --></p><p><br></p><p>下面是不完整的实现:</p><p>FateTHarlaown: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ZhdGVUSGFybGFvd24vY211MTUtNDQ1bGFi" title="https://github.com/FateTHarlaown/cmu15-445lab">https://github.com/FateTHarlaown/cmu15-445lab<i class="fa fa-external-link"></i></span> (only Project1)<!-- TODO:这人不错 --></p><p>astronaut0131: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FzdHJvbmF1dDAxMzEvY211MTUtNDQ1LTIwMTc=" title="https://github.com/astronaut0131/cmu15-445-2017">https://github.com/astronaut0131/cmu15-445-2017<i class="fa fa-external-link"></i></span> (only Project1)<!-- TODO:这人不错 --></p><p>uniquebby: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VuaXF1ZWJieS8yMDE3Y211MTUtNDQ1" title="https://github.com/uniquebby/2017cmu15-445">https://github.com/uniquebby/2017cmu15-445<i class="fa fa-external-link"></i></span> (only Project1, 2, 3)</p><p>hcyezhang: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hjeWV6aGFuZy9DTVUxNS00NDUtRGF0YWJhc2UtU3lzdGVtcw==" title="https://github.com/hcyezhang/CMU15-445-Database-Systems">https://github.com/hcyezhang/CMU15-445-Database-Systems<i class="fa fa-external-link"></i></span> (only Project1, 2, 3)</p><p>sql-ai: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NxbC1haS9jbXVEQg==" title="https://github.com/sql-ai/cmuDB">https://github.com/sql-ai/cmuDB<i class="fa fa-external-link"></i></span> (only Project1, 2)</p><p>hxin18: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h4aW4xOC8xNTQ0NQ==" title="https://github.com/hxin18/15445">https://github.com/hxin18/15445<i class="fa fa-external-link"></i></span> (only Project1, 2)<!-- TODFO:TODO: 和west_liu (liu-jianhao) --></p><p>Jiawei0227: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ppYXdlaTAyMjcvQ01VLURhdGFiYXNl" title="https://github.com/Jiawei0227/CMU-Database">https://github.com/Jiawei0227/CMU-Database<i class="fa fa-external-link"></i></span> (only Project1)</p><p>BragCat: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JyYWdDYXQvQ01VLTE1NDQ1LURC" title="https://github.com/BragCat/CMU-15445-DB">https://github.com/BragCat/CMU-15445-DB<i class="fa fa-external-link"></i></span> (only Project1)</p><p>MiracleMa: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pcmFjbGVNYS9DTVUxNS00NDU=" title="https://github.com/MiracleMa/CMU15-445">https://github.com/MiracleMa/CMU15-445<i class="fa fa-external-link"></i></span> (only Project1)</p><p>Junoth: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1bm90aC9DTVUtMTUtNDQ1" title="https://github.com/Junoth/CMU-15-445">https://github.com/Junoth/CMU-15-445<i class="fa fa-external-link"></i></span> (only Project1)</p><p>ComputerCourses: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NvbXB1dGVyQ291cnNlcy9DTVUtMTUtNDQ1" title="https://github.com/ComputerCourses/CMU-15-445">https://github.com/ComputerCourses/CMU-15-445<i class="fa fa-external-link"></i></span> (only Project1)</p><p>LucienXian: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0x1Y2llblhpYW4vQ01VMTU0NDU=" title="https://github.com/LucienXian/CMU15445">https://github.com/LucienXian/CMU15445<i class="fa fa-external-link"></i></span> (only Project1)</p><p>jackwener: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2phY2t3ZW5lci9jbXUtMTU0NDU=" title="https://github.com/jackwener/cmu-15445">https://github.com/jackwener/cmu-15445<i class="fa fa-external-link"></i></span> (only Project1)</p><p>FlorianFANG: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0Zsb3JpYW5GQU5HL2NtdS0xNTQ0NQ==" title="https://github.com/FlorianFANG/cmu-15445">https://github.com/FlorianFANG/cmu-15445<i class="fa fa-external-link"></i></span> (only Project1)</p><p>JiankunDai: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ppYW5rdW5EYWkvY211LTE1NDQ1LWZhbGwyMDE4" title="https://github.com/JiankunDai/cmu-15445-fall2018">https://github.com/JiankunDai/cmu-15445-fall2018<i class="fa fa-external-link"></i></span> (only Project1)</p><p>xuchongfeng: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3h1Y2hvbmdmZW5nL2Ric3lzdGVtLWNtdS0xNS00NDU=" title="https://github.com/xuchongfeng/dbsystem-cmu-15-445">https://github.com/xuchongfeng/dbsystem-cmu-15-445<i class="fa fa-external-link"></i></span> (only Project1 Task 1)</p><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码:"></a>源代码:</h1><p>上面项目的第一个commit大致可以作为开始。下面有几个例子:</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ppYXdlaTAyMjcvQ01VLURhdGFiYXNlL3RyZWUvNDQxZDQ4NjczMzUzYmYwNzA3NDdjZjg4OGExMzdlMzMxMDYzZmNlZg==" title="https://github.com/Jiawei0227/CMU-Database/tree/441d48673353bf070747cf888a137e331063fcef">https://github.com/Jiawei0227/CMU-Database/tree/441d48673353bf070747cf888a137e331063fcef<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Rpb3h5Z2VuL0NNVTE1LTQ0NQ==" title="https://github.com/dioxygen/CMU15-445">https://github.com/dioxygen/CMU15-445<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RKLUxFU1NPTi9DTVUtMTU0NDU=" title="https://github.com/DJ-LESSON/CMU-15445">https://github.com/DJ-LESSON/CMU-15445<i class="fa fa-external-link"></i></span></p><p>它们都来自Fall 2017, 版本均为:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">15-445/645 Project Source Code</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Created: Nov 21 2017 @ 00:28:55</span><br><span class="line">Last Commit: be0f6dd92b4c3eaa52a6456bd8847773ab65b3ed</span><br></pre></td></tr></tbody></table></figure><h2 id="Fall-2018"><a href="#Fall-2018" class="headerlink" title="Fall 2018"></a>Fall 2018</h2><p>不建议使用2018的，因为代码里面声明不允许公开</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2phY2t3ZW5lci9jbXUtMTU0NDU=" title="https://github.com/jackwener/cmu-15445">https://github.com/jackwener/cmu-15445<i class="fa fa-external-link"></i></span></p><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>需要更多的test可以使用这里的:</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lpeHVhei9DTVUtMTU0NDUvYmxvYi9tYXN0ZXIvY211XzE1NDQ1XzIwMTcoc29sKS5yYXI=" title="https://github.com/yixuaz/CMU-15445/blob/master/cmu_15445_2017(sol).rar">https://github.com/yixuaz/CMU-15445/blob/master/cmu_15445_2017(sol).rar<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdS1qaWFuaGFvL0NNVS0xNS00NDUvdHJlZS9tYXN0ZXIvTGFiL3Rlc3Q=" title="https://github.com/liu-jianhao/CMU-15-445/tree/master/Lab/test">https://github.com/liu-jianhao/CMU-15-445/tree/master/Lab/test<i class="fa fa-external-link"></i></span></p><h1 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></tbody></table></figure><p>源代码如果想通过build，需要改<code>CMakelist.txt</code>31行:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(CMAKE_CXX_FLAGS <span class="string">"<span class="variable">${CMAKE_CXX_FLAGS}</span> -fPIC -Wall -Wextra -Werror -march=native"</span>)</span><br></pre></td></tr></tbody></table></figure><p>改成:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(CMAKE_CXX_FLAGS <span class="string">"<span class="variable">${CMAKE_CXX_FLAGS}</span> -fPIC -Wall -Wextra -march=native"</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>一个Java的实现: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RyZWFNZXI5NjMvVG95REI=" title="https://github.com/DreaMer963/ToyDB">https://github.com/DreaMer963/ToyDB<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我目前正在写CMU-15445的课程项目。这篇文章关注17Fall和18Fall的课程项目，因为这两年的作业类似，而且基于同一个代码框架。(18Fall应该去掉该代码框架中的一些bug，但是大体框架是类似)&lt;/p&gt;
&lt;p&gt;我整理了一些我网上能搜到的相关博客文章和代码实现。我自己的实现文章中，我和下面的实现对比。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
    
  </entry>
  
  <entry>
    <title>[DBMS] Cluster Index</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/15/DBMS-Cluster-Index/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/15/DBMS-Cluster-Index/</id>
    <published>2020-04-15T17:24:04.000Z</published>
    <updated>2020-04-16T10:01:41.791Z</updated>
    
    <content type="html"><![CDATA[<p>有关Clustered Indexes: <a href="https://cakebytheoceanluo.github.io/2020/03/19/CMU-15445-Lec07/#Clustered-Indexes">[CMU-15445] Lec07 Tree Indexes Part I - 树索引 I - Clustered Indexes</a></p><p>我们这次在PostgreSQL中使用Clustered Indexes。</p><p>这篇文章中我会提到，ctid和页面布局, 具体可以看下面两篇文章:</p><ul><li><a href="https://cakebytheoceanluo.github.io/2020/03/11/DBMS-PostgreSQL-PageLayout/">[DBMS][PostgreSQL] Page Layout 页面布局</a></li><li><a href="https://cakebytheoceanluo.github.io/2020/04/14/DBMS-Tree-Index-pageinspect/">[DBMS] Tree Index pageinspect 索引页面内容</a></li></ul><a id="more"></a><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>我们采用一个email邮件地址数据集。获得数据集和导入数据集的方式见: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#Email%E6%95%B0%E6%8D%AE%E9%9B%86-Mock">[DBMS] PostgreSQL 导入数据集 - Email 数据集 (Mock)</a></p><p>注: CMU课上使用的数据集更大一些，email数量更多，因为我看到课上对应的数据库有195254个page。我这个数据集在我的电脑上psql对应生成7155个page。我觉得page数量不是这次实验的重点。大家可以自己调整数据集大小。</p><hr><h1 id="建立CLUSTER之前"><a href="#建立CLUSTER之前" class="headerlink" title="建立CLUSTER之前"></a>建立CLUSTER之前</h1><p>在下面的输出中， 我记录了min, ctid = ‘(0, 1)’, 和第一个page的页面布局</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">testdb=# select <span class="built_in">min</span>(email) from emails;</span><br><span class="line">        <span class="built_in">min</span>        </span><br><span class="line">-------------------</span><br><span class="line"> aabbott@gmail.com</span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# SELECT * FROM emails LIMIT <span class="number">1</span>;</span><br><span class="line"> id |       email       </span><br><span class="line">----+-------------------</span><br><span class="line">  <span class="number">1</span> | bgordon@gmail.com</span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# select * from emails where ctid = '(0, 1)';</span><br><span class="line"> id |       email       </span><br><span class="line">----+-------------------</span><br><span class="line">  <span class="number">1</span> | bgordon@gmail.com</span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# SELECT * FROM bt_page_items('idx_emails_tree', 1) LIMIT 30;</span><br><span class="line"> itemoffset |    ctid    | itemlen | nulls | vars |                                              data                                               </span><br><span class="line">------------+------------+---------+-------+------+-------------------------------------------------------------------------------------------------</span><br><span class="line">          <span class="number">1</span> | (<span class="number">6415</span>,<span class="number">82</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">61</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">64</span> <span class="number">65</span> <span class="number">72</span> <span class="number">73</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">2</span> | (<span class="number">930</span>,<span class="number">44</span>)   |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">62</span> <span class="number">62</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">74</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">3</span> | (<span class="number">6803</span>,<span class="number">28</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2b</span> <span class="number">61</span> <span class="number">61</span> <span class="number">62</span> <span class="number">62</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">74</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">7</span>a <span class="number">61</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">7</span>a <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">4</span> | (<span class="number">5178</span>,<span class="number">134</span>) |      <span class="number">40</span> | f     | t    | <span class="number">37</span> <span class="number">61</span> <span class="number">61</span> <span class="number">62</span> <span class="number">62</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">74</span> <span class="number">40</span> <span class="number">68</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">79</span> <span class="number">2</span>d <span class="number">6</span>d <span class="number">61</span> <span class="number">72</span> <span class="number">73</span> <span class="number">68</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">5</span> | (<span class="number">4236</span>,<span class="number">78</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2f</span> <span class="number">61</span> <span class="number">61</span> <span class="number">62</span> <span class="number">62</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">74</span> <span class="number">40</span> <span class="number">6</span>c <span class="number">69</span> <span class="number">76</span> <span class="number">69</span> <span class="number">6</span>e <span class="number">67</span> <span class="number">73</span> <span class="number">74</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span></span><br><span class="line">          <span class="number">6</span> | (<span class="number">588</span>,<span class="number">40</span>)   |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">67</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">76</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">6</span>e <span class="number">65</span> <span class="number">74</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">7</span> | (<span class="number">6302</span>,<span class="number">7</span>)   |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">8</span> | (<span class="number">97</span>,<span class="number">49</span>)    |      <span class="number">32</span> | f     | t    | <span class="number">29</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">9</span> | (<span class="number">6440</span>,<span class="number">31</span>)  |      <span class="number">40</span> | f     | t    | <span class="number">39</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">6</span>a <span class="number">6f</span> <span class="number">68</span> <span class="number">6</span>e <span class="number">73</span> <span class="number">74</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>d <span class="number">63</span> <span class="number">68</span> <span class="number">61</span> <span class="number">76</span> <span class="number">65</span> <span class="number">7</span>a <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">10</span> | (<span class="number">3822</span>,<span class="number">91</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2b</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">74</span> <span class="number">74</span> <span class="number">68</span> <span class="number">65</span> <span class="number">77</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">11</span> | (<span class="number">1076</span>,<span class="number">67</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">76</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">61</span> <span class="number">2</span>e <span class="number">69</span> <span class="number">6</span>e <span class="number">66</span> <span class="number">6f</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">12</span> | (<span class="number">5452</span>,<span class="number">38</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">77</span> <span class="number">61</span> <span class="number">72</span> <span class="number">64</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">13</span> | (<span class="number">5708</span>,<span class="number">3</span>)   |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">14</span> | (<span class="number">4341</span>,<span class="number">15</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">62</span> <span class="number">72</span> <span class="number">65</span> <span class="number">77</span> <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">15</span> | (<span class="number">1007</span>,<span class="number">78</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">63</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">6</span>e <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">16</span> | (<span class="number">4823</span>,<span class="number">89</span>)  |      <span class="number">40</span> | f     | t    | <span class="number">37</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">63</span> <span class="number">61</span> <span class="number">72</span> <span class="number">74</span> <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>d <span class="number">6</span>d <span class="number">69</span> <span class="number">74</span> <span class="number">63</span> <span class="number">68</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">17</span> | (<span class="number">2327</span>,<span class="number">93</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">63</span> <span class="number">6</span>c <span class="number">61</span> <span class="number">72</span> <span class="number">6b</span> <span class="number">2</span>d <span class="number">6</span>d <span class="number">6f</span> <span class="number">73</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">18</span> | (<span class="number">6987</span>,<span class="number">113</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">64</span> <span class="number">61</span> <span class="number">76</span> <span class="number">69</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">19</span> | (<span class="number">2724</span>,<span class="number">91</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">6</span>d <span class="number">6f</span> <span class="number">72</span> <span class="number">65</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">20</span> | (<span class="number">839</span>,<span class="number">25</span>)   |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">21</span> | (<span class="number">2210</span>,<span class="number">118</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">22</span> | (<span class="number">2699</span>,<span class="number">76</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">23</span> | (<span class="number">2862</span>,<span class="number">117</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">24</span> | (<span class="number">6372</span>,<span class="number">87</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">25</span> | (<span class="number">6533</span>,<span class="number">8</span>)   |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">26</span> | (<span class="number">7071</span>,<span class="number">19</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">27</span> | (<span class="number">2316</span>,<span class="number">42</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6f</span> <span class="number">72</span> <span class="number">64</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">28</span> | (<span class="number">2299</span>,<span class="number">16</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">29</span> | (<span class="number">2694</span>,<span class="number">130</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">30</span> | (<span class="number">2818</span>,<span class="number">106</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">(<span class="number">30</span> rows)</span><br></pre></td></tr></tbody></table></figure><h1 id="建立CLUSTER"><a href="#建立CLUSTER" class="headerlink" title="建立CLUSTER"></a>建立CLUSTER</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">testdb=# CLUSTER emails USING idx_emails_tree;</span><br><span class="line">CLUSTER</span><br></pre></td></tr></tbody></table></figure><p>这个语句会重新排列page上的tuple。结果page上的tuple的顺序，会和<code>idx_emails_tree</code>索引中的大小顺序一直。</p><h1 id="建立CLUSTER之后"><a href="#建立CLUSTER之后" class="headerlink" title="建立CLUSTER之后"></a>建立CLUSTER之后</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">testdb=# select <span class="built_in">min</span>(email) from emails;</span><br><span class="line">        <span class="built_in">min</span>        </span><br><span class="line">-------------------</span><br><span class="line"> aabbott@gmail.com</span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# SELECT * FROM emails LIMIT <span class="number">1</span>;</span><br><span class="line">   id   |       email       </span><br><span class="line">--------+-------------------</span><br><span class="line"> <span class="number">129990</span> | aabbott@gmail.com</span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure><p><code>SELECT * FROM emails LIMIT 1;</code>的结果已经变成最小值了。</p><p><br></p><h2 id="ctid-‘-0-1-’"><a href="#ctid-‘-0-1-’" class="headerlink" title="ctid = ‘(0, 1)’"></a>ctid = ‘(0, 1)’</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">testdb=# select * from emails where ctid = '(0, 1)';</span><br><span class="line"> id |       email       </span><br><span class="line">----+-------------------</span><br><span class="line"> <span class="number">129990</span> | aabbott@gmail.com</span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><p>页面布局从原来无序的record id， 变成现在的排序的record id, 它对应的元素也被排序了。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">testdb=# SELECT * FROM bt_page_items('idx_emails_tree', 1) LIMIT 30;</span><br><span class="line"> itemoffset |  ctid  | itemlen | nulls | vars |                                              data                                               </span><br><span class="line">------------+--------+---------+-------+------+-------------------------------------------------------------------------------------------------</span><br><span class="line">          <span class="number">1</span> | (<span class="number">1</span>,<span class="number">52</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">61</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">64</span> <span class="number">65</span> <span class="number">72</span> <span class="number">73</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">2</span> | (<span class="number">0</span>,<span class="number">1</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">62</span> <span class="number">62</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">74</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">3</span> | (<span class="number">0</span>,<span class="number">2</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2b</span> <span class="number">61</span> <span class="number">61</span> <span class="number">62</span> <span class="number">62</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">74</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">7</span>a <span class="number">61</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">7</span>a <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">4</span> | (<span class="number">0</span>,<span class="number">3</span>)  |      <span class="number">40</span> | f     | t    | <span class="number">37</span> <span class="number">61</span> <span class="number">61</span> <span class="number">62</span> <span class="number">62</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">74</span> <span class="number">40</span> <span class="number">68</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">79</span> <span class="number">2</span>d <span class="number">6</span>d <span class="number">61</span> <span class="number">72</span> <span class="number">73</span> <span class="number">68</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">5</span> | (<span class="number">0</span>,<span class="number">4</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2f</span> <span class="number">61</span> <span class="number">61</span> <span class="number">62</span> <span class="number">62</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">74</span> <span class="number">40</span> <span class="number">6</span>c <span class="number">69</span> <span class="number">76</span> <span class="number">69</span> <span class="number">6</span>e <span class="number">67</span> <span class="number">73</span> <span class="number">74</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span></span><br><span class="line">          <span class="number">6</span> | (<span class="number">0</span>,<span class="number">5</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">67</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">76</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">6</span>e <span class="number">65</span> <span class="number">74</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">7</span> | (<span class="number">0</span>,<span class="number">6</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">8</span> | (<span class="number">0</span>,<span class="number">7</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">29</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">9</span> | (<span class="number">0</span>,<span class="number">8</span>)  |      <span class="number">40</span> | f     | t    | <span class="number">39</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">6</span>a <span class="number">6f</span> <span class="number">68</span> <span class="number">6</span>e <span class="number">73</span> <span class="number">74</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>d <span class="number">63</span> <span class="number">68</span> <span class="number">61</span> <span class="number">76</span> <span class="number">65</span> <span class="number">7</span>a <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">10</span> | (<span class="number">0</span>,<span class="number">9</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2b</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">74</span> <span class="number">74</span> <span class="number">68</span> <span class="number">65</span> <span class="number">77</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">11</span> | (<span class="number">0</span>,<span class="number">10</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">76</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">61</span> <span class="number">2</span>e <span class="number">69</span> <span class="number">6</span>e <span class="number">66</span> <span class="number">6f</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">12</span> | (<span class="number">0</span>,<span class="number">11</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">77</span> <span class="number">61</span> <span class="number">72</span> <span class="number">64</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">13</span> | (<span class="number">0</span>,<span class="number">12</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">14</span> | (<span class="number">0</span>,<span class="number">13</span>) |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">62</span> <span class="number">72</span> <span class="number">65</span> <span class="number">77</span> <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">15</span> | (<span class="number">0</span>,<span class="number">14</span>) |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">63</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">6</span>e <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">16</span> | (<span class="number">0</span>,<span class="number">15</span>) |      <span class="number">40</span> | f     | t    | <span class="number">37</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">63</span> <span class="number">61</span> <span class="number">72</span> <span class="number">74</span> <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>d <span class="number">6</span>d <span class="number">69</span> <span class="number">74</span> <span class="number">63</span> <span class="number">68</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">17</span> | (<span class="number">0</span>,<span class="number">16</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">63</span> <span class="number">6</span>c <span class="number">61</span> <span class="number">72</span> <span class="number">6b</span> <span class="number">2</span>d <span class="number">6</span>d <span class="number">6f</span> <span class="number">73</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">18</span> | (<span class="number">0</span>,<span class="number">17</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">64</span> <span class="number">61</span> <span class="number">76</span> <span class="number">69</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">19</span> | (<span class="number">0</span>,<span class="number">18</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">6</span>d <span class="number">6f</span> <span class="number">72</span> <span class="number">65</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">20</span> | (<span class="number">0</span>,<span class="number">19</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">21</span> | (<span class="number">0</span>,<span class="number">20</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">22</span> | (<span class="number">0</span>,<span class="number">21</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">23</span> | (<span class="number">0</span>,<span class="number">22</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">24</span> | (<span class="number">0</span>,<span class="number">23</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">25</span> | (<span class="number">0</span>,<span class="number">24</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">26</span> | (<span class="number">0</span>,<span class="number">25</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">27</span> | (<span class="number">0</span>,<span class="number">26</span>) |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6f</span> <span class="number">72</span> <span class="number">64</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">28</span> | (<span class="number">0</span>,<span class="number">27</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">29</span> | (<span class="number">0</span>,<span class="number">28</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">30</span> | (<span class="number">0</span>,<span class="number">29</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">(<span class="number">30</span> rows)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有关Clustered Indexes: &lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/19/CMU-15445-Lec07/#Clustered-Indexes&quot;&gt;[CMU-15445] Lec07 Tree Indexes Part I - 树索引 I - Clustered Indexes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们这次在PostgreSQL中使用Clustered Indexes。&lt;/p&gt;
&lt;p&gt;这篇文章中我会提到，ctid和页面布局, 具体可以看下面两篇文章:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/11/DBMS-PostgreSQL-PageLayout/&quot;&gt;[DBMS][PostgreSQL] Page Layout 页面布局&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/04/14/DBMS-Tree-Index-pageinspect/&quot;&gt;[DBMS] Tree Index pageinspect 索引页面内容&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Access Methods" scheme="https://cakebytheoceanluo.github.io/categories/Access-Methods/"/>
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/categories/PostgreSQL/"/>
    
      <category term="B Tree" scheme="https://cakebytheoceanluo.github.io/categories/B-Tree/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/categories/Indexing/"/>
    
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
      <category term="Page" scheme="https://cakebytheoceanluo.github.io/tags/Page/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/tags/Indexing/"/>
    
      <category term="B Tree" scheme="https://cakebytheoceanluo.github.io/tags/B-Tree/"/>
    
      <category term="Clustered Index" scheme="https://cakebytheoceanluo.github.io/tags/Clustered-Index/"/>
    
  </entry>
  
  <entry>
    <title>[DBMS]Tree Index pageinspect 索引页面内容</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/14/DBMS-Tree-Index-pageinspect/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/14/DBMS-Tree-Index-pageinspect/</id>
    <published>2020-04-14T18:33:38.000Z</published>
    <updated>2020-04-14T18:43:52.819Z</updated>
    
    <content type="html"><![CDATA[<p>数据库的索引基本分为两种类型:</p><ul><li>Hash Index</li><li>Tree Index</li></ul><p>我们今天来看一看PostgreSQL中的Tree Index的page格式。</p><p>B+ Tree中元素的排序有多种方法: </p><ul><li>PostgreSQL根据record id来排序</li><li>MySQL根据primary key来排序</li></ul><a id="more"></a><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>我们采用一个email邮件地址数据集。获得数据集和导入数据集的方式见: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#Email%E6%95%B0%E6%8D%AE%E9%9B%86-Mock">[DBMS] PostgreSQL 导入数据集 - Email 数据集 (Mock)</a></p><p>注: CMU课上使用的数据集更大一些，email数量更多，因为我看到课上对应的数据库有195254个page。我这个数据集在我的电脑上psql对应生成7155个page。我觉得page数量不是这次实验的重点。大家可以自己调整数据集大小。</p><hr><h1 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testdb=# CREATE INDEX idx_emails_tree ON emails (email);</span><br><span class="line">CREATE INDEX</span><br><span class="line">testdb=# create extension pgstattuple;</span><br><span class="line">CREATE EXTENSION</span><br><span class="line">testdb=# create extension pageinspect;</span><br><span class="line">CREATE EXTENSION</span><br></pre></td></tr></tbody></table></figure><h1 id="查看页面"><a href="#查看页面" class="headerlink" title="查看页面"></a>查看页面</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">testdb=# SELECT * FROM pgstatindex('idx_emails_tree');</span><br><span class="line"> version | tree_level | index_size | root_block_no | internal_pages | leaf_pages | empty_pages | deleted_pages | avg_leaf_density | leaf_fragmentation </span><br><span class="line">---------+------------+------------+---------------+----------------+------------+-------------+---------------+------------------+--------------------</span><br><span class="line">       <span class="number">2</span> |          <span class="number">2</span> |   <span class="number">43622400</span> |           <span class="number">152</span> |             <span class="number">38</span> |       <span class="number">5286</span> |           <span class="number">0</span> |             <span class="number">0</span> |            <span class="number">90.15</span> |                  <span class="number">0</span></span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure><ul><li><code>root_block_no</code> 是B tree的root根, 即page<code>152</code></li></ul><p><br></p><p>然后我们看看这个page的内容:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">testdb=# SELECT * FROM bt_page_items('idx_emails_tree', 152);</span><br><span class="line"> itemoffset |   ctid   | itemlen | nulls | vars |                                                          data                                                           </span><br><span class="line">------------+----------+---------+-------+------+-------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">          <span class="number">1</span> | (<span class="number">3</span>,<span class="number">1</span>)    |       <span class="number">8</span> | f     | f    | </span><br><span class="line">          <span class="number">2</span> | (<span class="number">151</span>,<span class="number">1</span>)  |      <span class="number">40</span> | f     | t    | <span class="number">33</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">62</span> <span class="number">65</span> <span class="number">72</span> <span class="number">32</span> <span class="number">38</span> <span class="number">40</span> <span class="number">6</span>d <span class="number">75</span> <span class="number">72</span> <span class="number">70</span> <span class="number">68</span> <span class="number">79</span> <span class="number">2</span>d <span class="number">77</span> <span class="number">6f</span> <span class="number">6f</span> <span class="number">64</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">6</span>e <span class="number">65</span> <span class="number">74</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">3</span> | (<span class="number">299</span>,<span class="number">1</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">72</span> <span class="number">6f</span> <span class="number">64</span> <span class="number">67</span> <span class="number">65</span> <span class="number">72</span> <span class="number">73</span> <span class="number">40</span> <span class="number">79</span> <span class="number">61</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6f</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">4</span> | (<span class="number">444</span>,<span class="number">1</span>)  |      <span class="number">40</span> | f     | t    | <span class="number">39</span> <span class="number">62</span> <span class="number">69</span> <span class="number">6</span>e <span class="number">67</span> <span class="number">72</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">40</span> <span class="number">6</span>a <span class="number">6f</span> <span class="number">6</span>e <span class="number">65</span> <span class="number">73</span> <span class="number">2</span>d <span class="number">64</span> <span class="number">61</span> <span class="number">76</span> <span class="number">65</span> <span class="number">6</span>e <span class="number">70</span> <span class="number">6f</span> <span class="number">72</span> <span class="number">74</span> <span class="number">2</span>e <span class="number">6f</span> <span class="number">72</span> <span class="number">67</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">5</span> | (<span class="number">588</span>,<span class="number">1</span>)  |      <span class="number">40</span> | f     | t    | <span class="number">33</span> <span class="number">62</span> <span class="number">72</span> <span class="number">6f</span> <span class="number">77</span> <span class="number">6</span>e <span class="number">69</span> <span class="number">6</span>e <span class="number">67</span> <span class="number">68</span> <span class="number">65</span> <span class="number">6</span>e <span class="number">72</span> <span class="number">79</span> <span class="number">40</span> <span class="number">63</span> <span class="number">61</span> <span class="number">73</span> <span class="number">74</span> <span class="number">72</span> <span class="number">6f</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">6</span> | (<span class="number">733</span>,<span class="number">1</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">63</span> <span class="number">66</span> <span class="number">69</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">64</span> <span class="number">73</span> <span class="number">40</span> <span class="number">66</span> <span class="number">69</span> <span class="number">73</span> <span class="number">68</span> <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">7</span> | (<span class="number">872</span>,<span class="number">1</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">63</span> <span class="number">6b</span> <span class="number">69</span> <span class="number">64</span> <span class="number">64</span> <span class="number">40</span> <span class="number">72</span> <span class="number">65</span> <span class="number">65</span> <span class="number">76</span> <span class="number">65</span> <span class="number">73</span> <span class="number">2</span>d <span class="number">64</span> <span class="number">69</span> <span class="number">61</span> <span class="number">7</span>a <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">8</span> | (<span class="number">1017</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">33</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">74</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">68</span> <span class="number">61</span> <span class="number">79</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">79</span> <span class="number">40</span> <span class="number">76</span> <span class="number">61</span> <span class="number">72</span> <span class="number">67</span> <span class="number">61</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">69</span> <span class="number">6</span>e <span class="number">66</span> <span class="number">6f</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">9</span> | (<span class="number">1165</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">37</span> <span class="number">64</span> <span class="number">65</span> <span class="number">62</span> <span class="number">72</span> <span class="number">61</span> <span class="number">39</span> <span class="number">30</span> <span class="number">40</span> <span class="number">62</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">61</span> <span class="number">72</span> <span class="number">64</span> <span class="number">2</span>d <span class="number">70</span> <span class="number">61</span> <span class="number">72</span> <span class="number">6b</span> <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">10</span> | (<span class="number">1313</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">31</span> <span class="number">65</span> <span class="number">64</span> <span class="number">75</span> <span class="number">61</span> <span class="number">72</span> <span class="number">64</span> <span class="number">6f</span> <span class="number">77</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">73</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d</span><br><span class="line">         <span class="number">11</span> | (<span class="number">1461</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">66</span> <span class="number">61</span> <span class="number">72</span> <span class="number">72</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">65</span> <span class="number">72</span> <span class="number">69</span> <span class="number">63</span> <span class="number">40</span> <span class="number">79</span> <span class="number">61</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6f</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">12</span> | (<span class="number">1605</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">37</span> <span class="number">67</span> <span class="number">62</span> <span class="number">65</span> <span class="number">6</span>e <span class="number">6</span>a <span class="number">61</span> <span class="number">6</span>d <span class="number">69</span> <span class="number">6</span>e <span class="number">40</span> <span class="number">73</span> <span class="number">6</span>e <span class="number">79</span> <span class="number">64</span> <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>d <span class="number">6b</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">79</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">13</span> | (<span class="number">1750</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">39</span> <span class="number">68</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">6</span>d <span class="number">6f</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">79</span> <span class="number">40</span> <span class="number">62</span> <span class="number">72</span> <span class="number">6f</span> <span class="number">77</span> <span class="number">6</span>e <span class="number">2</span>d <span class="number">64</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">67</span> <span class="number">61</span> <span class="number">64</span> <span class="number">6f</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">14</span> | (<span class="number">1894</span>,<span class="number">1</span>) |      <span class="number">48</span> | f     | t    | <span class="number">47</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">79</span> <span class="number">72</span> <span class="number">6f</span> <span class="number">64</span> <span class="number">72</span> <span class="number">69</span> <span class="number">67</span> <span class="number">75</span> <span class="number">65</span> <span class="number">7</span>a <span class="number">40</span> <span class="number">77</span> <span class="number">69</span> <span class="number">6</span>e <span class="number">74</span> <span class="number">65</span> <span class="number">72</span> <span class="number">73</span> <span class="number">2</span>d <span class="number">6</span>a <span class="number">65</span> <span class="number">6</span>e <span class="number">6b</span> <span class="number">69</span> <span class="number">6</span>e <span class="number">73</span> <span class="number">2</span>e <span class="number">6</span>e <span class="number">65</span> <span class="number">74</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">15</span> | (<span class="number">2042</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">6</span>a <span class="number">61</span> <span class="number">6</span>d <span class="number">65</span> <span class="number">73</span> <span class="number">33</span> <span class="number">30</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">16</span> | (<span class="number">2190</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2f</span> <span class="number">6</span>a <span class="number">65</span> <span class="number">6</span>e <span class="number">6</span>e <span class="number">69</span> <span class="number">66</span> <span class="number">65</span> <span class="number">72</span> <span class="number">68</span> <span class="number">69</span> <span class="number">63</span> <span class="number">6b</span> <span class="number">73</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6f</span> <span class="number">64</span> <span class="number">2</span>e <span class="number">6f</span> <span class="number">72</span> <span class="number">67</span> <span class="number">00</span></span><br><span class="line">         <span class="number">17</span> | (<span class="number">2340</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2b</span> <span class="number">6</span>a <span class="number">6f</span> <span class="number">68</span> <span class="number">6</span>e <span class="number">73</span> <span class="number">6</span>e <span class="number">6f</span> <span class="number">77</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">18</span> | (<span class="number">2484</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">29</span> <span class="number">6</span>a <span class="number">75</span> <span class="number">6</span>c <span class="number">69</span> <span class="number">61</span> <span class="number">30</span> <span class="number">37</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">19</span> | (<span class="number">2632</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2b</span> <span class="number">6b</span> <span class="number">65</span> <span class="number">6</span>e <span class="number">6</span>e <span class="number">65</span> <span class="number">74</span> <span class="number">68</span> <span class="number">39</span> <span class="number">34</span> <span class="number">40</span> <span class="number">72</span> <span class="number">6f</span> <span class="number">67</span> <span class="number">65</span> <span class="number">72</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">20</span> | (<span class="number">2781</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2f</span> <span class="number">6</span>c <span class="number">61</span> <span class="number">72</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">74</span> <span class="number">72</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">67</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span></span><br><span class="line">         <span class="number">21</span> | (<span class="number">2929</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">33</span> <span class="number">6</span>c <span class="number">6f</span> <span class="number">6</span>e <span class="number">67</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">78</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">64</span> <span class="number">72</span> <span class="number">69</span> <span class="number">61</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">22</span> | (<span class="number">3073</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">31</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">72</span> <span class="number">74</span> <span class="number">69</span> <span class="number">6</span>e <span class="number">6</span>c <span class="number">61</span> <span class="number">75</span> <span class="number">72</span> <span class="number">61</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d</span><br><span class="line">         <span class="number">23</span> | (<span class="number">3215</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">31</span> <span class="number">6</span>d <span class="number">65</span> <span class="number">6</span>c <span class="number">69</span> <span class="number">73</span> <span class="number">73</span> <span class="number">61</span> <span class="number">77</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">73</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">40</span> <span class="number">79</span> <span class="number">61</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6f</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d</span><br><span class="line">         <span class="number">24</span> | (<span class="number">3358</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">31</span> <span class="number">6</span>d <span class="number">69</span> <span class="number">74</span> <span class="number">63</span> <span class="number">68</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">6</span>a <span class="number">61</span> <span class="number">6</span>d <span class="number">65</span> <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d</span><br><span class="line">         <span class="number">25</span> | (<span class="number">3508</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">6</span>e <span class="number">68</span> <span class="number">75</span> <span class="number">67</span> <span class="number">68</span> <span class="number">65</span> <span class="number">73</span> <span class="number">40</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">72</span> <span class="number">74</span> <span class="number">69</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">26</span> | (<span class="number">3656</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">70</span> <span class="number">61</span> <span class="number">67</span> <span class="number">65</span> <span class="number">73</span> <span class="number">74</span> <span class="number">65</span> <span class="number">70</span> <span class="number">68</span> <span class="number">65</span> <span class="number">6</span>e <span class="number">40</span> <span class="number">79</span> <span class="number">61</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6f</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">27</span> | (<span class="number">3804</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">33</span> <span class="number">70</span> <span class="number">6f</span> <span class="number">72</span> <span class="number">74</span> <span class="number">65</span> <span class="number">72</span> <span class="number">6</span>a <span class="number">65</span> <span class="number">6</span>e <span class="number">6</span>e <span class="number">69</span> <span class="number">66</span> <span class="number">65</span> <span class="number">72</span> <span class="number">40</span> <span class="number">79</span> <span class="number">61</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6f</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">28</span> | (<span class="number">3955</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">35</span> <span class="number">72</span> <span class="number">65</span> <span class="number">65</span> <span class="number">73</span> <span class="number">65</span> <span class="number">6</span>a <span class="number">65</span> <span class="number">6</span>e <span class="number">6</span>e <span class="number">69</span> <span class="number">66</span> <span class="number">65</span> <span class="number">72</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">29</span> | (<span class="number">4099</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">72</span> <span class="number">6f</span> <span class="number">62</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">73</span> <span class="number">6b</span> <span class="number">61</span> <span class="number">72</span> <span class="number">61</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">72</span> <span class="number">74</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">30</span> | (<span class="number">4244</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">73</span> <span class="number">61</span> <span class="number">72</span> <span class="number">61</span> <span class="number">68</span> <span class="number">31</span> <span class="number">30</span> <span class="number">40</span> <span class="number">66</span> <span class="number">6f</span> <span class="number">77</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">31</span> | (<span class="number">4388</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">3</span>d <span class="number">73</span> <span class="number">69</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">78</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">64</span> <span class="number">65</span> <span class="number">72</span> <span class="number">40</span> <span class="number">68</span> <span class="number">65</span> <span class="number">73</span> <span class="number">73</span> <span class="number">2</span>d <span class="number">63</span> <span class="number">61</span> <span class="number">72</span> <span class="number">74</span> <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">32</span> | (<span class="number">4530</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">73</span> <span class="number">74</span> <span class="number">65</span> <span class="number">77</span> <span class="number">61</span> <span class="number">72</span> <span class="number">74</span> <span class="number">74</span> <span class="number">61</span> <span class="number">72</span> <span class="number">61</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">33</span> | (<span class="number">4677</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">33</span> <span class="number">74</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">70</span> <span class="number">73</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">73</span> <span class="number">68</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">62</span> <span class="number">79</span> <span class="number">40</span> <span class="number">79</span> <span class="number">61</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6f</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">34</span> | (<span class="number">4826</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">75</span> <span class="number">6</span>a <span class="number">6f</span> <span class="number">6</span>e <span class="number">65</span> <span class="number">73</span> <span class="number">40</span> <span class="number">76</span> <span class="number">61</span> <span class="number">75</span> <span class="number">67</span> <span class="number">68</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">35</span> | (<span class="number">4974</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2f</span> <span class="number">77</span> <span class="number">61</span> <span class="number">72</span> <span class="number">64</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">69</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">40</span> <span class="number">6</span>a <span class="number">6f</span> <span class="number">68</span> <span class="number">6</span>e <span class="number">73</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span></span><br><span class="line">         <span class="number">36</span> | (<span class="number">5115</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">77</span> <span class="number">6b</span> <span class="number">65</span> <span class="number">6</span>d <span class="number">70</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">37</span> | (<span class="number">5268</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">33</span> <span class="number">7</span>a <span class="number">61</span> <span class="number">63</span> <span class="number">68</span> <span class="number">61</span> <span class="number">72</span> <span class="number">79</span> <span class="number">32</span> <span class="number">37</span> <span class="number">40</span> <span class="number">63</span> <span class="number">6</span>c <span class="number">61</span> <span class="number">72</span> <span class="number">6b</span> <span class="number">2</span>d <span class="number">72</span> <span class="number">75</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">2</span>e <span class="number">6</span>e <span class="number">65</span> <span class="number">74</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">(<span class="number">37</span> rows)</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>我们可以选一行， 比如第24行, 将它从hex decode出来:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">testdb=# SELECT *, CONVERT_FROM(DECODE(data, 'hex'), 'latin1') FROM bt_page_items('idx_emails_tree', 152) where itemoffset = 24;</span><br><span class="line"> itemoffset |   ctid   | itemlen | nulls | vars |                                  data                                   |       convert_from       </span><br><span class="line">------------+----------+---------+-------+------+-------------------------------------------------------------------------+--------------------------</span><br><span class="line">         <span class="number">24</span> | (<span class="number">3358</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">31</span> <span class="number">6</span>d <span class="number">69</span> <span class="number">74</span> <span class="number">63</span> <span class="number">68</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">6</span>a <span class="number">61</span> <span class="number">6</span>d <span class="number">65</span> <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d | <span class="number">1</span>mitchelljames@gmail.com</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>推荐阅读:</p><p>[DBMS][PostgreSQL] Page Layout 页面布局: <a href="https://cakebytheoceanluo.github.io/2020/03/11/DBMS-PostgreSQL-PageLayout/">https://cakebytheoceanluo.github.io/2020/03/11/DBMS-PostgreSQL-PageLayout/</a></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjEvcGFnZWluc3BlY3QuaHRtbA==" title="https://www.postgresql.org/docs/9.1/pageinspect.html">https://www.postgresql.org/docs/9.1/pageinspect.html<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cDovL2Fpcy5raHN0dS5ydS9wb3N0Z3Jlc3FsL2h0bWwvcGFnZWluc3BlY3QuaHRtbA==" title="http://ais.khstu.ru/postgresql/html/pageinspect.html">http://ais.khstu.ru/postgresql/html/pageinspect.html<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9wYXF1aWVyLnh5ei9wb3N0Z3Jlc3FsLTIvcG9zdGdyZXMtY29udHJpYi1tb2R1bGUtaGlnaGxpZ2h0LXBhZ2VpbnNwZWN0Lw==" title="https://paquier.xyz/postgresql-2/postgres-contrib-module-highlight-pageinspect/">https://paquier.xyz/postgresql-2/postgres-contrib-module-highlight-pageinspect/<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库的索引基本分为两种类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hash Index&lt;/li&gt;
&lt;li&gt;Tree Index&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们今天来看一看PostgreSQL中的Tree Index的page格式。&lt;/p&gt;
&lt;p&gt;B+ Tree中元素的排序有多种方法: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PostgreSQL根据record id来排序&lt;/li&gt;
&lt;li&gt;MySQL根据primary key来排序&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Access Methods" scheme="https://cakebytheoceanluo.github.io/categories/Access-Methods/"/>
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/categories/PostgreSQL/"/>
    
      <category term="B Tree" scheme="https://cakebytheoceanluo.github.io/categories/B-Tree/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/categories/Indexing/"/>
    
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
      <category term="Page" scheme="https://cakebytheoceanluo.github.io/tags/Page/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/tags/Indexing/"/>
    
      <category term="B Tree" scheme="https://cakebytheoceanluo.github.io/tags/B-Tree/"/>
    
  </entry>
  
  <entry>
    <title>[DBMS]Hash Index与Tree Index</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/13/DBMS-Hash-Index%E4%B8%8ETree-Index/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/13/DBMS-Hash-Index%E4%B8%8ETree-Index/</id>
    <published>2020-04-13T10:37:01.000Z</published>
    <updated>2020-04-13T10:43:01.014Z</updated>
    
    <content type="html"><![CDATA[<p>数据库的索引基本分为两种类型:</p><ul><li>Hash Index</li><li>Tree Index</li></ul><p>我们今天来看一看PostgreSQL中的这两种索引会如何帮助我们的query。</p><a id="more"></a><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>我们采用一个email邮件地址数据集。获得数据集和导入数据集的方式见: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#Email%E6%95%B0%E6%8D%AE%E9%9B%86-Mock">[DBMS] PostgreSQL 导入数据集 - Email 数据集 (Mock)</a></p><p>注: CMU课上使用的数据集更大一些，email数量更多，因为我看到课上对应的数据库有195254个page。我这个数据集在我的电脑上psql对应生成7155个page。我觉得page数量不是这次实验的重点。大家可以自己调整数据集大小。</p><hr><h1 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h1><h2 id="psql"><a href="#psql" class="headerlink" title="psql"></a>psql</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">testdb=# \timing</span><br><span class="line">Timing is on.</span><br><span class="line">testdb=# CREATE EXTENSION pg_prewarm;</span><br><span class="line">ERROR:  extension <span class="string">"pg_prewarm"</span> already <span class="built_in">exists</span></span><br><span class="line">Time: <span class="number">0.415</span> ms</span><br><span class="line">testdb=# select pg_prewarm('emails');</span><br><span class="line"> pg_prewarm </span><br><span class="line">------------</span><br><span class="line">       <span class="number">7155</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">29.132</span> ms</span><br><span class="line">testdb=# <span class="built_in">set</span> max_parallel_workers_per_gather = <span class="number">0</span>;</span><br><span class="line">SET</span><br><span class="line">Time: <span class="number">0.211</span> ms</span><br></pre></td></tr></tbody></table></figure><h2 id="获得email"><a href="#获得email" class="headerlink" title="获得email"></a>获得email</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">testdb=# select <span class="built_in">min</span>(email) from emails;</span><br><span class="line">        <span class="built_in">min</span>        </span><br><span class="line">-------------------</span><br><span class="line"> aabbott@gmail.com</span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">97.120</span> ms</span><br><span class="line">testdb=# select * from emails where email like 'a%' limit 1;</span><br><span class="line"> id |          email           </span><br><span class="line">----+--------------------------</span><br><span class="line"> <span class="number">21</span> | anita32@aguilar-paul.com</span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.272</span> ms</span><br></pre></td></tr></tbody></table></figure><p>接下来我们注意这两个email:</p><ul><li><code>aabbott@gmail.com</code></li><li><code>anita32@aguilar-paul.com</code></li></ul><p><br><br><br></p><h1 id="Hash-Index"><a href="#Hash-Index" class="headerlink" title="Hash Index"></a>Hash Index</h1><p>我们知道Hash Table只能寻找相等的值，因此Hash Index也只能优化Point Query - 寻找相等的值。Hash Index对于Range Query - 寻找大于小于关系 - 无能为力。我们下面会用例子的Query Plan看看。</p><h2 id="Create-Index"><a href="#Create-Index" class="headerlink" title="Create Index"></a>Create Index</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">testdb=# CREATE INDEX idx_emails_hash ON emails USING HASH (email);</span><br><span class="line">CREATE INDEX</span><br><span class="line">Time: <span class="number">1490.544</span> ms (<span class="number">00</span>:<span class="number">01.491</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="Point-Query"><a href="#Point-Query" class="headerlink" title="Point Query"></a>Point Query</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email = 'aabbott@gmail.com';</span><br><span class="line">                                   QUERY PLAN                                   </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Index Scan <span class="keyword">using</span> idx_emails_hash on <span class="title">emails</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.12</span><span class="number">.04</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Index Cond: ((email)::text = 'aabbott@gmail.com</span><br><span class="line"> '::text)</span><br><span class="line">(<span class="number">3</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.434</span> ms</span><br><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email = 'aabbott@gmail.com' OR email = 'anita32@aguilar-paul.com';</span><br><span class="line">                                                     QUERY PLAN                                                      </span><br><span class="line">---------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Bitmap Heap Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">8.03</span>.<span class="number">.23</span><span class="number">.81</span> rows=<span class="number">4</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Recheck Cond: (((email)::text = 'aabbott@gmail.com'::text) OR ((email)::text = 'anita32@aguilar-paul.com'::text))</span><br><span class="line">   -&gt;  BitmapOr  (cost=<span class="number">8.03</span>.<span class="number">.8</span><span class="number">.03</span> rows=<span class="number">4</span> <span class="built_in">width</span>=<span class="number">0</span>)</span><br><span class="line">         -&gt;  <span class="function">Bitmap Index Scan on <span class="title">idx_emails_hash</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.4</span><span class="number">.01</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">0</span>)</span></span></span><br><span class="line">               Index Cond: ((email)::text = 'aabbott@gmail.com'::text)</span><br><span class="line">         -&gt;  <span class="function">Bitmap Index Scan on <span class="title">idx_emails_hash</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.4</span><span class="number">.01</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">0</span>)</span></span></span><br><span class="line">               Index Cond: ((email)::text = 'anita32@aguilar-paul.com'::text)</span><br><span class="line">(<span class="number">7</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.307</span> ms</span><br></pre></td></tr></tbody></table></figure><ul><li>我们查看如下两个Point Query的Query Plan，都能发现<code>Index Cond</code>， <code>Index Scan using idx_emails_hash on emails</code> 或 <code>Bitmap Index Scan on idx_emails_hash</code> 说明在使用我们的Hash Index <ul><li><code>SELECT * FROM emails WHERE email = 'aabbott@gmail.com';</code></li><li><code>SELECT * FROM emails WHERE email = 'aabbott@gmail.com' OR email = 'anita32@aguilar-paul.com';</code></li></ul></li></ul><p>另外Bitmap能告诉我们match的位置offset。具体我们会在以后描述具体的bitmap。<!-- TODO: --></p><h2 id="Range-Query"><a href="#Range-Query" class="headerlink" title="Range Query"></a>Range Query</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email LIKE 'aabbott@gmail.co%';</span><br><span class="line">                         QUERY PLAN                         </span><br><span class="line">------------------------------------------------------------</span><br><span class="line"> <span class="function">Seq Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.19655</span><span class="number">.00</span> rows=<span class="number">99</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Filter: ((email)::text ~~ 'aabbott@gmail.co%'::text)</span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.273</span> ms</span><br><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email &gt; 'aabbott@gmail.co%';</span><br><span class="line">                           QUERY PLAN                           </span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"> <span class="function">Seq Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.19655</span><span class="number">.00</span> rows=<span class="number">999901</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Filter: ((email)::text &gt; 'aabbott@gmail.co%'::text)</span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.496</span> ms</span><br></pre></td></tr></tbody></table></figure><ul><li>我们查看如下两个Range Query的Query Plan，没有发现<code>Index</code>等字眼，只能看到<code>Seq Scan on emails</code>, 说明我们的Hash Index对于Range Query没有帮助。<ul><li><code>SELECT * FROM emails WHERE email LIKE 'aabbott@gmail.co%';</code></li><li><code>SELECT * FROM emails WHERE email &gt; 'aabbott@gmail.co%';</code></li></ul></li></ul><p><br></p><h1 id="Tree-Index"><a href="#Tree-Index" class="headerlink" title="Tree Index"></a>Tree Index</h1><p>我们知道B Tree可以优化Point Query， 也可以优化Range Query。我们下面会用例子的Query Plan看看。大家可以提前思考， 如果Tree Index和Hash Index都存在，它们一定会被选用吗？会在什么情况下被选用?</p><p>我给一个trival的猜测， 我们在实验结束的时候，看看这个猜测是否正确:</p><ul><li>Point Query: 使用Hash Index</li><li>Range Query: 使用Tree Index</li></ul><h2 id="Create-Index-1"><a href="#Create-Index-1" class="headerlink" title="Create Index"></a>Create Index</h2><p>Tree是psql中默认的Index结构:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">testdb=# CREATE INDEX idx_emails_tree ON emails (email);</span><br><span class="line">CREATE INDEX</span><br><span class="line">Time: <span class="number">3775.712</span> ms (<span class="number">00</span>:<span class="number">03.776</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="Point-Query-1"><a href="#Point-Query-1" class="headerlink" title="Point Query"></a>Point Query</h2><h3 id="Tree-Index-Hash-Index共存"><a href="#Tree-Index-Hash-Index共存" class="headerlink" title="Tree Index, Hash Index共存"></a>Tree Index, Hash Index共存</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email = 'aabbott@gmail.com';</span><br><span class="line">                                   QUERY PLAN                                   </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Index Scan <span class="keyword">using</span> idx_emails_hash on <span class="title">emails</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.12</span><span class="number">.04</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Index Cond: ((email)::text = 'aabbott@gmail.com'::text)</span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.339</span> ms</span><br><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email = 'aabbott@gmail.com' OR email = 'anita32@aguilar-paul.com';</span><br><span class="line">                                                     QUERY PLAN                                                      </span><br><span class="line">---------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Bitmap Heap Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">8.03</span>.<span class="number">.23</span><span class="number">.81</span> rows=<span class="number">4</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Recheck Cond: (((email)::text = 'aabbott@gmail.com'::text) OR ((email)::text = 'anita32@aguilar-paul.com'::text))</span><br><span class="line">   -&gt;  BitmapOr  (cost=<span class="number">8.03</span>.<span class="number">.8</span><span class="number">.03</span> rows=<span class="number">4</span> <span class="built_in">width</span>=<span class="number">0</span>)</span><br><span class="line">         -&gt;  <span class="function">Bitmap Index Scan on <span class="title">idx_emails_hash</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.4</span><span class="number">.01</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">0</span>)</span></span></span><br><span class="line">               Index Cond: ((email)::text = 'aabbott@gmail.com'::text)</span><br><span class="line">         -&gt;  <span class="function">Bitmap Index Scan on <span class="title">idx_emails_hash</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.4</span><span class="number">.01</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">0</span>)</span></span></span><br><span class="line">               Index Cond: ((email)::text = 'anita32@aguilar-paul.com'::text)</span><br><span class="line">(<span class="number">7</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.452</span> ms</span><br></pre></td></tr></tbody></table></figure><ul><li>我们查看之前使用的Point Query的Query Plan，我们发现没有什么大变化 - 还是使用Hash Index。</li></ul><h3 id="只有Tree-Index"><a href="#只有Tree-Index" class="headerlink" title="只有Tree Index"></a>只有Tree Index</h3><p>我们先删除/drop之前建立的Hash Index:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">testdb=# DROP INDEX idx_emails_hash ;</span><br><span class="line">DROP INDEX</span><br><span class="line">Time: <span class="number">9.760</span> ms</span><br><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email = 'aabbott@gmail.com';</span><br><span class="line">                                   QUERY PLAN                                   </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Index Scan <span class="keyword">using</span> idx_emails_tree on <span class="title">emails</span>  <span class="params">(cost=<span class="number">0.42</span>.<span class="number">.12</span><span class="number">.46</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Index Cond: ((email)::text = 'aabbott@gmail.com'::text)</span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.355</span> ms</span><br><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email = 'aabbott@gmail.com' OR email = 'anita32@aguilar-paul.com';</span><br><span class="line">                                                     QUERY PLAN                                                      </span><br><span class="line">---------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Bitmap Heap Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">8.88</span>.<span class="number">.24</span><span class="number">.66</span> rows=<span class="number">4</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Recheck Cond: (((email)::text = 'aabbott@gmail.com'::text) OR ((email)::text = 'anita32@aguilar-paul.com'::text))</span><br><span class="line">   -&gt;  BitmapOr  (cost=<span class="number">8.88</span>.<span class="number">.8</span><span class="number">.88</span> rows=<span class="number">4</span> <span class="built_in">width</span>=<span class="number">0</span>)</span><br><span class="line">         -&gt;  <span class="function">Bitmap Index Scan on <span class="title">idx_emails_tree</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.4</span><span class="number">.44</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">0</span>)</span></span></span><br><span class="line">               Index Cond: ((email)::text = 'aabbott@gmail.com'::text)</span><br><span class="line">         -&gt;  <span class="function">Bitmap Index Scan on <span class="title">idx_emails_tree</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.4</span><span class="number">.44</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">0</span>)</span></span></span><br><span class="line">               Index Cond: ((email)::text = 'anita32@aguilar-paul.com'::text)</span><br><span class="line">(<span class="number">7</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.464</span> ms</span><br></pre></td></tr></tbody></table></figure><ul><li>我们查看之前使用的Point Query的Query Plan，我们发现没有Hash Index后，数据库选用了Tree Index来优化Point Query</li></ul><h2 id="Range-Query-1"><a href="#Range-Query-1" class="headerlink" title="Range Query"></a>Range Query</h2><h3 id="字母顺序较后的email"><a href="#字母顺序较后的email" class="headerlink" title="字母顺序较后的email"></a>字母顺序较后的email</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email &gt; 'r%';</span><br><span class="line">                                      QUERY PLAN                                      </span><br><span class="line">--------------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Bitmap Heap Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">7855.73</span>.<span class="number">.18390</span><span class="number">.26</span> rows=<span class="number">270362</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Recheck Cond: ((email)::text &gt; 'r%'::text)</span><br><span class="line">   -&gt;  <span class="function">Bitmap Index Scan on <span class="title">idx_emails_tree</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.7788</span><span class="number">.14</span> rows=<span class="number">270362</span> <span class="built_in">width</span>=<span class="number">0</span>)</span></span></span><br><span class="line">         Index Cond: ((email)::text &gt; 'r%'::text)</span><br><span class="line">(<span class="number">4</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.321</span> ms</span><br></pre></td></tr></tbody></table></figure><ul><li>这里我们尝试搜索字母顺序较后的email， 比如<code>r</code>开头的email。我们发现<code>Index Cond</code>和<code>Bitmap Index Scan on idx_emails_tree</code>， 说明数据库采用Tree Index去优化Query Plan。 </li></ul><h3 id="字母顺序较前的email"><a href="#字母顺序较前的email" class="headerlink" title="字母顺序较前的email"></a>字母顺序较前的email</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email LIKE 'aabbott@gmail.co%';</span><br><span class="line">                         QUERY PLAN                         </span><br><span class="line">------------------------------------------------------------</span><br><span class="line"> <span class="function">Seq Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.19655</span><span class="number">.00</span> rows=<span class="number">99</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Filter: ((email)::text ~~ 'aabbott@gmail.co%'::text)</span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.503</span> ms</span><br><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email &gt; 'aabbott@gmail.co%';</span><br><span class="line">                           QUERY PLAN                            </span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"> <span class="function">Seq Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.19655</span><span class="number">.00</span> rows=<span class="number">1000000</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Filter: ((email)::text &gt; 'aabbott@gmail.co%'::text)</span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.313</span> ms</span><br></pre></td></tr></tbody></table></figure><ul><li>我们查看使用过的两个Range Query的Query Plan，没有发现<code>Index</code>等字眼，只能看到<code>Seq Scan on emails</code>, 说明我们的Tree Index对于这俩Range Query没有帮助。这是为什么呢? 为什么Tree Index对于Range Query会时而出现，时而不出现呢?</li></ul><p><br><br><br></p><p>这里的原因可以从这部分获得灵感 <a href="https://cakebytheoceanluo.github.io/2020/03/19/CMU-15445-Lec07/#Node-size">[CMU-15445] Lec07 Tree Indexes Part I - 树索引 I - Node size</a>: Leaf Node Scans vs. Root-to-Leaf Traversals</p><p>我们如果查询:</p><ul><li>字母顺序较后的email: 它们在树中的排序比较后面，即在较为后面的leaf node中， 使用Tree Index的root-to-leaf traversal可能可以更快完成query。</li><li>字母顺序较前的email: 它们在树中的排序比较前面，即在较为前面的leaf node中。(<code>aabbott@gmail.com</code>甚至是最小值，那么就在头一个leaf node中)。 使用Tree Index的root-to-leaf traversal可能会带来更多random I/O, 让query变慢。反而简单的sequential scan带来的sequential I/O更快。</li></ul><p><br></p><p>我们可以自己去尝试，实际上直到<code>p%</code>都是用sequtial scan的:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email &gt; 'p%';</span><br><span class="line">                           QUERY PLAN                           </span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"> <span class="function">Seq Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.19655</span><span class="number">.00</span> rows=<span class="number">311110</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Filter: ((email)::text &gt; 'p%'::text)</span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.298</span> ms</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>另外提一下，我在上面都是用<strong>可能</strong>这个次去描述各种途径。但是在数据库内部有一个很重要的组件 - 优化器 Query Optimizer - 它实际上是客观的去预估每一中Query Plan的成本，选择出成本最低的方式， 然后执行这个成本最低的方式。我们之前这些尝试中获得的Query Plan， 都是Query Optimizer计算出的’最低成本’的方式。Query Optimizer会在这门课Lec14, Lec15课中提到。它注定是数据库中最繁琐，最难以解决的部分。</p><p><br></p><p>然后我们回过头看看我们之前给出的猜测, 来对它进行修正: </p><p>如果Tree Index和Hash Index都存在</p><ul><li>Point Query: 非常大概率使用Hash Index</li><li>Range Query: 有可能使用Tree Index， 也有可能Sequtial scan, 即不使用Tree Index</li></ul><p>具体使用Index与否，使用哪一种Index和具体问题相关，和数据库内部的Query Optimizer相关。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库的索引基本分为两种类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hash Index&lt;/li&gt;
&lt;li&gt;Tree Index&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们今天来看一看PostgreSQL中的这两种索引会如何帮助我们的query。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Access Methods" scheme="https://cakebytheoceanluo.github.io/categories/Access-Methods/"/>
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="Hash Table" scheme="https://cakebytheoceanluo.github.io/categories/Hash-Table/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/categories/PostgreSQL/"/>
    
      <category term="B Tree" scheme="https://cakebytheoceanluo.github.io/categories/B-Tree/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/categories/Indexing/"/>
    
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/tags/Indexing/"/>
    
      <category term="B Tree" scheme="https://cakebytheoceanluo.github.io/tags/B-Tree/"/>
    
  </entry>
  
  <entry>
    <title>Extendable Hashing 练习</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/12/Extendable-Hashing-Exercise/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/12/Extendable-Hashing-Exercise/</id>
    <published>2020-04-12T18:52:43.000Z</published>
    <updated>2020-04-12T18:56:28.707Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章对我见过的Extendable Hashing的练习题进行了收录。Extendable Hashing的介绍见我一篇精读文章 <a href="https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/">Database System Concepts 精读 [11.6-11.7] Hashing</a></p><a id="more"></a><h1 id="TUM数据库课程练习课"><a href="#TUM数据库课程练习课" class="headerlink" title="TUM数据库课程练习课"></a>TUM数据库课程练习课</h1><p>在TUM的例子中global depth从1开始</p><h2 id="例题一-1"><a href="#例题一-1" class="headerlink" title="例题一 1"></a>例题一 <sup><a href="#fn1">1</a></sup></h2><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_1_1.png" alt="hash value"></p><ul><li>KundenNr 顾客号码</li><li>Binär 二进制表达</li><li>Umgekehrt Binär 倒置的二进制表达，<strong>这个是我们的hash key</strong></li></ul><p><br></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_1_2.png" alt="Init: global depth = 1."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_1_3.png" alt="Insert 010100 Müller, 100110 Meier."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_1_4.png" alt="Insert 011110 Schmidt."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_1_5.png" alt="Global depth = 2."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_1_6.png" alt="Local depth = 2."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_1_7.png" alt="Global depth = 3."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_1_8.png" alt="Insert 010010 Krause, 000101 Schulz, 101101 Kaufman."></p><h2 id="例题二-2"><a href="#例题二-2" class="headerlink" title="例题二 2"></a>例题二 <sup><a href="#fn2">2</a></sup></h2><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_1.png" alt="hash value"></p><ul><li>MatrNr 学号</li><li>Binär 二进制表达</li><li>Umgekehrt Binär 倒置的二进制表达，<strong>这个是我们的hash key</strong></li></ul><p><br></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_2.png" alt="Init: global depth = 1."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_3.png" alt="Insert 2 Müller, 8 Schmidt."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_4.png" alt="Insert 19 Fischer."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_5.png" alt="Global depth = 2."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_6.png" alt="Local depth = 2. Insert 16 Huber."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_7.png" alt="Global depth = 3."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_8.png" alt="Local depth = 3. Insert 20 Bauer."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_9.png" alt="Insert 34 Schneider."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_10.png" alt="Local depth = 3. Insert 30 Wagner."></p><h2 id="例题三-3"><a href="#例题三-3" class="headerlink" title="例题三 3"></a>例题三 <sup><a href="#fn3">3</a></sup></h2><p>用在extendable hash table存储十亿人(10,000,000,000)的信息:</p><ul><li>税号: 10B，对每一个人都唯一，作为hash key</li><li>其他信息: 名字，国家，城市，邮编，地址, 一共 100B</li></ul><p><br></p><ul><li>hash table的key是税号, value是PID(page id, 8B), 即对应一个bucket。Bucket所在的page页的大小是4KiB。我们假设每一个bucket对应的page的75%的容量被使用。</li><li>hash bucket中保存每一个对应的TID (8B), 这个TID对应一个页上的位置，存储着这个人的其他信息。</li><li>问: 存储这个hash table需要多少存储容量?</li></ul><p>答案:</p><ul><li>bucket/page的每一个条目是税号和这个人对应的TID。一个bucket中有: $n = \frac{4\mathrm{KiB}}{10 \mathrm{B} + 8 \mathrm{B}} = 170$个条目。</li><li>需要的bucket/page数量: $p = \frac{10^{10}}{n} = 58 * 10^{6}$</li><li>引用这些page至少需要的bit数量: $\lceil\log_2 p \rceil = 26$</li><li>至少需要的bucket/page数量: $2^{26}$</li><li>每一个bucket/page的PID引用都存储在hash table中: $8B * 2^{26} = 512 \mathrm{MiB}$ 即存储这个hash table需要的存储容量</li></ul><p><br></p><ul><li>注意: 100B其他信息存储在其他page中，我们不需要关心这些page。只需要关心这些page的PID， 大小是8B。</li></ul><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_3_1.png" alt="图解."></p><ul><li>上图中只有bucket pointer存储在hash table中。左侧的index in Bits并不需要存储。</li><li>上图中绿色和蓝色也不存储在hash table中。绿色只是形象化bucket pointer。蓝色是存储着18B(税号和TID)的bucket，即bucket pointer所指向的地方。</li></ul><!-- # CMUTODO:# P1T1TODO:link --><h1 id="Database-System-Concepts-Practice-Exercise-4"><a href="#Database-System-Concepts-Practice-Exercise-4" class="headerlink" title="Database System Concepts - Practice Exercise 4"></a>Database System Concepts - Practice Exercise <sup><a href="#fn4">4</a></sup></h1><h2 id="11-6"><a href="#11-6" class="headerlink" title="11.6"></a>11.6</h2><p>Suppose that we are using extendable hashing on a file that contains records with the following search-key values: <code>2, 3, 5, 7, 11, 17, 19, 23, 29, 31</code></p><p>Show the extendable hash structure for this file if the hash function is <code>h(x) = x mod 8</code> and buckets can hold three records</p><p><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.S1.png" alt="11.6."></p><p>右侧同一个bucket中的hash value相同, 即余数相同。</p><p><br></p><h2 id="11-7"><a href="#11-7" class="headerlink" title="11.7"></a>11.7</h2><p>Show how the extendable hash structure of Practice Exercise 11.6 changes as the result of each of the following steps:</p><ul><li>a. Delete 11.</li><li>b. Delete 31.</li><li>c. Insert 1.</li><li>d. Insert 15.</li></ul><p><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.S2.png" alt="11.6."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.S3.png" alt="11.6."></p><h2 id="11-9"><a href="#11-9" class="headerlink" title="11.9"></a>11.9</h2><p>Give pseudocode for deletion of entries from an extendable hash structure, including details of when and how to coalesce buckets. Do not bother about reducing the size of the bucket address table.</p><p>见另一篇文章, <a href="https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/">Database System Concepts 精读 [11.6-11.7] Hashing</a></p><h2 id="11-10"><a href="#11-10" class="headerlink" title="11.10"></a>11.10</h2><p>Suggest an efficient way to test if the <em>bucket address table</em> in extendable hashing can be reduced in size, by storing an extra count with the <em>bucket address table</em>. Give details of how the count should be maintained when buckets are split, coalesced, or deleted. </p><p>(Note: Reducing the size of the <em>bucket address table</em> is an <strong>expensive</strong> operation, and subsequent inserts may cause the table to grow again. Therefore, it is best not to reduce the size as soon as it is possible to do so, but instead do it only if the number of index entries becomes small compared to the bucket-address-table size.)</p><p><br></p><p>Answer: </p><p>If the hash table is currently using $i$ bits of the hash value, then maintain a count of buckets for which the length of common hash prefix is exactly $i$.</p><p>Consider a bucket $j$ with length of common hash prefix $i_j$. If the bucket is being split, and $i_j$ is equal to $i$, then reset the count to 1. If the bucket is being split and $i_j$ is one less that $i$, then increase the count by 1. It the bucket if being coalesced, and $i_j$ is equal to $i$ then decrease the count by 1. If the count becomes 0, then the bucket address table can be reduced in size at that point.</p><p>However, note that if the bucket address table is not reduced at that point, then the count has no significance afterwards. If we want to postpone the reduction, we have to keep an array of counts, i.e. a count for each value of common hash prefix. The array has to be updated in a similar fashion. The bucket address table can be reduced if the $i^{th}$ entry of the array is 0, where $i$ is the number of bits the table is using. Since bucket table reduction is an expensive operation, it is not always advisable to reduce the table. It should be reduced only when sufficient number of entries at the end of count array become 0.</p><!-- # 实现TODO: link --><hr><p>引用:</p><ul><li><p><a name="fn1">1</a>: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vTG9lc3VuZzA5LnBkZj9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/Loesung09.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/Loesung09.pdf?lang=de<i class="fa fa-external-link"></i></span></p></li><li><p><a name="fn2">2</a>: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vTG9lc3VuZzEyLnBkZj9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/Loesung12.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/Loesung12.pdf?lang=de<i class="fa fa-external-link"></i></span></p></li><li><p><a name="fn3">3</a>: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vTG9lc3VuZzEwLnBkZj9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/Loesung10.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/Loesung10.pdf?lang=de<i class="fa fa-external-link"></i></span></p></li><li><p><a name="fn4">4</a>: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L3ByYWN0aWNlLWV4ZXItZGlyL2luZGV4Lmh0bWw=" title="https://www.db-book.com/db6/practice-exer-dir/index.html">https://www.db-book.com/db6/practice-exer-dir/index.html<i class="fa fa-external-link"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L3ByYWN0aWNlLWV4ZXItZGlyLzExcy5wZGY=" title="https://www.db-book.com/db6/practice-exer-dir/11s.pdf">https://www.db-book.com/db6/practice-exer-dir/11s.pdf<i class="fa fa-external-link"></i></span></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章对我见过的Extendable Hashing的练习题进行了收录。Extendable Hashing的介绍见我一篇精读文章 &lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/&quot;&gt;Database System Concepts 精读 [11.6-11.7] Hashing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Access Methods" scheme="https://cakebytheoceanluo.github.io/categories/Access-Methods/"/>
    
      <category term="Hash Table" scheme="https://cakebytheoceanluo.github.io/categories/Hash-Table/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/categories/Indexing/"/>
    
      <category term="Data Structure" scheme="https://cakebytheoceanluo.github.io/categories/Data-Structure/"/>
    
    
      <category term="Dynamic Hashing Scheme" scheme="https://cakebytheoceanluo.github.io/tags/Dynamic-Hashing-Scheme/"/>
    
      <category term="Extendible Hashing" scheme="https://cakebytheoceanluo.github.io/tags/Extendible-Hashing/"/>
    
      <category term="Books" scheme="https://cakebytheoceanluo.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>Database System Concepts 精读 [11.6-11.7] Hashing</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/</id>
    <published>2020-04-11T14:19:16.000Z</published>
    <updated>2020-04-12T18:56:23.511Z</updated>
    
    <content type="html"><![CDATA[<p>[11.6-11.7] Hashing</p><a id="more"></a><h1 id="11-6-Static-Hashing"><a href="#11-6-Static-Hashing" class="headerlink" title="11.6 Static Hashing"></a>11.6 Static Hashing</h1><ul><li>One disadvantage of <strong>sequential file organization</strong> is that we must access an index structure to locate data, or must use binary search, and that results in more I/O operations. 总之很慢 </li><li>File organizations based on the technique of hashing allow us to avoid accessing an index structure. Hashing also provides a way of constructing indices.</li></ul><p><br></p><p><strong>Bucket</strong> := a unit of storage that can store one or more records. <strong>A bucket is typically a disk block, but could be chosen to be smaller or larger than a disk block.</strong> Bucket也可以是一个页(page)</p><p>$K$ := the set of all search-key values</p><p>$B$ := the set of all bucket addresses. </p><p>A hash function $h: K \rightarrow B$</p><p>$n_b$ := number of buckets</p><p><br></p><p><strong>Insert</strong> a record with search key $K_i$ at bucket with address $h(K_i)$. Assume for now that there is space in the bucket to store the record. Then, the record is stored in that bucket</p><p><strong>Look up</strong>: <em>check the search-key value</em> of every record in bucket with address $h(K_i)$</p><p><strong>Delete</strong>: Loop up + delete the found record</p><p><strong>Two different purposes of Hasing:</strong></p><ul><li>In a <strong>hash file organization</strong>, we obtain the address of the disk block containing a desired record directly by　computing a function on the search-key value of the record. </li><li>In a <strong>hash index organization</strong> we organize the search keys, with their associated pointers, into a hash file structure. 　　见11.6.3</li></ul><p>其实哈希表在数据库中有更多用途，见我的另一篇文章<a href="https://cakebytheoceanluo.github.io/2020/03/18/CMU-15445-Lec06/#Data-Structure-in-DBMS">[CMU-15445]Lec06 Hash Tables - 哈希表 Data Structure in DBMS</a></p><h2 id="11-6-1-Hash-Function"><a href="#11-6-1-Hash-Function" class="headerlink" title="11.6.1 Hash Function"></a>11.6.1 Hash Function</h2><p>Typical hash functions perform computation on the internal binary machine representation of characters in the search key. A simple hash function of this type first computes the sum of the binary representations of the characters of a key, then returns the sum modulo the number of buckets. 基于二进制形式，做一些位操作(bit operation)</p><p>Hash functions require careful design. A bad hash function may result in lookup taking time proportional to the number of search keys in the file. A well-designed function gives an average-case lookup time that is a (small) constant, independent of the number of search keys in the file.</p><h3 id="Two-Qualities"><a href="#Two-Qualities" class="headerlink" title="Two Qualities"></a>Two Qualities</h3><p>An ideal hash function distributes the stored keys uniformly across all the buckets, so that every bucket has the same number of records. We want to choose a hash function that assigns search-key values to buckets in such a way that the distribution has <em>two</em> qualities:</p><ul><li><strong>The distribution is uniform</strong>: the hash function <strong>assigns each bucket the same number of search-key values</strong> from the set of all possible search-key values.</li><li><strong>The distribution is random</strong>: in the average case, each bucket will have nearly the same number of values assigned to it, <strong>regardless of the actual distribution of search-key values</strong>. More precisely, <strong>the hash value will not be correlated to any externally visible ordering on the search-key values</strong>, such as alphabetic ordering or ordering by the length of the search keys; the hash function will appear to be </li><li>第一点指的是<strong>distribution of search-key values is uniform</strong>, 这个分布和实际的数据集(record)无关。只是考虑每一个bucket理论接收的search key的数量。</li><li>第二点指的是<strong>distribution of search-key values is random</strong>, 能获得<strong>distribution of records is uniform</strong>, 即数据集(record)相关。它可以去掉相关联(不相等)的search-key中的关联, 使这些关联的search-key的哈希值随机化, 也失去原有的关联。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>1.<em>People Name</em>‘s Hash Function: mapping names beginning with the ith letter of the alphabet to the ith bucket and having 26 buckets.</p><ul><li>simple</li><li>no uniform distribution: <strong>more</strong> names to begin with such letters as B and R than Q and X, for example.</li></ul><p>2.Salary’s Hash Function: the minimum salary is $30,000 and the maximum salary is $130,000, and we use a hash function that <strong>divides the values into 10 ranges</strong>, $30,000-$40,000, $40,001-$50,000 and so on.</p><ul><li><strong>uniform</strong> distribution of search-key values (since each bucket has the same number of different salary values)</li><li>no random distribution. Records with salaries between $60,001 and $70,000 are <strong>far more common than</strong> are<br>records with salaries between $30,001 and $40,000. As a result, <strong><em>the distribution of records</em></strong> is not uniform - some buckets receive more records than others do. <strong>If the function has a random distribution, even if there are such correlations in the search keys, the randomness of the distribution will make it very likely that all buckets will have roughly the same number of records, as long as each search key occurs in only a small fraction of the records.</strong> (If a single search key occurs in a large fraction of the records, the bucket containing it is likely to have more records than other buckets, regardless of the hash function used.)</li></ul><p>3.Let $s$ be a string of length $n$, and let $s[i]$ denote the $i$th byte of the string. </p><ul><li>The hash function is defined as: $h(s) = s[0] ∗ 31(n−1) + s[1] ∗ 31(n−2) + ··· + s[n − 1] \; \% \; n_b$</li></ul><p><br></p><h2 id="11-6-2-Handling-of-Bucket-Overflows"><a href="#11-6-2-Handling-of-Bucket-Overflows" class="headerlink" title="11.6.2 Handling of Bucket Overflows"></a>11.6.2 Handling of Bucket Overflows</h2><p>Bucket overflow can occur for several reasons:</p><ul><li><strong>Insufficient buckets</strong>:<br>The number of buckets $n_b$ must be chosen such that $n_b &gt; n_r / f_r$, where $n_r$ denotes the total number of records that will be stored and $f_r$ denotes the number of records that will fit in a bucket. <strong>This designation assumes that the total number of records is known when the hash function is chosen.</strong> The probability of bucket overflow is reduced, the number of buckets<br>is chosen to be $(n_r / f_r) ∗ (1 + d)$, where d is a fudge factor, typically around 0.2. Some space is wasted: About 20 percent of the space in the buckets will be empty.</li><li><strong>Skew</strong>:<br>Some buckets are <strong>assigned more records than are others</strong>, so a bucket may overflow even when other buckets still have space. This situation is called bucket <em>skew</em>. Skew can occur for two reasons:<ol><li>Multiple records may have <strong>the same search key</strong>.　(见后面<a href="#insertion">Dynamic Hashing - Insertion</a>中的对重复的描述 和 <a href="#例子">例子中第五步</a>)</li><li>The chosen hash function may result in non-uniform distribution of search keys (已经在<a href="#two-qualities">Two Qualities</a>中讨论过)</li></ol></li></ul><h3 id="Overflow-Buckets"><a href="#Overflow-Buckets" class="headerlink" title="Overflow Buckets"></a>Overflow Buckets</h3><p>We handle bucket overflow by using <strong>overflow buckets</strong>. If a record must be inserted into a bucket b, and b is already full, the system provides an overflow bucket for $b$, and inserts the record into the overflow bucket. If the overflow bucket is also full, the system provides another overflow bucket, and so on. </p><p>All the overflow buckets of a given bucket are chained together in a linked list, as in <em>Figure 11.24</em>. Overflow handling using such a linked list is called <strong>overflow chaining</strong>. 也叫hashing with chaining或chained hashing, 见我的另一篇文章<a href="https://cakebytheoceanluo.github.io/2020/03/18/CMU-15445-Lec06/#Chained-Hashing">[CMU-15445]Lec06 Hash Tables - 哈希表- Chained Hashing</a></p><p><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.24.png" alt="Figure 11.24 Overflow chaining in a hash structure."></p><h4 id="Lookup-Algorithm"><a href="#Lookup-Algorithm" class="headerlink" title="Lookup Algorithm"></a>Lookup Algorithm</h4><p>The system uses the hash function on the search key to identify a bucket $b$. The system must examine all the records in bucket $b$ to see whether they match the search key, as before. In addition, if bucket $b$ has overflow buckets, the system must examine the records in all the overflow buckets also.</p><h4 id="Closed-Addressing-Hashing-amp-Open-Addressing-Hashing"><a href="#Closed-Addressing-Hashing-amp-Open-Addressing-Hashing" class="headerlink" title="Closed Addressing Hashing &amp; Open Addressing Hashing"></a>Closed Addressing Hashing &amp; Open Addressing Hashing</h4><p>The form of hash structure with <strong>overflow buckets</strong> referred to as <strong>closed addressing hashing</strong>. An important drawback of closed addressing hashing is that we must choose the hash function when we implement the system, and it　cannot be changed easily thereafter if the file being indexed grows or shrinks. Since the function $h$ maps search-key values to a fixed set $B$ of bucket addresses, we waste space if $B$ is made large to handle future growth of the file. If $B$ is too small, the buckets contain records of many different search-key values, and bucket overflows can occur. <strong>As the file grows, performance suffers</strong>. </p><p>An alternative approach <strong>open addressing hashing</strong>: </p><ul><li>the set of buckets is fixed, and there are no overflow chains. </li><li>Instead, if a bucket is full, the system inserts records in some other bucket in the initial set of buckets $B$.<ul><li>One policy <strong>linear probing</strong> is to use the next bucket (in cyclic order) that has space</li><li>Other policies, such as computing further hash functions, are also used. </li></ul></li></ul><p>Open addressing hashing has been used to construct symbol tables for compilers and assemblers, but closed addressing hashing is preferable for database systems. The reason is that <strong>deletion under open addressing hashing</strong> is troublesome. Usually, compilers and assemblers perform only lookup and insertion operations on their symbol tables. However, in a database system, it is important to be able to handle deletion as<br>well as insertion. Thus, open addressing hashing is of only minor importance in database implementation.</p><p>实际上open addressing hashing在数据库依然很常见被应用的，特别是hash join中我们只使用hash table的lookup和insert, 根本不delete。更多用途见我的另一篇文章<a href="https://cakebytheoceanluo.github.io/2020/03/18/CMU-15445-Lec06/#Data-Structure-in-DBMS">[CMU-15445]Lec06 Hash Tables - 哈希表 Data Structure in DBMS</a></p><h2 id="11-6-3-Hash-Indices"><a href="#11-6-3-Hash-Indices" class="headerlink" title="11.6.3 Hash Indices"></a>11.6.3 Hash Indices</h2><p>Hashing can be used not only for file organization, but also for <strong>index-structure creation</strong>. </p><p><strong>A hash index organizes the search keys, with their associated pointers, into a hash file structure</strong>. We construct a hash index as follows. We apply a hash function on a search key to identify a bucket, and store the key and its associated pointers in the bucket (or in overflow buckets). <em>Figure 11.25</em> shows a secondary hash index on the instructor file, for the search key ID. The hash function in the figure computes the sum of the digits of the ID modulo 8. The hash index has eight buckets, each of size 2 (realistic indices would, of course, have much larger bucket sizes). One of the buckets has three keys mapped to it, so it has an overflow bucket. In this example, ID is a primary key for instructor, so each search key has only one associated pointer. In general, multiple pointers can be associated with each key.</p><p><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.25.png" alt="Figure 11.25 Hash index on search key *ID* of instructor file."></p><ul><li>图中<code>33456</code>是一个<strong>到另一个bucket的指针</strong>，其余的指针都是指向文件位置。在这这里我们混淆或者普遍化<em>指针</em>这个词，它在这里指内存上的地址和硬盘上的地址。</li></ul><p>We use the term hash index to denote hash file structures as well as secondary hash indices. Strictly speaking, hash indices are only secondary index structures. A hash index is never needed as a clustering index structure, since, if a file itself is organized by hashing, there is no need for a separate hash index structure on it. However, since hash file organization provides the same direct access to records that indexing provides, we pretend that a file organized by hashing also has a clustering hash index on it.</p><h1 id="11-7-Dynamic-Hashing"><a href="#11-7-Dynamic-Hashing" class="headerlink" title="11.7 Dynamic Hashing"></a>11.7 Dynamic Hashing</h1><p>Extendable hashing is one form of dynamic hashing techniques, which allow the hash function to be <strong>modified dynamically to accommodate the growth or shrinkage of the database</strong>. </p><h2 id="11-7-1-Data-Structure"><a href="#11-7-1-Data-Structure" class="headerlink" title="11.7.1 Data Structure"></a>11.7.1 Data Structure</h2><ul><li>Space Efficiency: Extendable hashing copes with changes in database size by splitting and coalescing buckets as the database grows and shrinks. </li><li>Low Performance Overhead: the reorganization is performed on only one bucket at a time</li></ul><p>Hash Function: $h$ generates values over a relatively large range ($b$-bit binary integers). A typical value for $b$ is 32.</p><p><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.26.png" alt="Figure 11.26 General extendable hash structure"></p><ul><li>We do not create a bucket for each hash value. Indeed, $2^{32}$ is over 4 billion, and that many buckets is unreasonable for all but the largest databases. </li><li>Instead, we <strong>create buckets on demand</strong>, as records are inserted into the file. We do not use the entire b bits of the hash value initially. </li><li>At any point, we use <strong>$i$ bits indicating that $i$ bits of the hash value $h(K)$ are required to determine the correct bucket for $K$</strong>, where $0 \leq i \leq b$. These $i$ bits are used as an offset into an additional table of bucket addresses. The value of $i$ grows and shrinks with the size of the database.</li><li>All such entries will have <strong>a common hash prefix</strong>, but the length of this prefix may be <strong>less than $i$</strong>. Therefore, we associate with each bucket an integer giving the length of the common hash prefix. In <em>Figure 11.26</em> the integer associated with bucket $j$ is shown as $i_j$. The number of bucket-address-tableentries that point to bucket $j$ is $2^{(i-i_j)}$</li><li>图中左侧<code>bucket address table</code>也称为<code>global directory</code></li><li>图中右侧<code>bucket</code>也称为<code>local bucket</code></li></ul><h2 id="11-7-2-Queries-and-Updates"><a href="#11-7-2-Queries-and-Updates" class="headerlink" title="11.7.2 Queries and Updates"></a>11.7.2 Queries and Updates</h2><p>search-key value $K_l$</p><h3 id="Lookup"><a href="#Lookup" class="headerlink" title="Lookup"></a>Lookup</h3><ol><li>take the first $i$ high-order bits of $h(K_l)$</li><li>look at the corresponding <strong>bucket address table entry</strong> for this bit string</li><li>follow the <strong>bucket pointer</strong> in the table entry.</li></ol><h3 id="Insertion"><a href="#Insertion" class="headerlink" title="Insertion"></a>Insertion</h3><ol><li>先按照Lookup 找到对应的bucket (见<a href="#-loopup">Loopup步骤</a>)</li><li>bucket是否满了: <ul><li>没有满: 简单插入即可</li><li>满: If the bucket is full, it <strong>must split the bucket</strong> and <strong>redistribute the current records</strong>, plus the new one. To split the bucket, the system <strong>must first determine from the hash value whether it needs to increase the number of bits that it uses</strong>.<ul><li>If $i = i_j$, only one entry in the bucket address table points to bucket $j$: <ul><li>The system needs to <strong>increase the size of the bucket address table</strong> so that it can include pointers to the two buckets that result from splitting bucket $j$. It does so by considering an additional bit of the hash value. It increments the value of $i$ by 1, thus doubling the size of the bucket address table. <strong>It replaces each entry by two entries, both of which contain the same pointer as the original entry. Now two entries in <em>the bucket address table</em> point to bucket $j$</strong>. </li><li>The system allocates a new bucket (bucket $z$), and sets the second entry to point to the new bucket. It sets $i_j$ and $i_z$ equal to $i$. </li><li>Next, it rehashes each record in bucket $j$ and, depending on the first $i$ bits (remember the system has added 1 to $i$), either keeps it in bucket $j$ or allocates it to the newly created bucket $z$.</li><li>The system now reattempts the insertion of the new record. <ul><li>Usually, the attempt will succeed. </li><li>However, if all the records in bucket $j$, as well as the new  record, have the same hash-value prefix, it will be necessary to split a bucket again, since all the records in bucket $j$ and the new record are assigned to the same bucket. If the hash function has been chosen carefully, it is unlikely that a single insertion will require that a bucket be split more than once, <strong>unless there are a large number of records with the same search key</strong>.<br>If all the records in bucket $j$ have the <strong>same search-key value (即允许出现重复的key value)</strong>, no amount of splitting will help. In such cases, overflow buckets are used to store the records, as in static hashing. (见<a href="#例子">例子中第五步</a>)</li></ul></li></ul></li><li>If $i &gt; i_j$, then more than one entry in the bucket address table points to bucket $j$. <ul><li><strong>The system can split bucket $j$ without increasing the size of the bucket address table</strong>. Observe that all the entries that point to bucket $j$ correspond to hash prefixes that have the same value on the leftmost $i_j$ bits.</li><li><strong>The system allocates a new bucket (bucket $z$), and sets $i_j$ and $i_z$ to the value that results from adding 1 to the original $i_j$ value.</strong> </li><li>Next, the system needs to <strong>adjust the entries in <em>the bucket address table</em> that previously pointed to bucket $j$</strong>. (Note that with the new value for $i_j$, not all the entries correspond to hash prefixes that have the same value on the leftmost $i_j$ bits.) The system leaves the first half of the entries as they were (pointing to bucket $j$), and sets all the remaining entries to point to the newly created bucket (bucket $z$).</li><li>Next, as in the previous case, the system rehashes each record in bucket $j$, and allocates it either to bucket $j$ or to the newly created bucket $z$.</li></ul></li><li><strong>Note that, in both cases, the system needs to recompute the hash function on only the records in bucket $j$.</strong></li><li>总体上: $i = i_j$的情况只比$i &gt; i_j$的情况多了一步, 即<strong>increase the size of the bucket address table</strong>。</li></ul></li></ul></li></ol><h3 id="Deletion"><a href="#Deletion" class="headerlink" title="Deletion"></a>Deletion</h3><ol><li>先按照Lookup 找到对应的bucket (见<a href="#-loopup">Loopup步骤</a>)</li><li>It removes both the search key from the bucket and the record from the file. </li><li>The bucket is removed if it becomes empty. Note that, at this point, several buckets can be coalesced, and the size of the bucket address table can be cut in half.</li><li>The bucket address table can be reduced in size. Unlike coalescing of buckets, changing the size of the bucket address table is a rather expensive operation if the table is large. Therefore it may be worthwhile to reduce the bucket-address-table size only if the number of buckets reduces greatly.</li></ol><p><br></p><blockquote><p>Let $i$ denote the number of bits of the hash value used in the hash table. Let <strong>bsize</strong> denote the maximum capacity of each bucket. The pseudocode is shown in Figure 11.2.<br>Note that we can <strong>only merge two buckets at a time</strong>. The common hash prefix of the resultant bucket will have length one less than the two buckets merged. Hence we look at the buddy bucket of bucket $j$ differing from it only at the last bit. If the common hash prefix of this bucket is not $i_j$, then this implies that the buddy bucket has been further split and merge is not possible.<br>When merge is successful, further merging may be possible, which is handled by a recursive call to <em>coalesce</em> at the end of the function. <sup><a href="#fn1">1</a></sup></p></blockquote><p><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.S4.png" alt="11.Solution. <sup>[1](#fn1)</sup>"></p><p><br><br><br></p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>Search Key: <em>dept_name</em> with 32-bit hash value<br><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.27.png" alt="Figure 11.27 Hash Function for *dept_name*."></p><p><br><br><br></p><p>To illustrate all the features of extendable hashing in a small structure, we shall make the unrealistic assumption that a bucket can hold only two records.</p><ol><li><p>The file is empty:<br><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.28.png" alt="Figure 11.28 Initial extendable hash structure."></p></li><li><ul><li>insert record (10101, Srinivasan, Comp. Sci., 65000); </li><li>insert record (12121, Wu, Finance, 90000); </li><li>insert record (15151, Mozart, Music, 40000);<ul><li>split since $i_0$ full and $i=i_0$;<br><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.29.png" alt="Figure 11.29 Hash structure after three insertions."></li></ul></li></ul></li><li><ul><li>insert record (22222,Einstein,Physics,95000);<ul><li>split since $i_1$ full and $i=i_1$;<br><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.30.png" alt="Figure 11.30 Hash structure after four insertions."></li></ul></li></ul></li><li><ul><li>insert record (32343, El Said, History, 60000);</li><li>insert record (33456, Gold, Physics, 87000);<ul><li>split since $i_1$ full and $i=i_1$;<br><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.31.png" alt="Figure 11.31 Hash structure after six insertions."></li></ul></li></ul></li><li><ul><li>insert record (45565, Katz, Comp. Sci., 75000);<ul><li>split since $i_3$ full;<br><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.32.png" alt="Figure 11.32 Hash structure after seven insertions."></li></ul></li></ul></li><li><ul><li>insert record (58583, Califieri, History, 62000);</li><li>insert record (83821, Brandt, Comp. Sci., 92000);<ul><li>This overflow cannot be handled by increasing the number of bits, since there are three records with exactly the same hash value. Hence the system uses an overflow bucket.<br><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.33.png" alt="Figure 11.33 Hash structure after eleven insertions."></li></ul></li></ul></li><li><ul><li>insert record (98345, Kim, Elec. Eng., 80000);<ul><li>split since $i_0$ full;<br><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.34.png" alt="Figure 11.34 Extendable hash structure for the instructor file."></li></ul></li></ul></li></ol><h1 id="11-7-3-Static-Hashing-versus-Dynamic-Hashing"><a href="#11-7-3-Static-Hashing-versus-Dynamic-Hashing" class="headerlink" title="11.7.3 Static Hashing versus Dynamic Hashing"></a>11.7.3 Static Hashing versus Dynamic Hashing</h1><p>实际上是讨论<strong>extendable hashing的优缺点</strong></p><h2 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h2><ul><li><strong>performance does not degrade</strong> as the file grows </li><li><strong>minimal space overhead</strong>: Although the bucket address table incurs additional overhead, it contains one pointer for each hash value for the current prefix length. This table is thus small. The main space saving of extendable hashing over other forms of hashing is that no buckets need to be reserved for future growth; rather, buckets can be allocated dynamically.</li></ul><h2 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages"></a>Disadvantages</h2><ul><li>lookup involves <strong>an additional level of indirection (使用一次指针)</strong>, since the system <strong>must access the bucket address table</strong> before accessing the bucket itself. This extra reference has only a minor effect on performance. Although the hash structures that we discussed in Section 11.6 do not have this extra level of indirection, they lose their minor performance advantage as they become full.</li></ul><p>another form of dynamic hashing: <strong>linear hashing</strong>, which avoids the extra level of indirection associated with extendable hashing, at the possible cost of more overflow buckets. <a href="https://cakebytheoceanluo.github.io/2020/03/18/CMU-15445-Lec06/#Linear-Hashing">见博客另一篇文章: [CMU-15445]Lec06 Hash Tables - 哈希表 - Linear Hashing</a></p><hr><h1 id="Errata-2"><a href="#Errata-2" class="headerlink" title="Errata 2"></a>Errata <sup><a href="#fn2">2</a></sup></h1><p><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.E1.png" alt="Errata"></p><p>17已经被我在这篇文章中纠正</p><p>18在图中，但是不重要</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><p><a name="#fn1">1</a>: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L3ByYWN0aWNlLWV4ZXItZGlyL2luZGV4Lmh0bWw=" title="https://www.db-book.com/db6/practice-exer-dir/index.html">https://www.db-book.com/db6/practice-exer-dir/index.html<i class="fa fa-external-link"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L3ByYWN0aWNlLWV4ZXItZGlyLzExcy5wZGY=" title="https://www.db-book.com/db6/practice-exer-dir/11s.pdf">https://www.db-book.com/db6/practice-exer-dir/11s.pdf<i class="fa fa-external-link"></i></span></p></li><li><p><a name="#fn2">2</a>: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L2VycmF0YS1kaXIvZXJyYXRhLXBhcnQzLnBkZg==" title="https://www.db-book.com/db6/errata-dir/errata-part3.pdf">https://www.db-book.com/db6/errata-dir/errata-part3.pdf<i class="fa fa-external-link"></i></span></p></li><li><p>Abraham Silberschatz, Henry F. Korth, S. Sudarshan: <strong>Database System Concepts</strong>, 6th Edition. McGraw-Hill Book Company 2010</p><ul><li>6th Edition: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L2luZGV4Lmh0bWw=" title="https://www.db-book.com/db6/index.html">https://www.db-book.com/db6/index.html<i class="fa fa-external-link"></i></span></li><li>7th Edition: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI3L2luZGV4Lmh0bWw=" title="https://www.db-book.com/db7/index.html">https://www.db-book.com/db7/index.html<i class="fa fa-external-link"></i></span></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[11.6-11.7] Hashing&lt;/p&gt;
    
    </summary>
    
    
      <category term="Access Methods" scheme="https://cakebytheoceanluo.github.io/categories/Access-Methods/"/>
    
      <category term="Database System Concepts" scheme="https://cakebytheoceanluo.github.io/categories/Database-System-Concepts/"/>
    
      <category term="Hash Table" scheme="https://cakebytheoceanluo.github.io/categories/Hash-Table/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/categories/Indexing/"/>
    
      <category term="Data Structure" scheme="https://cakebytheoceanluo.github.io/categories/Data-Structure/"/>
    
    
      <category term="Hash Function" scheme="https://cakebytheoceanluo.github.io/tags/Hash-Function/"/>
    
      <category term="Hash Scheme" scheme="https://cakebytheoceanluo.github.io/tags/Hash-Scheme/"/>
    
      <category term="Static Hashing Scheme" scheme="https://cakebytheoceanluo.github.io/tags/Static-Hashing-Scheme/"/>
    
      <category term="Dynamic Hashing Scheme" scheme="https://cakebytheoceanluo.github.io/tags/Dynamic-Hashing-Scheme/"/>
    
      <category term="Chained Hashing" scheme="https://cakebytheoceanluo.github.io/tags/Chained-Hashing/"/>
    
      <category term="Extendible Hashing" scheme="https://cakebytheoceanluo.github.io/tags/Extendible-Hashing/"/>
    
      <category term="Books" scheme="https://cakebytheoceanluo.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>Database System Concepts-精读</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/10/DSC-0/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/10/DSC-0/</id>
    <published>2020-04-10T16:41:55.000Z</published>
    <updated>2020-04-11T14:31:36.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="笔记文章链接"><a href="#笔记文章链接" class="headerlink" title="笔记文章链接"></a>笔记文章链接</h1><ul><li>Chapter 11 Indexing and Hashing:<ul><li>11.6-11.7 Hashing: <a href="https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/">Database System Concepts 精读 [11.6-11.7] Hashing</a></li></ul></li></ul><p>此区域持续更新</p><hr><a id="more"></a><h1 id="笔记概要"><a href="#笔记概要" class="headerlink" title="笔记概要"></a>笔记概要</h1><p>此系列文章会不定时更新。<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><p>我在这里分享我的读书笔记, 我使用是这本书第六版: Abraham Silberschatz, Henry F. Korth, S. Sudarshan: <strong>Database System Concepts</strong>, 6th Edition. McGraw-Hill Book Company 2010</p><blockquote><ul><li>帆船书：Abraham Silberschatz, Henry F. Korth, S. Sudarshan: <strong>Database System Concepts</strong>, 6th Edition. McGraw-Hill Book Company 2010<ul><li>第六版: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L2luZGV4Lmh0bWw=" title="https://www.db-book.com/db6/index.html">https://www.db-book.com/db6/index.html<i class="fa fa-external-link"></i></span></li><li>第七版 2019: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI3L2luZGV4Lmh0bWw=" title="https://www.db-book.com/db7/index.html">https://www.db-book.com/db7/index.html<i class="fa fa-external-link"></i></span></li><li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xMDU0ODM3OS8=" title="https://book.douban.com/subject/10548379/">https://book.douban.com/subject/10548379/<i class="fa fa-external-link"></i></span></li><li>注: 高等教育出版社有出版英文影印版, 豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yNjA0NTkzMS8=" title="https://book.douban.com/subject/26045931/">https://book.douban.com/subject/26045931/<i class="fa fa-external-link"></i></span></li><li>注: 机械工业出版社有出版英文影印版, 豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yMDQ4MDY5My8=" title="https://book.douban.com/subject/20480693/">https://book.douban.com/subject/20480693/<i class="fa fa-external-link"></i></span></li></ul></li></ul></blockquote><p>— 引用自我的另一篇文章<a href="https://cakebytheoceanluo.github.io/2020/03/10/books/">[DBMS Books] 数据库书籍推荐</a></p><p>我的笔记属于<strong>精读细读</strong>, 大致上我会仔细看对应的部分两次, 然后留下笔记。我的目标是: </p><ul><li>在我<strong>重视部分</strong>笔记会使用原文量的50%。我重视部分大致和<strong>数据库的实现和算法相关</strong>。</li><li>我目前先不处理<strong>不太重视部分</strong>。比如数据库的理论的部分: Relation Algebra, Function Dependence.</li></ul><p>因此我的笔记会强烈依赖于英文原文。笔记对我个人的用途是，在实现的时候可以有很大的帮助和提示(正是因为这个原因，我不会大量更改原文)。对于大家，可以把我的笔记想象成原书的精简版。或者可以读完书以后，那我的笔记去复习。</p><p>我具体会<strong>增加</strong>的地方:</p><ul><li>段落重新排序</li><li>添加少量注释和解释(<strong>使用中文</strong>)</li><li>添加到其它笔记的链接</li><li>重新组织语言</li></ul><p>我具体会<strong>保留</strong>的部分:</p><ul><li>数据库实现相关<ul><li>数据库中的算法和数据结构</li></ul></li><li>各个概念的定义</li><li>各个部分的关联性和优缺点</li></ul><p>我具体会<strong>去掉</strong>的地方:</p><ul><li>非核心例子</li><li>去掉教科书中重复提示的部分</li></ul><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>此系列文章不构成商业行为，若有侵权，我立即删除。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>我在这一篇文章中对我这本书的读书笔记引用进行声明:</p><p>Abraham Silberschatz, Henry F. Korth, S. Sudarshan: <strong>Database System Concepts</strong>, 6th Edition. McGraw-Hill Book Company 2010</p><ul><li>6th Edition: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L2luZGV4Lmh0bWw=" title="https://www.db-book.com/db6/index.html">https://www.db-book.com/db6/index.html<i class="fa fa-external-link"></i></span></li><li>7th Edition: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI3L2luZGV4Lmh0bWw=" title="https://www.db-book.com/db7/index.html">https://www.db-book.com/db7/index.html<i class="fa fa-external-link"></i></span></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;笔记文章链接&quot;&gt;&lt;a href=&quot;#笔记文章链接&quot; class=&quot;headerlink&quot; title=&quot;笔记文章链接&quot;&gt;&lt;/a&gt;笔记文章链接&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Chapter 11 Indexing and Hashing:&lt;ul&gt;
&lt;li&gt;11.6-11.7 Hashing: &lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/&quot;&gt;Database System Concepts 精读 [11.6-11.7] Hashing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此区域持续更新&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Database System Concepts" scheme="https://cakebytheoceanluo.github.io/categories/Database-System-Concepts/"/>
    
    
      <category term="Books" scheme="https://cakebytheoceanluo.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-窗口函数(7)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/09/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-7/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/09/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-7/</id>
    <published>2020-04-09T13:37:29.000Z</published>
    <updated>2020-04-09T13:38:14.738Z</updated>
    
    <content type="html"><![CDATA[<p>在了解了窗口函数后， 我们这次对它进行最后(?)一次练习。我们考虑一个秋有问题，即一些连续的数字是否被使用完。这次的数据集直接存在于SQL语句里面。</p><a id="more"></a><h1 id="秋游问题"><a href="#秋游问题" class="headerlink" title="秋游问题"></a>秋游问题</h1><p>我们用SQL为下面的问题建立一个模型：</p><ul><li>我们在A点到B点游玩，这两点之前有很多路段可以去游玩，而我们以及游玩过其中部分的路段了</li><li><code>trails</code>指所有的路段，这些路段有自己的<code>id</code>去确定唯一性<ul><li>我们一共有两种路段, 分别为<code>id</code>0和1， <code>leg</code>长度为28和15</li></ul></li><li><code>completed</code>指我们已经玩过的路段</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> trails (<span class="keyword">id</span>, leg) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">28</span>) leg</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="number">2</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">15</span>) leg</span><br><span class="line">    ),</span><br><span class="line">     completed (trail_id , leg) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">values</span> (<span class="number">1</span> ,<span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">8</span>), (<span class="number">1</span>, <span class="number">9</span>), (<span class="number">1</span>, <span class="number">22</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">23</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">               (<span class="number">2</span>, <span class="number">11</span>), (<span class="number">2</span>,<span class="number">12</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> completed;</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="完成连续的路段的数量"><a href="#完成连续的路段的数量" class="headerlink" title="完成连续的路段的数量"></a>完成连续的路段的数量</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> trails (<span class="keyword">id</span>, leg) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">28</span>) leg</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="number">2</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">15</span>) leg</span><br><span class="line">    ),</span><br><span class="line">     completed (trail_id , leg) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">values</span> (<span class="number">1</span> ,<span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">8</span>), (<span class="number">1</span>, <span class="number">9</span>), (<span class="number">1</span>, <span class="number">22</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">23</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">               (<span class="number">2</span>, <span class="number">11</span>), (<span class="number">2</span>,<span class="number">12</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span> (*)</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> trail_id,</span><br><span class="line">                    leg - row_number() <span class="keyword">over</span> (</span><br><span class="line">                        <span class="keyword">partition</span> <span class="keyword">by</span> trail_id</span><br><span class="line">                        <span class="keyword">order</span> <span class="keyword">by</span> leg) <span class="keyword">section</span></span><br><span class="line">    <span class="keyword">from</span> completed</span><br><span class="line">) <span class="keyword">as</span> temp;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> count </span><br><span class="line"><span class="comment">-------</span></span><br><span class="line">     5</span><br><span class="line">(1 row)</span><br></pre></td></tr></tbody></table></figure><p>这题中表格的思路是</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> trails (<span class="keyword">id</span>, leg) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">28</span>) leg</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="number">2</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">15</span>) leg</span><br><span class="line">    ),</span><br><span class="line">     completed (trail_id , leg) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">values</span> (<span class="number">1</span> ,<span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">8</span>), (<span class="number">1</span>, <span class="number">9</span>), (<span class="number">1</span>, <span class="number">22</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">23</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">               (<span class="number">2</span>, <span class="number">11</span>), (<span class="number">2</span>,<span class="number">12</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> trail_id,</span><br><span class="line">                leg,</span><br><span class="line">                row_number() <span class="keyword">over</span> (</span><br><span class="line">                    <span class="keyword">partition</span> <span class="keyword">by</span> trail_id</span><br><span class="line">                    <span class="keyword">order</span> <span class="keyword">by</span> leg),</span><br><span class="line">                leg - row_number() <span class="keyword">over</span> (</span><br><span class="line">                    <span class="keyword">partition</span> <span class="keyword">by</span> trail_id</span><br><span class="line">                    <span class="keyword">order</span> <span class="keyword">by</span> leg) <span class="keyword">section</span></span><br><span class="line"><span class="keyword">from</span> completed</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> trail_id, <span class="keyword">section</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> trail_id | leg | row_number | section </span><br><span class="line"><span class="comment">----------+-----+------------+---------</span></span><br><span class="line">        1 |   1 |          1 |       0</span><br><span class="line">        1 |   2 |          2 |       0</span><br><span class="line">        1 |   3 |          3 |       0</span><br><span class="line">        1 |   8 |          4 |       4</span><br><span class="line">        1 |   9 |          5 |       4</span><br><span class="line">        1 |  22 |          6 |      16</span><br><span class="line">        1 |  23 |          7 |      16</span><br><span class="line">        2 |   1 |          1 |       0</span><br><span class="line">        2 |   2 |          2 |       0</span><br><span class="line">        2 |  11 |          3 |       8</span><br><span class="line">        2 |  12 |          4 |       8</span><br><span class="line">(11 rows)</span><br></pre></td></tr></tbody></table></figure><p><code>section</code>值相同的部分，属于连续的路段</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> trails (<span class="keyword">id</span>, leg) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">28</span>) leg</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="number">2</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">15</span>) leg</span><br><span class="line">    ),</span><br><span class="line">     completed (trail_id , leg) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">values</span> (<span class="number">1</span> ,<span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">8</span>), (<span class="number">1</span>, <span class="number">9</span>), (<span class="number">1</span>, <span class="number">22</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">23</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">               (<span class="number">2</span>, <span class="number">11</span>), (<span class="number">2</span>,<span class="number">12</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> trail_id,</span><br><span class="line">                leg - row_number() <span class="keyword">over</span> (</span><br><span class="line">                    <span class="keyword">partition</span> <span class="keyword">by</span> trail_id</span><br><span class="line">                    <span class="keyword">order</span> <span class="keyword">by</span> leg) <span class="keyword">section</span></span><br><span class="line"><span class="keyword">from</span> completed</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> trail_id, <span class="keyword">section</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> trail_id | section </span><br><span class="line"><span class="comment">----------+---------</span></span><br><span class="line">        1 |       0</span><br><span class="line">        1 |       4</span><br><span class="line">        1 |      16</span><br><span class="line">        2 |       0</span><br><span class="line">        2 |       8</span><br><span class="line">(5 rows)</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="求连续路段长度的平均值，最大值和最小值"><a href="#求连续路段长度的平均值，最大值和最小值" class="headerlink" title="求连续路段长度的平均值，最大值和最小值"></a>求连续路段长度的平均值，最大值和最小值</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> trails (<span class="keyword">id</span>, leg) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">28</span>) leg</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="number">2</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">15</span>) leg</span><br><span class="line">    ),</span><br><span class="line">     completed (trail_id , leg) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">values</span> (<span class="number">1</span> ,<span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">8</span>), (<span class="number">1</span>, <span class="number">9</span>), (<span class="number">1</span>, <span class="number">22</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">23</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">               (<span class="number">2</span>, <span class="number">11</span>), (<span class="number">2</span>,<span class="number">12</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(c), <span class="keyword">min</span>(c), <span class="keyword">max</span>(c)</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> c</span><br><span class="line">    <span class="keyword">from</span> (</span><br><span class="line">        <span class="keyword">select</span> trail_id,</span><br><span class="line">        leg - row_number() <span class="keyword">over</span> (</span><br><span class="line">            <span class="keyword">partition</span> <span class="keyword">by</span> trail_id</span><br><span class="line">            <span class="keyword">order</span> <span class="keyword">by</span> leg) <span class="keyword">as</span> <span class="keyword">section</span></span><br><span class="line">        <span class="keyword">from</span> completed</span><br><span class="line">    ) <span class="keyword">as</span> temp_count</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> trail_id , <span class="keyword">section</span></span><br><span class="line">) <span class="keyword">as</span> temp_stat;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">        avg         | min | max </span><br><span class="line"><span class="comment">--------------------+-----+-----</span></span><br><span class="line"> 2.2000000000000000 |   2 |   3</span><br><span class="line">(1 row)</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="对未完成的路段进行分析"><a href="#对未完成的路段进行分析" class="headerlink" title="对未完成的路段进行分析"></a>对未完成的路段进行分析</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> trails (<span class="keyword">id</span>, leg) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">28</span>) leg</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="number">2</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">15</span>) leg</span><br><span class="line">    ),</span><br><span class="line">     completed (trail_id , leg) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">values</span> (<span class="number">1</span> ,<span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">8</span>), (<span class="number">1</span>, <span class="number">9</span>), (<span class="number">1</span>, <span class="number">22</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">23</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">               (<span class="number">2</span>, <span class="number">11</span>), (<span class="number">2</span>,<span class="number">12</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    <span class="keyword">min</span>(leg) <span class="keyword">as</span> firstLeg,</span><br><span class="line">    <span class="keyword">max</span>(leg) <span class="keyword">as</span> LastLeg,</span><br><span class="line">    <span class="keyword">max</span>(leg) - <span class="keyword">min</span>(leg) + <span class="number">1</span> <span class="keyword">as</span> <span class="keyword">length</span>,</span><br><span class="line">    <span class="keyword">section</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>,</span><br><span class="line">           leg,</span><br><span class="line">           leg - row_number() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">order</span> <span class="keyword">by</span> leg) <span class="keyword">section</span></span><br><span class="line">    <span class="keyword">from</span> trails</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> completed c</span><br><span class="line">        <span class="keyword">where</span> trail_id = trails.id</span><br><span class="line">        <span class="keyword">and</span> trails.leg = c.leg</span><br><span class="line">    )</span><br><span class="line">) <span class="keyword">as</span> temp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>, <span class="keyword">section</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">length</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> id | firstleg | lastleg | length | section </span><br><span class="line"><span class="comment">----+----------+---------+--------+---------</span></span><br><span class="line">  2 |       13 |      15 |      3 |       4</span><br><span class="line">  1 |        4 |       7 |      4 |       3</span><br><span class="line">  1 |       24 |      28 |      5 |       7</span><br><span class="line">  2 |        3 |      10 |      8 |       2</span><br><span class="line">  1 |       10 |      21 |     12 |       5</span><br><span class="line">(5 rows)</span><br></pre></td></tr></tbody></table></figure><p>思路:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> trails (<span class="keyword">id</span>, leg) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">28</span>) leg</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="number">2</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">15</span>) leg</span><br><span class="line">    ),</span><br><span class="line">     completed (trail_id , leg) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">values</span> (<span class="number">1</span> ,<span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">8</span>), (<span class="number">1</span>, <span class="number">9</span>), (<span class="number">1</span>, <span class="number">22</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">23</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">               (<span class="number">2</span>, <span class="number">11</span>), (<span class="number">2</span>,<span class="number">12</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,</span><br><span class="line">       leg,</span><br><span class="line">       row_number() <span class="keyword">over</span> w,</span><br><span class="line">       leg - row_number() <span class="keyword">over</span> w <span class="keyword">section</span></span><br><span class="line"><span class="keyword">from</span> trails</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> completed c</span><br><span class="line">    <span class="keyword">where</span> trail_id = trails.id</span><br><span class="line">    <span class="keyword">and</span> trails.leg = c.leg</span><br><span class="line">)</span><br><span class="line"><span class="keyword">window</span> w <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">id</span></span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> leg</span><br><span class="line">)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>, leg;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> id | leg | row_number | section </span><br><span class="line"><span class="comment">----+-----+------------+---------</span></span><br><span class="line">  1 |   4 |          1 |       3</span><br><span class="line">  1 |   5 |          2 |       3</span><br><span class="line">  1 |   6 |          3 |       3</span><br><span class="line">  1 |   7 |          4 |       3</span><br><span class="line">  1 |  10 |          5 |       5</span><br><span class="line">  1 |  11 |          6 |       5</span><br><span class="line">  1 |  12 |          7 |       5</span><br><span class="line">  1 |  13 |          8 |       5</span><br><span class="line">  1 |  14 |          9 |       5</span><br><span class="line">  1 |  15 |         10 |       5</span><br><span class="line">  1 |  16 |         11 |       5</span><br><span class="line">  1 |  17 |         12 |       5</span><br><span class="line">  1 |  18 |         13 |       5</span><br><span class="line">  1 |  19 |         14 |       5</span><br><span class="line">  1 |  20 |         15 |       5</span><br><span class="line">  1 |  21 |         16 |       5</span><br><span class="line">  1 |  24 |         17 |       7</span><br><span class="line">  1 |  25 |         18 |       7</span><br><span class="line">  1 |  26 |         19 |       7</span><br><span class="line">  1 |  27 |         20 |       7</span><br><span class="line">  1 |  28 |         21 |       7</span><br><span class="line">  2 |   3 |          1 |       2</span><br><span class="line">  2 |   4 |          2 |       2</span><br><span class="line">  2 |   5 |          3 |       2</span><br><span class="line">  2 |   6 |          4 |       2</span><br><span class="line">  2 |   7 |          5 |       2</span><br><span class="line">  2 |   8 |          6 |       2</span><br><span class="line">  2 |   9 |          7 |       2</span><br><span class="line">  2 |  10 |          8 |       2</span><br><span class="line">  2 |  13 |          9 |       4</span><br><span class="line">  2 |  14 |         10 |       4</span><br><span class="line">  2 |  15 |         11 |       4</span><br><span class="line">(32 rows)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在了解了窗口函数后， 我们这次对它进行最后(?)一次练习。我们考虑一个秋有问题，即一些连续的数字是否被使用完。这次的数据集直接存在于SQL语句里面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-窗口函数(6)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/08/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-6/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/08/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-6/</id>
    <published>2020-04-08T17:34:47.000Z</published>
    <updated>2020-04-08T17:44:29.206Z</updated>
    
    <content type="html"><![CDATA[<p>我们继续练习窗口函数，这次我们使用TPC-H数据集来练习。TPC-H是一个商业决策方向的数据集，因此里面有很多金额/销售额/年度销售额/国家销售额等等OLAP的数目可以被计算。</p><a id="more"></a><h1 id="TPC-H-数据集"><a href="#TPC-H-数据集" class="headerlink" title="TPC-H 数据集"></a>TPC-H 数据集</h1><p>我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注<code>select...from...where</code>这种读操作，分析query　(analytical query)。<br><code>TPC-H</code>数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p><p><strong>本地载入改数据集</strong>的方法见我的博客两篇文章:</p><ul><li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5TPC-H%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS] PostgreSQL 导入 TPC-H 数据集</a></li><li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS] PostgreSQL 导入数据集</a></li></ul><p><br><br><br></p><h2 id="sets-rollup-cube"><a href="#sets-rollup-cube" class="headerlink" title="sets, rollup, cube"></a>sets, rollup, cube</h2><p><img data-src="https://cakebytheoceanluo.github.io/images/FDE/chap3/36.jpg" alt="36.jpg"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">group by grouping sets ((a, b), (a), ())</span><br><span class="line">``` </span><br><span class="line">= </span><br><span class="line">```SQL</span><br><span class="line">group by rollup (a, b)</span><br></pre></td></tr></tbody></table></figure><p>=<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a, b, <span class="keyword">sum</span>(x) <span class="keyword">from</span> r <span class="keyword">group</span> <span class="keyword">by</span> a, b</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> a, <span class="literal">null</span>, <span class="keyword">sum</span>(x) <span class="keyword">from</span> r <span class="keyword">group</span> <span class="keyword">by</span> a</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="literal">null</span>, <span class="literal">null</span>, <span class="keyword">sum</span>(x) <span class="keyword">from</span> r;</span><br></pre></td></tr></tbody></table></figure><p></p><p><br><br><br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">group by cube (a, b)</span><br><span class="line">``` </span><br><span class="line">= </span><br><span class="line">```SQL</span><br><span class="line">group by grouping sets ((a, b), (a), (b), ())</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><ul><li>其中<code>()</code>指的是空集</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x, y) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                        (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                        (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">                        (<span class="literal">NULL</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(y)</span><br><span class="line"><span class="keyword">from</span> testdata</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> x;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> x | sum </span><br><span class="line"><span class="comment">---+-----</span></span><br><span class="line">   |   4</span><br><span class="line"> 1 |   5</span><br><span class="line">(2 rows)</span><br></pre></td></tr></tbody></table></figure><p><br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x, y) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                        (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                        (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">                        (<span class="literal">NULL</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(y), <span class="keyword">grouping</span>(x)</span><br><span class="line"><span class="keyword">from</span> testdata</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">rollup</span>(x);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> x | sum | grouping </span><br><span class="line"><span class="comment">---+-----+----------</span></span><br><span class="line">   |   9 |        1</span><br><span class="line">   |   4 |        0</span><br><span class="line"> 1 |   5 |        0</span><br><span class="line">(3 rows)</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><h3 id="计算各个nation-region-all-全球-的revenue"><a href="#计算各个nation-region-all-全球-的revenue" class="headerlink" title="计算各个nation, region, all(全球)的revenue:"></a>计算各个nation, region, all(全球)的revenue:</h3><p><img data-src="https://cakebytheoceanluo.github.io/images/FDE/chap3/37.jpg" alt="37.jpg"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(o_totalprice) <span class="keyword">as</span> revenue, r_name, n_name</span><br><span class="line"><span class="keyword">from</span> orders, customer, nation, region</span><br><span class="line"><span class="keyword">where</span> o_custkey = c_custkey <span class="keyword">and</span> c_nationkey = n_nationkey <span class="keyword">and</span> n_regionkey = r_regionkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">rollup</span>(r_name, n_name)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> r_name, n_name;</span><br></pre></td></tr></tbody></table></figure><h4 id="grouping"><a href="#grouping" class="headerlink" title="grouping"></a>grouping</h4><p>下面这个版本在上面SQL基础上加上了<code>grouping</code>, 它代表<strong>被聚合成组的个数</strong>：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(o_totalprice) <span class="keyword">as</span> revenue, r_name, n_name, <span class="keyword">grouping</span>(r_name, n_name)</span><br><span class="line"><span class="keyword">from</span> orders, customer, nation, region</span><br><span class="line"><span class="keyword">where</span> o_custkey = c_custkey <span class="keyword">and</span> c_nationkey = n_nationkey <span class="keyword">and</span> n_regionkey = r_regionkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">rollup</span>(r_name, n_name)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> r_name, n_name;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">     revenue     |          r_name           |          n_name           | grouping </span><br><span class="line"><span class="comment">-----------------+---------------------------+---------------------------+----------</span></span><br><span class="line">   9065723966.78 | AFRICA                    | ALGERIA                   |        0</span><br><span class="line">   9032642974.38 | AFRICA                    | ETHIOPIA                  |        0</span><br><span class="line">   8897163266.18 | AFRICA                    | KENYA                     |        0</span><br><span class="line">   8985579085.22 | AFRICA                    | MOROCCO                   |        0</span><br><span class="line">   9249114609.66 | AFRICA                    | MOZAMBIQUE                |        0</span><br><span class="line">  45230223902.22 | AFRICA                    |                           |        1</span><br><span class="line">   9022490350.05 | AMERICA                   | ARGENTINA                 |        0</span><br><span class="line">   9107367126.70 | AMERICA                   | BRAZIL                    |        0</span><br><span class="line">   9143635385.19 | AMERICA                   | CANADA                    |        0</span><br><span class="line">   8946481134.38 | AMERICA                   | PERU                      |        0</span><br><span class="line">   9086969258.89 | AMERICA                   | UNITED STATES             |        0</span><br><span class="line">  45306943255.21 | AMERICA                   |                           |        1</span><br><span class="line">   9161685172.34 | ASIA                      | CHINA                     |        0</span><br><span class="line">   9035791922.09 | ASIA                      | INDIA                     |        0</span><br><span class="line">   9300830039.29 | ASIA                      | INDONESIA                 |        0</span><br><span class="line">   8993418470.64 | ASIA                      | JAPAN                     |        0</span><br><span class="line">   9121689438.20 | ASIA                      | VIETNAM                   |        0</span><br><span class="line">  45613415042.56 | ASIA                      |                           |        1</span><br><span class="line">   9318715232.78 | EUROPE                    | FRANCE                    |        0</span><br><span class="line">   9039194008.74 | EUROPE                    | GERMANY                   |        0</span><br><span class="line">   9196280024.51 | EUROPE                    | ROMANIA                   |        0</span><br><span class="line">   9282323186.28 | EUROPE                    | RUSSIA                    |        0</span><br><span class="line">   8956753007.40 | EUROPE                    | UNITED KINGDOM            |        0</span><br><span class="line">  45793265459.71 | EUROPE                    |                           |        1</span><br><span class="line">   8925726169.17 | MIDDLE EAST               | EGYPT                     |        0</span><br><span class="line">   9025552858.09 | MIDDLE EAST               | IRAN                      |        0</span><br><span class="line">   8892603095.99 | MIDDLE EAST               | IRAQ                      |        0</span><br><span class="line">   9229296044.98 | MIDDLE EAST               | JORDAN                    |        0</span><br><span class="line">   8812280619.53 | MIDDLE EAST               | SAUDI ARABIA              |        0</span><br><span class="line">  44885458787.76 | MIDDLE EAST               |                           |        1</span><br><span class="line"> 226829306447.46 |                           |                           |        3</span><br><span class="line">(31 rows)</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><h2 id="cube"><a href="#cube" class="headerlink" title="cube"></a><code>cube</code></h2><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><ul><li>求出所有要求的lineitem的trade volume(即l_quantity * l_extendedprice)的总和<ul><li>这些lineitem被要求：对应<code>nation.n_name</code>是<code>UNITED STATES</code>, 对应的<code>c_mktsegment</code>是<code>AUTOMOBILE</code></li></ul></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span> (l_quantity * l_extendedprice)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    lineitem,</span><br><span class="line">    orders,</span><br><span class="line">    customer,</span><br><span class="line">    nation</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    l_orderkey = o_orderkey <span class="keyword">and</span></span><br><span class="line">    o_custkey = c_custkey <span class="keyword">and</span></span><br><span class="line">    c_nationkey = n_nationkey <span class="keyword">and</span></span><br><span class="line">    c_mktsegment = <span class="string">'AUTOMOBILE'</span> <span class="keyword">and</span></span><br><span class="line">    n_name = <span class="string">'UNITED STATES'</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>求所有要求的lineitem的trade volume的总和<ul><li>这些lineitem被要求是来自被同一个nation的supplier和customer</li></ul></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">sum</span>(l_quantity * l_extendedprice)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    lineitem,</span><br><span class="line">    orders,</span><br><span class="line">    customer,</span><br><span class="line">    supplier</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    l_orderkey = o_orderkey <span class="keyword">and</span></span><br><span class="line">    o_custkey = c_custkey <span class="keyword">and</span></span><br><span class="line">    l_suppkey = s_suppkey <span class="keyword">and</span></span><br><span class="line">    s_nationkey = c_nationkey;</span><br></pre></td></tr></tbody></table></figure><p>为了对类似这些Query进行加速，我们可以用<code>cube</code>函数来物质化(materialize)预先计算(precompute)集合(aggregates)。</p><p><br></p><h3 id="物质化一个在维度c-mktsegment-c-nation-s-nation上的cube-在组里面对l-quantity-l-extendedprice求和"><a href="#物质化一个在维度c-mktsegment-c-nation-s-nation上的cube-在组里面对l-quantity-l-extendedprice求和" class="headerlink" title="物质化一个在维度c_mktsegment, c_nation, s_nation上的cube, 在组里面对l_quantity * l_extendedprice求和"></a>物质化一个在维度<code>c_mktsegment, c_nation, s_nation</code>上的<code>cube</code>, 在组里面对<code>l_quantity * l_extendedprice</code>求和</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> volume_cube (</span><br><span class="line">    volume <span class="built_in">bigint</span>,</span><br><span class="line">    c_mktsegment <span class="built_in">character</span> (<span class="number">10</span>),</span><br><span class="line">    c_nationkey <span class="built_in">integer</span>,</span><br><span class="line">    s_nationkey <span class="built_in">integer</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> volume_cube2 (</span><br><span class="line">    volume <span class="built_in">bigint</span>,</span><br><span class="line">    c_mktsegment <span class="built_in">character</span> (<span class="number">10</span>),</span><br><span class="line">    c_nationkey <span class="built_in">integer</span>,</span><br><span class="line">    s_nationkey <span class="built_in">integer</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> volume_cube2 <span class="keyword">select</span></span><br><span class="line">    <span class="keyword">sum</span>(l_quantity * l_extendedprice),</span><br><span class="line">    c_mktsegment,</span><br><span class="line">    c_nationkey,</span><br><span class="line">    s_nationkey</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    lineitem,</span><br><span class="line">    orders,</span><br><span class="line">    customer,</span><br><span class="line">    supplier</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    l_orderkey = o_orderkey <span class="keyword">and</span></span><br><span class="line">    o_custkey = c_custkey <span class="keyword">and</span></span><br><span class="line">    l_suppkey = s_suppkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    <span class="keyword">cube</span> (</span><br><span class="line">    c_mktsegment,</span><br><span class="line">    c_nationkey,</span><br><span class="line">    s_nationkey</span><br><span class="line">    );</span><br></pre></td></tr></tbody></table></figure><h3 id="改写引入中的两个例子"><a href="#改写引入中的两个例子" class="headerlink" title="改写引入中的两个例子"></a>改写引入中的两个例子</h3><p>可以对运行时间进行比较，在<code>psql</code>命令行中输入<code>\timing</code>:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tpch1=# \timing</span><br><span class="line">Timing is on.</span><br></pre></td></tr></tbody></table></figure><p><br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> volume</span><br><span class="line"><span class="keyword">from</span> volume_cube2, nation</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    c_mktsegment = <span class="string">'AUTOMOBILE'</span> <span class="keyword">and</span></span><br><span class="line">    c_nationkey = n_nationkey <span class="keyword">and</span></span><br><span class="line">    n_name = <span class="string">'UNITED STATES'</span> <span class="keyword">and</span></span><br><span class="line">    s_nationkey <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   volume    </span><br><span class="line"><span class="comment">-------------</span></span><br><span class="line"> 59435954414</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 1.048 ms</span><br></pre></td></tr></tbody></table></figure><p>&lt;/br&gt;<br>&lt;/br&gt;</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(volume)</span><br><span class="line"><span class="keyword">from</span> volume_cube2</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    c_nationkey = s_nationkey <span class="keyword">and</span></span><br><span class="line">    c_mktsegment <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     sum      </span><br><span class="line"><span class="comment">--------------</span></span><br><span class="line"> 309577834070</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 1.505 ms</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><p>下面是引入例子所需要的时间，它们很慢：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">       sum        </span><br><span class="line"><span class="comment">------------------</span></span><br><span class="line"> 59435954414.0900</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 1301.876 ms (00:01.302)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">        sum        </span><br><span class="line"><span class="comment">-------------------</span></span><br><span class="line"> 309577834069.9700</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 4526.136 ms (00:04.526)</span><br></pre></td></tr></tbody></table></figure><h3 id="考虑物质化一个在维度p-partkey-s-partkey-o-orderkey-c-custkey上的cube是否合理"><a href="#考虑物质化一个在维度p-partkey-s-partkey-o-orderkey-c-custkey上的cube是否合理" class="headerlink" title="考虑物质化一个在维度p_partkey, s_partkey, o_orderkey, c_custkey上的cube是否合理"></a>考虑物质化一个在维度<code>p_partkey, s_partkey, o_orderkey, c_custkey</code>上的<code>cube</code>是否合理</h3><p>即使是唯一的元素(unique elements)的个数：200k <em> 800k </em> 1500k * 150k = 3.6e22</p><p>这个数字是cube至少拥有的条目总数的下限</p><p>假设每个元素都是4Byte的Int，预先计算需要的空间是：1.44e23 Byte = 192 Zebibyte </p><p>这个空间占用过大，这个考虑是非常不合理的</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们继续练习窗口函数，这次我们使用TPC-H数据集来练习。TPC-H是一个商业决策方向的数据集，因此里面有很多金额/销售额/年度销售额/国家销售额等等OLAP的数目可以被计算。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="TUM-IN2326" scheme="https://cakebytheoceanluo.github.io/categories/TUM-IN2326/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-窗口函数(5)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/06/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-5/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/06/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-5/</id>
    <published>2020-04-06T13:16:29.000Z</published>
    <updated>2020-04-06T13:46:10.936Z</updated>
    
    <content type="html"><![CDATA[<p>我们继续练习窗口函数，这次我们使用TPC-H数据集来练习。TPC-H是一个商业决策方向的数据集，因此里面有很多金额/销售额/年度销售额/国家销售额等等OLAP的数目可以被计算。</p><a id="more"></a><h1 id="TPC-H-数据集"><a href="#TPC-H-数据集" class="headerlink" title="TPC-H 数据集"></a>TPC-H 数据集</h1><p>我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注<code>select...from...where</code>这种读操作，分析query　(analytical query)。<br><code>TPC-H</code>数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p><p><strong>本地载入改数据集</strong>的方法见我的博客两篇文章:</p><ul><li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5TPC-H%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS] PostgreSQL 导入 TPC-H 数据集</a></li><li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS] PostgreSQL 导入数据集</a></li></ul><h2 id="统计每一个customer的总o-totalprice"><a href="#统计每一个customer的总o-totalprice" class="headerlink" title="统计每一个customer的总o_totalprice"></a>统计每一个customer的总o_totalprice</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o_custkey, o_orderdate,</span><br><span class="line">       <span class="keyword">sum</span>(o_totalprice) <span class="keyword">over</span> <span class="comment">-- window function</span></span><br><span class="line">    (<span class="keyword">partition</span> <span class="keyword">by</span> o_custkey <span class="comment">-- partitioning clause</span></span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> o_orderdate <span class="comment">-- ordering clause</span></span><br><span class="line">    <span class="keyword">range</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span></span><br><span class="line">    ) <span class="comment">-- framing clause</span></span><br><span class="line">    <span class="keyword">as</span> o_totalprice_sum</span><br><span class="line"><span class="keyword">from</span> orders;</span><br></pre></td></tr></tbody></table></figure><p>课件上面的版本其实不能充分显示出window function的作用，我们可以用下面的版本，同时看一下对应的输出：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o_custkey, o_orderdate, o_totalprice,</span><br><span class="line">       <span class="keyword">sum</span>(o_totalprice) <span class="keyword">over</span> <span class="comment">-- window function</span></span><br><span class="line">    (<span class="keyword">partition</span> <span class="keyword">by</span> o_custkey <span class="comment">-- partitioning clause</span></span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> o_orderdate <span class="comment">-- ordering clause</span></span><br><span class="line">    <span class="keyword">range</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span></span><br><span class="line">    ) <span class="comment">-- framing clause</span></span><br><span class="line">    <span class="keyword">as</span> o_totalprice_sum</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_custkey, o_orderdate;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> o_custkey | o_orderdate | o_totalprice | o_totalprice_sum </span><br><span class="line"><span class="comment">-----------+-------------+--------------+------------------</span></span><br><span class="line">         1 | 1992-10-21  |    202660.52 |        202660.52</span><br><span class="line">         1 | 1993-08-05  |      4225.26 |        206885.78</span><br><span class="line">         1 | 1997-05-09  |    113954.89 |        320840.67</span><br><span class="line">         1 | 1997-11-21  |     39835.54 |        360676.21</span><br><span class="line">         1 | 1998-05-31  |    159171.69 |        519847.90</span><br><span class="line">         2 | 1992-07-08  |     44777.63 |         44777.63</span><br><span class="line">         2 | 1992-08-28  |     89399.40 |        134177.03</span><br><span class="line">         2 | 1993-03-09  |    169847.63 |        304024.66</span><br><span class="line">         2 | 1993-07-31  |     29305.47 |        333330.13</span><br><span class="line">         2 | 1993-12-31  |    179984.42 |        513314.55</span><br><span class="line">         2 | 1994-04-20  |     41433.48 |        554748.03</span><br><span class="line">         2 | 1996-08-16  |     63873.14 |        618621.17</span><br><span class="line">         2 | 1997-06-09  |     24362.39 |        642983.56</span><br><span class="line">         2 | 1998-05-28  |    140363.70 |        783347.26</span><br><span class="line">         .................................................</span><br></pre></td></tr></tbody></table></figure><p>我们可以关注<code>o_totalprice_sum</code>这个字段，它对每一个独立的<code>o_custkey</code>的不同<code>o_orderdate</code>的<code>o_totalprice</code>进行累加。</p><ul><li><code>o_custkey</code>: partition</li><li><code>o_orderdate</code>: order by 进行排序</li><li><code>range between unbounded preceding and current row</code>： 从这个<code>o_custkey</code>第一个<code>o_orderdate</code>到当前<code>o_orderdate</code></li></ul><p><br></p><p>针对这第一个例子，我们来用<strong>不带window function的版本</strong>去完成同样这个任务，<strong>统计每一个customer的总o_totalprice</strong>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o1.o_custkey, o1.o_orderdate, o1.o_totalprice, <span class="keyword">sum</span>(o2.o_totalprice) <span class="keyword">as</span> o_totalprice_sum</span><br><span class="line"><span class="keyword">from</span> orders o1, orders o2</span><br><span class="line"><span class="keyword">where</span> o1.o_custkey = o2.o_custkey <span class="keyword">and</span> o1.o_orderdate &gt;= o2.o_orderdate</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> o1.o_custkey, o1.o_orderdate, o1.o_totalprice</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o1.o_custkey, o1.o_orderdate;</span><br></pre></td></tr></tbody></table></figure><p>这里还需要提一下，上面这个不带window function的版本运行很慢，而带window function会快很多。(我在PostgreSQL和HyPer均比较过。)</p><p><br></p><h2 id="累计每一个o-orderdate-customer的o-totalprice，按照o-custkey来顺序累加"><a href="#累计每一个o-orderdate-customer的o-totalprice，按照o-custkey来顺序累加" class="headerlink" title="累计每一个o_orderdate customer的o_totalprice，按照o_custkey来顺序累加"></a>累计每一个o_orderdate customer的o_totalprice，按照o_custkey来顺序累加</h2><p>累计每一个o_orderdate(每一天)customer的o_totalprice，按照o_custkey来顺序累加</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o_orderdate, o_custkey, o_totalprice, <span class="keyword">sum</span>(o_totalprice) <span class="keyword">over</span></span><br><span class="line">    (<span class="keyword">partition</span> <span class="keyword">by</span> o_orderdate</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> o_custkey</span><br><span class="line">    <span class="keyword">range</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span></span><br><span class="line">    ) <span class="keyword">as</span> o_totalprice_sum</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_orderdate, o_custkey;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> o_orderdate | o_custkey | o_totalprice | o_totalprice_sum </span><br><span class="line"><span class="comment">-------------+-----------+--------------+------------------</span></span><br><span class="line"> 1992-01-01  |        34 |     86534.05 |         86534.05</span><br><span class="line"> 1992-01-01  |        92 |     24660.06 |        111194.11</span><br><span class="line"> 1992-01-02  |        17 |     40975.96 |         40975.96</span><br><span class="line"> 1992-01-02  |        49 |    210713.88 |        251689.84</span><br><span class="line"> 1992-01-02  |        64 |    127527.05 |        379216.89</span><br><span class="line"> 1992-01-04  |        70 |     84053.93 |         84053.93</span><br><span class="line"> 1992-01-06  |        11 |    118570.79 |        118570.79</span><br><span class="line"> 1992-01-06  |        37 |     91795.13 |        210365.92</span><br><span class="line"> 1992-01-07  |        62 |     58168.07 |         58168.07</span><br><span class="line"> 1992-01-09  |        13 |    145040.38 |        145040.38</span><br><span class="line"> 1992-01-09  |        25 |    145906.24 |        290946.62</span><br><span class="line"> .........................................................</span><br></pre></td></tr></tbody></table></figure><p>不带window function的版本：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o1.o_orderdate, o1.o_custkey, o1.o_totalprice, <span class="keyword">sum</span>(o2.o_totalprice) <span class="keyword">as</span> o_totalprice_sum</span><br><span class="line"><span class="keyword">from</span> orders o1, orders o2</span><br><span class="line"><span class="keyword">where</span> o1.o_orderdate = o2.o_orderdate <span class="keyword">and</span> o1.o_custkey &gt;= o2.o_custkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> o1.o_orderdate, o1.o_custkey, o1.o_totalprice</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_orderdate, o_custkey;</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="计算每一个GERMANY的customer每一年的running-sum-o-totalprice"><a href="#计算每一个GERMANY的customer每一年的running-sum-o-totalprice" class="headerlink" title="计算每一个GERMANY的customer每一年的running sum(o_totalprice)"></a>计算每一个GERMANY的customer每一年的running sum(o_totalprice)</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> base_table <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> c_custkey, <span class="keyword">extract</span>(<span class="keyword">year</span> <span class="keyword">from</span> o_orderdate) <span class="keyword">as</span> <span class="keyword">year</span>, <span class="keyword">sum</span>(o_totalprice) <span class="keyword">as</span> yr_revernue</span><br><span class="line">    <span class="keyword">from</span> nation, customer, orders</span><br><span class="line">    <span class="keyword">where</span> n_name = <span class="string">'GERMANY'</span> <span class="keyword">and</span> n_nationkey = c_nationkey <span class="keyword">and</span> c_custkey = o_custkey</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> c_custkey, <span class="keyword">year</span></span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> c_custkey, <span class="keyword">year</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *,</span><br><span class="line">       <span class="keyword">sum</span>(yr_revernue) <span class="keyword">over</span> (</span><br><span class="line">           <span class="keyword">partition</span> <span class="keyword">by</span> c_custkey</span><br><span class="line">           <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">year</span></span><br><span class="line">           <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">following</span></span><br><span class="line">           ) <span class="keyword">as</span> running_sum</span><br><span class="line"><span class="keyword">from</span> base_table;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">c_custkey | year | yr_revernue | running_sum </span><br><span class="line"><span class="comment">-----------+------+-------------+-------------</span></span><br><span class="line">        62 | 1992 |   169991.32 |   169991.32</span><br><span class="line">        62 | 1993 |   174385.47 |   344376.79</span><br><span class="line">        62 | 1994 |    89262.19 |   433638.98</span><br><span class="line">        62 | 1995 |   526408.33 |   960047.31</span><br><span class="line">        62 | 1996 |   412013.97 |  1372061.28</span><br><span class="line">        62 | 1997 |   286185.97 |  1658247.25</span><br><span class="line">        62 | 1998 |   397422.69 |  2055669.94</span><br><span class="line">        71 | 1992 |   403017.41 |   403017.41</span><br><span class="line">        71 | 1993 |   348239.45 |   751256.86</span><br><span class="line">        71 | 1994 |   270189.86 |  1021446.72</span><br><span class="line">        71 | 1995 |   239565.38 |  1261012.10</span><br><span class="line">        71 | 1997 |   203579.58 |  1464591.68</span><br><span class="line">        71 | 1998 |   174001.98 |  1638593.66</span><br><span class="line">        .....................................</span><br></pre></td></tr></tbody></table></figure><p>&lt;/br&gt;</p><h3 id="对不同国家的order数量进行排序，选出前几名"><a href="#对不同国家的order数量进行排序，选出前几名" class="headerlink" title="对不同国家的order数量进行排序，选出前几名"></a>对不同国家的order数量进行排序，选出前几名</h3><p><img data-src="https://cakebytheoceanluo.github.io/images/FDE/chap3/28.jpg" alt="28.jpg"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *, </span><br><span class="line">        <span class="keyword">case</span> (<span class="keyword">rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> c <span class="keyword">desc</span>)) </span><br><span class="line">              <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">'gold'</span> </span><br><span class="line">              <span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">'silver'</span> </span><br><span class="line">              <span class="keyword">when</span> <span class="number">3</span> <span class="keyword">then</span> <span class="string">'bronze'</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> c_custkey, <span class="keyword">count</span>(*) <span class="keyword">as</span> c</span><br><span class="line">    <span class="keyword">from</span> customer <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders</span><br><span class="line">    <span class="keyword">on</span> o_custkey = c_custkey</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> c_custkey) <span class="keyword">as</span> tmp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c_custkey, <span class="keyword">count</span>(*) <span class="keyword">as</span> c,</span><br><span class="line">       <span class="keyword">rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span>(*) <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="keyword">rank</span>,</span><br><span class="line">       <span class="keyword">case</span> (<span class="keyword">rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span>(*) <span class="keyword">desc</span>))  </span><br><span class="line">             <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">'gold'</span> </span><br><span class="line">             <span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">'silver'</span> </span><br><span class="line">             <span class="keyword">when</span> <span class="number">3</span> <span class="keyword">then</span> <span class="string">'bronze'</span> <span class="keyword">else</span> <span class="string">' '</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> customer <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders</span><br><span class="line"><span class="keyword">on</span> o_custkey = c_custkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c_custkey</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> c_custkey | c  | case </span><br><span class="line"><span class="comment">-----------+----+------</span></span><br><span class="line">      3451 | 41 | gold</span><br><span class="line">    102022 | 41 | gold</span><br><span class="line">    102004 | 41 | gold</span><br><span class="line">    122623 | 40 | </span><br><span class="line">     79300 | 40 | </span><br><span class="line">    117082 | 40 | </span><br><span class="line">     69682 | 39 | </span><br><span class="line">    143500 | 39 | </span><br><span class="line">    129637 | 38 | </span><br><span class="line">    124048 | 38 |</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *, </span><br><span class="line">       <span class="keyword">case</span> (<span class="keyword">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> c <span class="keyword">desc</span>)) </span><br><span class="line">             <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">'gold'</span> </span><br><span class="line">             <span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">'silver'</span> </span><br><span class="line">             <span class="keyword">when</span> <span class="number">3</span> <span class="keyword">then</span> <span class="string">'bronze'</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> c_custkey, <span class="keyword">count</span>(*) <span class="keyword">as</span> c</span><br><span class="line">    <span class="keyword">from</span> customer <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders</span><br><span class="line">    <span class="keyword">on</span> o_custkey = c_custkey</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> c_custkey) <span class="keyword">as</span> tmp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c_custkey, <span class="keyword">count</span>(*) <span class="keyword">as</span> c,</span><br><span class="line">       <span class="keyword">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span>(*) <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="keyword">rank</span>,</span><br><span class="line">       <span class="keyword">case</span> (<span class="keyword">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span>(*) <span class="keyword">desc</span>))  </span><br><span class="line">             <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">'gold'</span> </span><br><span class="line">             <span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">'silver'</span> </span><br><span class="line">             <span class="keyword">when</span> <span class="number">3</span> <span class="keyword">then</span> <span class="string">'bronze'</span> <span class="keyword">else</span> <span class="string">' '</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> customer <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders</span><br><span class="line"><span class="keyword">on</span> o_custkey = c_custkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c_custkey</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> c_custkey | c  |  case  </span><br><span class="line"><span class="comment">-----------+----+--------</span></span><br><span class="line">      3451 | 41 | gold</span><br><span class="line">    102022 | 41 | gold</span><br><span class="line">    102004 | 41 | gold</span><br><span class="line">    122623 | 40 | silver</span><br><span class="line">     79300 | 40 | silver</span><br><span class="line">    117082 | 40 | silver</span><br><span class="line">     69682 | 39 | bronze</span><br><span class="line">    143500 | 39 | bronze</span><br><span class="line">    129637 | 38 | </span><br><span class="line">    124048 | 38 |</span><br></pre></td></tr></tbody></table></figure><p>给出了两种不同方法，取决于我们怎么定义奖牌(怎么定义排名)。</p><p><br><br><br>s</p><h3 id="求每一年的revenue的百分比比前一年的变化："><a href="#求每一年的revenue的百分比比前一年的变化：" class="headerlink" title="求每一年的revenue的百分比比前一年的变化："></a>求每一年的revenue的百分比比前一年的变化：</h3><p><img data-src="https://cakebytheoceanluo.github.io/images/FDE/chap3/29.jpg" alt="29.jpg"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> orders_with_years <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> * , <span class="keyword">extract</span>(<span class="keyword">year</span> <span class="keyword">from</span> o_orderdate) <span class="keyword">as</span> <span class="keyword">year</span></span><br><span class="line">    <span class="keyword">from</span> orders</span><br><span class="line">    ), tmp_re <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">year</span>, <span class="keyword">sum</span>(o_totalprice) <span class="keyword">as</span> revenue</span><br><span class="line">    <span class="keyword">from</span> orders_with_years</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">year</span></span><br><span class="line">    ), tmp_re_comp <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *, lag(revenue, <span class="number">1</span>, <span class="literal">null</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">year</span>) <span class="keyword">as</span> prev</span><br><span class="line">    <span class="keyword">from</span> tmp_re</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *, <span class="keyword">round</span>(<span class="number">100</span> * ((revenue - prev) / prev), <span class="number">2</span>) <span class="keyword">as</span> differ_percentage</span><br><span class="line"><span class="keyword">from</span> tmp_re_comp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">year</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> year |    revenue     |      prev      | differ_percentage </span><br><span class="line"><span class="comment">------+----------------+----------------+-------------------</span></span><br><span class="line"> 1992 | 34330674052.43 |                |                  </span><br><span class="line"> 1993 | 34340410079.03 | 34330674052.43 |              0.03</span><br><span class="line"> 1994 | 34416369052.97 | 34340410079.03 |              0.22</span><br><span class="line"> 1995 | 34546133183.60 | 34416369052.97 |              0.38</span><br><span class="line"> 1996 | 34609364760.86 | 34546133183.60 |              0.18</span><br><span class="line"> 1997 | 34373633413.04 | 34609364760.86 |             -0.68</span><br><span class="line"> 1998 | 20212721905.53 | 34373633413.04 |            -41.20</span><br></pre></td></tr></tbody></table></figure><hr><p>引用: </p><p>课件: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvY2hhcHRlcjMucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们继续练习窗口函数，这次我们使用TPC-H数据集来练习。TPC-H是一个商业决策方向的数据集，因此里面有很多金额/销售额/年度销售额/国家销售额等等OLAP的数目可以被计算。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="TUM-IN2326" scheme="https://cakebytheoceanluo.github.io/categories/TUM-IN2326/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-窗口函数(4)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/05/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-4/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/05/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-4/</id>
    <published>2020-04-05T18:08:57.000Z</published>
    <updated>2020-04-05T18:09:42.250Z</updated>
    
    <content type="html"><![CDATA[<p>在前三篇文章中我们基本上认识了window function。这次我们有具体的数据集去进行大量练习(绝大部分是排名)。</p><a id="more"></a><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注<code>select...from...where</code>这种读操作，分析query　(analytical query)。<br>数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p><p>架构 Schema:<br><img data-src="https://db.in.tum.de/teaching/ws1920/grundlagen/uni.png?lang=de" alt="schema_de"></p><p><img data-src="https://hyper-db.de/uniEngl.png" alt="schema_en"></p><p>下载:<br><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vdW5pX215c3FsLnNxbD9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de<i class="fa fa-external-link"></i></span></p><p>Schma和大部分SQL语句来自<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL2tlbXBlci8/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/kemper/?lang=de">Prof. Alfons Kemper, Ph.D.<i class="fa fa-external-link"></i></span>的课件和书。</p><p>课件：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></li></ul><p>书：　<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p><p><br><br><br></p><h1 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h1><h2 id="教授例子"><a href="#教授例子" class="headerlink" title="教授例子"></a>教授例子</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> Professors;</span><br><span class="line"></span><br><span class="line"> persnr |    name     | paygrade | room | salary | taxclass </span><br><span class="line"><span class="comment">--------+-------------+----------+------+--------+----------</span></span><br><span class="line">   2125 | Sokrates    | C4       |  226 |  85000 |        1</span><br><span class="line">   2126 | Russel      | C4       |  232 |  80000 |        3</span><br><span class="line">   2127 | Kopernikus  | C3       |  310 |  65000 |        5</span><br><span class="line">   2128 | Aristoteles | C4       |  250 |  85000 |        1</span><br><span class="line">   2133 | Popper      | C3       |   52 |  68000 |        1</span><br><span class="line">   2134 | Augustinus  | C3       |  309 |  55000 |        5</span><br><span class="line">   2136 | Curie       | C4       |   36 |  95000 |        3</span><br><span class="line">   2137 | Kant        | C4       |    7 |  98000 |        1</span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="根据salary排名"><a href="#根据salary排名" class="headerlink" title="根据salary排名:"></a>根据salary排名:</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, salary,</span><br><span class="line">       <span class="keyword">rank</span>() <span class="keyword">over</span> (</span><br><span class="line">           <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span></span><br><span class="line">       ) <span class="keyword">as</span> <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">FROM</span> Professors</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">rank</span> <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | salary | rank </span><br><span class="line"><span class="comment">--------+-------------+--------+------</span></span><br><span class="line">   2137 | Kant        |  98000 |    1</span><br><span class="line">   2136 | Curie       |  95000 |    2</span><br><span class="line">   2125 | Sokrates    |  85000 |    3</span><br><span class="line">   2128 | Aristoteles |  85000 |    3</span><br><span class="line">   2126 | Russel      |  80000 |    5</span><br><span class="line">   2133 | Popper      |  68000 |    6</span><br><span class="line">   2127 | Kopernikus  |  65000 |    7</span><br><span class="line">   2134 | Augustinus  |  55000 |    8</span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="在同一个pay-grade组中，根据salary排名"><a href="#在同一个pay-grade组中，根据salary排名" class="headerlink" title="在同一个pay grade组中，根据salary排名:"></a>在同一个pay grade组中，根据salary排名:</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, salary, paygrade,</span><br><span class="line">       <span class="keyword">rank</span>() <span class="keyword">over</span> (</span><br><span class="line">           <span class="keyword">partition</span> <span class="keyword">by</span> paygrade</span><br><span class="line">           <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span></span><br><span class="line">       ) <span class="keyword">as</span> <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">FROM</span> Professors</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> paygrade <span class="keyword">asc</span>, <span class="keyword">rank</span> <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | salary | paygrade | rank </span><br><span class="line">--------+-------------+--------+----------+------</span><br><span class="line">   2133 | Popper      |  68000 | C3       |    1</span><br><span class="line">   2127 | Kopernikus  |  65000 | C3       |    2</span><br><span class="line">   2134 | Augustinus  |  55000 | C3       |    3</span><br><span class="line">   2137 | Kant        |  98000 | C4       |    1</span><br><span class="line">   2136 | Curie       |  95000 | C4       |    2</span><br><span class="line">   2128 | Aristoteles |  85000 | C4       |    3</span><br><span class="line">   2125 | Sokrates    |  85000 | C4       |    3</span><br><span class="line">   2126 | Russel      |  80000 | C4       |    5</span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="在同一个pay-grade组中，计算salary-running-sum"><a href="#在同一个pay-grade组中，计算salary-running-sum" class="headerlink" title="在同一个pay grade组中，计算salary running sum:"></a>在同一个pay grade组中，计算salary running sum:</h3><p>在同一个pay grade组中，计算每一个professor的salary running sum(即salary小于该professor的其他professor的salary总和)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, paygrade, salary,</span><br><span class="line">       <span class="keyword">sum</span>(salary) <span class="keyword">OVER</span> (</span><br><span class="line">           <span class="keyword">PARTITION</span> <span class="keyword">BY</span> paygrade</span><br><span class="line">           <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span></span><br><span class="line">        )</span><br><span class="line"><span class="keyword">FROM</span> Professors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> paygrade <span class="keyword">ASC</span>, salary <span class="keyword">ASC</span>;</span><br></pre></td></tr></tbody></table></figure><p>或者加上一行<code>range</code>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, paygrade, salary,</span><br><span class="line">       <span class="keyword">sum</span>(salary) <span class="keyword">OVER</span> (</span><br><span class="line">           <span class="keyword">PARTITION</span> <span class="keyword">BY</span> paygrade</span><br><span class="line">           <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span></span><br><span class="line">           <span class="keyword">RANGE</span> <span class="keyword">BETWEEN</span> <span class="keyword">UNBOUNDED</span> <span class="keyword">PRECEDING</span> <span class="keyword">AND</span> <span class="keyword">CURRENT</span> <span class="keyword">ROW</span> <span class="comment">-- 这行是默认值</span></span><br><span class="line">        )</span><br><span class="line"><span class="keyword">FROM</span> Professors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> paygrade <span class="keyword">ASC</span>, salary <span class="keyword">ASC</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | paygrade | salary |  sum   </span><br><span class="line"><span class="comment">--------+-------------+----------+--------+--------</span></span><br><span class="line">   2134 | Augustinus  | C3       |  55000 |  55000</span><br><span class="line">   2127 | Kopernikus  | C3       |  65000 | 120000</span><br><span class="line">   2133 | Popper      | C3       |  68000 | 188000</span><br><span class="line">   2126 | Russel      | C4       |  80000 |  80000</span><br><span class="line">   2125 | Sokrates    | C4       |  85000 | 250000</span><br><span class="line">   2128 | Aristoteles | C4       |  85000 | 250000</span><br><span class="line">   2136 | Curie       | C4       |  95000 | 345000</span><br><span class="line">   2137 | Kant        | C4       |  98000 | 443000</span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="在同一个pay-grade组中，计算salary-running-average"><a href="#在同一个pay-grade组中，计算salary-running-average" class="headerlink" title="在同一个pay grade组中，计算salary running average:"></a>在同一个pay grade组中，计算salary running average:</h3><ul><li>在同一个pay grade组中，计算每一个professor的salary running average(即考虑两个上方的professor，再考虑两个下方的professor)</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, paygrade, salary,</span><br><span class="line">       <span class="keyword">avg</span>(salary) <span class="keyword">OVER</span> (</span><br><span class="line">           <span class="keyword">PARTITION</span> <span class="keyword">BY</span> paygrade</span><br><span class="line">           <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span></span><br><span class="line">           <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> <span class="number">2</span> <span class="keyword">PRECEDING</span> <span class="keyword">AND</span> <span class="number">2</span> <span class="keyword">FOLLOWING</span></span><br><span class="line">           )</span><br><span class="line"><span class="keyword">FROM</span> Professors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> paygrade <span class="keyword">ASC</span>, salary <span class="keyword">ASC</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | paygrade | salary |        avg         </span><br><span class="line"><span class="comment">--------+-------------+----------+--------+--------------------</span></span><br><span class="line">   2134 | Augustinus  | C3       |  55000 | 62666.666666666667</span><br><span class="line">   2127 | Kopernikus  | C3       |  65000 | 62666.666666666667</span><br><span class="line">   2133 | Popper      | C3       |  68000 | 62666.666666666667</span><br><span class="line">   2126 | Russel      | C4       |  80000 | 83333.333333333333</span><br><span class="line">   2125 | Sokrates    | C4       |  85000 | 86250.000000000000</span><br><span class="line">   2128 | Aristoteles | C4       |  85000 | 88600.000000000000</span><br><span class="line">   2136 | Curie       | C4       |  95000 | 90750.000000000000</span><br><span class="line">   2137 | Kant        | C4       |  98000 | 92666.666666666667</span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><ul><li>在pay grade组中，计算每一个professor的salary running average(即考虑比该professor的salary低5000,高5000区间中professor的salary的平均值)：</li></ul><p>PostgreSQL无法执行这一条，需使用HyPer网页接口：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, paygrade, salary,</span><br><span class="line">       <span class="keyword">avg</span>(salary) <span class="keyword">OVER</span> (</span><br><span class="line">           <span class="keyword">PARTITION</span> <span class="keyword">BY</span> paygrade</span><br><span class="line">           <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span></span><br><span class="line">           <span class="keyword">RANGE</span> <span class="keyword">BETWEEN</span> <span class="number">5000</span> <span class="keyword">PRECEDING</span> <span class="keyword">AND</span> <span class="number">5000</span> <span class="keyword">FOLLOWING</span></span><br><span class="line">           )</span><br><span class="line"><span class="keyword">FROM</span> Professors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> paygrade <span class="keyword">ASC</span>, salary <span class="keyword">ASC</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | paygrade | salary |        avg         </span><br><span class="line"><span class="comment">--------+-------------+----------+--------+--------------------</span></span><br><span class="line">   2134 | Augustinus  | C3       |  55000 | 55000.0000</span><br><span class="line">   2127 | Kopernikus  | C3       |  65000 | 66500.0000</span><br><span class="line">   2133 | Popper      | C3       |  68000 | 66500.0000</span><br><span class="line">   2126 | Russel      | C4       |  80000 | 83333.3333</span><br><span class="line">   2125 | Sokrates    | C4       |  85000 | 83333.3333</span><br><span class="line">   2128 | Aristoteles | C4       |  85000 | 83333.3333</span><br><span class="line">   2136 | Curie       | C4       |  95000 | 96500.0000</span><br><span class="line">   2137 | Kant        | C4       |  98000 | 96500.0000</span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="根据salary排名，给出前一名和后一名："><a href="#根据salary排名，给出前一名和后一名：" class="headerlink" title="根据salary排名，给出前一名和后一名："></a>根据salary排名，给出前一名和后一名：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, salary,</span><br><span class="line">       lag(<span class="keyword">name</span>) <span class="keyword">OVER</span> (</span><br><span class="line">           <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span></span><br><span class="line">           ),</span><br><span class="line">       <span class="keyword">lead</span>(<span class="keyword">name</span>) <span class="keyword">OVER</span> (</span><br><span class="line">           <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span></span><br><span class="line">           )</span><br><span class="line"><span class="keyword">FROM</span> Professors;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | salary |     lag     |    lead     </span><br><span class="line"><span class="comment">--------+-------------+--------+-------------+-------------</span></span><br><span class="line">   2137 | Kant        |  98000 |             | Curie</span><br><span class="line">   2136 | Curie       |  95000 | Kant        | Sokrates</span><br><span class="line">   2125 | Sokrates    |  85000 | Curie       | Aristoteles</span><br><span class="line">   2128 | Aristoteles |  85000 | Sokrates    | Russel</span><br><span class="line">   2126 | Russel      |  80000 | Aristoteles | Popper</span><br><span class="line">   2133 | Popper      |  68000 | Russel      | Kopernikus</span><br><span class="line">   2127 | Kopernikus  |  65000 | Popper      | Augustinus</span><br><span class="line">   2134 | Augustinus  |  55000 | Kopernikus  | </span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><ul><li>计算出salary的前三名：</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, salary, <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> *,</span><br><span class="line">           <span class="keyword">rank</span>() <span class="keyword">OVER</span> (</span><br><span class="line">               <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">desc</span></span><br><span class="line">               ) <span class="keyword">as</span> <span class="keyword">rank</span></span><br><span class="line">    <span class="keyword">FROM</span> Professors</span><br><span class="line">) <span class="keyword">as</span> temp</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">rank</span> &lt; <span class="number">4</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">), temp <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> *,</span><br><span class="line">           <span class="keyword">rank</span>() <span class="keyword">OVER</span> (</span><br><span class="line">               <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">desc</span></span><br><span class="line">               ) <span class="keyword">as</span> <span class="keyword">rank</span></span><br><span class="line">    <span class="keyword">FROM</span> Professors</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, salary, <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">FROM</span> temp</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">rank</span> &lt; <span class="number">4</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | salary | rank </span><br><span class="line"><span class="comment">--------+-------------+--------+------</span></span><br><span class="line">   2137 | Kant        |  98000 |    1</span><br><span class="line">   2136 | Curie       |  95000 |    2</span><br><span class="line">   2125 | Sokrates    |  85000 |    3</span><br><span class="line">   2128 | Aristoteles |  85000 |    3</span><br><span class="line">(4 rows)</span><br></pre></td></tr></tbody></table></figure><p>不使用窗口函数的版本：<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, salary</span><br><span class="line"><span class="keyword">FROM</span> Professors p</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">3</span> &gt; (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">count</span>(*)</span><br><span class="line">    <span class="keyword">FROM</span> Professors c</span><br><span class="line">    <span class="keyword">WHERE</span> p.salary &lt; c.salary</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | salary </span><br><span class="line"><span class="comment">--------+-------------+--------</span></span><br><span class="line">   2125 | Sokrates    |  85000</span><br><span class="line">   2128 | Aristoteles |  85000</span><br><span class="line">   2136 | Curie       |  95000</span><br><span class="line">   2137 | Kant        |  98000</span><br><span class="line">(4 rows)</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>这里要提一下，下面这个版本不对，它无法照顾到并列的名次:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">values</span> (<span class="number">2125</span>,<span class="string">'Sokrates'</span>,<span class="string">'C4'</span>,<span class="number">226</span>,<span class="number">85000</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2126</span>,<span class="string">'Russel'</span>,<span class="string">'C4'</span>,<span class="number">232</span>,<span class="number">80000</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">2127</span>,<span class="string">'Kopernikus'</span>,<span class="string">'C3'</span>,<span class="number">310</span>,<span class="number">65000</span>,<span class="number">5</span>),</span><br><span class="line">(<span class="number">2128</span>,<span class="string">'Aristoteles'</span>,<span class="string">'C4'</span>,<span class="number">250</span>,<span class="number">85000</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2133</span>,<span class="string">'Popper'</span>,<span class="string">'C3'</span>,<span class="number">52</span>,<span class="number">68000</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2134</span>,<span class="string">'Augustinus'</span>,<span class="string">'C3'</span>,<span class="number">309</span>,<span class="number">55000</span>,<span class="number">5</span>),</span><br><span class="line">(<span class="number">2136</span>,<span class="string">'Curie'</span>,<span class="string">'C4'</span>,<span class="number">36</span>,<span class="number">95000</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">2137</span>,<span class="string">'Kant'</span>,<span class="string">'C4'</span>,<span class="number">7</span>,<span class="number">98000</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> persnr, <span class="keyword">name</span>, salary</span><br><span class="line"><span class="keyword">from</span> Professors</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | salary </span><br><span class="line"><span class="comment">--------+-------------+--------</span></span><br><span class="line">   2137 | Kant        |  98000</span><br><span class="line">   2136 | Curie       |  95000</span><br><span class="line">   2128 | Aristoteles |  85000</span><br><span class="line">(3 rows)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前三篇文章中我们基本上认识了window function。这次我们有具体的数据集去进行大量练习(绝大部分是排名)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-窗口函数(3)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/04/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-3/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/04/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-3/</id>
    <published>2020-04-04T15:12:47.000Z</published>
    <updated>2020-04-04T15:13:47.357Z</updated>
    
    <content type="html"><![CDATA[<p>在前两篇文章中我们基本上认识了window function。这次我们有具体的数据集去进行大量练习(绝大部分是排名)。</p><a id="more"></a><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注<code>select...from...where</code>这种读操作，分析query　(analytical query)。<br>数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p><p>架构 Schema:<br><img data-src="https://db.in.tum.de/teaching/ws1920/grundlagen/uni.png?lang=de" alt="schema_de"></p><p><img data-src="https://hyper-db.de/uniEngl.png" alt="schema_en"></p><p>下载:<br><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vdW5pX215c3FsLnNxbD9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de<i class="fa fa-external-link"></i></span></p><p>Schma和大部分SQL语句来自<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL2tlbXBlci8/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/kemper/?lang=de">Prof. Alfons Kemper, Ph.D.<i class="fa fa-external-link"></i></span>的课件和书。</p><p>课件：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></li></ul><p>书：　<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p><p><br><br><br></p><h1 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h1><h2 id="成绩例子"><a href="#成绩例子" class="headerlink" title="成绩例子"></a>成绩例子</h2><p>我们采用一个更大的表格，基于原数据集表格<code>pruefen</code>：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> examination (MatrNr, CourseNr, PersNr, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="number">29120</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.3</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> examination;</span><br><span class="line"></span><br><span class="line"> matrnr | coursenr | persnr | grade </span><br><span class="line"><span class="comment">--------+----------+--------+-------</span></span><br><span class="line">  28106 |     5001 |   2126 |   1.0</span><br><span class="line">  27550 |     4630 |   2137 |   2.0</span><br><span class="line">  29555 |        0 |      0 |   1.3</span><br><span class="line">  29120 |        0 |      0 |   3.0</span><br><span class="line">  25403 |     5041 |   2125 |   2.0</span><br><span class="line">  29555 |        0 |      0 |   2.0</span><br><span class="line">  29555 |        0 |      0 |   1.0</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="基于学生的平均成绩-确定同年级中的排名"><a href="#基于学生的平均成绩-确定同年级中的排名" class="headerlink" title="基于学生的平均成绩 确定同年级中的排名:"></a>基于学生的平均成绩 确定同年级中的排名:</h3><p>基于学生的平均成绩 确定同年级中的排名(和同一个学期的同学比较)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> examination (MatrNr, CourseNr, PersNr, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="number">29120</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.3</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">), grades (MatrNr, Semester, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.matrnr, semester, <span class="keyword">avg</span>(Grade) <span class="comment">-- 计算平均成绩</span></span><br><span class="line">    <span class="keyword">from</span> studenten s, examination p</span><br><span class="line">    <span class="keyword">where</span> s.matrnr = p.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, semester</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * , </span><br><span class="line">       <span class="keyword">rank</span> () <span class="keyword">over</span> (</span><br><span class="line">           <span class="keyword">partition</span> <span class="keyword">by</span> Semester <span class="comment">-- 和同一学期的同学比较</span></span><br><span class="line">           <span class="keyword">order</span> <span class="keyword">by</span> Grade <span class="keyword">asc</span>    <span class="comment">-- 数字小是高分　排名也靠前</span></span><br><span class="line">           ) <span class="keyword">as</span> Rang</span><br><span class="line"><span class="keyword">from</span> grades</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> semester, rang;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>不使用窗口函数的版本：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> examination (MatrNr, CourseNr, PersNr, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="number">29120</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.3</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">), grades (MatrNr, Semester, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.matrnr, semester, <span class="keyword">avg</span>(Grade) <span class="comment">-- 计算平均成绩</span></span><br><span class="line">    <span class="keyword">from</span> studenten s, examination p</span><br><span class="line">    <span class="keyword">where</span> s.matrnr = p.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, semester</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * ,</span><br><span class="line">       (<span class="keyword">select</span> <span class="keyword">count</span>(*) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">from</span> Grades x</span><br><span class="line">        <span class="keyword">where</span> x.Semester = n.Semester <span class="keyword">and</span> x.Grade &lt; n.Grade) <span class="keyword">as</span> Rang</span><br><span class="line"><span class="keyword">from</span> grades n</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> semester, rang;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> matrnr | semester |         grade          | rang </span><br><span class="line"><span class="comment">--------+----------+------------------------+------</span></span><br><span class="line">  29555 |        2 |     1.4333333333333333 |    1</span><br><span class="line">  29120 |        2 |     3.0000000000000000 |    2</span><br><span class="line">  28106 |        3 | 1.00000000000000000000 |    1</span><br><span class="line">  27550 |        6 |     2.0000000000000000 |    1</span><br><span class="line">  25403 |       12 |     2.0000000000000000 |    1</span><br><span class="line">(5 rows)</span><br></pre></td></tr></tbody></table></figure><p><br></p><h3 id="在上一步的基础上，增加离平均成绩的差距"><a href="#在上一步的基础上，增加离平均成绩的差距" class="headerlink" title="在上一步的基础上，增加离平均成绩的差距:"></a>在上一步的基础上，增加离平均成绩的差距:</h3><p>在上一步的基础上，增加每个同学离平均成绩的差距，和同年级平均成绩的差距(和同一个学期的同学比较)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> examination (MatrNr, CourseNr, PersNr, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="number">29120</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.3</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">), grades (MatrNr, Semester, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.matrnr, semester, <span class="keyword">avg</span>(Grade) <span class="comment">-- 计算平均成绩</span></span><br><span class="line">    <span class="keyword">from</span> studenten s, examination p</span><br><span class="line">    <span class="keyword">where</span> s.matrnr = p.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, semester</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * ,</span><br><span class="line">       <span class="keyword">rank</span> () <span class="keyword">over</span> (</span><br><span class="line">           <span class="keyword">partition</span> <span class="keyword">by</span> Semester <span class="comment">-- 和同一学期的同学比较</span></span><br><span class="line">           <span class="keyword">order</span> <span class="keyword">by</span> Grade <span class="keyword">asc</span>    <span class="comment">-- 数字小是高分　排名也靠前</span></span><br><span class="line">           ) <span class="keyword">as</span> Rang,</span><br><span class="line">       <span class="keyword">avg</span> (Grade) <span class="keyword">over</span> (</span><br><span class="line">           <span class="keyword">partition</span> <span class="keyword">by</span> Semester  <span class="comment">-- 和同一学期的同学比较</span></span><br><span class="line">       ) <span class="keyword">as</span> GPA ,                 <span class="comment">-- 同年级的平均成绩</span></span><br><span class="line">       <span class="keyword">avg</span> (Grade) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> Semester) - Grade <span class="keyword">as</span> <span class="keyword">difference</span></span><br><span class="line"><span class="keyword">from</span> grades</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> semester, rang;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>不使用窗口函数的版本：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> examination (MatrNr, CourseNr, PersNr, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="number">29120</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.3</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">), grades (MatrNr, Semester, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.matrnr, semester, <span class="keyword">avg</span>(Grade) <span class="comment">-- 计算平均成绩</span></span><br><span class="line">    <span class="keyword">from</span> studenten s, examination p</span><br><span class="line">    <span class="keyword">where</span> s.matrnr = p.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, semester</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * ,</span><br><span class="line">       (<span class="keyword">select</span> <span class="keyword">count</span>(*) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">from</span> Grades x</span><br><span class="line">        <span class="keyword">where</span> x.Semester = n.Semester <span class="keyword">and</span> x.Grade &lt; n.Grade) <span class="keyword">as</span> Rang,</span><br><span class="line">       (<span class="keyword">select</span> <span class="keyword">avg</span>(x.Grade)</span><br><span class="line">       <span class="keyword">from</span> Grades x</span><br><span class="line">       <span class="keyword">where</span> x.Semester = n.Semester) <span class="keyword">as</span> GPA,</span><br><span class="line">       (<span class="keyword">select</span> <span class="keyword">avg</span>(x.Grade)</span><br><span class="line">       <span class="keyword">from</span> Grades x</span><br><span class="line">       <span class="keyword">where</span> x.Semester = n.Semester) - Grade <span class="keyword">as</span> <span class="keyword">difference</span></span><br><span class="line"><span class="keyword">from</span> grades n</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> semester, rang;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> matrnr | semester |         grade          | rang |          gpa           |       difference       </span><br><span class="line"><span class="comment">--------+----------+------------------------+------+------------------------+------------------------</span></span><br><span class="line">  29555 |        2 |     1.4333333333333333 |    1 |     2.2166666666666667 |     0.7833333333333334</span><br><span class="line">  29120 |        2 |     3.0000000000000000 |    2 |     2.2166666666666667 |    -0.7833333333333333</span><br><span class="line">  28106 |        3 | 1.00000000000000000000 |    1 | 1.00000000000000000000 | 0.00000000000000000000</span><br><span class="line">  27550 |        6 |     2.0000000000000000 |    1 |     2.0000000000000000 |     0.0000000000000000</span><br><span class="line">  25403 |       12 |     2.0000000000000000 |    1 |     2.0000000000000000 |     0.0000000000000000</span><br><span class="line">(5 rows)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前两篇文章中我们基本上认识了window function。这次我们有具体的数据集去进行大量练习(绝大部分是排名)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-窗口函数(2)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/02/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-2/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/02/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-2/</id>
    <published>2020-04-02T13:04:31.000Z</published>
    <updated>2020-04-02T13:06:21.074Z</updated>
    
    <content type="html"><![CDATA[<p>我们在<a href="https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part2/">[CMU-15445]Lec02_part2 Advanced SQL - 高级 SQL</a>中非常初步了了解了window function窗口函数。它是在OLAP中非常高效的一种函数，在工业业务中非常常见。另外我在Leetcode中的SQL部分也发现很多题目可以适用window function。CMU课实际上有一些简略。我会使用TUM的<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvP2xhbmc9ZW4=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/?lang=en">Foundations in Data Engineering<i class="fa fa-external-link"></i></span>课件来重点学习练习这块内容。</p><p>我们这次练习 使用frame的window function</p><a id="more"></a><h1 id="使用frame的window-functions"><a href="#使用frame的window-functions" class="headerlink" title="使用frame的window functions"></a>使用frame的window functions</h1><p><img data-src="https://cakebytheoceanluo.github.io/images/FDE/chap3/30.jpg" alt="30.jpg"></p><h2 id="rows"><a href="#rows" class="headerlink" title="rows"></a><code>rows</code></h2><h3 id="上一行～下一行"><a href="#上一行～下一行" class="headerlink" title="上一行～下一行"></a>上一行～下一行</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(x) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">following</span>)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  | sum </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 |  20</span><br><span class="line"> 10 |  34</span><br><span class="line"> 14 |  41</span><br><span class="line"> 17 |  48</span><br><span class="line"> 17 |  52</span><br><span class="line"> 18 |  55</span><br><span class="line"> 20 |  38</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="上一行～最后一行"><a href="#上一行～最后一行" class="headerlink" title="上一行～最后一行"></a>上一行～最后一行</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(x) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">unbounded</span> <span class="keyword">following</span>)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  | sum </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 | 106</span><br><span class="line"> 10 | 106</span><br><span class="line"> 14 |  96</span><br><span class="line"> 17 |  86</span><br><span class="line"> 17 |  72</span><br><span class="line"> 18 |  55</span><br><span class="line"> 20 |  38</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><h2 id="range"><a href="#range" class="headerlink" title="range"></a><code>range</code></h2><p>PostgreSQL不能处理下面的SQL，但是HyPer可以。</p><h3 id="forall-x-x-x-1"><a href="#forall-x-x-x-1" class="headerlink" title="$\forall x: [x, x+1]$"></a>$\forall x: [x, x+1]$</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(x) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x <span class="keyword">range</span> <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">following</span>)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  | sum </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 | 20</span><br><span class="line"> 10 | 20</span><br><span class="line"> 14 | 14</span><br><span class="line"> 17 | 52</span><br><span class="line"> 17 | 52</span><br><span class="line"> 18 | 18</span><br><span class="line"> 20 | 20</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="forall-x-x-x-2"><a href="#forall-x-x-x-2" class="headerlink" title="$\forall x: [x, x+2]$"></a>$\forall x: [x, x+2]$</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(x) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x <span class="keyword">range</span> <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">following</span>)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  | sum </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 | 20</span><br><span class="line"> 10 | 20</span><br><span class="line"> 14 | 14</span><br><span class="line"> 17 | 52</span><br><span class="line"> 17 | 52</span><br><span class="line"> 18 | 38</span><br><span class="line"> 20 | 20</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><p>相比较上面两个例子， 结果中从<code>18 | 18</code>变成<code>18 | 38</code>，因为<code>18</code>这个tupel可以涉及的值域范围从$[18, 19]$变成$[18, 20]$</p><h3 id="forall-x-mathrm-unbounded-x"><a href="#forall-x-mathrm-unbounded-x" class="headerlink" title="$\forall x: [\mathrm{unbounded}, x]$"></a>$\forall x: [\mathrm{unbounded}, x]$</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(x) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x <span class="keyword">range</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">following</span>)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(x) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  | sum </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 |  20</span><br><span class="line"> 10 |  20</span><br><span class="line"> 14 |  34</span><br><span class="line"> 17 |  68</span><br><span class="line"> 17 |  68</span><br><span class="line"> 18 |  86</span><br><span class="line"> 20 | 106</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="forall-x-y-1-y-1"><a href="#forall-x-y-1-y-1" class="headerlink" title="$\forall x: [y-1, y+1]$"></a>$\forall x: [y-1, y+1]$</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x, y) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                       (<span class="number">10</span>, <span class="number">1</span>),</span><br><span class="line">                       (<span class="number">10</span>, <span class="number">10</span>),</span><br><span class="line">                       (<span class="number">14</span>, <span class="number">2</span>),</span><br><span class="line">                       (<span class="number">17</span>, <span class="number">3</span>),</span><br><span class="line">                       (<span class="number">17</span>, <span class="number">4</span>),</span><br><span class="line">                       (<span class="number">18</span>, <span class="number">15</span>),</span><br><span class="line">                       (<span class="number">20</span>, <span class="number">6</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(x) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> y <span class="keyword">range</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">following</span>)</span><br><span class="line"><span class="keyword">from</span> testdata</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> y;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  | sum </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 | 10</span><br><span class="line"> 14 | 24</span><br><span class="line"> 17 | 41</span><br><span class="line"> 17 | 58</span><br><span class="line"> 20 | 78</span><br><span class="line"> 10 | 88</span><br><span class="line"> 18 | 106</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x, y) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                       (<span class="number">10</span>, <span class="number">1</span>),</span><br><span class="line">                       (<span class="number">10</span>, <span class="number">10</span>),</span><br><span class="line">                       (<span class="number">14</span>, <span class="number">2</span>),</span><br><span class="line">                       (<span class="number">17</span>, <span class="number">3</span>),</span><br><span class="line">                       (<span class="number">17</span>, <span class="number">4</span>),</span><br><span class="line">                       (<span class="number">18</span>, <span class="number">15</span>),</span><br><span class="line">                       (<span class="number">20</span>, <span class="number">6</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(x) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> y)</span><br><span class="line"><span class="keyword">from</span> testdata</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> y;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  | sum </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 |  10</span><br><span class="line"> 14 |  24</span><br><span class="line"> 17 |  41</span><br><span class="line"> 17 |  58</span><br><span class="line"> 20 |  78</span><br><span class="line"> 10 |  88</span><br><span class="line"> 18 | 106</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><hr><p>引用: </p><p>课件: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvY2hhcHRlcjMucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part2/&quot;&gt;[CMU-15445]Lec02_part2 Advanced SQL - 高级 SQL&lt;/a&gt;中非常初步了了解了window function窗口函数。它是在OLAP中非常高效的一种函数，在工业业务中非常常见。另外我在Leetcode中的SQL部分也发现很多题目可以适用window function。CMU课实际上有一些简略。我会使用TUM的&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvP2xhbmc9ZW4=&quot; title=&quot;https://db.in.tum.de/teaching/ws1920/foundationsde/?lang=en&quot;&gt;Foundations in Data Engineering&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;课件来重点学习练习这块内容。&lt;/p&gt;
&lt;p&gt;我们这次练习 使用frame的window function&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="TUM-IN2326" scheme="https://cakebytheoceanluo.github.io/categories/TUM-IN2326/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-窗口函数(1)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/01/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-1/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/01/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-1/</id>
    <published>2020-04-01T14:55:49.000Z</published>
    <updated>2020-04-02T13:05:39.306Z</updated>
    
    <content type="html"><![CDATA[<p>我们在<a href="https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part2/">[CMU-15445]Lec02_part2 Advanced SQL - 高级 SQL</a>中非常初步了了解了window function窗口函数。它是在OLAP中非常高效的一种函数，在工业业务中非常常见。另外我在Leetcode中的SQL部分也发现很多题目可以适用window function。CMU课实际上有一些简略。我会使用TUM的<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvP2xhbmc9ZW4=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/?lang=en">Foundations in Data Engineering<i class="fa fa-external-link"></i></span>课件来重点学习练习这块内容。</p><p>我们这次练习 不使用frame的window function</p><a id="more"></a><h1 id="不使用frame的window-functions"><a href="#不使用frame的window-functions" class="headerlink" title="不使用frame的window functions"></a>不使用frame的window functions</h1><p><img data-src="https://cakebytheoceanluo.github.io/images/FDE/chap3/27.jpg" alt="27.jpg"></p><h2 id="ranking-排序"><a href="#ranking-排序" class="headerlink" title="ranking 排序"></a>ranking 排序</h2><h3 id="rank"><a href="#rank" class="headerlink" title="rank()"></a>rank()</h3><p>并列会占用后面的排名数字。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  | rank </span><br><span class="line"><span class="comment">----+------</span></span><br><span class="line"> 10 |    1</span><br><span class="line"> 10 |    1</span><br><span class="line"> 14 |    3</span><br><span class="line"> 17 |    4</span><br><span class="line"> 17 |    4</span><br><span class="line"> 18 |    6</span><br><span class="line"> 20 |    7</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="dense-rank"><a href="#dense-rank" class="headerlink" title="dense_rank()"></a>dense_rank()</h3><p>并列不会占用后面的排名数字。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  | dense_rank </span><br><span class="line"><span class="comment">----+------------</span></span><br><span class="line"> 10 |          1</span><br><span class="line"> 10 |          1</span><br><span class="line"> 14 |          2</span><br><span class="line"> 17 |          3</span><br><span class="line"> 17 |          3</span><br><span class="line"> 18 |          4</span><br><span class="line"> 20 |          5</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="row-number"><a href="#row-number" class="headerlink" title="row_number()"></a>row_number()</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, row_number() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  | row_number </span><br><span class="line"><span class="comment">----+------------</span></span><br><span class="line"> 10 |          1</span><br><span class="line"> 10 |          2</span><br><span class="line"> 14 |          3</span><br><span class="line"> 17 |          4</span><br><span class="line"> 17 |          5</span><br><span class="line"> 18 |          6</span><br><span class="line"> 20 |          7</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="ntile-INT"><a href="#ntile-INT" class="headerlink" title="ntile(INT)"></a>ntile(INT)</h3><p>把表格均分为<code>INT</code>份</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, ntile(<span class="number">2</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  | ntile </span><br><span class="line"><span class="comment">----+-------</span></span><br><span class="line"> 10 |     1</span><br><span class="line"> 10 |     1</span><br><span class="line"> 14 |     1</span><br><span class="line"> 17 |     1</span><br><span class="line"> 17 |     2</span><br><span class="line"> 18 |     2</span><br><span class="line"> 20 |     2</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><p><br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, ntile(<span class="number">3</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  | ntile </span><br><span class="line"><span class="comment">----+-------</span></span><br><span class="line"> 10 |     1</span><br><span class="line"> 10 |     1</span><br><span class="line"> 14 |     1</span><br><span class="line"> 17 |     2</span><br><span class="line"> 17 |     2</span><br><span class="line"> 18 |     3</span><br><span class="line"> 20 |     3</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><h2 id="distribution-分布"><a href="#distribution-分布" class="headerlink" title="distribution 分布"></a>distribution 分布</h2><h3 id="percent-rank"><a href="#percent-rank" class="headerlink" title="percent_rank()"></a>percent_rank()</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">percent_rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  |   percent_rank    </span><br><span class="line"><span class="comment">----+-------------------</span></span><br><span class="line"> 10 |                 0</span><br><span class="line"> 10 |                 0</span><br><span class="line"> 14 | 0.333333333333333</span><br><span class="line"> 17 |               0.5</span><br><span class="line"> 17 |               0.5</span><br><span class="line"> 18 | 0.833333333333333</span><br><span class="line"> 20 |                 1</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="cume-dist"><a href="#cume-dist" class="headerlink" title="cume_dist()"></a>cume_dist()</h3><p>cumulative distribution function(cdf): 概率累加函数</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">cume_dist</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  |     cume_dist     </span><br><span class="line"><span class="comment">----+-------------------</span></span><br><span class="line"> 10 | 0.285714285714286</span><br><span class="line"> 10 | 0.285714285714286</span><br><span class="line"> 14 | 0.428571428571429</span><br><span class="line"> 17 | 0.714285714285714</span><br><span class="line"> 17 | 0.714285714285714</span><br><span class="line"> 18 | 0.857142857142857</span><br><span class="line"> 20 |                 1</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><h2 id="navigation-in-partition-在同一个分组中进行定位"><a href="#navigation-in-partition-在同一个分组中进行定位" class="headerlink" title="navigation in partition 在同一个分组中进行定位"></a>navigation in partition 在同一个分组中进行定位</h2><h3 id="lag-expr-offset-default"><a href="#lag-expr-offset-default" class="headerlink" title="lag(expr, offset, default)"></a>lag(expr, offset, default)</h3><p>可以得到同组前<code>offset</code>的tupel的数值：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, lag(x, <span class="number">1</span>, <span class="literal">NULL</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  | lag </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 |    </span><br><span class="line"> 10 |  10</span><br><span class="line"> 14 |  10</span><br><span class="line"> 17 |  14</span><br><span class="line"> 17 |  17</span><br><span class="line"> 18 |  17</span><br><span class="line"> 20 |  18</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><p>其中空着的那一格是<code>NULL</code>，是我们设置的default默认值。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, lag(<span class="number">2</span> * x, <span class="number">1</span>, <span class="literal">NULL</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  | lag </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 |    </span><br><span class="line"> 10 |  20</span><br><span class="line"> 14 |  20</span><br><span class="line"> 17 |  28</span><br><span class="line"> 17 |  34</span><br><span class="line"> 18 |  34</span><br><span class="line"> 20 |  36</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="lead-expr-offset-default"><a href="#lead-expr-offset-default" class="headerlink" title="lead(expr, offset, default)"></a>lead(expr, offset, default)</h3><p>可以得到同组前<code>offset</code>的tupel的数值：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">lead</span>(<span class="number">2</span> * x, <span class="number">2</span>, <span class="number">-1</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> x  | lead </span><br><span class="line"><span class="comment">----+------</span></span><br><span class="line"> 10 |   28</span><br><span class="line"> 10 |   34</span><br><span class="line"> 14 |   34</span><br><span class="line"> 17 |   36</span><br><span class="line"> 17 |   40</span><br><span class="line"> 18 |   -1</span><br><span class="line"> 20 |   -1</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><hr><p>引用: </p><p>课件: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvY2hhcHRlcjMucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part2/&quot;&gt;[CMU-15445]Lec02_part2 Advanced SQL - 高级 SQL&lt;/a&gt;中非常初步了了解了window function窗口函数。它是在OLAP中非常高效的一种函数，在工业业务中非常常见。另外我在Leetcode中的SQL部分也发现很多题目可以适用window function。CMU课实际上有一些简略。我会使用TUM的&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvP2xhbmc9ZW4=&quot; title=&quot;https://db.in.tum.de/teaching/ws1920/foundationsde/?lang=en&quot;&gt;Foundations in Data Engineering&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;课件来重点学习练习这块内容。&lt;/p&gt;
&lt;p&gt;我们这次练习 不使用frame的window function&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="TUM-IN2326" scheme="https://cakebytheoceanluo.github.io/categories/TUM-IN2326/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-递归(6)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/31/SQL-%E9%AB%98%E7%BA%A7SQL-%E9%80%92%E5%BD%92-6/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/31/SQL-%E9%AB%98%E7%BA%A7SQL-%E9%80%92%E5%BD%92-6/</id>
    <published>2020-03-31T20:57:49.000Z</published>
    <updated>2020-03-31T21:02:41.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Six-Degrees-of-Kevin-Bacon"><a href="#Six-Degrees-of-Kevin-Bacon" class="headerlink" title="Six Degrees of Kevin Bacon"></a>Six Degrees of Kevin Bacon</h1><p>具体描述见: <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2l4X0RlZ3JlZXNfb2ZfS2V2aW5fQmFjb24=" title="https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon">https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon<i class="fa fa-external-link"></i></span></p><p>Six Degrees of Kevin Bacon或”Bacon’s Law”是基于”six degrees of separation六度分离”，它假定地球上任何两个人相距六个或更少的熟人链接。 比如寻找任意演员和多产演员Kevin Bacon之间的最短路径。 它基于一个假设，即好莱坞电影界的任何人都可以通过其电影角色在六个步骤中将其与Kevin Bacon联系起来。这个概念也类似Fackbook提出的概念。当然在计算机或者算法角度，这是一个BFS广度优先的图问题。通过间接的6步可能会接触非常多人，产生非常大的数据。具体我们会在下面的练习中体验到。</p><p>这里再附上Kevin Bacon的一些链接:</p><ul><li>个人网站(他直接用了six degree这个概念): <span class="exturl" data-url="aHR0cHM6Ly93d3cuc2l4ZGVncmVlcy5vcmc=" title="https://www.sixdegrees.org">https://www.sixdegrees.org<i class="fa fa-external-link"></i></span></li><li>豆瓣主页: <span class="exturl" data-url="aHR0cHM6Ly9tb3ZpZS5kb3ViYW4uY29tL2NlbGVicml0eS8xMDA5MjYwLw==" title="https://movie.douban.com/celebrity/1009260/">https://movie.douban.com/celebrity/1009260/<i class="fa fa-external-link"></i></span></li></ul><a id="more"></a><h2 id="IMDb数据集"><a href="#IMDb数据集" class="headerlink" title="IMDb数据集"></a>IMDb数据集</h2><p>我们这次使用IMDb数据集，本地载入数据集的方式见我以前的一篇文章: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#IMDb-%E6%95%B0%E6%8D%AE%E9%9B%86">[DBMS]PostgreSQL导入数据集 - IMDb 数据集</a></p><p><br></p><p>我们打开psql的计时器:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">imdb=# \timing</span><br><span class="line">Timing is on.</span><br></pre></td></tr></tbody></table></figure><h2 id="调整buffer-pool和cache大小"><a href="#调整buffer-pool和cache大小" class="headerlink" title="调整buffer pool和cache大小"></a>调整buffer pool和cache大小</h2><p>我们用自己喜欢的文本编辑器去打开<code>/etc/postgresql/10/main/postgresql.conf</code>文件:</p><ul><li>注意我<code>postgresql</code>的版本是<code>10</code></li><li>具体的配置文件位置和<code>postgresql</code>安装位置和安装版本有关</li></ul><p>找到下面对应的<code>shared_buffers</code>建议更改数值为1024MB， <code>work_mem</code>建议更改为1024MB (我都改成比建议值大，这里大家按照自己机器的硬件配置来估计):</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># RESOURCE USAGE (except WAL)</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Memory -</span></span><br><span class="line"></span><br><span class="line">shared_buffers = 2048MB                 <span class="comment"># min 128kB</span></span><br><span class="line">                                        <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#huge_pages = try                       # on, off, or try</span></span><br><span class="line">                                        <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#temp_buffers = 8MB                     # min 800kB </span></span><br><span class="line"><span class="comment">#max_prepared_transactions = 0          # zero disables the feature</span></span><br><span class="line">                                        <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment"># Caution: it is not advisable to set max_prepared_transactions nonzero unless</span></span><br><span class="line"><span class="comment"># you actively intend to use prepared transactions.</span></span><br><span class="line">work_mem = 8196MB                               <span class="comment"># min 64kB  </span></span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure><p>更改好后保存，执行下面的指令，让psql重启来使配置生效:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service postgresql restart</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="求Bacon-Kevin演过的电影数量"><a href="#求Bacon-Kevin演过的电影数量" class="headerlink" title="求Bacon, Kevin演过的电影数量"></a>求<code>Bacon, Kevin</code>演过的电影数量</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> movie_name)</span><br><span class="line"><span class="keyword">from</span> playedin_text</span><br><span class="line"><span class="keyword">where</span> actor_name = <span class="string">'Bacon, Kevin'</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> count </span><br><span class="line"><span class="comment">-------</span></span><br><span class="line">   322</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 838.464 ms</span><br></pre></td></tr></tbody></table></figure><h2 id="找到Bacon-Number小于等于1的演员数量"><a href="#找到Bacon-Number小于等于1的演员数量" class="headerlink" title="找到Bacon Number小于等于1的演员数量"></a>找到Bacon Number小于等于1的演员数量</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> baconnr (<span class="keyword">id</span>, nr) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="string">'Bacon, Kevin'</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">select</span> p2.actor_name, baconnr.nr + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> baconnr, playedin_text p1, playedin_text p2</span><br><span class="line">    <span class="keyword">where</span> baconnr.id = p1.actor_name <span class="keyword">and</span> </span><br><span class="line">          p1.movie_name = p2.movie_name <span class="keyword">and</span> </span><br><span class="line">          baconnr.nr &lt; <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) </span><br><span class="line"><span class="keyword">from</span> baconnr;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> count </span><br><span class="line"><span class="comment">-------</span></span><br><span class="line"> 35893</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 5718.960 ms (00:05.719)</span><br></pre></td></tr></tbody></table></figure><h2 id="找到Bacon-Number小于等于2的演员数量-一次尝试"><a href="#找到Bacon-Number小于等于2的演员数量-一次尝试" class="headerlink" title="找到Bacon Number小于等于2的演员数量 - 一次尝试"></a>找到Bacon Number小于等于2的演员数量 - 一次尝试</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> baconnr (<span class="keyword">id</span>, nr) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="string">'Bacon, Kevin'</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">select</span> p2.actor_name, baconnr.nr + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> baconnr, playedin_text p1, playedin_text p2</span><br><span class="line">    <span class="keyword">where</span> baconnr.id = p1.actor_name <span class="keyword">and</span> </span><br><span class="line">          p1.movie_name = p2.movie_name <span class="keyword">and</span> </span><br><span class="line">          baconnr.nr &lt; <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) </span><br><span class="line"><span class="keyword">from</span> baconnr;</span><br></pre></td></tr></tbody></table></figure><p>很可惜这条SQL在我的电脑上十分钟内无法终止。本质上这属于一个广度搜索，我们可能会重复接触到很多人，这使这条SQL在短时间内不能终止。</p><h3 id="cardinality"><a href="#cardinality" class="headerlink" title="cardinality"></a>cardinality</h3><p>即Bacon Number等于1，但是存在重复</p><p>the size of intermediate results</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(p2.actor_name)</span><br><span class="line"><span class="keyword">from</span> playedin_text p1, playedin_text p2</span><br><span class="line"><span class="keyword">where</span> p1.actor_name = <span class="string">'Bacon, Kevin'</span> <span class="keyword">and</span> p1.movie_name = p2.movie_name;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  count  </span><br><span class="line"><span class="comment">---------</span></span><br><span class="line"> 1391638</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 11896.991 ms (00:11.897)</span><br></pre></td></tr></tbody></table></figure><h2 id="找到Bacon-Number小于等于2的演员数量-除去重复"><a href="#找到Bacon-Number小于等于2的演员数量-除去重复" class="headerlink" title="找到Bacon Number小于等于2的演员数量 - 除去重复"></a>找到Bacon Number小于等于2的演员数量 - 除去重复</h2><p>使用<code>union all</code>和<code>select distinct</code>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> baconnr (actor_name, nr) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="string">'Bacon, Kevin'</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> p2.actor_name, movies.nr + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> p1.movie_name, baconnr.nr</span><br><span class="line">          <span class="keyword">from</span> baconnr, playedin_text p1</span><br><span class="line">          <span class="keyword">where</span> baconnr.actor_name = p1.actor_name</span><br><span class="line">         ) movies,</span><br><span class="line">         playedin_text p2</span><br><span class="line">    <span class="keyword">where</span> movies.movie_name = p2.movie_name <span class="keyword">and</span> movies.nr &lt; <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> actor_name)</span><br><span class="line"><span class="keyword">from</span> baconnr;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  count  </span><br><span class="line"><span class="comment">---------</span></span><br><span class="line"> 1046450</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 27453.873 ms (00:27.454)</span><br></pre></td></tr></tbody></table></figure><h2 id="找到Bacon-Number小于等于2的演员数量-除去重复-1"><a href="#找到Bacon-Number小于等于2的演员数量-除去重复-1" class="headerlink" title="找到Bacon Number小于等于2的演员数量 - 除去重复"></a>找到Bacon Number小于等于2的演员数量 - 除去重复</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> baconnr (actor_name, nr) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="string">'Bacon, Kevin'</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> p2.actor_name, movies.nr + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> p1.movie_name, baconnr.nr</span><br><span class="line">          <span class="keyword">from</span> baconnr, playedin_text p1</span><br><span class="line">          <span class="keyword">where</span> baconnr.actor_name = p1.actor_name</span><br><span class="line">         ) movies,</span><br><span class="line">         playedin_text p2</span><br><span class="line">    <span class="keyword">where</span> movies.movie_name = p2.movie_name <span class="keyword">and</span> movies.nr &lt; <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> actor_name)</span><br><span class="line"><span class="keyword">from</span> baconnr;</span><br></pre></td></tr></tbody></table></figure><p><br><br><br><br><br></p><h2 id="string-to-int"><a href="#string-to-int" class="headerlink" title="string to int"></a>string to int</h2><p>对string的操作是相对昂贵的，但是对int的操作是相对廉价的。我们新建对应的几个新的表格，使用int, 这样也可以降低表格的大小。</p><ul><li>table actors (id::integer, name::text)</li><li>table movies (id::integer, name::text)</li><li>table playedin (actor::integer, movies::integer)</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> movies (<span class="keyword">id</span> <span class="built_in">serial</span> primary <span class="keyword">key</span>, <span class="keyword">name</span> <span class="built_in">text</span> <span class="keyword">not</span> <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> actors (<span class="keyword">id</span> <span class="built_in">serial</span> primary <span class="keyword">key</span>, <span class="keyword">name</span> <span class="built_in">text</span> <span class="keyword">not</span> <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> playedin (</span><br><span class="line">    movie <span class="built_in">integer</span> <span class="keyword">references</span> movies (<span class="keyword">id</span>),</span><br><span class="line">    actor <span class="built_in">integer</span> <span class="keyword">references</span> actors (<span class="keyword">id</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> actors (<span class="keyword">name</span>) <span class="keyword">select</span> <span class="keyword">distinct</span> actor_name <span class="keyword">from</span> playedin_text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> movies (<span class="keyword">name</span>) <span class="keyword">select</span> <span class="keyword">distinct</span> movie_name <span class="keyword">from</span> playedin_text;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- read from all</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> playedin (actor, movie)</span><br><span class="line"><span class="keyword">select</span> actors.id, movies.id</span><br><span class="line"><span class="keyword">from</span> actors, movies, playedin_text p</span><br><span class="line"><span class="keyword">where</span> p.actor_name = actors.name <span class="keyword">and</span> p.movie_name = movies.name;</span><br></pre></td></tr></tbody></table></figure><h2 id="找到Bacon-Number小于等于6的演员数量"><a href="#找到Bacon-Number小于等于6的演员数量" class="headerlink" title="找到Bacon Number小于等于6的演员数量"></a>找到Bacon Number小于等于6的演员数量</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> baconnr (<span class="keyword">id</span>, nr) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span> , <span class="number">0</span></span><br><span class="line">    <span class="keyword">from</span> actors</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'Bacon, Kevin'</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> p2.actor, movies.nr + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">    ( <span class="keyword">select</span> <span class="keyword">distinct</span> p1.movie, baconnr.nr</span><br><span class="line">    <span class="keyword">from</span> baconnr, playedin p1</span><br><span class="line">    <span class="keyword">where</span> baconnr.id = p1.actor) movies,</span><br><span class="line">    playedin p2</span><br><span class="line">    <span class="keyword">where</span> movies.movie = p2.movie <span class="keyword">and</span> movies.nr &lt; <span class="number">5</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span> (<span class="keyword">distinct</span> <span class="keyword">id</span>)</span><br><span class="line"><span class="keyword">from</span> baconnr;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  count  </span><br><span class="line"><span class="comment">---------</span></span><br><span class="line"> 1821293</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 175282.570 ms (02:55.283)</span><br></pre></td></tr></tbody></table></figure><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>数据集(以及现实世界)中甚至有Bacon Number为7的演员，这里我们就不再继续了。大家如果能实验一下，了解主旨就很好。</p><p><br><br><br><br><br></p><h1 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h1><h2 id="Optional-找到Bacon-Number小于等于6的演员数量-Query-Plan"><a href="#Optional-找到Bacon-Number小于等于6的演员数量-Query-Plan" class="headerlink" title="Optional: 找到Bacon Number小于等于6的演员数量 - Query Plan"></a>Optional: 找到Bacon Number小于等于6的演员数量 - Query Plan</h2><p>这部分是可选的，而不是必须的。这部分我附上了上一个SQL对应的Query Plan。</p><ul><li>我打开了多线程选项: <code>testdb=# set max_parallel_workers_per_gather = 4;</code>, 对应下面的Query Plan中的Workers。</li><li>我使用了绝对大的buffer pool去容纳所有的page, 因此下面Query Plan只有<code>shared hit</code>， 而没有<code>shared read</code></li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">imdb=# explain (analyze, buffers) with recursive baconnr (id, nr) as (</span><br><span class="line">    select id , <span class="number">0</span></span><br><span class="line">    from actors</span><br><span class="line">    where name = 'Bacon, Kevin'</span><br><span class="line">    <span class="keyword">union</span> all</span><br><span class="line">    select distinct p2.actor, movies.nr + <span class="number">1</span></span><br><span class="line">    from</span><br><span class="line">    ( select distinct p1.movie, baconnr.nr</span><br><span class="line">    from baconnr, playedin p1</span><br><span class="line">    where baconnr.id = p1.actor) movies,</span><br><span class="line">    playedin p2</span><br><span class="line">    where movies.movie = p2.movie <span class="keyword">and</span> movies.nr &lt; <span class="number">5</span></span><br><span class="line">)</span><br><span class="line">select count (distinct id)</span><br><span class="line">from baconnr;</span><br><span class="line">                                                                                QUERY PLAN                                                                                </span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">3243681.47</span>.<span class="number">.3243681</span><span class="number">.48</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">181539.730</span>.<span class="number">.181539</span><span class="number">.730</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">   Buffers: shared hit=<span class="number">72933155</span></span><br><span class="line">   CTE baconnr</span><br><span class="line">     -&gt;  Recursive Union  (cost=<span class="number">1000.00</span>.<span class="number">.3196845</span><span class="number">.00</span> rows=<span class="number">2081621</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">1.375</span>.<span class="number">.178161</span><span class="number">.180</span> rows=<span class="number">6480755</span> loops=<span class="number">1</span>)</span><br><span class="line">           Buffers: shared hit=<span class="number">72933155</span></span><br><span class="line">           -&gt;  Gather  (cost=<span class="number">1000.00</span>.<span class="number">.23770</span><span class="number">.35</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">1.366</span>.<span class="number">.65</span><span class="number">.451</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">                 Workers Planned: <span class="number">2</span></span><br><span class="line">                 Workers Launched: <span class="number">2</span></span><br><span class="line">                 Buffers: shared hit=<span class="number">12501</span></span><br><span class="line">                 -&gt;  Parallel Seq Scan on actors  (cost=<span class="number">0.00</span>.<span class="number">.22770</span><span class="number">.25</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">40.406</span>.<span class="number">.61</span><span class="number">.732</span> rows=<span class="number">0</span> loops=<span class="number">3</span>)</span><br><span class="line">                       Filter: (name = 'Bacon, Kevin'::text)</span><br><span class="line">                       Rows Removed by Filter: <span class="number">657232</span></span><br><span class="line">                       Buffers: shared hit=<span class="number">12501</span></span><br><span class="line">           -&gt;  HashAggregate  (cost=<span class="number">310542.20</span>.<span class="number">.313144</span><span class="number">.22</span> rows=<span class="number">208162</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">29230.371</span>.<span class="number">.29512</span><span class="number">.804</span> rows=<span class="number">1080126</span> loops=<span class="number">6</span>)</span><br><span class="line">                 Group Key: p2.actor, (baconnr_1.nr + <span class="number">1</span>)</span><br><span class="line">                 Buffers: shared hit=<span class="number">72920654</span></span><br><span class="line">                 -&gt;  Nested Loop  (cost=<span class="number">2384.03</span>.<span class="number">.309501</span><span class="number">.39</span> rows=<span class="number">208162</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">13040.311</span>.<span class="number">.25542</span><span class="number">.265</span> rows=<span class="number">10389484</span> loops=<span class="number">6</span>)</span><br><span class="line">                       Buffers: shared hit=<span class="number">72920654</span></span><br><span class="line">                       -&gt;  HashAggregate  (cost=<span class="number">2376.97</span>.<span class="number">.2383</span><span class="number">.06</span> rows=<span class="number">609</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">13039.878</span>.<span class="number">.13290</span><span class="number">.218</span> rows=<span class="number">570802</span> loops=<span class="number">6</span>)</span><br><span class="line">                             Group Key: p1.movie, baconnr_1.nr</span><br><span class="line">                             Buffers: shared hit=<span class="number">30919755</span></span><br><span class="line">                             -&gt;  Nested Loop  (cost=<span class="number">6.01</span>.<span class="number">.2373</span><span class="number">.92</span> rows=<span class="number">609</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">16.277</span>.<span class="number">.9987</span><span class="number">.675</span> rows=<span class="number">8778940</span> loops=<span class="number">6</span>)</span><br><span class="line">                                   Buffers: shared hit=<span class="number">30919755</span></span><br><span class="line">                                   -&gt;  WorkTable Scan on baconnr baconnr_1  (cost=<span class="number">0.00</span>.<span class="number">.0</span><span class="number">.22</span> rows=<span class="number">3</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">16.246</span>.<span class="number">.173</span><span class="number">.118</span> rows=<span class="number">776577</span> loops=<span class="number">6</span>)</span><br><span class="line">                                         Filter: (nr &lt; <span class="number">5</span>)</span><br><span class="line">                                         Rows Removed by Filter: <span class="number">303549</span></span><br><span class="line">                                   -&gt;  Bitmap Heap Scan on playedin p1  (cost=<span class="number">6.01</span>.<span class="number">.789</span><span class="number">.20</span> rows=<span class="number">203</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">0.006</span>.<span class="number">.0</span><span class="number">.010</span> rows=<span class="number">11</span> loops=<span class="number">4659462</span>)</span><br><span class="line">                                         Recheck Cond: (actor = baconnr_1.id)</span><br><span class="line">                                         Heap Blocks: exact=<span class="number">16784601</span></span><br><span class="line">                                         Buffers: shared hit=<span class="number">30919755</span></span><br><span class="line">                                         -&gt;  Bitmap Index Scan on playedin_actor_idx  (cost=<span class="number">0.00</span>.<span class="number">.5</span><span class="number">.96</span> rows=<span class="number">203</span> <span class="built_in">width</span>=<span class="number">0</span>) (actual time=<span class="number">0.004</span>.<span class="number">.0</span><span class="number">.004</span> rows=<span class="number">11</span> loops=<span class="number">4659462</span>)</span><br><span class="line">                                               Index Cond: (actor = baconnr_1.id)</span><br><span class="line">                                               Buffers: shared hit=<span class="number">14135154</span></span><br><span class="line">                       -&gt;  Bitmap Heap Scan on playedin p2  (cost=<span class="number">7.07</span>.<span class="number">.500</span><span class="number">.01</span> rows=<span class="number">342</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">0.007</span>.<span class="number">.0</span><span class="number">.018</span> rows=<span class="number">18</span> loops=<span class="number">3424813</span>)</span><br><span class="line">                             Recheck Cond: (movie = p1.movie)</span><br><span class="line">                             Heap Blocks: exact=<span class="number">31546852</span></span><br><span class="line">                             Buffers: shared hit=<span class="number">42000899</span></span><br><span class="line">                             -&gt;  Bitmap Index Scan on playedin_movie_idx  (cost=<span class="number">0.00</span>.<span class="number">.6</span><span class="number">.98</span> rows=<span class="number">342</span> <span class="built_in">width</span>=<span class="number">0</span>) (actual time=<span class="number">0.005</span>.<span class="number">.0</span><span class="number">.005</span> rows=<span class="number">18</span> loops=<span class="number">3424813</span>)</span><br><span class="line">                                   Index Cond: (movie = p1.movie)</span><br><span class="line">                                   Buffers: shared hit=<span class="number">10454047</span></span><br><span class="line">   -&gt;  CTE Scan on baconnr  (cost=<span class="number">0.00</span>.<span class="number">.41632</span><span class="number">.42</span> rows=<span class="number">2081621</span> <span class="built_in">width</span>=<span class="number">4</span>) (actual time=<span class="number">1.379</span>.<span class="number">.179511</span><span class="number">.482</span> rows=<span class="number">6480755</span> loops=<span class="number">1</span>)</span><br><span class="line">         Buffers: shared hit=<span class="number">72933155</span></span><br><span class="line"> Planning time: <span class="number">0.260</span> ms</span><br><span class="line"> Execution time: <span class="number">181676.112</span> ms</span><br><span class="line">(<span class="number">44</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">181676.868</span> ms (<span class="number">03</span>:<span class="number">01.677</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="Optional-Buffer-Pool预加载"><a href="#Optional-Buffer-Pool预加载" class="headerlink" title="Optional: Buffer Pool预加载"></a>Optional: Buffer Pool预加载</h2><p>这部分是可选的，而不是必须的。这部分的具体解释见我的另一个实验 <a href="https://cakebytheoceanluo.github.io/2020/03/17/DBMS-PostgreSQL-%E7%BC%93%E5%AD%98%E5%8C%BA%E7%AE%A1%E7%90%86BufferPool/">[DBMS][PostgreSQL] 缓存区管理 BufferPool</a></p><p>我们可以通过如下的方式，在执行我们的SQL之前，将需要的page预加载进buffer pool:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">imdb=# CREATE EXTENSION pg_prewarm;</span><br><span class="line">CREATE EXTENSION</span><br><span class="line"></span><br><span class="line">imdb=# select * from pg_prewarm('actors');</span><br><span class="line"> pg_prewarm </span><br><span class="line">------------</span><br><span class="line">      <span class="number">12501</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">71.137</span> ms</span><br><span class="line">imdb=# select * from pg_prewarm('movies');</span><br><span class="line"> pg_prewarm </span><br><span class="line">------------</span><br><span class="line">       <span class="number">8396</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">88.954</span> ms</span><br><span class="line">imdb=# select * from pg_prewarm('playedin');</span><br><span class="line"> pg_prewarm </span><br><span class="line">------------</span><br><span class="line">      <span class="number">76623</span></span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Six-Degrees-of-Kevin-Bacon&quot;&gt;&lt;a href=&quot;#Six-Degrees-of-Kevin-Bacon&quot; class=&quot;headerlink&quot; title=&quot;Six Degrees of Kevin Bacon&quot;&gt;&lt;/a&gt;Six Degrees of Kevin Bacon&lt;/h1&gt;&lt;p&gt;具体描述见: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2l4X0RlZ3JlZXNfb2ZfS2V2aW5fQmFjb24=&quot; title=&quot;https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon&quot;&gt;https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Six Degrees of Kevin Bacon或”Bacon’s Law”是基于”six degrees of separation六度分离”，它假定地球上任何两个人相距六个或更少的熟人链接。 比如寻找任意演员和多产演员Kevin Bacon之间的最短路径。 它基于一个假设，即好莱坞电影界的任何人都可以通过其电影角色在六个步骤中将其与Kevin Bacon联系起来。这个概念也类似Fackbook提出的概念。当然在计算机或者算法角度，这是一个BFS广度优先的图问题。通过间接的6步可能会接触非常多人，产生非常大的数据。具体我们会在下面的练习中体验到。&lt;/p&gt;
&lt;p&gt;这里再附上Kevin Bacon的一些链接:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;个人网站(他直接用了six degree这个概念): &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuc2l4ZGVncmVlcy5vcmc=&quot; title=&quot;https://www.sixdegrees.org&quot;&gt;https://www.sixdegrees.org&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;豆瓣主页: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tb3ZpZS5kb3ViYW4uY29tL2NlbGVicml0eS8xMDA5MjYwLw==&quot; title=&quot;https://movie.douban.com/celebrity/1009260/&quot;&gt;https://movie.douban.com/celebrity/1009260/&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/categories/PostgreSQL/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Recursion" scheme="https://cakebytheoceanluo.github.io/tags/Recursion/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
      <category term="Six Degrees of Kevin Bacon" scheme="https://cakebytheoceanluo.github.io/tags/Six-Degrees-of-Kevin-Bacon/"/>
    
      <category term="BFS" scheme="https://cakebytheoceanluo.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-递归(5)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/30/SQL-%E9%AB%98%E7%BA%A7SQL-%E9%80%92%E5%BD%92-5/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/30/SQL-%E9%AB%98%E7%BA%A7SQL-%E9%80%92%E5%BD%92-5/</id>
    <published>2020-03-30T11:11:08.000Z</published>
    <updated>2020-04-01T15:02:12.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><p>在这篇文章高级 SQL 中我们会遇到递归查询图论的题目。我们使用的数据集(图)都在文章中的SQL中。</p><a id="more"></a><h2 id="无环图-树"><a href="#无环图-树" class="headerlink" title="无环图 / 树"></a>无环图 / 树</h2><p><img data-src="/images/FDE/chap3/21.jpg" alt="21.jpg"></p><h3 id="找父节点"><a href="#找父节点" class="headerlink" title="找父节点"></a>找父节点</h3><ul><li>搜索<code>turtle</code>的父节点(所有直接和间接父亲)：</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span></span><br><span class="line">     animals (<span class="keyword">id</span>, <span class="keyword">name</span>, <span class="keyword">parent</span>) <span class="keyword">as</span> (</span><br><span class="line">         <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">'animal'</span>, <span class="literal">null</span>), (<span class="number">2</span>, <span class="string">'mammal'</span>, <span class="number">1</span>),</span><br><span class="line">                (<span class="number">3</span>, <span class="string">'giraffe'</span>, <span class="number">2</span>), (<span class="number">4</span>, <span class="string">'tiger'</span>, <span class="number">2</span>),</span><br><span class="line">                (<span class="number">5</span>, <span class="string">'reptile'</span>, <span class="number">1</span>), (<span class="number">6</span>, <span class="string">'snake'</span>, <span class="number">5</span>),</span><br><span class="line">                (<span class="number">7</span>, <span class="string">'turtle'</span>, <span class="number">5</span>), (<span class="number">8</span>, <span class="string">'grean sea turtle'</span>, <span class="number">7</span>)),</span><br><span class="line">     r <span class="keyword">as</span> (</span><br><span class="line">         <span class="keyword">select</span> * </span><br><span class="line">         <span class="keyword">from</span> animals </span><br><span class="line">         <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'turtle'</span></span><br><span class="line">         <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">         <span class="keyword">select</span> animals.*</span><br><span class="line">         <span class="keyword">from</span> r, animals</span><br><span class="line">         <span class="keyword">where</span> animals.id = r.parent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> r;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> id |  name   | parent </span><br><span class="line">----+---------+--------</span><br><span class="line">  7 | turtle  |      5</span><br><span class="line">  5 | reptile |      1</span><br><span class="line">  1 | animal  |       </span><br><span class="line">(3 rows)</span><br></pre></td></tr></tbody></table></figure><p>&lt;/br&gt;</p><h3 id="找子节点"><a href="#找子节点" class="headerlink" title="找子节点"></a>找子节点</h3><ul><li>搜索<code>reptile</code>的子节点(所有直接和间接孩子)：</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span></span><br><span class="line">     animals (<span class="keyword">id</span>, <span class="keyword">name</span>, <span class="keyword">parent</span>) <span class="keyword">as</span> (</span><br><span class="line">         <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">'animal'</span>, <span class="literal">null</span>), (<span class="number">2</span>, <span class="string">'mammal'</span>, <span class="number">1</span>),</span><br><span class="line">                (<span class="number">3</span>, <span class="string">'giraffe'</span>, <span class="number">2</span>), (<span class="number">4</span>, <span class="string">'tiger'</span>, <span class="number">2</span>),</span><br><span class="line">                (<span class="number">5</span>, <span class="string">'reptile'</span>, <span class="number">1</span>), (<span class="number">6</span>, <span class="string">'snake'</span>, <span class="number">5</span>),</span><br><span class="line">                (<span class="number">7</span>, <span class="string">'turtle'</span>, <span class="number">5</span>), (<span class="number">8</span>, <span class="string">'grean sea turtle'</span>, <span class="number">7</span>)),</span><br><span class="line">     r <span class="keyword">as</span> (</span><br><span class="line">         <span class="keyword">select</span> *</span><br><span class="line">         <span class="keyword">from</span> animals</span><br><span class="line">         <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'reptile'</span></span><br><span class="line">         <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">         <span class="keyword">select</span> animals.* <span class="comment">-- get the descendants</span></span><br><span class="line">         <span class="keyword">from</span> r, animals</span><br><span class="line">         <span class="keyword">where</span> animals.parent = r.id <span class="comment">-- r is the parent of the new founded animal</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> r;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> id |       name       | parent </span><br><span class="line"><span class="comment">----+------------------+--------</span></span><br><span class="line">  5 | reptile          |      1</span><br><span class="line">  7 | turtle           |      5</span><br><span class="line">  6 | snake            |      5</span><br><span class="line">  8 | grean sea turtle |      7</span><br><span class="line">(4 rows)</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="带环图"><a href="#带环图" class="headerlink" title="带环图"></a>带环图</h2><p><img data-src="/images/FDE/chap3/24.jpg" alt="24.jpg"></p><ul><li>搜索<code>Alice</code>的所有朋友(即从<code>Alice</code>能到达的节点):</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span></span><br><span class="line">     friends (a, b) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="string">'Alice'</span>, <span class="string">'Bob'</span>), (<span class="string">'Alice'</span>, <span class="string">'Carol'</span>),</span><br><span class="line">           (<span class="string">'Carol'</span>, <span class="string">'Grace'</span>), (<span class="string">'Carol'</span>, <span class="string">'Chuck'</span>),</span><br><span class="line">           (<span class="string">'Chuck'</span>, <span class="string">'Grace'</span>), (<span class="string">'Chuck'</span>,<span class="string">'Anne'</span>),</span><br><span class="line">           (<span class="string">'Bob'</span>,<span class="string">'Dan'</span>),(<span class="string">'Dan'</span>,<span class="string">'Anne'</span>),(<span class="string">'Eve'</span>,<span class="string">'Adam'</span>)</span><br><span class="line">           ),</span><br><span class="line">     friendship (<span class="keyword">name</span>, friend) <span class="keyword">as</span> <span class="comment">-- friendship is symmetric, bi-directional graph</span></span><br><span class="line">    (<span class="keyword">select</span> a, b</span><br><span class="line">    <span class="keyword">from</span> friends</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> b, a</span><br><span class="line">    <span class="keyword">from</span> friends),</span><br><span class="line">     r <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="string">'Alice'</span> <span class="keyword">as</span> <span class="keyword">name</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">select</span> friendship.name</span><br><span class="line">    <span class="keyword">from</span> r, friendship</span><br><span class="line">    <span class="keyword">where</span> r.name = friendship.friend)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> r;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> name  </span><br><span class="line"><span class="comment">-------</span></span><br><span class="line"> Alice</span><br><span class="line"> Bob</span><br><span class="line"> Carol</span><br><span class="line"> Grace</span><br><span class="line"> Chuck</span><br><span class="line"> Dan</span><br><span class="line"> Anne</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><p>到目前为止， 我们在高级SQL-递归部分对小规模的树和图进行了遍历。我们主要研究节点的父子关系和节点间的可到达性问题。使用<code>with recursive</code>子句，搭配对应的<code>union all</code>或<code>union</code>让递归问题一通百通。</p><p>下一次我们会研究一个真实数据集中的问题，依旧是<em>朋友</em>的图关系，但是数据集很大，同时计算量也非常巨大。</p><p>引用: </p><p>课件: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvY2hhcHRlcjMucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;图论&quot;&gt;&lt;a href=&quot;#图论&quot; class=&quot;headerlink&quot; title=&quot;图论&quot;&gt;&lt;/a&gt;图论&lt;/h1&gt;&lt;p&gt;在这篇文章高级 SQL 中我们会遇到递归查询图论的题目。我们使用的数据集(图)都在文章中的SQL中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="TUM-IN2326" scheme="https://cakebytheoceanluo.github.io/categories/TUM-IN2326/"/>
    
      <category term="Graph" scheme="https://cakebytheoceanluo.github.io/categories/Graph/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Recursion" scheme="https://cakebytheoceanluo.github.io/tags/Recursion/"/>
    
      <category term="Graph" scheme="https://cakebytheoceanluo.github.io/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-递归(4)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/27/SQL-%E9%AB%98%E7%BA%A7SQL-%E9%80%92%E5%BD%92-4/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/27/SQL-%E9%AB%98%E7%BA%A7SQL-%E9%80%92%E5%BD%92-4/</id>
    <published>2020-03-27T17:57:47.000Z</published>
    <updated>2020-03-27T17:59:07.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><p>在这篇文章高级 SQL 中我们会遇到递归查询图论的题目。我们使用的数据集(图)都在文章中的SQL中。</p><a id="more"></a><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img data-src="/images/SQL/graph1.png" alt="graph1.png"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> singleDirection (a ,b) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span>(<span class="keyword">values</span> (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                (<span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">                (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">                (<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">                (<span class="number">2</span>, <span class="number">5</span>),</span><br><span class="line">                (<span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">                (<span class="number">4</span>, <span class="number">6</span>)) <span class="keyword">as</span> graph</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> singleDirection;</span><br></pre></td></tr></tbody></table></figure><h3 id="寻找传递闭包-Transitive-closure-，即这个图中节点的联通节点-Connectivity"><a href="#寻找传递闭包-Transitive-closure-，即这个图中节点的联通节点-Connectivity" class="headerlink" title="寻找传递闭包(Transitive closure)，即这个图中节点的联通节点(Connectivity):"></a>寻找传递闭包(Transitive closure)，即这个图中节点的联通节点(Connectivity):</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> singleDirection (a ,b) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span>(<span class="keyword">values</span> (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                (<span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">                (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">                (<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">                (<span class="number">2</span>, <span class="number">5</span>),</span><br><span class="line">                (<span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">                (<span class="number">4</span>, <span class="number">6</span>)) <span class="keyword">as</span> graph</span><br><span class="line">    ), undirectedGraph <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> singleDirection</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">        <span class="keyword">select</span> b, a</span><br><span class="line">        <span class="keyword">from</span> singleDirection</span><br><span class="line">    ), transitive_closure (a, b) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> undirectedGraph</span><br><span class="line">        <span class="keyword">union</span></span><br><span class="line">        <span class="keyword">select</span> a.a, b.b</span><br><span class="line">        <span class="keyword">from</span> undirectedGraph b, transitive_closure a</span><br><span class="line">        <span class="keyword">where</span> a.b = b.a</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> transitive_closure</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a, b;</span><br></pre></td></tr></tbody></table></figure><h3 id="6和1是联通-connected-reachable-的吗"><a href="#6和1是联通-connected-reachable-的吗" class="headerlink" title="6和1是联通(connected, reachable)的吗?"></a>6和1是联通(connected, reachable)的吗?</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> singleDirection (a ,b) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span>(<span class="keyword">values</span> (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                (<span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">                (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">                (<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">                (<span class="number">2</span>, <span class="number">5</span>),</span><br><span class="line">                (<span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">                (<span class="number">4</span>, <span class="number">6</span>)) <span class="keyword">as</span> graph</span><br><span class="line">    ), undirectedGraph <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> singleDirection</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">        <span class="keyword">select</span> b, a</span><br><span class="line">        <span class="keyword">from</span> singleDirection</span><br><span class="line">    ), transitive_closure (a, b) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> undirectedGraph</span><br><span class="line">        <span class="keyword">union</span></span><br><span class="line">        <span class="keyword">select</span> a.a, b.b</span><br><span class="line">        <span class="keyword">from</span> undirectedGraph b, transitive_closure a</span><br><span class="line">        <span class="keyword">where</span> a.b = b.a</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> transitive_closure </span><br><span class="line"><span class="keyword">where</span> a = <span class="number">6</span> <span class="keyword">and</span> b = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="求6和1的最短距离"><a href="#求6和1的最短距离" class="headerlink" title="求6和1的最短距离?"></a>求6和1的最短距离?</h3><p>这里我们在<code>transitive_closure</code>中使用了<code>union all</code>，为了避免对应出现的不终止的递归，我们必须加上对应的条件<code>dist &lt;= 4</code>。另外这个4是我们目测出来的一个参数，当然我们可以用一个更大更普遍的数字，比如图中边的总数，这样也能试递归终止。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> singleDirection (a ,b) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span>(<span class="keyword">values</span> (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                (<span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">                (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">                (<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">                (<span class="number">2</span>, <span class="number">5</span>),</span><br><span class="line">                (<span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">                (<span class="number">4</span>, <span class="number">6</span>)) <span class="keyword">as</span> graph</span><br><span class="line">    ), undirectedGraph <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> singleDirection</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">        <span class="keyword">select</span> b, a</span><br><span class="line">        <span class="keyword">from</span> singleDirection</span><br><span class="line">    ), transitive_closure (a, b, dist) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> a, b, <span class="number">1</span></span><br><span class="line">        <span class="keyword">from</span> undirectedGraph</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">        <span class="keyword">select</span> a.a, b.b, dist + <span class="number">1</span></span><br><span class="line">        <span class="keyword">from</span> undirectedGraph b, transitive_closure a</span><br><span class="line">        <span class="keyword">where</span> a.b = b.a <span class="keyword">and</span> dist &lt;= <span class="number">4</span> <span class="comment">-- 或者　dist &lt;= 9，因为这个图里面一共9条边</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(dist)</span><br><span class="line"><span class="keyword">from</span> transitive_closure</span><br><span class="line"><span class="keyword">where</span> a = <span class="number">6</span> <span class="keyword">and</span> b = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p><br><br><br><br><br></p><h3 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h3><p>SQL Standard中是这样定义来<code>union all</code>的递归语句的:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">workingTable = evaluateNonRecursive()</span><br><span class="line">output workingTable</span><br><span class="line"><span class="keyword">while</span> workingTable <span class="keyword">is</span> <span class="keyword">not</span> empty:</span><br><span class="line">  workingTable = evaluateRecursive(workingTable)</span><br><span class="line">  output workingTable</span><br></pre></td></tr></tbody></table></figure><p>下面是一个表格，代表一个图:</p><div class="table-container"><table><thead><tr><th>From</th><th>To</th></tr></thead><tbody><tr><td>a</td><td>b</td></tr><tr><td>b</td><td>c</td></tr><tr><td>b</td><td>d</td></tr><tr><td>c</td><td>e</td></tr><tr><td>d</td><td>e</td></tr></tbody></table></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> edges (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">   <span class="keyword">values</span></span><br><span class="line">          (<span class="string">'a'</span>, <span class="string">'b'</span>), (<span class="string">'b'</span>, <span class="string">'c'</span>), (<span class="string">'b'</span>, <span class="string">'d'</span>),</span><br><span class="line">          (<span class="string">'c'</span>, <span class="string">'e'</span>), (<span class="string">'d'</span>, <span class="string">'e'</span>)</span><br><span class="line">), discovered (node) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> <span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    (<span class="keyword">select</span> edges.to_</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">    edges, discovered</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">    discovered.node = edges.from_)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> discovered;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> node </span><br><span class="line"><span class="comment">------</span></span><br><span class="line"> a</span><br><span class="line"> b</span><br><span class="line"> d</span><br><span class="line"> c</span><br><span class="line"> e</span><br><span class="line"> e</span><br><span class="line">(6 rows)</span><br></pre></td></tr></tbody></table></figure><p><br></p><h4 id="求从a开始每一步能到达的节点"><a href="#求从a开始每一步能到达的节点" class="headerlink" title="求从a开始每一步能到达的节点"></a>求从<code>a</code>开始每一步能到达的节点</h4><p>应用SQL Standard中的Working Table表达:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> edges (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">   <span class="keyword">values</span></span><br><span class="line">          (<span class="string">'a'</span>, <span class="string">'b'</span>), (<span class="string">'b'</span>, <span class="string">'c'</span>), (<span class="string">'b'</span>, <span class="string">'d'</span>),</span><br><span class="line">          (<span class="string">'c'</span>, <span class="string">'e'</span>), (<span class="string">'d'</span>, <span class="string">'e'</span>)</span><br><span class="line">), discovered (node, step) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> <span class="string">'a'</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    (<span class="keyword">select</span> edges.to_, discovered.step + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">    edges, discovered</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">    discovered.node = edges.from_)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> discovered;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> node | step </span><br><span class="line"><span class="comment">------+------</span></span><br><span class="line"> a    |    0</span><br><span class="line"> b    |    1</span><br><span class="line"> d    |    2</span><br><span class="line"> c    |    2</span><br><span class="line"> e    |    3</span><br><span class="line"> e    |    3</span><br><span class="line">(6 rows)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">step | WorkingTable</span><br><span class="line">init | {a}</span><br><span class="line">1    | {b}</span><br><span class="line">2    | {c, d}</span><br><span class="line">3    | {e, e}</span><br><span class="line">4    | {}</span><br></pre></td></tr></tbody></table></figure><p><br></p><h4 id="图被更改-再求从a开始每一步能到达的节点"><a href="#图被更改-再求从a开始每一步能到达的节点" class="headerlink" title="图被更改, 再求从a开始每一步能到达的节点"></a>图被更改, 再求从<code>a</code>开始每一步能到达的节点</h4><p>图中我们多加了一个<code>('c', 'b')</code>的边。应用SQL Standard中的<code>WorkingTable</code>表达:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> edges (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">   <span class="keyword">values</span></span><br><span class="line">          (<span class="string">'a'</span>, <span class="string">'b'</span>), (<span class="string">'b'</span>, <span class="string">'c'</span>), (<span class="string">'b'</span>, <span class="string">'d'</span>),</span><br><span class="line">          (<span class="string">'c'</span>, <span class="string">'e'</span>), (<span class="string">'d'</span>, <span class="string">'e'</span>), (<span class="string">'c'</span>, <span class="string">'b'</span>)</span><br><span class="line">), discovered (node, step) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> <span class="string">'a'</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    (<span class="keyword">select</span> edges.to_, discovered.step + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> edges, discovered</span><br><span class="line">    <span class="keyword">where</span> discovered.node = edges.from_ <span class="keyword">and</span> step &lt; <span class="number">6</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> discovered;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> node | step </span><br><span class="line"><span class="comment">------+------</span></span><br><span class="line"> a    |    0</span><br><span class="line"> b    |    1</span><br><span class="line"> c    |    2</span><br><span class="line"> d    |    2</span><br><span class="line"> e    |    3</span><br><span class="line"> e    |    3</span><br><span class="line"> b    |    3</span><br><span class="line"> c    |    4</span><br><span class="line"> d    |    4</span><br><span class="line"> e    |    5</span><br><span class="line"> e    |    5</span><br><span class="line"> b    |    5</span><br><span class="line"> c    |    6</span><br><span class="line"> d    |    6</span><br><span class="line">(14 rows)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">step | WorkingTable</span><br><span class="line">init | {a}</span><br><span class="line">1    | {b}</span><br><span class="line">2    | {c, d}</span><br><span class="line">3    | {e, e, b}</span><br><span class="line">4    | {c, d}</span><br><span class="line">5    | {e, e, b}</span><br><span class="line">6    | {c, d}</span><br></pre></td></tr></tbody></table></figure><p>由于这条多加的边，让<code>union all</code>对应的循环一直不终止，即<code>WorkingTable</code>一直不为空。所有我在上面多加了<code>step &lt; 6</code>这个条件，强制６步以后终止。当然如果换用<code>union</code>可以让它终止。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;图论&quot;&gt;&lt;a href=&quot;#图论&quot; class=&quot;headerlink&quot; title=&quot;图论&quot;&gt;&lt;/a&gt;图论&lt;/h1&gt;&lt;p&gt;在这篇文章高级 SQL 中我们会遇到递归查询图论的题目。我们使用的数据集(图)都在文章中的SQL中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Graph" scheme="https://cakebytheoceanluo.github.io/categories/Graph/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Recursion" scheme="https://cakebytheoceanluo.github.io/tags/Recursion/"/>
    
      <category term="Graph" scheme="https://cakebytheoceanluo.github.io/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-递归(3)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/26/SQL-%E9%AB%98%E7%BA%A7SQL-%E9%80%92%E5%BD%92-3/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/26/SQL-%E9%AB%98%E7%BA%A7SQL-%E9%80%92%E5%BD%92-3/</id>
    <published>2020-03-26T13:49:58.000Z</published>
    <updated>2020-03-26T13:54:36.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><p>在这篇文章高级 SQL 中我们会遇到递归查询图论的题目。我们使用的数据集(图)都在文章中的SQL中。</p><a id="more"></a><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>一个图论的例子：</p><p><img data-src="/images/SQL/dag.png" alt="dag.png"></p><p><strong>如果我们无视图中的箭头</strong>，那么这个图是一个<strong>有向无环图(DAG, directed acyclic graph)</strong>。</p><p><br></p><h3 id="视作有向图，寻找传递闭包-Transitive-closure-，即这个图中节点的联通节点-Connectivity"><a href="#视作有向图，寻找传递闭包-Transitive-closure-，即这个图中节点的联通节点-Connectivity" class="headerlink" title="视作有向图，寻找传递闭包(Transitive closure)，即这个图中节点的联通节点(Connectivity):"></a>视作有向图，寻找传递闭包(Transitive closure)，即这个图中节点的联通节点(Connectivity):</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- Basic relation</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="string">'a'</span>, <span class="string">'b'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'c'</span> ,<span class="string">'d'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'e'</span>),</span><br><span class="line">           (<span class="string">'f'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'x'</span>, <span class="string">'y'</span>) <span class="comment">-- 第二个联通部分</span></span><br><span class="line">), transitive_closure (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> from_, to_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">    <span class="keyword">union</span> <span class="comment">-- Set(集合)</span></span><br><span class="line">    (<span class="keyword">select</span> c.from_, g.to_</span><br><span class="line">    <span class="keyword">from</span> transitive_closure c, graph g</span><br><span class="line">    <span class="keyword">where</span> c.to_ = g.from_)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> transitive_closure</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> from_, to_;</span><br></pre></td></tr></tbody></table></figure><p>输出:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> from_ | to_ </span><br><span class="line"><span class="comment">-------+-----</span></span><br><span class="line"> a     | b</span><br><span class="line"> a     | c</span><br><span class="line"> a     | d</span><br><span class="line"> a     | e</span><br><span class="line"> b     | c</span><br><span class="line"> b     | d</span><br><span class="line"> b     | e</span><br><span class="line"> c     | d</span><br><span class="line"> f     | c</span><br><span class="line"> f     | d</span><br><span class="line"> x     | y</span><br><span class="line">(11 rows)</span><br></pre></td></tr></tbody></table></figure><p><br></p><h3 id="表达成无向图："><a href="#表达成无向图：" class="headerlink" title="表达成无向图："></a>表达成无向图：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- Basic relation</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="string">'a'</span>, <span class="string">'b'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'c'</span> ,<span class="string">'d'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'e'</span>),</span><br><span class="line">           (<span class="string">'f'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'x'</span>, <span class="string">'y'</span>) <span class="comment">-- 第二个联通部分</span></span><br><span class="line">), un_dir_graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- 无向图</span></span><br><span class="line">    (<span class="keyword">select</span> from_, to_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    (<span class="keyword">select</span> to_, from_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> un_dir_graph</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> from_, to_;</span><br></pre></td></tr></tbody></table></figure><p>输出:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> from_ | to_ </span><br><span class="line"><span class="comment">-------+-----</span></span><br><span class="line"> a     | b</span><br><span class="line"> b     | a</span><br><span class="line"> b     | c</span><br><span class="line"> b     | e</span><br><span class="line"> c     | b</span><br><span class="line"> c     | d</span><br><span class="line"> c     | f</span><br><span class="line"> d     | c</span><br><span class="line"> e     | b</span><br><span class="line"> f     | c</span><br><span class="line"> x     | y</span><br><span class="line"> y     | x</span><br><span class="line">(12 rows)</span><br></pre></td></tr></tbody></table></figure><p>很容易发现<code>un_dir_graph</code>是一个对称的关系(symmetric relation): </p><script type="math/tex; mode=display">\exists (a , b) \in R \Rightarrow (b, a) \in R</script><p>当我们使用<code>un_dir_graph</code>递归的时候，　用<code>UNION ALL</code>是肯定不会终止的，因为<code>UNION ALL</code>采用包语义(Bag Semantics)，它不会消除重复(duplicates)。<br>而<code>UNION</code>采用集合语义(Set Semantics)，它会消除重复。</p><p><br></p><h3 id="视作无向图，寻找传递闭包-Transitive-closure-，即这个图中节点的联通节点-Connectivity"><a href="#视作无向图，寻找传递闭包-Transitive-closure-，即这个图中节点的联通节点-Connectivity" class="headerlink" title="视作无向图，寻找传递闭包(Transitive closure)，即这个图中节点的联通节点(Connectivity):"></a>视作无向图，寻找传递闭包(Transitive closure)，即这个图中节点的联通节点(Connectivity):</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- Basic relation</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="string">'a'</span>, <span class="string">'b'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'c'</span> ,<span class="string">'d'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'e'</span>),</span><br><span class="line">           (<span class="string">'f'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'x'</span>, <span class="string">'y'</span>) <span class="comment">-- 第二个联通部分</span></span><br><span class="line">), un_dir_graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- 无向图</span></span><br><span class="line">    (<span class="keyword">select</span> from_, to_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    (<span class="keyword">select</span> to_, from_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">), clo (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> from_, to_</span><br><span class="line">    <span class="keyword">from</span> un_dir_graph)</span><br><span class="line">    <span class="keyword">union</span> <span class="comment">-- Set(集合)</span></span><br><span class="line">    (<span class="keyword">select</span> c.from_, g.to_</span><br><span class="line">    <span class="keyword">from</span> clo c, un_dir_graph g</span><br><span class="line">    <span class="keyword">where</span> c.to_ = g.from_)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> clo</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> from_, to_;</span><br></pre></td></tr></tbody></table></figure><p>输出:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> from_ | to_ </span><br><span class="line"><span class="comment">-------+-----</span></span><br><span class="line"> a     | a</span><br><span class="line"> a     | b</span><br><span class="line"> a     | c</span><br><span class="line"> a     | d</span><br><span class="line"> a     | e</span><br><span class="line"> a     | f</span><br><span class="line"> b     | a</span><br><span class="line"> b     | b</span><br><span class="line"> b     | c</span><br><span class="line"> b     | d</span><br><span class="line"> b     | e</span><br><span class="line"> b     | f</span><br><span class="line"> c     | a</span><br><span class="line"> c     | b</span><br><span class="line"> c     | c</span><br><span class="line"> c     | d</span><br><span class="line"> c     | e</span><br><span class="line"> c     | f</span><br><span class="line"> d     | a</span><br><span class="line"> d     | b</span><br><span class="line"> d     | c</span><br><span class="line"> d     | d</span><br><span class="line"> d     | e</span><br><span class="line"> d     | f</span><br><span class="line"> e     | a</span><br><span class="line"> e     | b</span><br><span class="line"> e     | c</span><br><span class="line"> e     | d</span><br><span class="line"> e     | e</span><br><span class="line"> e     | f</span><br><span class="line"> f     | a</span><br><span class="line"> f     | b</span><br><span class="line"> f     | c</span><br><span class="line"> f     | d</span><br><span class="line"> f     | e</span><br><span class="line"> f     | f</span><br><span class="line"> x     | x</span><br><span class="line"> x     | y</span><br><span class="line"> y     | x</span><br><span class="line"> y     | y</span><br><span class="line">(40 rows)</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>另一种解法:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- Basic relation</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="string">'a'</span>, <span class="string">'b'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'c'</span> ,<span class="string">'d'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'e'</span>),</span><br><span class="line">           (<span class="string">'f'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'x'</span>, <span class="string">'y'</span>) <span class="comment">-- 第二个联通部分</span></span><br><span class="line">), un_dir_graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- 无向图</span></span><br><span class="line">    (<span class="keyword">select</span> from_, to_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    (<span class="keyword">select</span> to_, from_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">), closure (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> from_, to_</span><br><span class="line">    <span class="keyword">from</span> un_dir_graph)</span><br><span class="line">    <span class="keyword">union</span> <span class="comment">-- Set(集合)</span></span><br><span class="line">    (<span class="keyword">select</span> c.from_, g.to_</span><br><span class="line">    <span class="keyword">from</span> closure c, graph g</span><br><span class="line">    <span class="keyword">where</span> c.to_ = g.from_)</span><br><span class="line">), connected_graph (from_ ,to_) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> to_ , from_</span><br><span class="line">    <span class="keyword">from</span> closure)</span><br><span class="line">    <span class="keyword">union</span> <span class="comment">-- Set(集合)</span></span><br><span class="line">    (<span class="keyword">select</span> c.from_ , cg.to_</span><br><span class="line">    <span class="keyword">from</span> closure c, connected_graph cg</span><br><span class="line">    <span class="keyword">where</span> c.to_ = cg.from_)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> connected_graph</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> from_, to_;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>这里必须解释一下<code>closure</code>所形成的表格，它即不是对应有向图的传递闭包(transitive_closure)，也不是对应无向图的传递闭包(transitive_closure)。它是我们求无向图传递闭包的一个中间步骤, 它代表的路径是:</p><ul><li>第一步来自于无向图</li><li>如果有后续的步骤，那么后续的步骤来自于有向图。</li></ul><p>下面是它的内容：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> from_ | to_ </span><br><span class="line"><span class="comment">-------+-----</span></span><br><span class="line"> a     | b</span><br><span class="line"> a     | c</span><br><span class="line"> a     | d</span><br><span class="line"> a     | e</span><br><span class="line"> b     | a</span><br><span class="line"> b     | b</span><br><span class="line"> b     | c</span><br><span class="line"> b     | d</span><br><span class="line"> b     | e</span><br><span class="line"> c     | b</span><br><span class="line"> c     | c</span><br><span class="line"> c     | d</span><br><span class="line"> c     | e</span><br><span class="line"> c     | f</span><br><span class="line"> d     | c</span><br><span class="line"> d     | d</span><br><span class="line"> e     | b</span><br><span class="line"> e     | c</span><br><span class="line"> e     | d</span><br><span class="line"> e     | e</span><br><span class="line"> f     | c</span><br><span class="line"> f     | d</span><br><span class="line"> x     | y</span><br><span class="line"> y     | x</span><br><span class="line"> y     | y</span><br><span class="line">(25 rows)</span><br></pre></td></tr></tbody></table></figure><ul><li><code>(b, b)</code>在里面，因为第一步<code>(b, a)</code>属于无向图，第二步<code>(a, b)</code>属于有向图。</li><li><code>(c, a)</code>不在里面，因为即使第一步<code>(c, b)</code>属于无向图，但是第二步<code>(b, a)</code>不属于有向图。</li></ul><p><br></p><h3 id="求从b从两个方向能到达的所有地方："><a href="#求从b从两个方向能到达的所有地方：" class="headerlink" title="求从b从两个方向能到达的所有地方："></a>求从<code>b</code>从两个方向能到达的所有地方：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- Basic relation</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="string">'a'</span>, <span class="string">'b'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'c'</span> ,<span class="string">'d'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'e'</span>),</span><br><span class="line">           (<span class="string">'f'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'x'</span>, <span class="string">'y'</span>) <span class="comment">-- 第二个联通部分</span></span><br><span class="line">), un_dir_graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- 无向图</span></span><br><span class="line">    (<span class="keyword">select</span> from_, to_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    (<span class="keyword">select</span> to_, from_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">), clo (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> from_, to_</span><br><span class="line">    <span class="keyword">from</span> un_dir_graph)</span><br><span class="line">    <span class="keyword">union</span> <span class="comment">-- Set(集合)</span></span><br><span class="line">    (<span class="keyword">select</span> c.from_, g.to_</span><br><span class="line">    <span class="keyword">from</span> clo c, un_dir_graph g</span><br><span class="line">    <span class="keyword">where</span> c.to_ = g.from_)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> clo</span><br><span class="line"><span class="keyword">where</span> from_ = <span class="string">'b'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> to_;</span><br></pre></td></tr></tbody></table></figure><p>当然看图的话，我们可以发现<code>b</code>可以到达上面那个连通图中所有的6个节点。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;图论&quot;&gt;&lt;a href=&quot;#图论&quot; class=&quot;headerlink&quot; title=&quot;图论&quot;&gt;&lt;/a&gt;图论&lt;/h1&gt;&lt;p&gt;在这篇文章高级 SQL 中我们会遇到递归查询图论的题目。我们使用的数据集(图)都在文章中的SQL中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Graph" scheme="https://cakebytheoceanluo.github.io/categories/Graph/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Recursion" scheme="https://cakebytheoceanluo.github.io/tags/Recursion/"/>
    
      <category term="Graph" scheme="https://cakebytheoceanluo.github.io/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-去关联(2)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/25/SQL-%E9%AB%98%E7%BA%A7SQL-%E5%8E%BB%E5%85%B3%E8%81%94-2/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/25/SQL-%E9%AB%98%E7%BA%A7SQL-%E5%8E%BB%E5%85%B3%E8%81%94-2/</id>
    <published>2020-03-25T11:09:41.000Z</published>
    <updated>2020-03-25T11:10:34.069Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章继<a href="https://cakebytheoceanluo.github.io/2020/03/24/SQL-%E9%AB%98%E7%BA%A7SQL-%E5%8E%BB%E5%85%B3%E8%81%94-1/">[SQL]高级SQL-去关联(1)</a>后，继续对去关联这个主题进行练习。</p><a id="more"></a><h1 id="TPC-H例子一"><a href="#TPC-H例子一" class="headerlink" title="TPC-H例子一"></a>TPC-H例子一</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(l_extendedprice)</span><br><span class="line"><span class="keyword">from</span> lineitem l1</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">l_extendedprice &gt; (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">avg</span>(l2.l_extendedprice)</span><br><span class="line">    <span class="keyword">from</span> lineitem l2</span><br><span class="line">    <span class="keyword">where</span> l2.l_orderkey = l1.l_orderkey</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><code>l1.l_orderkey</code>是这个子查询(Sub-Query)中来自外查询的字段，也就是它造成了这个依赖(dependency)。</p><p>很容易可以发现：</p><ul><li>对每一个子查询的<code>lineitem l2</code>的元组，需要它的<code>l2.l_orderkey</code>字段值依赖于外界<code>lineitem l1</code>的对应<code>l1.l_orderkey</code>字段值。</li><li>外依赖条件指：<code>l2.l_orderkey = l1.l_orderkey</code></li><li>$D$是<code>l1.l_orderkey</code>对应字段值的集合。</li></ul><p>我们可以完全抽离这个关联部分到另外一个暂时的表格，再用<strong>外依赖条件</strong>和它regular join。<strong>这里这个外依赖条件没有意义，我们可以直接在<code>lineitem</code>表格中计算平均值, 而省去regular join获得高性能。</strong></p><h2 id="去除join的结果"><a href="#去除join的结果" class="headerlink" title="去除join的结果"></a>去除join的结果</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(l_extendedprice)</span><br><span class="line"><span class="keyword">from</span> lineitem l,</span><br><span class="line">     (<span class="keyword">select</span> <span class="keyword">avg</span>(l_extendedprice) <span class="keyword">as</span> avgPrice, </span><br><span class="line">             l_orderkey</span><br><span class="line">      <span class="keyword">from</span> lineitem</span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> l_orderkey) <span class="keyword">as</span> precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    l_extendedprice &gt; precomputed.avgPrice <span class="keyword">and</span> </span><br><span class="line">    l.l_orderkey = precomputed.l_orderkey;</span><br></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> precomputed <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">avg</span>(l_extendedprice) <span class="keyword">as</span> avgPrice, </span><br><span class="line">           l_orderkey</span><br><span class="line">    <span class="keyword">from</span> lineitem</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> l_orderkey)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(l_extendedprice)</span><br><span class="line"><span class="keyword">from</span> lineitem l,</span><br><span class="line">     precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    l_extendedprice &gt; precomputed.avgPrice</span><br><span class="line">    <span class="keyword">and</span> l.l_orderkey = precomputed.l_orderkey;</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="TPC-H例子二"><a href="#TPC-H例子二" class="headerlink" title="TPC-H例子二"></a>TPC-H例子二</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">        o_orderkey</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        orders o1</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        o_totalprice &lt; (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">                <span class="keyword">avg</span>(o_totalprice)</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">                orders o2</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">                o2.o_shippriority = o1.o_shippriority <span class="keyword">or</span></span><br><span class="line">                o2.o_orderstatus = o1.o_orderstatus)</span><br></pre></td></tr></tbody></table></figure><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>很容易可以发现：</p><ul><li>对每一个<code>orders o2</code>的元组，需要它的<code>o2.o_shippriority</code>和<code>o2.o_orderstatus</code>字段值依赖外界<code>order o1</code>的对应字段值。</li><li>外依赖条件指：<code>o2.o_shippriority = o1.o_shippriority or o2.o_orderstatus = o1.o_orderstatus</code></li><li>$D$是<code>o1.o_shippriority, o1.o_orderstatus</code>对应字段值的集合。</li></ul><p>我们可以完全抽离这个关联部分到另外一个暂时的表格，再用<strong>外依赖条件</strong>和它regular join。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">        o_orderkey</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        orders o1,</span><br><span class="line">        (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">                <span class="keyword">avg</span>(o2.o_totalprice), d.o_shippriority, d.o_orderstatus</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">                orders o2, </span><br><span class="line">                (<span class="keyword">select</span> <span class="keyword">distinct</span> o_shippriority , o_orderstatus <span class="keyword">from</span> orders) d</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">                o2.o_shippriority = d.o_shippriority <span class="keyword">or</span></span><br><span class="line">                o2.o_orderstatus = d.o_orderstatus</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> d.o_shippriority, d.o_orderstatus</span><br><span class="line">        ) <span class="keyword">as</span> precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        o_totalprice &lt; precomputed.avg <span class="keyword">and</span></span><br><span class="line">        precomputed.o_shippriority = o1.o_shippriority <span class="keyword">and</span></span><br><span class="line">        precomputed.o_orderstatus = o1.o_orderstatus</span><br></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> precomputed <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">            <span class="keyword">avg</span>(o2.o_totalprice), d.o_shippriority, d.o_orderstatus</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">            orders o2, </span><br><span class="line">            (<span class="keyword">select</span> <span class="keyword">distinct</span> o_shippriority , o_orderstatus <span class="keyword">from</span> orders) d</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">            o2.o_shippriority = d.o_shippriority <span class="keyword">or</span></span><br><span class="line">            o2.o_orderstatus = d.o_orderstatus</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> d.o_shippriority, d.o_orderstatus</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">        o_orderkey</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        orders o1, precomputed</span><br><span class="line">        </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        o_totalprice &lt; precomputed.avg <span class="keyword">and</span></span><br><span class="line">        precomputed.o_shippriority = o1.o_shippriority <span class="keyword">and</span></span><br><span class="line">        precomputed.o_orderstatus = o1.o_orderstatus</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="TPC-H例子三"><a href="#TPC-H例子三" class="headerlink" title="TPC-H例子三"></a>TPC-H例子三</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    o_orderpriority,</span><br><span class="line">    <span class="keyword">count</span>(*) <span class="keyword">as</span> order_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    orders</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    o_orderdate &gt;= <span class="built_in">date</span> <span class="string">'1993-07-01'</span> <span class="keyword">and</span> </span><br><span class="line">    o_orderdate &lt; <span class="built_in">date</span> <span class="string">'1993-10-01'</span><span class="keyword">and</span> </span><br><span class="line">    <span class="keyword">exists</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            *</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            lineitem</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            l_orderkey = o_orderkey <span class="keyword">and</span> </span><br><span class="line">            l_commitdate &lt; l_receiptdate</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> o_orderpriority</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_orderpriority;</span><br></pre></td></tr></tbody></table></figure><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>很容易可以发现：</p><ul><li>对每一个<code>lineitem</code>的元组，需要它的<code>l_orderkey</code>字段值依赖外界<code>order</code>的对应字段值。</li><li>外依赖条件指：<code>l_orderkey = o_orderkey</code></li><li>$D$是<code>order.o_orderkey</code>对应字段值的集合。</li></ul><p>我们可以完全抽离这个关联部分到另外一个暂时的表格，再用<strong>外依赖条件</strong>和它regular join。</p><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    o_orderpriority,</span><br><span class="line">    <span class="keyword">count</span>(*) <span class="keyword">as</span> order_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    orders,(</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        o_orderkey</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        lineitem,</span><br><span class="line">        (<span class="keyword">select</span> <span class="keyword">distinct</span> o_orderkey <span class="keyword">from</span> orders) <span class="keyword">as</span> o</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        l_orderkey = o_orderkey <span class="keyword">and</span> </span><br><span class="line">        l_commitdate &lt; l_receiptdate</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        o_orderkey</span><br><span class="line">    ) <span class="keyword">as</span> precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    o_orderdate &gt;= <span class="built_in">date</span> <span class="string">'1993-07-01'</span> <span class="keyword">and</span></span><br><span class="line">    o_orderdate &lt; <span class="built_in">date</span> <span class="string">'1993-10-01'</span> <span class="keyword">and</span></span><br><span class="line">    precomputed.o_orderkey = orders.o_orderkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> o_orderpriority</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_orderpriority;</span><br></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> precomputed <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        o_orderkey</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        lineitem,</span><br><span class="line">        (<span class="keyword">select</span> <span class="keyword">distinct</span> o_orderkey <span class="keyword">from</span> orders) <span class="keyword">as</span> o</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        l_orderkey = o_orderkey <span class="keyword">and</span> </span><br><span class="line">        l_commitdate &lt; l_receiptdate</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        o_orderkey</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    o_orderpriority,</span><br><span class="line">    <span class="keyword">count</span>(*) <span class="keyword">as</span> order_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    orders,</span><br><span class="line">    precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    o_orderdate &gt;= <span class="built_in">date</span> <span class="string">'1993-07-01'</span> <span class="keyword">and</span></span><br><span class="line">    o_orderdate &lt; <span class="built_in">date</span> <span class="string">'1993-10-01'</span> <span class="keyword">and</span></span><br><span class="line">    precomputed.o_orderkey = orders.o_orderkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> o_orderpriority</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_orderpriority;</span><br></pre></td></tr></tbody></table></figure><h2 id="去除join的结果-1"><a href="#去除join的结果-1" class="headerlink" title="　去除join的结果"></a>　去除join的结果</h2><p><strong>这里这个外依赖条件没有意义，我们可以直接在<code>lineitem</code>表格中获得<code>l_orderkey</code>(它是<code>o_orderkey</code>的外键), 而省去regular join获得高性能。</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    o_orderpriority,</span><br><span class="line">    <span class="keyword">count</span>(*) <span class="keyword">as</span> order_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    orders,(</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        l_orderkey</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        lineitem</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        l_commitdate &lt; l_receiptdate</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        l_orderkey</span><br><span class="line">    ) <span class="keyword">as</span> precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    o_orderdate &gt;= <span class="built_in">date</span> <span class="string">'1993-07-01'</span> <span class="keyword">and</span></span><br><span class="line">    o_orderdate &lt; <span class="built_in">date</span> <span class="string">'1993-10-01'</span> <span class="keyword">and</span></span><br><span class="line">    precomputed.l_orderkey = orders.o_orderkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> o_orderpriority</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_orderpriority;</span><br></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> precomputed <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        l_orderkey</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        lineitem</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        l_commitdate &lt; l_receiptdate</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        l_orderkey</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    o_orderpriority,</span><br><span class="line">    <span class="keyword">count</span>(*) <span class="keyword">as</span> order_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    orders, precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    o_orderdate &gt;= <span class="built_in">date</span> <span class="string">'1993-07-01'</span> <span class="keyword">and</span></span><br><span class="line">    o_orderdate &lt; <span class="built_in">date</span> <span class="string">'1993-10-01'</span> <span class="keyword">and</span></span><br><span class="line">    precomputed.l_orderkey = orders.o_orderkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> o_orderpriority</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_orderpriority;</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="论文中的Q2"><a href="#论文中的Q2" class="headerlink" title="论文中的Q2"></a>论文中的Q2</h1><p>这个Q2不对应任何我已知的数据集，只是在论文中逻辑性地被提出。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.name , e.course</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    students s,</span><br><span class="line">    exams e</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    s.id = e.sid <span class="keyword">and</span></span><br><span class="line">    (s.major = <span class="string">'CS'</span> <span class="keyword">or</span> s. major = <span class="string">'Games Eng'</span>)</span><br><span class="line"><span class="keyword">and</span> e.grade &gt;= (</span><br><span class="line">    <span class="comment">-- one grade worse</span></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="keyword">avg</span> (e2.grade) + <span class="number">1</span></span><br><span class="line">    <span class="comment">-- than the average grade</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        exams e2</span><br><span class="line">    <span class="comment">-- of exams taken by</span></span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        s.id = e2.sid <span class="keyword">or</span></span><br><span class="line">        <span class="comment">-- him / her or taken by elder peers</span></span><br><span class="line">        (e2.curriculum = s.major <span class="keyword">and</span> s.year &gt; e2.date))</span><br></pre></td></tr></tbody></table></figure><h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><p>很容易可以发现：</p><ul><li>对每一个<code>exams e2</code>的元组，需要它的<code>e2.sid, e2.curriculum, e2.data</code>字段值依赖外界<code>student s</code>的对应字段值。</li><li>外依赖条件指：<code>s.id = e2.sid or (e2.curriculum = s.major and s.year &gt; e2.date))</code></li><li>$D$是<code>s.id, s.major, s.year</code>对应字段值的集合。</li></ul><p>我们可以完全抽离这个关联部分到另外一个暂时的表格，再用<strong>外依赖条件</strong>和它regular join。</p><h2 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.name, e.course</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    students s,</span><br><span class="line">    exams e, (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> students s, exams e</span><br><span class="line">        <span class="keyword">where</span> s.id = e.sid <span class="keyword">and</span> (s.major = <span class="string">'CS'</span> <span class="keyword">or</span> s. major = <span class="string">'Games Eng'</span>)</span><br><span class="line">     ) <span class="keyword">as</span> l, (</span><br><span class="line">         <span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">id</span>, <span class="keyword">year</span>, major </span><br><span class="line">         <span class="keyword">from</span> l</span><br><span class="line">     ) <span class="keyword">as</span> d, (</span><br><span class="line">         <span class="keyword">select</span> d.id, d.year, d.major, <span class="keyword">avg</span>(e2.grade) <span class="keyword">as</span> m</span><br><span class="line">         <span class="keyword">from</span> d, exam e2</span><br><span class="line">         <span class="keyword">where</span> d.id = e2.sid <span class="keyword">or</span> (d.year &gt; e2.year <span class="keyword">and</span> e2.curriculum = d.major)</span><br><span class="line">         <span class="keyword">group</span> <span class="keyword">by</span> d.id, d.year, d.major</span><br><span class="line">     ) <span class="keyword">as</span> d_</span><br><span class="line"><span class="keyword">where</span> e.grade &gt; m + <span class="number">1</span> <span class="keyword">and</span></span><br><span class="line">      d_.id = s.id <span class="keyword">and</span> </span><br><span class="line">      d_.year = e.date <span class="keyword">and</span> </span><br><span class="line">      e.curriculum = d_.major;</span><br></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> l <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> students s, exams e</span><br><span class="line">        <span class="keyword">where</span> s.id = e.sid <span class="keyword">and</span> (s.major = <span class="string">'CS'</span> <span class="keyword">or</span> s. major = <span class="string">'Games Eng'</span>)</span><br><span class="line">),</span><br><span class="line">d <span class="keyword">as</span> (</span><br><span class="line">         <span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">id</span>, <span class="keyword">year</span>, major</span><br><span class="line">         <span class="keyword">from</span> l</span><br><span class="line">     ),</span><br><span class="line">d_ <span class="keyword">as</span> (</span><br><span class="line">         <span class="keyword">select</span> d.id, d.year, d.major, <span class="keyword">avg</span>(e2.grade) <span class="keyword">as</span> m</span><br><span class="line">         <span class="keyword">from</span> d, exam e2</span><br><span class="line">         <span class="keyword">where</span> d.id = e2.sid <span class="keyword">or</span> (d.year &gt; e2.year <span class="keyword">and</span> e2.curriculum = d.major)</span><br><span class="line">         <span class="keyword">group</span> <span class="keyword">by</span> d.id, d.year, d.major</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> s.name, e.course</span><br><span class="line"><span class="keyword">from</span> l, d_</span><br><span class="line"><span class="keyword">where</span> e.grade &gt; m + <span class="number">1</span> <span class="keyword">and</span></span><br><span class="line">         d_.id = l.id <span class="keyword">and</span></span><br><span class="line">         d_.year = l.year <span class="keyword">and</span></span><br><span class="line">         d_.major = l.curriculum;</span><br></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.name, e.course</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    students s,</span><br><span class="line">    exams e, (</span><br><span class="line">         <span class="keyword">select</span> s2.id, s2.year, s2.major, <span class="keyword">avg</span>(e2.grade) <span class="keyword">as</span> m</span><br><span class="line">         <span class="keyword">from</span> exam e2,</span><br><span class="line">              (<span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">id</span>, <span class="keyword">year</span>, major <span class="keyword">from</span> students) <span class="keyword">as</span> s2</span><br><span class="line">         <span class="keyword">where</span></span><br><span class="line">               s2.id = e2.sid</span><br><span class="line">               <span class="keyword">or</span> (s2.year &gt; e2.year <span class="keyword">and</span> e2.curriculum = s2.major)</span><br><span class="line">         <span class="keyword">group</span> <span class="keyword">by</span> s2.id, s2.year, s2.major</span><br><span class="line">     ) <span class="keyword">as</span> preagg</span><br><span class="line"><span class="keyword">where</span> s.id = e.sid <span class="keyword">and</span></span><br><span class="line">      (s.major = <span class="string">'CS'</span> <span class="keyword">or</span> s. major = <span class="string">'Games Eng'</span>) <span class="keyword">and</span></span><br><span class="line">      s.id = preagg.id <span class="keyword">and</span> </span><br><span class="line">      s.major = preagg.major <span class="keyword">and</span></span><br><span class="line">      s.year = preagg.year <span class="keyword">and</span></span><br><span class="line">      e.grade &gt; m + <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p>引用: </p><p>1: TUM Foundation of Data Engineering Chap3.Advanced SQL: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvY2hhcHRlcjMucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de<i class="fa fa-external-link"></i></span></p><p>2.<span class="exturl" data-url="aHR0cHM6Ly9kbC5naS5kZS9iaXRzdHJlYW0vaGFuZGxlLzIwLjUwMC4xMjExNi8yNDE4LzM4My5wZGY/c2VxdWVuY2U9MQ==" title="https://dl.gi.de/bitstream/handle/20.500.12116/2418/383.pdf?sequence=1">Unnesting Arbitrary Queries - Thomas Neumann and Alfons Kemper - (BTW 2015)<i class="fa fa-external-link"></i></span></p><p>3.<a href="https://cakebytheoceanluo.github.io/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/">https://cakebytheoceanluo.github.io/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章继&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/24/SQL-%E9%AB%98%E7%BA%A7SQL-%E5%8E%BB%E5%85%B3%E8%81%94-1/&quot;&gt;[SQL]高级SQL-去关联(1)&lt;/a&gt;后，继续对去关联这个主题进行练习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Query Optimizer" scheme="https://cakebytheoceanluo.github.io/categories/Query-Optimizer/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Query Optimizer" scheme="https://cakebytheoceanluo.github.io/tags/Query-Optimizer/"/>
    
      <category term="Subquery Optimization" scheme="https://cakebytheoceanluo.github.io/tags/Subquery-Optimization/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-去关联(1)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/24/SQL-%E9%AB%98%E7%BA%A7SQL-%E5%8E%BB%E5%85%B3%E8%81%94-1/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/24/SQL-%E9%AB%98%E7%BA%A7SQL-%E5%8E%BB%E5%85%B3%E8%81%94-1/</id>
    <published>2020-03-24T17:16:36.000Z</published>
    <updated>2020-03-25T09:52:28.169Z</updated>
    
    <content type="html"><![CDATA[<p>我们在一篇论文解读文章<a href="https://cakebytheoceanluo.github.io/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/">[Paper]BTW 2015 | Unnesting Arbitrary Queries</a>中提到了去关联, 在这一篇文章中我们对这个主题进行<strong>练习</strong>。</p><p>这个主题其实远比大家想象中的要实用: 对于1GiB大小左右的数据集，SQL查询如果拥有$O(n^2)$的时间复杂度，基本可以判断很慢，或者慢到无实际意义。往往我们使用的各种大名鼎鼎的开源数据库和商用数据库不一定支持Unnesting这个feature(具体的支持在各个数据库的Document中描述，在对应的论文中的Motivation部分也有简单提到)。这就意味着, 我们需要手动成为Query Optimizer去优化我们SQL的时间复杂度。 </p><a id="more"></a><h1 id="Correlated-Sub-Query-vs-Uncorrelated-Sub-Query"><a href="#Correlated-Sub-Query-vs-Uncorrelated-Sub-Query" class="headerlink" title="Correlated Sub-Query vs. Uncorrelated Sub-Query"></a>Correlated Sub-Query vs. Uncorrelated Sub-Query</h1><p>一般来说，correlated sub-query(关联子query)的时间复杂度会比uncorrelated sub-query(无关联子query)大。</p><p>当然这部分的前提是：query optimizer(优化器)不对SQL的logical plan进行优化。<br>而一些优秀的数据库<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbmRleC5odG1sIw==" title="https://hyper-db.de/index.html#">HyPer<i class="fa fa-external-link"></i></span>已经把这个问题用query optimizer解决了，它会主动去优化，比如可以<strong>去关联</strong>。</p><p>更多的可以看这一篇论文<span class="exturl" data-url="aHR0cDovL3d3dy5idHctMjAxNS5kZS9yZXMvcHJvY2VlZGluZ3MvSGF1cHRiYW5kL1dpc3MvTmV1bWFubi1Vbm5lc3RpbmdfQXJiaXRyYXJ5X1F1ZXJpZS5wZGY=" title="http://www.btw-2015.de/res/proceedings/Hauptband/Wiss/Neumann-Unnesting_Arbitrary_Querie.pdf">Unnesting Arbitrary Queries, Thomas Neumann and Alfons Kemper, Technische Universitat München<i class="fa fa-external-link"></i></span></p><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>这篇文章中我们会使用如下的数据集:</p><ul><li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#TUM-Uni%E6%95%B0%E6%8D%AE%E9%9B%86">TUM Uni 数据集</a></li><li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#TPC-H">TPC-H 数据集</a></li></ul><p>具体的数据集安装见上面的对应的链接。另外有一些SQL并不对应任何数据集, 只是在论文中逻辑性地被提出和使用，这样的SQL我会特别注明: <strong>不对应数据集</strong>。</p><hr><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><h2 id="使用max代替exists-搜索出生日期比所有教授早的学生"><a href="#使用max代替exists-搜索出生日期比所有教授早的学生" class="headerlink" title="使用max代替exists: 搜索出生日期比所有教授早的学生"></a>使用<code>max</code>代替<code>exists</code>: 搜索出生日期比所有教授早的学生</h2><p>这个Query需要的属性值(gebdatum　出生日期)没有被写入数据集。<br>所以不能运行，但是我们可以看着理解意思。</p><ul><li>correlated sub-query</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.*</span><br><span class="line"><span class="keyword">from</span> studenten s</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> p.*</span><br><span class="line">    <span class="keyword">from</span> professoren p</span><br><span class="line">    <span class="keyword">where</span> p.gebdatum &gt; s.gebdatumm</span><br><span class="line">          )</span><br></pre></td></tr></tbody></table></figure><p>对每一个studenten s都需要看整个professoren表格。<br>这个情况很类似cross product(集合的叉乘)。这个subquery需要被执行<code>|studenten|</code>次。</p><p>如果query optimizer(优化器)不对这个SQL的logical plan进行优化的话，那它的runtime complexity(时间复杂度)是<code>O(|studenten| * |professoren|)</code>，类推到<code>O(n^2)</code>。</p><p><br></p><ul><li>uncorrelated Sub-query</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.*</span><br><span class="line"><span class="keyword">from</span> studenten s</span><br><span class="line"><span class="keyword">where</span> s.gebdatum &lt; (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">max</span>(gebdatum)</span><br><span class="line">    <span class="keyword">from</span> professoren p</span><br><span class="line">          )</span><br></pre></td></tr></tbody></table></figure><p>这样这个subquery只需一次被materialized(materialization，物质化，实例化)，也就是只需要被执行一次得到这个<code>max</code>。然后在去看<code>studenten</code>中的每一个人去和这个<code>max</code>比较。这样肯定会更加有效率。它的runtime complexity是$O(|\mathrm{studenten}| ＋ |\mathrm{professoren}|)$，类推到 $O(n)$。</p><p><br></p><h2 id="使用join代替subquery-搜索出生日期比对应教授早的助手-助手需要在对应教授手下工作"><a href="#使用join代替subquery-搜索出生日期比对应教授早的助手-助手需要在对应教授手下工作" class="headerlink" title="使用join代替subquery: 搜索出生日期比对应教授早的助手(助手需要在对应教授手下工作)"></a>使用join代替subquery: 搜索出生日期比对应教授早的助手(助手需要在对应教授手下工作)</h2><ul><li>correlated sub-query:</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.*</span><br><span class="line"><span class="keyword">from</span> assistenten a</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> p.*</span><br><span class="line">    <span class="keyword">from</span> professoren p</span><br><span class="line">    <span class="keyword">where</span> a.boss = p.persnr <span class="keyword">and</span> p.gebdatum &gt; a.gebdatum</span><br><span class="line">          )</span><br></pre></td></tr></tbody></table></figure><ul><li>unnested query(去嵌套):</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.*</span><br><span class="line"><span class="keyword">from</span> assistenten a, professoren p</span><br><span class="line"><span class="keyword">where</span> a.boss = p.persnr <span class="keyword">and</span> p.gebdatum &gt; a.gebdatum</span><br></pre></td></tr></tbody></table></figure><p>这时候我们直接用<code>join</code>来对原correlated sub-query去嵌套。采用<code>join</code>原因之一是：这时候不需要和所有professoren进行比较，只需要和对应的一个professor比较。</p><p><br></p><hr><h1 id="普遍作法"><a href="#普遍作法" class="headerlink" title="普遍作法"></a>普遍作法</h1><p>我们这里给出一个普遍的作法，但是不百分之百和原论文的想法契合。具体作法最好参考原论文：</p><p>下面这个很明显是一个关联的查询，子查询中需要外界<code>r1</code>的<code>attr1</code>, <code>attr2</code>。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ...</span><br><span class="line"><span class="keyword">from</span> r1, </span><br><span class="line"><span class="keyword">where</span> ... </span><br><span class="line">(</span><br><span class="line">        <span class="keyword">select</span> ...</span><br><span class="line">        <span class="keyword">from</span> r2</span><br><span class="line">        <span class="keyword">where</span> r1.attr1 = ... <span class="keyword">and</span> r1.attr2 = ...</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>那么我们就将这个子查询给抽离出来到<code>from</code>下面或者<code>with</code>里面，提前用不关联的方式物理化它的结果，而不是之后进行低效的笛卡尔积。<br>如果我们想用不关联的方式物理化子查询的结果，我们可以需要<code>r1</code>这个表格的另外一份复制品，但是实际上我们只需要<code>r1</code>中和join相关的字段值：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ...</span><br><span class="line"><span class="keyword">from</span> r1, </span><br><span class="line">       (</span><br><span class="line">        <span class="keyword">select</span> d.attr1, d.attr2 <span class="comment">-- 有可能还有其他聚合函数</span></span><br><span class="line">        <span class="keyword">from</span> r2,</span><br><span class="line">             (<span class="keyword">select</span> <span class="keyword">distinct</span> r1.attr1, r1.attr2 <span class="keyword">from</span> r1) <span class="keyword">as</span> d</span><br><span class="line">        <span class="keyword">where</span> d.attr1 = ... <span class="keyword">and</span> d.attr2 = ...</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> d.attr1, d.attr2</span><br><span class="line">        ) <span class="keyword">as</span> precomputed</span><br><span class="line"><span class="keyword">where</span> ... </span><br><span class="line">        precomputed.attr1 = r1.attr1 <span class="keyword">and</span></span><br><span class="line">        precomputed.attr2 = r1.attr1</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="TPC-H例子一-1"><a href="#TPC-H例子一-1" class="headerlink" title="TPC-H例子一 1"></a>TPC-H例子一 <sup><a href="#fn1">1</a></sup></h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(l_extendedprice)</span><br><span class="line"><span class="keyword">from</span> lineitem l1</span><br><span class="line"><span class="keyword">where</span> l_extendedprice =</span><br><span class="line">   (<span class="keyword">select</span> <span class="keyword">min</span>(l_extendedprice)</span><br><span class="line">    <span class="keyword">from</span> lineitem l2</span><br><span class="line">    <span class="keyword">where</span> l1.l_orderkey = l2.l_orderkey);</span><br></pre></td></tr></tbody></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(l_extendedprice)</span><br><span class="line"><span class="keyword">from</span> lineitem l1,</span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">min</span>(l_extendedprice) m, l_orderkey</span><br><span class="line">    <span class="keyword">from</span> lineitem</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> l_orderkey) l2</span><br><span class="line"><span class="keyword">where</span> l1.l_orderkey = l2.l_orderkey</span><br><span class="line"><span class="keyword">and</span> l_extendedprice = l2.m;</span><br></pre></td></tr></tbody></table></figure><ul><li>这里我们只需要对<code>l2</code>进行一次求值。</li></ul><p><br></p><h1 id="TPC-H例子二-1"><a href="#TPC-H例子二-1" class="headerlink" title="TPC-H例子二 1"></a>TPC-H例子二 <sup><a href="#fn1">1</a></sup></h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c1.c_name</span><br><span class="line"><span class="keyword">from</span> customer c1</span><br><span class="line"><span class="keyword">where</span> c1.c_mktsegment = <span class="string">'AUTOMOBILE'</span> </span><br><span class="line">      <span class="keyword">or</span> c1.c_acctbal &gt;</span><br><span class="line">                        (<span class="keyword">select</span> <span class="keyword">avg</span>(c2.c_acctbal)</span><br><span class="line">                        <span class="keyword">from</span> customer c2</span><br><span class="line">                        <span class="keyword">where</span> c2.c_mktsegment = c1.c_mktsegment);</span><br></pre></td></tr></tbody></table></figure><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c1.c_name</span><br><span class="line"><span class="keyword">from</span> customer c1, (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">avg</span>(c.c_acctbal) <span class="keyword">as</span> <span class="keyword">avg</span>, c_mktsegment</span><br><span class="line">    <span class="keyword">from</span> customer c</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> c_mktsegment</span><br><span class="line">    ) <span class="keyword">as</span> c2</span><br><span class="line"><span class="keyword">where</span> (c1.c_mktsegment = <span class="string">'AUTOMOBILE'</span></span><br><span class="line">      <span class="keyword">or</span> c1.c_acctbal &gt; c2.avg)</span><br><span class="line">      <span class="keyword">and</span> c1.c_mktsegment = c2.c_mktsegment</span><br></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> c2 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">avg</span>(c.c_acctbal) <span class="keyword">as</span> <span class="keyword">avg</span>, c_mktsegment</span><br><span class="line">    <span class="keyword">from</span> customer c</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> c_mktsegment</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> c1.c_name</span><br><span class="line"><span class="keyword">from</span> customer c1, c2</span><br><span class="line"><span class="keyword">where</span> (c1.c_mktsegment = <span class="string">'AUTOMOBILE'</span></span><br><span class="line">      <span class="keyword">or</span> c1.c_acctbal &gt; c2.avg)</span><br><span class="line">      <span class="keyword">and</span> c1.c_mktsegment = c2.c_mktsegment</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="TPC-H-Q17-例子"><a href="#TPC-H-Q17-例子" class="headerlink" title="TPC-H Q17 例子"></a>TPC-H Q17 例子</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- TPC-H Query 17</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">        <span class="keyword">sum</span>(l_extendedprice) / <span class="number">7.0</span> <span class="keyword">as</span> avg_yearly</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        lineitem,</span><br><span class="line">        part</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        p_partkey = l_partkey</span><br><span class="line">        <span class="keyword">and</span> p_brand = <span class="string">'Brand#23'</span></span><br><span class="line">        <span class="keyword">and</span> p_container = <span class="string">'MED BOX'</span></span><br><span class="line">        <span class="keyword">and</span> l_quantity &lt; (</span><br><span class="line">                <span class="keyword">select</span></span><br><span class="line">                        <span class="number">0.2</span> * <span class="keyword">avg</span>(l_quantity)</span><br><span class="line">                <span class="keyword">from</span></span><br><span class="line">                        lineitem</span><br><span class="line">                <span class="keyword">where</span></span><br><span class="line">                        l_partkey = p_partkey</span><br><span class="line">        )</span><br></pre></td></tr></tbody></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>很清晰，关联(nested, correlated)的部分如下：<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">from</span><br><span class="line">        lineitem,</span><br><span class="line">        part</span><br><span class="line">...</span><br><span class="line">        and l_quantity &lt; (</span><br><span class="line">                <span class="keyword">select</span></span><br><span class="line">                        <span class="number">0.2</span> * <span class="keyword">avg</span>(l_quantity)</span><br><span class="line">                <span class="keyword">from</span></span><br><span class="line">                        lineitem</span><br><span class="line">                <span class="keyword">where</span></span><br><span class="line">                        l_partkey = p_partkey</span><br><span class="line">        )</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>p_partkey</code>是这个子查询(Sub-Query)中来自外查询的字段，也就是它造成了这个依赖(dependency)。</p><p>我们用文字去描述一下这个关联部分:  </p><ul><li>对每一个子查询的<code>lineitem</code>的元组，需要它的<code>l_partkey</code>字段值依赖于外界<code>part</code>的对应<code>p_partkey</code>字段值。</li><li>外依赖条件指：<code>l_partkey = p_partkey</code></li><li>$D$是<code>part.p_partkey</code>对应字段值的集合。</li></ul><p>我们可以完全抽离这个关联部分到另外一个暂时的表格，再用<strong>外依赖条件</strong>和它regular join。</p><h2 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">        <span class="keyword">sum</span> (l_extendedprice) / <span class="number">7.0</span> <span class="keyword">as</span> avg_yearly</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        lineitem l,</span><br><span class="line">        part,</span><br><span class="line">        (</span><br><span class="line">            <span class="keyword">select</span></span><br><span class="line">                    <span class="number">0.2</span> * <span class="keyword">avg</span> (l_quantity) <span class="keyword">avg</span>, l_partkey</span><br><span class="line">            <span class="keyword">from</span></span><br><span class="line">                    lineitem</span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">                    l_partkey</span><br><span class="line">        ) quaprecomputednt</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        p_partkey = l. l_partkey</span><br><span class="line">        <span class="keyword">and</span> p_brand = <span class="string">'Brand #23'</span></span><br><span class="line">        <span class="keyword">and</span> p_container = <span class="string">'MED BOX'</span></span><br><span class="line">        <span class="keyword">and</span> precomputed.l_partkey = p_partkey  <span class="comment">-- 使用外依赖条件的regular join</span></span><br><span class="line">        <span class="keyword">and</span> l_quantity &lt; precomputed.avg       <span class="comment">-- 去除原依赖</span></span><br></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> precomputed <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">            <span class="number">0.2</span> * <span class="keyword">avg</span> (l_quantity) <span class="keyword">avg</span> , l_partkey</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">            lineitem</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">            l_partkey</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">        <span class="keyword">sum</span> (l_extendedprice) / <span class="number">7.0</span> <span class="keyword">as</span> avg_yearly</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        lineitem l,</span><br><span class="line">        part,</span><br><span class="line">        precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        p_partkey = l. l_partkey</span><br><span class="line">        <span class="keyword">and</span> p_brand = <span class="string">'Brand #23'</span></span><br><span class="line">        <span class="keyword">and</span> p_container = <span class="string">'MED BOX'</span></span><br><span class="line">        <span class="keyword">and</span> precomputed.l_partkey = p_partkey  <span class="comment">-- 使用外依赖条件的regular join</span></span><br><span class="line">        <span class="keyword">and</span> l_quantity &lt; precomputed.avg       <span class="comment">-- 去除原依赖</span></span><br></pre></td></tr></tbody></table></figure><p>引用: </p><p><a name="fn1">1</a>: TUM Foundation of Data Engineering Chap3.Advanced SQL: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvY2hhcHRlcjMucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de<i class="fa fa-external-link"></i></span></p><p>2.<span class="exturl" data-url="aHR0cHM6Ly9kbC5naS5kZS9iaXRzdHJlYW0vaGFuZGxlLzIwLjUwMC4xMjExNi8yNDE4LzM4My5wZGY/c2VxdWVuY2U9MQ==" title="https://dl.gi.de/bitstream/handle/20.500.12116/2418/383.pdf?sequence=1">Unnesting Arbitrary Queries - Thomas Neumann and Alfons Kemper - (BTW 2015)<i class="fa fa-external-link"></i></span></p><p>3.<a href="https://cakebytheoceanluo.github.io/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/">https://cakebytheoceanluo.github.io/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在一篇论文解读文章&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/&quot;&gt;[Paper]BTW 2015 | Unnesting Arbitrary Queries&lt;/a&gt;中提到了去关联, 在这一篇文章中我们对这个主题进行&lt;strong&gt;练习&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这个主题其实远比大家想象中的要实用: 对于1GiB大小左右的数据集，SQL查询如果拥有$O(n^2)$的时间复杂度，基本可以判断很慢，或者慢到无实际意义。往往我们使用的各种大名鼎鼎的开源数据库和商用数据库不一定支持Unnesting这个feature(具体的支持在各个数据库的Document中描述，在对应的论文中的Motivation部分也有简单提到)。这就意味着, 我们需要手动成为Query Optimizer去优化我们SQL的时间复杂度。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Query Optimizer" scheme="https://cakebytheoceanluo.github.io/categories/Query-Optimizer/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Query Optimizer" scheme="https://cakebytheoceanluo.github.io/tags/Query-Optimizer/"/>
    
      <category term="Subquery Optimization" scheme="https://cakebytheoceanluo.github.io/tags/Subquery-Optimization/"/>
    
  </entry>
  
</feed>
