<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>关于数据库的一切</title>
  <icon>https://www.gravatar.com/avatar/60437615b712b01d1a7c334c61fc1a4f</icon>
  <subtitle>罗济高的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cakebytheoceanluo.github.io/"/>
  <updated>2020-09-29T21:55:08.061Z</updated>
  <id>https://cakebytheoceanluo.github.io/</id>
  
  <author>
    <name>罗济高</name>
    <email>luojigao@outlook.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[CMU-15445]Lec08</title>
    <link href="https://cakebytheoceanluo.github.io/2020/09/29/CMU-15445-Lec08/"/>
    <id>https://cakebytheoceanluo.github.io/2020/09/29/CMU-15445-Lec08/</id>
    <published>2020-09-29T21:46:02.000Z</published>
    <updated>2020-09-29T21:55:08.061Z</updated>
    
    <content type="html"><![CDATA[<p>Tree Indexes Part II - 树索引 II</p><p>Slide: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA4LXRyZWVzMi5wZGY=" title="https://15445.courses.cs.cmu.edu/fall2019/slides/08-trees2.pdf">https://15445.courses.cs.cmu.edu/fall2019/slides/08-trees2.pdf<i class="fa fa-external-link"></i></span><br>Note: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDgtdHJlZXMyLnBkZg==" title="https://15445.courses.cs.cmu.edu/fall2019/notes/08-trees2.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/08-trees2.pdf<i class="fa fa-external-link"></i></span><br>Readings:  Chapter 11.1-11.4</p><p>Database Tree Indexes 在CMU分成了两部分，在两节课中讲。这是第二部分。</p><p>这节课中，我们会学习数据库的中使用的除了B+树以外的树，这节课依然很数据结构。</p><p>因此，延续数据结构的思路，大家上完这节课可以思考一下，为什么我们没有见到我们学过的其他数据结构 - Binary Tree, AVL Tree, Red Black Tree? 它们适合数据库吗?</p><a id="more"></a><p><img data-src="/images/CMU1544564/Lec08/1.jpg" alt="1.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/3.jpg" alt="3.jpg"></p><p><br></p><h2 id="Duplicate-Keys"><a href="#Duplicate-Keys" class="headerlink" title="Duplicate Keys"></a>Duplicate Keys</h2><p><img data-src="/images/CMU1544564/Lec08/4.jpg" alt="4.jpg"></p><ul><li>处理Duplicate Keys有两种方法: Append Record Id, Overflow Leaf Nodes。我们下面会用例子去了解这两种作法。</li></ul><h3 id="Append-Record-Id"><a href="#Append-Record-Id" class="headerlink" title="Append Record Id"></a>Append Record Id</h3><p>我们之前提到过Record Id, 见<a href="https://cakebytheoceanluo.github.io/2020/03/11/CMU-15445-Lec03/#Record-ids-%E2%80%94-Unique-identifier">[CMU-15445] Lec03 Database Storage Part I - 数据库存储 I -Record ids - Unique identifier</a></p><p>Record Id又称RID，它代表对应元素存储的位置， 自然这个位置可以确定唯一的元素。</p><p><br></p><p>Append Record Id方法中: 我们即存储Key(可以重复), 也存储Record Id(不可能重复)。</p><p>比如下图中的<code>1</code>实际在page中的表示是<code>1 | record id of 1</code>:</p><p><img data-src="/images/CMU1544564/Lec08/5.jpg" alt="5.jpg"></p><h4 id="例子-Insert-6"><a href="#例子-Insert-6" class="headerlink" title="例子: Insert 6"></a>例子: Insert 6</h4><p>树中已经有了一个<code>6</code>, 我们假设它实际上是<code>6 | record id x</code>。另外我们还希望再插入另外一个<code>6</code>, 我们先将这个新的<code>6</code>存储在<code>record id y</code>，那么它在树中对应的表达应该是<code>6 | record id y</code>, 我们将这个对 插入树中:</p><p><img data-src="/images/CMU1544564/Lec08/6.jpg" alt="6.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/7.jpg" alt="7.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/8.jpg" alt="8.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/9.jpg" alt="9.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/10.jpg" alt="10.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/11.jpg" alt="11.jpg"></p><p><br></p><h3 id="Overflow-Leaf-Nodes"><a href="#Overflow-Leaf-Nodes" class="headerlink" title="Overflow Leaf Nodes"></a>Overflow Leaf Nodes</h3><p>Overflow Leaf Nodes使用另外一种方式，我们不再存储record id, 而是将重复的key存储在另外一个page上， 称为overflow page。这个page上我们选择不排序，同时还允许数值重复出现。我们每次插入在这个page的最后端。如果我们需要在overflow leaft nodes搜索数值，需要采取linear search, 原因是数值没有被排序。</p><p>具体见下列例子: </p><h4 id="Insert-6-7-6"><a href="#Insert-6-7-6" class="headerlink" title="Insert 6, 7, 6"></a>Insert 6, 7, 6</h4><p><img data-src="/images/CMU1544564/Lec08/12.jpg" alt="12.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/13.jpg" alt="13.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/14.jpg" alt="14.jpg"></p><p>overflow leaf nodes如果满了，依然还可以去增加新的overflow page给它。</p><hr><h1 id="SQL-Demo"><a href="#SQL-Demo" class="headerlink" title="SQL Demo"></a>SQL Demo</h1><p><img data-src="/images/CMU1544564/Lec08/15.jpg" alt="15.jpg"></p><p>更多关于这个 Demo 实验，见:</p><ul><li><a href="https://cakebytheoceanluo.github.io/2020/04/13/DBMS-Hash-Index%E4%B8%8ETree-Index/">[DBMS] Hash Index 与 Tree Index</a></li><li><a href="https://cakebytheoceanluo.github.io/2020/04/15/DBMS-Cluster-Index/">[DBMS] Cluster Index</a></li><li><a href="https://cakebytheoceanluo.github.io/2020/04/14/DBMS-Tree-Index-pageinspect/">[DBMS] Tree Index pageinspect 索引页面内容</a></li></ul><hr><h1 id="Additional-Index-Usage"><a href="#Additional-Index-Usage" class="headerlink" title="Additional Index Usage"></a>Additional Index Usage</h1><h2 id="Implicit-Indexes"><a href="#Implicit-Indexes" class="headerlink" title="Implicit Indexes"></a>Implicit Indexes</h2><blockquote><p>Implicit Indexes: Most DBMSs will automatically create an index to enforce integrity constraints (e.g., primary keys, unique constraints)</p></blockquote><h3 id="SERIAL-PRIMARY-KEY-UNIQUE"><a href="#SERIAL-PRIMARY-KEY-UNIQUE" class="headerlink" title="SERIAL PRIMARY KEY, UNIQUE"></a><code>SERIAL PRIMARY KEY</code>, <code>UNIQUE</code></h3><p><code>SERIAL PRIMARY KEY</code>, <code>UNIQUE</code>这些integrity constraint可以确定数值的<strong>唯一性</strong>。因此大多数数据库会给它们自动建立索引。</p><p><img data-src="/images/CMU1544564/Lec08/16.jpg" alt="16.jpg"></p><h3 id="REFERENCES-foreign-key"><a href="#REFERENCES-foreign-key" class="headerlink" title="REFERENCES - foreign key"></a><code>REFERENCES</code> - foreign key</h3><p>但是对<code>REFERENCES</code> - foreign key不会自动建立索引，因为foreign key对应的数值不一定是唯一的。比如下面的<code>foo.val1</code>是另外一个关系<code>bar</code>的外键foreign key, 但不会给它新建索引，原因是<code>foo.val1</code>可以是有重复值的。</p><p><img data-src="/images/CMU1544564/Lec08/18.jpg" alt="18.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/19.jpg" alt="19.jpg"></p><p><br></p><p><code>foo.val1</code>如果是<code>UNIQUE</code>的话，那对它建立索引也变得合理了。</p><p><img data-src="/images/CMU1544564/Lec08/20.jpg" alt="20.jpg"></p><h2 id="Partial-Indexes"><a href="#Partial-Indexes" class="headerlink" title="Partial Indexes"></a>Partial Indexes</h2><blockquote><p>Partial Indexes: Create an index on a subset of the entire table. This potentially reduces size and the amount of overhead to maintain it.</p></blockquote><p>Partial Indexes并不对整个关系中的所有tuple建立索引，只是对其中的一部分建立索引。下列例子中，只是对符合<code>foo.c = 'WuTang'</code>的tuple建立索引，因此也只能对这些tuple应用索引加速。</p><p><img data-src="/images/CMU1544564/Lec08/22.jpg" alt="22.jpg"></p><h2 id="Covering-Indexes"><a href="#Covering-Indexes" class="headerlink" title="Covering Indexes"></a>Covering Indexes</h2><blockquote><p>Covering Indexes: All attributes needed to process the query are available in an index, then the DBMS does not need to retrieve the tuple. The DBMS can complete the entire query just based on the data available in the index.</p></blockquote><p>Covering Indexes意味我们可以直接从index索引数据结构中获得数据，不需要跳到table存储的位置再读取信息。这样能带来更好的look up性能，但是也意味着index建立需要更长时间，index数据结构需要占据更多存储位置。因为数据被<strong>复制</strong>, 在table存储也被在index中存储，每一次数据变动都需要更新两个地方。</p><p><img data-src="/images/CMU1544564/Lec08/24.jpg" alt="24.jpg"></p><h2 id="Index-Include-Columns"><a href="#Index-Include-Columns" class="headerlink" title="Index Include Columns"></a>Index Include Columns</h2><p>Index Include Columns在Covering Indexes的基础上，再存储了另外的字段。这个<strong>另外的字段</strong>并不进入index索引判断，只是为了避免跳到table存储的位置再读取信息，提高性能。</p><p>这词很有趣，piggyback，<strong>另外的字段</strong>也就是被捎带的。它不会被存储在inner node, 因为不起到索引的作用。但是被存储在leaf node中。</p><p><img data-src="/images/CMU1544564/Lec08/25.jpg" alt="25.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/26.jpg" alt="26.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/28.jpg" alt="28.jpg"></p><h2 id="Functional-Expression-Indexes"><a href="#Functional-Expression-Indexes" class="headerlink" title="Functional / Expression Indexes"></a>Functional / Expression Indexes</h2><blockquote><p>Function/Expression Indexes: Store the output of a function or expression as the key instead of the original value. It is the DBMS’s job to recognize which queries can use that index.</p></blockquote><p><code>EXTRACT(dow FROM login) = 2</code>:</p><ul><li><code>dow</code> := day of week</li><li><code>EXTRACT(dow FROM login)</code> 从<code>login</code>这个时间点中获得<code>dow</code></li><li><code>EXTRACT(dow FROM login) = 2</code> 要求login时间点对应星期二</li></ul><p>对于<code>login</code>内部读取出的<code>dow</code>数据，针对<code>login</code>的索引不能帮助我们。</p><p><img data-src="/images/CMU1544564/Lec08/29.jpg" alt="29.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/30.jpg" alt="30.jpg"></p><p><br></p><p>Function/Expression Indexes在这种情况能帮助我们，它可以针对<code>login</code>中读取出的<code>dow</code>建立索引。</p><p>另外这种情况，我们上面见到的Pratial Index也可以帮助我们。具体情况，具体分析。</p><p><img data-src="/images/CMU1544564/Lec08/33.jpg" alt="33.jpg"></p><h1 id="实验部分"><a href="#实验部分" class="headerlink" title="实验部分"></a>实验部分</h1><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>数据集导入和使用见: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#%E6%97%B6%E9%97%B4%E6%95%B0%E6%8D%AE%E9%9B%86">[DBMS] PostgreSQL 导入数据集 - 时间数据集</a></p><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">testdb=# <span class="built_in">set</span> max_parallel_workers_per_gather = <span class="number">0</span>;</span><br><span class="line">SET</span><br><span class="line">testdb=# CREATE EXTENSION pg_prewarm;</span><br><span class="line">CREATE EXTENSION</span><br><span class="line">testdb=# SELECT pg_prewarm('users');</span><br><span class="line"> pg_prewarm </span><br><span class="line">------------</span><br><span class="line">      <span class="number">15023</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line">testdb=# \timing</span><br><span class="line">Timing is on.</span><br></pre></td></tr></tbody></table></figure><h2 id="实验主体"><a href="#实验主体" class="headerlink" title="实验主体"></a>实验主体</h2><h3 id="无Index"><a href="#无Index" class="headerlink" title="无Index"></a>无Index</h3><p>无index的情况下，只能使用sequantial scan:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">testdb=# SELECT AVG(id) FROM users WHERE EXTRACT(dow FROM login) = <span class="number">2</span>;</span><br><span class="line">         avg          </span><br><span class="line">----------------------</span><br><span class="line"> <span class="number">1388880.500000000000</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">607.678</span> ms</span><br><span class="line">testdb=# EXPLAIN SELECT AVG(id) FROM users WHERE EXTRACT(dow FROM login) = <span class="number">2</span>;</span><br><span class="line">                               QUERY PLAN                                </span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">56744.81</span>.<span class="number">.56744</span><span class="number">.82</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">32</span>)</span><br><span class="line">   -&gt;  <span class="function">Seq Scan on <span class="title">users</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.56710</span><span class="number">.07</span> rows=<span class="number">13896</span> <span class="built_in">width</span>=<span class="number">4</span>)</span></span></span><br><span class="line">         Filter: (date_part('dow'::text, login) = '2'::double precision)</span><br><span class="line">(<span class="number">3</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.789</span> ms</span><br></pre></td></tr></tbody></table></figure><h3 id="有Index"><a href="#有Index" class="headerlink" title="有Index"></a>有Index</h3><p>我们使用了Function/Expression Index来优化查询，这样每次查询的时间缩短了很多。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">testdb=# CREATE INDEX idx_user_login_partial ON users (login) WHERE EXTRACT(dow FROM login) = <span class="number">2</span>;</span><br><span class="line">CREATE INDEX</span><br><span class="line">testdb: <span class="number">805.588</span> ms</span><br><span class="line">time=# SELECT AVG(id) FROM users WHERE EXTRACT(dow FROM login) = <span class="number">2</span>;</span><br><span class="line">         avg          </span><br><span class="line">----------------------</span><br><span class="line"> <span class="number">1388880.500000000000</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">67.753</span> ms</span><br><span class="line">testdb=# EXPLAIN SELECT AVG(id) FROM users WHERE EXTRACT(dow FROM login) = <span class="number">2</span>;</span><br><span class="line">                                           QUERY PLAN                                           </span><br><span class="line">------------------------------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">478.61</span>.<span class="number">.478</span><span class="number">.62</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">32</span>)</span><br><span class="line">   -&gt;  <span class="function">Index Scan <span class="keyword">using</span> idx_user_login_partial on <span class="title">users</span>  <span class="params">(cost=<span class="number">0.42</span>.<span class="number">.443</span><span class="number">.86</span> rows=<span class="number">13896</span> <span class="built_in">width</span>=<span class="number">4</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">2</span> rows)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">Time: 0.464 ms</span><br></pre></td></tr></tbody></table></figure><hr><h1 id="Observation-1"><a href="#Observation-1" class="headerlink" title="Observation 1"></a>Observation 1</h1><p>如果我们想在B+ Tree中搜索一个明知道不存在的key， 我们需要从root node经过inner node，到达leaf node，在遍历leaf node完以后，才能最终发现这个key不存在。</p><p><img data-src="/images/CMU1544564/Lec08/34.jpg" alt="34.jpg"></p><h1 id="Trie-Index"><a href="#Trie-Index" class="headerlink" title="Trie Index"></a>Trie Index</h1><p>Trie Index是另外一种树型tree-like的数据结构。它能解决我们上面的观察，它能搜索的途中发现一个key不存在于树中，不必从root到leaf。</p><p>Trie Index也称为: Digital Search Tree, Prefix Tree。 <strong>Radix Tree是Trie Tree的一种。</strong></p><p>Digital Representation: 可以是Bit, Byte, Char, Digit</p><p>Key不会以一个整体的形式直接出现，而是被解体分开decomponent至每一层。我们可以从路径(从root至leaf方向)中读出key。</p><p>下图中的最后的红色标志: 可以是对应的Record ID</p><p><img data-src="/images/CMU1544564/Lec08/36.jpg" alt="36.jpg"></p><h2 id="Trie-Index-Properties-vs-B-Tree-Properties"><a href="#Trie-Index-Properties-vs-B-Tree-Properties" class="headerlink" title="Trie Index Properties vs. B+ Tree Properties"></a>Trie Index Properties vs. B+ Tree Properties</h2><blockquote><p>A radix tree is a variant of a trie data structure. It uses digital representation of keys to examine prefixes one-by-one instead of comparing entire key. It is different than a trie in that there is not a node for each element in key, nodes are consolidated to represent the largest prefix before keys differ.</p><p>The height of tree depends on the length of keys and not the number of keys like in a + Tree. The path to a leaf nodes represents the key of the leaf. Not all attribute types can be decomposed into binary comparable digits for a radix tree.</p></blockquote><p><br></p><div class="table-container"><table><thead><tr><th>-</th><th>Trie Index</th><th>B+ Tree</th></tr></thead><tbody><tr><td><strong>树形状</strong></td><td>确定，不会根据insert的先后顺序变化。树形状的确定性由key的特征决定: 长度</td><td>不确定，会根据insert的先后顺序变化。有不同形状的树，但是它们包含的key是一样的。</td></tr><tr><td><strong>自平衡re-balance</strong></td><td>不需要</td><td>需要</td></tr><tr><td><strong>确定key是否存在</strong></td><td>不必须从root到leaf</td><td>必须从root到leaf</td></tr><tr><td><strong>key存储</strong></td><td>key不直接(implicitly stored)出现在树中。需要从root读到leaf, 才能间接地重建re-constructkey</td><td>key肯定直接存在于leaf node中，部分key另外还出现在root node和inner node中</td></tr><tr><td><strong>lookup, insert, delete - point query</strong></td><td>$O(k)$, k := length of the key， 大概率更快</td><td>$O(\log(n))$, n := number of keys， 大概率更慢</td></tr><tr><td><strong>sequential scan - range query</strong></td><td>leaf node间的sequential scan无意义。sequential scan相对繁琐，而且效率一般。每次遇到一个分岔，需要记录(track path), 遍历完一个分支以后，需要遍历分岔的其他分支。 — DFS深度搜索</td><td>可以进行leaf node间的sequential scan。非常简单且高效(sequential I/O)</td></tr></tbody></table></div><p><img data-src="/images/CMU1544564/Lec08/37.jpg" alt="37.jpg"></p><h2 id="Trie-Key-Span"><a href="#Trie-Key-Span" class="headerlink" title="Trie Key Span"></a>Trie Key Span</h2><p>Span:= 指的是key对应的进制编码</p><p>1-bit Span Trie:= 存储2进制的key，每一个node的分支数fan-out是2， 即0和1这两种可能。也叫2-way Trie。</p><p><img data-src="/images/CMU1544564/Lec08/38.jpg" alt="38.jpg"></p><h3 id="1-bit-Span-Trie例子"><a href="#1-bit-Span-Trie例子" class="headerlink" title="1-bit Span Trie例子"></a>1-bit Span Trie例子</h3><p>我们存储3个key: 10, 25, 31到下面的1-bit Span Trie中，具体key的二进制表达见下图:</p><p><img data-src="/images/CMU1544564/Lec08/40.jpg" alt="40.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/41.jpg" alt="41.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/42.jpg" alt="42.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/43.jpg" alt="43.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/44.jpg" alt="44.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/45.jpg" alt="45.jpg"></p><h3 id="优化1-horizontal-compreesion"><a href="#优化1-horizontal-compreesion" class="headerlink" title="优化1: horizontal compreesion"></a>优化1: horizontal compreesion</h3><p>因为是1-bit Span Trie，我们<strong>总是</strong>有两种选择: 0和1。我们可以不必存储0和1:</p><p><img data-src="/images/CMU1544564/Lec08/46.jpg" alt="46.jpg"></p><h3 id="优化2-vertical-compreesion"><a href="#优化2-vertical-compreesion" class="headerlink" title="优化2: vertical compreesion"></a>优化2: vertical compreesion</h3><p>另外如果当前路径已经确定 <strong>专属于一个key (single match)</strong> 的话，我们可以在最先可以确定唯一性的地方提前终止，提供指向tuple的record ID。这样能够减少存储量 - vertical compreesion。同时也可以提高性能。这样的树也被称为: <strong>Patricia Tree</strong>。</p><p>下图红圈的部分都是可以唯一确定key的，因此红圈部分被压缩，提前终止:</p><p><img data-src="/images/CMU1544564/Lec08/47.jpg" alt="47.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/48.jpg" alt="48.jpg"></p><p><br></p><h2 id="Insert-Delete"><a href="#Insert-Delete" class="headerlink" title="Insert, Delete"></a>Insert, Delete</h2><p>Radix Tree没特定的Modification算法。但是insert, delete都不困难。</p><p>Radix Tree允许多个字母一个节点，不同于Trie Tree。</p><h3 id="Insert-HAIR"><a href="#Insert-HAIR" class="headerlink" title="Insert HAIR"></a>Insert HAIR</h3><p><img data-src="/images/CMU1544564/Lec08/49.jpg" alt="49.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/50.jpg" alt="50.jpg"></p><h3 id="Delete-HAT"><a href="#Delete-HAT" class="headerlink" title="Delete HAT"></a>Delete HAT</h3><p><img data-src="/images/CMU1544564/Lec08/51.jpg" alt="51.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/52.jpg" alt="52.jpg"></p><h3 id="Delete-HAVE"><a href="#Delete-HAVE" class="headerlink" title="Delete HAVE"></a>Delete HAVE</h3><p><img data-src="/images/CMU1544564/Lec08/53.jpg" alt="53.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/54.jpg" alt="54.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/55.jpg" alt="55.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/56.jpg" alt="56.jpg"></p><p>最后一步中，我们尽可能的merge不必要的分岔，这样我们可以更早的去搜速到<code>HAIR</code></p><p><br></p><h2 id="Binary-Comparable-Keys"><a href="#Binary-Comparable-Keys" class="headerlink" title="Binary Comparable Keys"></a>Binary Comparable Keys</h2><p>(这部分Fall2019 上课没有讲, 我尝试去读一下课件。)</p><p>Trie Tree中如果使用Big Endian的表达，即从高位bit代表高位数字。那么我们需要从机器的Little Endian中倒转顺序。(X86的绝大部分CPU都是使用Little Endian)</p><p><img data-src="/images/CMU1544564/Lec08/57.jpg" alt="57.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/59.jpg" alt="59.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/60.jpg" alt="60.jpg"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hex(168496141)</span><br><span class="line"><span class="string">'0xa0b0c0d'</span></span><br><span class="line">&gt;&gt;&gt; hex(658205)</span><br><span class="line"><span class="string">'0xa0b1d'</span></span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><h1 id="Observation-2"><a href="#Observation-2" class="headerlink" title="Observation 2"></a>Observation 2</h1><p>Tree Index只适合做point query和range query， 而不是适合做keyword search:</p><p><img data-src="/images/CMU1544564/Lec08/61.jpg" alt="61.jpg"></p><h2 id="Wikipedia-Example"><a href="#Wikipedia-Example" class="headerlink" title="Wikipedia Example"></a>Wikipedia Example</h2><p><img data-src="/images/CMU1544564/Lec08/62.jpg" alt="62.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/63.jpg" alt="63.jpg"></p><p>上面的SQL并不正确: 会搜索到<code>Pavlote</code>这样将<code>Pavlo</code>当做substring的词。</p><h1 id="Inverted-Index"><a href="#Inverted-Index" class="headerlink" title="Inverted Index"></a>Inverted Index</h1><p><img data-src="/images/CMU1544564/Lec08/64.jpg" alt="64.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/65.jpg" alt="65.jpg"></p><p><img data-src="/images/CMU1544564/Lec08/66.jpg" alt="66.jpg"></p><p>实际上这部分已经完全不再是课程的重点了，这些特殊的数据库甚至不再是关系数据库，关系表格的联系也在弱化。我提几个关键词和链接，大家可以自行了解:</p><ul><li>SPARQL</li><li>Linked Open Data Cloud</li><li>RDF datasets </li><li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvY2hhcHRlcjYucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/chapter6.pdf?lang=de">TUM - Foundations in Data Engineering - Other Data Models<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvUkRGUXVlcnlPcHQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/RDFQueryOpt.pdf?lang=de">TUM - Foundations in Data Engineering - RDF Query Optimization<i class="fa fa-external-link"></i></span></li></ul><p>另外推荐论文: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvfmxlaXMvcGFwZXJzL0FSVC5wZGY=" title="https://db.in.tum.de/~leis/papers/ART.pdf">The Adaptive Radix Tree: ARTful Indexing for Main-Memory Databases<i class="fa fa-external-link"></i></span></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p><img data-src="/images/CMU1544564/Lec08/67.jpg" alt="67.jpg"></p><ul><li>CMU 11-442 Search Engines: <span class="exturl" data-url="aHR0cHM6Ly9ib3N0b24ubHRpLmNzLmNtdS5lZHUvY2xhc3Nlcy8xMS02NDIv" title="https://boston.lti.cs.cmu.edu/classes/11-642/">https://boston.lti.cs.cmu.edu/classes/11-642/<i class="fa fa-external-link"></i></span></li><li>CMU 15-826 Multimedia Databases and Data Mining: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY3MuY211LmVkdS9+Y2hyaXN0b3MvY291cnNlcy84MjYuUzE3Lw==" title="https://www.cs.cmu.edu/~christos/courses/826.S17/">https://www.cs.cmu.edu/~christos/courses/826.S17/<i class="fa fa-external-link"></i></span></li></ul><p><img data-src="/images/CMU1544564/Lec08/68.jpg" alt="68.jpg"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tree Indexes Part II - 树索引 II&lt;/p&gt;
&lt;p&gt;Slide: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA4LXRyZWVzMi5wZGY=&quot; title=&quot;https://15445.courses.cs.cmu.edu/fall2019/slides/08-trees2.pdf&quot;&gt;https://15445.courses.cs.cmu.edu/fall2019/slides/08-trees2.pdf&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Note: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDgtdHJlZXMyLnBkZg==&quot; title=&quot;https://15445.courses.cs.cmu.edu/fall2019/notes/08-trees2.pdf&quot;&gt;https://15445.courses.cs.cmu.edu/fall2019/notes/08-trees2.pdf&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Readings:  Chapter 11.1-11.4&lt;/p&gt;
&lt;p&gt;Database Tree Indexes 在CMU分成了两部分，在两节课中讲。这是第二部分。&lt;/p&gt;
&lt;p&gt;这节课中，我们会学习数据库的中使用的除了B+树以外的树，这节课依然很数据结构。&lt;/p&gt;
&lt;p&gt;因此，延续数据结构的思路，大家上完这节课可以思考一下，为什么我们没有见到我们学过的其他数据结构 - Binary Tree, AVL Tree, Red Black Tree? 它们适合数据库吗?&lt;/p&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Data Structure" scheme="https://cakebytheoceanluo.github.io/categories/Data-Structure/"/>
    
      <category term="Access Methods" scheme="https://cakebytheoceanluo.github.io/categories/Access-Methods/"/>
    
      <category term="B Tree" scheme="https://cakebytheoceanluo.github.io/categories/B-Tree/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/categories/Indexing/"/>
    
      <category term="Trie / Radix Tree" scheme="https://cakebytheoceanluo.github.io/categories/Trie-Radix-Tree/"/>
    
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/tags/Indexing/"/>
    
      <category term="B Tree" scheme="https://cakebytheoceanluo.github.io/tags/B-Tree/"/>
    
      <category term="Trie / Radix Tree" scheme="https://cakebytheoceanluo.github.io/tags/Trie-Radix-Tree/"/>
    
      <category term="Additional Index Usage" scheme="https://cakebytheoceanluo.github.io/tags/Additional-Index-Usage/"/>
    
  </entry>
  
  <entry>
    <title>[CMU-15445]19_Projet1_disk_manager</title>
    <link href="https://cakebytheoceanluo.github.io/2020/08/17/CMU-15445-19-Projet1-disk-manager/"/>
    <id>https://cakebytheoceanluo.github.io/2020/08/17/CMU-15445-19-Projet1-disk-manager/</id>
    <published>2020-08-17T13:20:11.000Z</published>
    <updated>2020-08-17T19:27:25.006Z</updated>
    
    <content type="html"><![CDATA[<p>Disk Manager是数据库中对磁盘文件操作的抽象。它提供给Buffer Manager的粒度是一个page, 即它操作的最小单元是一个page。而操作可以分为allocation分配和deallocation释放。</p><p>在CMU Bustub中Disk Manager总是针对一个文件，每次从它上面获得或者写入page大小的数据量。Bustub是模拟SQLite, 而SQLite作为一个简单的数据库，只操作一个文件。当然其他复杂的数据集需要操作多个文件，那对应的Disk Manager需要去对应多个文件(open, read, write, close等操作)。我们下次有机会去考虑一下这样多文件的Disk Manger如何实现。而这次我们先打好基础，去理解CMU Bustub中单文件的Disk Manager。</p><p>另外这篇文章中不关注Log。它需要之后单独描述。我们会区分Log(也对应一个文件)和File，File指那个特定的我们想读取和写入的文件。</p><p>(另外CMU Bustub中的Disk Manager和CMU 17Fall 18Fall对应项目的Disk Manager没有区别)</p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这部分我借用代码中的注释文档来对Disk Manager进行介绍:</p><ul><li>DiskManager takes care of the <strong>allocation and deallocation of pages</strong> within a database. It performs <strong>the reading and writing of pages to and from disk</strong>, providing a logical file layer within the context of a database management system.</li></ul><p><img data-src="https://cakebytheoceanluo.github.io/images/ModernDBS/Chap2/7.jpg" alt="7.jpg 引用见文章最后"></p><ul><li>Disk Manager隶属于上图File Interface: read block k, write block k</li><li>它可以对一个文件或者block进行读与写操作</li><li>它提供给Buffer Manager接口，让Buffer Manager可以以page粒度，对磁盘文件进行操作 (这就是Project1需要的部分)</li></ul><p><br></p><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Project19/P1_1.png" alt="引入"></p><ul><li>上图中我们在硬盘上有一个File <code>"test.db"</code>, 他的大小是15000bit</li><li>bustub中Page的大小是4KiB: <code>src/include/common/config.h</code>中:<ul><li><code>static constexpr int PAGE_SIZE = 4096;                                        // size of a data page in byte</code></li></ul></li><li>因此这个文件不是整数倍的page大小， 我们<strong>向上取整</strong>，需要4个page去读取这个文件。</li><li>4个page对应的page_id即图中的0, 1, 2, 3。</li><li>我们可以从这个例子中理解，page_id和File中的byte位置是对应。</li></ul><h1 id="bustub-DiskManager"><a href="#bustub-DiskManager" class="headerlink" title="bustub::DiskManager"></a><code>bustub::DiskManager</code></h1><p>我们接下来来看代码: </p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NtdS1kYi9idXN0dWIvYmxvYi9tYXN0ZXIvc3JjL2luY2x1ZGUvc3RvcmFnZS9kaXNrL2Rpc2tfbWFuYWdlci5o" title="https://github.com/cmu-db/bustub/blob/master/src/include/storage/disk/disk_manager.h">https://github.com/cmu-db/bustub/blob/master/src/include/storage/disk/disk_manager.h<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NtdS1kYi9idXN0dWIvYmxvYi9tYXN0ZXIvc3JjL3N0b3JhZ2UvZGlzay9kaXNrX21hbmFnZXIuY3Bw" title="https://github.com/cmu-db/bustub/blob/master/src/storage/disk/disk_manager.cpp">https://github.com/cmu-db/bustub/blob/master/src/storage/disk/disk_manager.cpp<i class="fa fa-external-link"></i></span></li></ul><h3 id="attributes"><a href="#attributes" class="headerlink" title="attributes"></a>attributes</h3><p>attributes均为private.</p><p>Log所需成员:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stream to write log file</span></span><br><span class="line"><span class="built_in">std</span>::fstream log_io_;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> log_name_;</span><br><span class="line"><span class="keyword">bool</span> flush_log_;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">future</span>&lt;<span class="keyword">void</span>&gt; *flush_log_f_;</span><br><span class="line"><span class="keyword">int</span> num_flushes_;</span><br></pre></td></tr></tbody></table></figure><p>另外有一个class以外的全局变量:<br></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *buffer_used;</span><br></pre></td></tr></tbody></table></figure><p></p><ul><li>它是LOG的缓存区</li></ul><p><br></p><p>File所需成员:<br></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stream to write db file</span></span><br><span class="line"><span class="built_in">std</span>::fstream db_io_;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> file_name_;</span><br><span class="line"><span class="built_in">std</span>::atomic&lt;<span class="keyword">page_id_t</span>&gt; next_page_id_;</span><br><span class="line"><span class="keyword">int</span> num_writes_;</span><br></pre></td></tr></tbody></table></figure><p></p><ul><li><code>std::fstream db_io_;</code>对应我们的File, 属于核心数据结构，提供文件操作,使用C++文件file stream接口。</li><li><code>std::string file_name_;</code>即文件名，用处是提供给<code>GetFileSize</code>方法</li><li><code>std::atomic&lt;page_id_t&gt; next_page_id_;</code>这个成员是<strong>线程安全的</strong>， 我们会在<code>AllocatePage</code>方法中用它</li><li><code>int num_writes_</code>记录<code>WritePage</code>调用的次数</li></ul><p><br></p><h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><h4 id="private-method"><a href="#private-method" class="headerlink" title="private method"></a>private method</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetFileSize</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;file_name)</span> </span>{</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat_buf</span>;</span></span><br><span class="line">  <span class="keyword">int</span> rc = stat(file_name.c_str(), &amp;stat_buf);</span><br><span class="line">  <span class="keyword">return</span> rc == <span class="number">0</span> ? <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(stat_buf.st_size) : <span class="number">-1</span>; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>GetFileSize</code>: 获得<code>file_name</code>文件的大小， 使用<code>stat</code>这个syscall, 见<span class="exturl" data-url="aHR0cDovL21hbjcub3JnL2xpbnV4L21hbi1wYWdlcy9tYW4yL3N0YXQuMi5odG1s" title="http://man7.org/linux/man-pages/man2/stat.2.html">man stat<i class="fa fa-external-link"></i></span></li><li><blockquote><pre><code>   int stat(const char *pathname, struct stat *statbuf);</code></pre></blockquote></li><li><blockquote><p>On success, <strong>zero</strong> is returned.  On error, -1 is returned, and <em>errno</em> is set appropriately.</p></blockquote></li><li><blockquote><pre><code>           off_t     st_size;        /* Total size, in bytes */</code></pre></blockquote></li></ul><p><br></p><h4 id="public-methods"><a href="#public-methods" class="headerlink" title="public methods"></a>public methods</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new disk manager that writes to the specified database file.</span></span><br><span class="line"><span class="comment"> * @param db_file the file name of the database file to write to</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">explicit DiskManager(const std::string &amp;db_file) : file_name_(db_file), next_page_id_(0), num_flushes_(0), num_writes_(0), flush_log_(false), flush_log_f_(nullptr) {</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::size_type n = file_name_.<span class="built_in">find</span>(<span class="string">'.'</span>);</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="built_in">std</span>::<span class="built_in">string</span>::npos) {</span><br><span class="line">    LOG_DEBUG(<span class="string">"wrong file format"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** ---------- LOG相关部分 隐去 ----------*/</span></span><br><span class="line"></span><br><span class="line">  db_io_.<span class="built_in">open</span>(db_file, <span class="built_in">std</span>::ios::binary | <span class="built_in">std</span>::ios::in | <span class="built_in">std</span>::ios::out);</span><br><span class="line">  <span class="comment">// directory or file does not exist</span></span><br><span class="line">  <span class="keyword">if</span> (!db_io_.is_open()) {</span><br><span class="line">    db_io_.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="comment">// create a new file</span></span><br><span class="line">    db_io_.<span class="built_in">open</span>(db_file, <span class="built_in">std</span>::ios::binary | <span class="built_in">std</span>::ios::trunc | <span class="built_in">std</span>::ios::out);</span><br><span class="line">    db_io_.<span class="built_in">close</span>();</span><br><span class="line">    <span class="comment">// reopen with original mode</span></span><br><span class="line">    db_io_.<span class="built_in">open</span>(db_file, <span class="built_in">std</span>::ios::binary | <span class="built_in">std</span>::ios::in | <span class="built_in">std</span>::ios::out);</span><br><span class="line">  }</span><br><span class="line">  buffer_used = <span class="literal">nullptr</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>一开始对文件名格式进行检查, 它必须带<code>.</code>, 比如<code>"test.db"</code>: <code>std::string::size_type n = file_name_.find('.');</code></li><li>然后进行LOG文件的操作。我们在这篇文章中隐去。</li><li>最重要的是打开我们的File, 使用C++文件file stream接口。<ul><li>打开一个已存在的文件: <code>db_io_.open(db_file, std::ios::binary | std::ios::in | std::ios::out);</code></li><li>新建一个文件: <code>db_io_.open(db_file, std::ios::binary | std::ios::trunc | std::ios::out);</code></li><li>另外新建一个文件有多种作法, 见: <span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE4MTYwODM3LzEwOTcxNjUw" title="https://stackoverflow.com/a/18160837/10971650">https://stackoverflow.com/a/18160837/10971650<i class="fa fa-external-link"></i></span></li><li><code>std::fstream::open</code>: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY3BsdXNwbHVzLmNvbS9yZWZlcmVuY2UvZnN0cmVhbS9mc3RyZWFtL29wZW4v" title="https://www.cplusplus.com/reference/fstream/fstream/open/">https://www.cplusplus.com/reference/fstream/fstream/open/<i class="fa fa-external-link"></i></span></li></ul></li></ul><p><br><br><br></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~DiskManager() = <span class="keyword">default</span>;</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Shut down the disk manager and close all the file resources. Close all file streams. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShutDown</span><span class="params">()</span> </span>{  db_io_.<span class="built_in">close</span>(); log_io_.<span class="built_in">close</span>(); }</span><br></pre></td></tr></tbody></table></figure><ul><li><code>close</code>这两个打开的文件</li></ul><p><br><br><br></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Write a page to the database file. Write the contents of the specified page into disk file</span></span><br><span class="line"><span class="comment"> * @param page_id id of the page</span></span><br><span class="line"><span class="comment"> * @param page_data raw page data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WritePage</span><span class="params">(<span class="keyword">page_id_t</span> page_id, <span class="keyword">const</span> <span class="keyword">char</span> *page_data)</span> </span>{</span><br><span class="line">  <span class="keyword">size_t</span> offset = <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(page_id) * PAGE_SIZE;</span><br><span class="line">  <span class="comment">// set write cursor to offset</span></span><br><span class="line">  num_writes_ += <span class="number">1</span>;</span><br><span class="line">  db_io_.seekp(offset);</span><br><span class="line">  db_io_.<span class="built_in">write</span>(page_data, PAGE_SIZE);</span><br><span class="line">  <span class="comment">// check for I/O error</span></span><br><span class="line">  <span class="keyword">if</span> (db_io_.bad()) {</span><br><span class="line">    LOG_DEBUG(<span class="string">"I/O error while writing"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// needs to flush to keep disk file in sync</span></span><br><span class="line">  db_io_.<span class="built_in">flush</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><a href="#引入">引入</a>中我们用例子解释了: <code>size_t offset = static_cast&lt;size_t&gt;(page_id) * PAGE_SIZE;</code></li><li>这次写入增加<code>num_writes_</code></li><li>寻找文件的<code>offset</code>位置(开始写的起始位置)，进行一次<code>PAGE_SIZE</code>的写操作: <code>db_io_.seekp(offset); db_io_.write(page_data, PAGE_SIZE);</code></li><li>将操作系统缓存区的文件映射 写入至硬盘。同步持久化: <code>db_io_.flush();</code></li></ul><p><br><br><br></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Read a page from the database file.</span></span><br><span class="line"><span class="comment"> * @param page_id id of the page</span></span><br><span class="line"><span class="comment"> * @param[out] page_data output buffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadPage</span><span class="params">(<span class="keyword">page_id_t</span> page_id, <span class="keyword">char</span> *page_data)</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> offset = page_id * PAGE_SIZE;</span><br><span class="line">  <span class="comment">// check if read beyond file length</span></span><br><span class="line">  <span class="keyword">if</span> (offset &gt; GetFileSize(file_name_)) {</span><br><span class="line">    LOG_DEBUG(<span class="string">"I/O error while reading"</span>);</span><br><span class="line">    <span class="comment">// std::cerr &lt;&lt; "I/O error while reading" &lt;&lt; std::endl;</span></span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// set read cursor to offset</span></span><br><span class="line">    db_io_.seekp(offset);</span><br><span class="line">    db_io_.<span class="built_in">read</span>(page_data, PAGE_SIZE);</span><br><span class="line">    <span class="comment">// if file ends before reading PAGE_SIZE</span></span><br><span class="line">    <span class="keyword">int</span> read_count = db_io_.gcount();</span><br><span class="line">    <span class="keyword">if</span> (read_count &lt; PAGE_SIZE) {</span><br><span class="line">      LOG_DEBUG(<span class="string">"Read less than a page"</span>);</span><br><span class="line">      <span class="comment">// std::cerr &lt;&lt; "Read less than a page" &lt;&lt; std::endl;</span></span><br><span class="line">      <span class="built_in">memset</span>(page_data + read_count, <span class="number">0</span>, PAGE_SIZE - read_count);</span><br><span class="line">    }</span><br><span class="line">  }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>ReadPage</code>和<code>WritePage</code>非常类似</li><li>需要确保<code>offset</code>读取的起始位置在文件之内: <code>if (offset &gt; GetFileSize(file_name_)) LOG_DEBUG("I/O error while reading");</code></li><li>寻找文件的<code>offset</code>位置(开始读的起始位置)，进行一次<code>PAGE_SIZE</code>的读操作: <code>db_io_.seekp(offset); db_io_.read(page_data, PAGE_SIZE);</code></li><li>参考<a href="#引入">引入</a>, 如果文件不是<code>PAGE_SIZE</code>的整数倍，将多读的部分(事实上不属于文件的部分)set成0: <code>int read_count = db_io_.gcount(); if (read_count &lt; PAGE_SIZE) { LOG_DEBUG("Read less than a page"); memset(page_data + read_count, 0, PAGE_SIZE - read_count); }</code></li><li><code>gcount()</code>方法， 见: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY3BsdXNwbHVzLmNvbS9yZWZlcmVuY2UvaXN0cmVhbS9pc3RyZWFtL2djb3VudC8=" title="https://www.cplusplus.com/reference/istream/istream/gcount/">https://www.cplusplus.com/reference/istream/istream/gcount/<i class="fa fa-external-link"></i></span></li></ul><p><br><br><br></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Allocate new page (operations like create index/table)</span></span><br><span class="line"><span class="comment">  * For now just keep an increasing counter</span></span><br><span class="line"><span class="comment">  * @return the id of the allocated page</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">page_id_t</span> <span class="title">AllocatePage</span><span class="params">()</span> </span>{ <span class="keyword">return</span> next_page_id_++; }</span><br></pre></td></tr></tbody></table></figure><ul><li><code>std::atomic&lt;page_id_t&gt; next_page_id_;</code>这个成员是<strong>线程安全的</strong></li><li>因此这个<code>AllocatePage</code>方法也是<strong>线程安全</strong>的，我们调用这个方法的时候不需要加锁</li><li>另外这个方法没有被完全实现，见本文对应时间的项目: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NtdS1kYi9idXN0dWIvdHJlZS9mMzY2OWMzZTZkZmI1NjE3YjcyZGYxNmNhODRmODBmZTg3ZGYyMGRhI3RvZG8=" title="https://github.com/cmu-db/bustub/tree/f3669c3e6dfb5617b72df16ca84f80fe87df20da#todo">https://github.com/cmu-db/bustub/tree/f3669c3e6dfb5617b72df16ca84f80fe87df20da#todo<i class="fa fa-external-link"></i></span></li></ul><p><br><br><br></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Deallocate page (operations like drop index/table)</span></span><br><span class="line"><span class="comment"> * Need bitmap in header page for tracking pages</span></span><br><span class="line"><span class="comment"> * This does not actually need to do anything for now.</span></span><br><span class="line"><span class="comment"> * @param page_id id of the page to deallocate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeallocatePage</span><span class="params">(__attribute__((unused)) <span class="keyword">page_id_t</span> page_id)</span> </span>{}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>(__attribute__((unused))</code>只是去除编译器的Warning, 即使我们不使用方法参数<code>page_id</code>， 见: <span class="exturl" data-url="aHR0cHM6Ly9nY2MuZ251Lm9yZy9vbmxpbmVkb2NzL2djYy0zLjIvZ2NjL0Z1bmN0aW9uLUF0dHJpYnV0ZXMuaHRtbA==" title="https://gcc.gnu.org/onlinedocs/gcc-3.2/gcc/Function-Attributes.html">https://gcc.gnu.org/onlinedocs/gcc-3.2/gcc/Function-Attributes.html<i class="fa fa-external-link"></i></span></li><li><blockquote><p>This attribute, attached to a function, means that the function is meant to be possibly unused. GCC will not produce a warning for this function. GNU C++ does not currently support this attribute as definitions without parameters are valid in C++.</p></blockquote></li><li>另外这个方法没有被实现，见本文对应时间的项目: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NtdS1kYi9idXN0dWIvdHJlZS9mMzY2OWMzZTZkZmI1NjE3YjcyZGYxNmNhODRmODBmZTg3ZGYyMGRhI3RvZG8=" title="https://github.com/cmu-db/bustub/tree/f3669c3e6dfb5617b72df16ca84f80fe87df20da#todo">https://github.com/cmu-db/bustub/tree/f3669c3e6dfb5617b72df16ca84f80fe87df20da#todo<i class="fa fa-external-link"></i></span></li><li>(因为没有被实现)这个<code>DeallocatePage</code>方法也是<strong>线程安全</strong>的，我们调用这个方法的时候不需要加锁</li></ul><p><br><br><br></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** @return the number of disk writes */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetNumWrites</span><span class="params">()</span> <span class="keyword">const</span> </span>{ <span class="keyword">return</span> num_writes_; };</span><br></pre></td></tr></tbody></table></figure><ul><li><code>GetNumWrites</code>只是简单的Getter方法</li><li><code>num_writes_</code>在每次<code>WritePage</code>会增加一</li></ul><p><br><br><br></p><h5 id="Log相关methods"><a href="#Log相关methods" class="headerlink" title="Log相关methods"></a>Log相关methods</h5><p>这部分我们有机会单独讲。它们和Project1关系很小， 不知道它们的存在，也可以完成Project1。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Append a log entry to the log file.</span></span><br><span class="line"><span class="comment">* @param log_data raw log data</span></span><br><span class="line"><span class="comment">* @param size size of log entry</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WriteLog</span><span class="params">(<span class="keyword">char</span> *log_data, <span class="keyword">int</span> <span class="built_in">size</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Read a log entry from the log file.</span></span><br><span class="line"><span class="comment">* @param[out] log_data output buffer</span></span><br><span class="line"><span class="comment">* @param size size of the log entry</span></span><br><span class="line"><span class="comment">* @param offset offset of the log entry in the file</span></span><br><span class="line"><span class="comment">* @return true if the read was successful, false otherwise</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ReadLog</span><span class="params">(<span class="keyword">char</span> *log_data, <span class="keyword">int</span> <span class="built_in">size</span>, <span class="keyword">int</span> offset)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Sets the future which is used to check for non-blocking flushes.</span></span><br><span class="line"><span class="comment">* @param f the non-blocking flush check</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SetFlushLogFuture</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">future</span>&lt;<span class="keyword">void</span>&gt; *f)</span> </span>{ flush_log_f_ = f; }</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Checks if the non-blocking flush future was set. */</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">HasFlushLogFuture</span><span class="params">()</span> </span>{ <span class="keyword">return</span> flush_log_f_ != <span class="literal">nullptr</span>; }</span><br><span class="line"></span><br><span class="line"><span class="comment">/** @return true iff the in-memory content has not been flushed yet */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetFlushState</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** @return the number of disk flushes */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetNumFlushes</span><span class="params">()</span> <span class="keyword">const</span> </span>{ <span class="keyword">return</span> num_flushes_; }</span><br></pre></td></tr></tbody></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>我们在这篇文章最开始的时候介绍了Disk Manager的接口和服务，我们现在用代码层面去总结一下Disk Manager:</p><ul><li><code>DiskManager(const std::string &amp;db_file);</code>: 构造函数只需要一个文件名, 它主要使用<code>std::fstream::open</code>，对应的mode是<code>std::ios::binary | std::ios::trunc | std::ios::out</code></li><li><code>page_id_t AllocatePage()；</code>: 在磁盘上的文件分配一个新的page</li><li><code>void DeallocatePage(page_id_t page_id);</code>: 在磁盘上的文件回收一个page</li><li><code>void ReadPage(page_id_t page_id, char *page_data);</code>: 将page(文件上对应的部分)读入<code>page_data</code></li><li><code>void WritePage(page_id_t page_id, const char *page_data);</code>: 将<code>page_data</code>写入page(文件上对应的部分)</li><li><code>void ShutDown();</code>， <code>int GetFileSize(const std::string &amp;file_name);</code>， <code>int GetNumWrites() const;</code>: 均为简单的实现</li><li>(我们回避了Log的部分)</li></ul><h2 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h2><ul><li><code>std::fstream</code> 并不是线程安全的: <span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIwMjEyMTU1LzEwOTcxNjUw" title="https://stackoverflow.com/a/20212155/10971650">https://stackoverflow.com/a/20212155/10971650<i class="fa fa-external-link"></i></span>, <span class="exturl" data-url="aHR0cDovL3d3dy5vcGVuLXN0ZC5vcmcvanRjMS9zYzIyL3dnMjEvZG9jcy9wYXBlcnMvMjAwOC9uMjc2MC5odG0=" title="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2760.htm">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2760.htm<i class="fa fa-external-link"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9mb3J1bS8jIXRvcGljL2NvbXAudW5peC5zb2xhcmlzL2JCX3RnRldYTElZ" title="https://groups.google.com/forum/#!topic/comp.unix.solaris/bB_tgFWXLIY">https://groups.google.com/forum/#!topic/comp.unix.solaris/bB_tgFWXLIY<i class="fa fa-external-link"></i></span><ul><li><code>ReadPage</code>，<code>WritePage</code>不是线程安全的</li></ul></li><li>从实现上看<code>AllocatePage</code>和<code>DeallocatePage</code>是线程安全的</li></ul><p><br></p><ul><li>因此buffer manager需要给disk manager上一把线程锁<ul><li>最好是disk manager单独拥有一把锁，用于read write, 因为这些I/O需要时间很久。在这些I/O发生的时间里面，我们最好能继续使用buffer manager去做一些和disk manager(的线程锁)无关的事情，提高buffer manager的并行程度。</li></ul></li></ul><h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="comment">// 0. Init a disk manager to create a temporary file  </span></span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> db_name = <span class="string">"test.db"</span>;</span><br><span class="line">  <span class="keyword">auto</span> *disk_manager = <span class="keyword">new</span> DiskManager(db_name);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. Use disk_manager to do the work</span></span><br><span class="line">  <span class="comment">//    here can be multithreading - but use a mutex to do write+read</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2. All threads joined here</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. Shutdown the disk manager and remove the temporary file we created.</span></span><br><span class="line">  disk_manager-&gt;ShutDown();</span><br><span class="line">  <span class="built_in">remove</span>(<span class="string">"test.db"</span>);</span><br><span class="line">  <span class="keyword">delete</span> disk_manager;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p>引用:</p><ul><li>Database Implementation For Modern Hardware. Chapter 2: Storage - Thomas Neumann: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvc3MyMC9tb2Rlcm5kYnMvY2hhcHRlcjIucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ss20/moderndbs/chapter2.pdf?lang=de">https://db.in.tum.de/teaching/ss20/moderndbs/chapter2.pdf?lang=de<i class="fa fa-external-link"></i></span></li><li>Bustub - CMU Database Group: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NtdS1kYi9idXN0dWI=" title="https://github.com/cmu-db/bustub">https://github.com/cmu-db/bustub<i class="fa fa-external-link"></i></span></li></ul><p>推荐的阅读:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTI2ODMwNy90aHJlYWQtc2FmZXR5LW9mLXJlYWQtcHJlYWQtc3lzdGVtLWNhbGxzLzUyNjg1NzgjNTI2ODU3OA==" title="https://stackoverflow.com/questions/5268307/thread-safety-of-read-pread-system-calls/5268578#5268578">https://stackoverflow.com/questions/5268307/thread-safety-of-read-pread-system-calls/5268578#5268578<i class="fa fa-external-link"></i></span></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Disk Manager是数据库中对磁盘文件操作的抽象。它提供给Buffer Manager的粒度是一个page, 即它操作的最小单元是一个page。而操作可以分为allocation分配和deallocation释放。&lt;/p&gt;
&lt;p&gt;在CMU Bustub中Disk Manager总是针对一个文件，每次从它上面获得或者写入page大小的数据量。Bustub是模拟SQLite, 而SQLite作为一个简单的数据库，只操作一个文件。当然其他复杂的数据集需要操作多个文件，那对应的Disk Manager需要去对应多个文件(open, read, write, close等操作)。我们下次有机会去考虑一下这样多文件的Disk Manger如何实现。而这次我们先打好基础，去理解CMU Bustub中单文件的Disk Manager。&lt;/p&gt;
&lt;p&gt;另外这篇文章中不关注Log。它需要之后单独描述。我们会区分Log(也对应一个文件)和File，File指那个特定的我们想读取和写入的文件。&lt;/p&gt;
&lt;p&gt;(另外CMU Bustub中的Disk Manager和CMU 17Fall 18Fall对应项目的Disk Manager没有区别)&lt;/p&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Storage" scheme="https://cakebytheoceanluo.github.io/categories/Storage/"/>
    
      <category term="Buffer Management" scheme="https://cakebytheoceanluo.github.io/categories/Buffer-Management/"/>
    
    
      <category term="Disk Manager" scheme="https://cakebytheoceanluo.github.io/tags/Disk-Manager/"/>
    
  </entry>
  
  <entry>
    <title>[CMU-15445]17_18_Project1_2</title>
    <link href="https://cakebytheoceanluo.github.io/2020/05/20/CMU-15445-17-18-Project1-2/"/>
    <id>https://cakebytheoceanluo.github.io/2020/05/20/CMU-15445-17-18-Project1-2/</id>
    <published>2020-05-20T11:40:46.000Z</published>
    <updated>2020-08-17T13:01:26.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>我摘抄题目的重点:</p><ul><li>This is a generic class that is used to keep track of when elements that it is tracking are used. You will need to implement the least-recently used policy discussed in the class and the textbook.</li><li>It is up to you to decide how you want to implement the data structures to store the meta-data about the elements inside of <code>LRUReplacer</code>. For example, you can use the <code>ExtendibleHashTable</code> that you built in the first task or use a built-in STL container. </li><li>You do not need to worry about a maximun size of the data structures. You can assume that you will not run out of memory. Again, you need to make sure that the operations are thread-safe.</li><li>我对比过这部分的Fall2017的源代码和Fall2018没有区别， Fall2018多了一个test: <code>ConcurrencyTest</code></li></ul><a id="more"></a><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>我强烈建议大家先去做Leetcode上的LRU题，对应的文章我列在这里:</p><ul><li>Leetcode 146: <a href="https://cakebytheoceanluo.github.io/2020/04/20/Leetcode-Algo-146-lru-cache/">[Leetcode-Algorithm] 146.lru-cache</a>, <a href="https://cakebytheoceanluo.github.io/2020/04/19/std-list-splice/">https://cakebytheoceanluo.github.io/2020/04/19/std-list-splice/</a></li><li>LRU 解释的文章: <a href="https://cakebytheoceanluo.github.io/2020/04/26/LRU%E7%BB%83%E4%B9%A0/">LRU 练习</a>, <a href="https://cakebytheoceanluo.github.io/2020/04/23/cache-page-replacement/">Cache replacement policies &amp; Page replacement algorithm</a>, </li></ul><p>我不再这里赘述，实现起来没有很大区别。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="LRUReplacer"><a href="#LRUReplacer" class="headerlink" title="LRUReplacer"></a><code>LRUReplacer</code></h2><p>这部分难度不是很大，我就不再描述了。</p><h3 id="attributes"><a href="#attributes" class="headerlink" title="attributes"></a>attributes</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">list</span>&lt;T&gt; lru_list;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;T, <span class="keyword">typename</span> <span class="built_in">std</span>::<span class="built_in">list</span>&lt;T&gt;::iterator&gt; ht;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">mutable</span> <span class="built_in">std</span>::shared_mutex latch;</span><br></pre></td></tr></tbody></table></figure><ul><li>具体描述见:  <a href="https://cakebytheoceanluo.github.io/2020/04/20/Leetcode-Algo-146-lru-cache/">[Leetcode-Algorithm] 146.lru-cache</a></li><li>我看很多人自己手写了一个double linked list，这当然不难。但是我个人觉得<code>std::list</code>更好， 因为std的<strong>iterator</strong>可以直接作为hash tabled value。当然也可以使用<code>std::deque</code>。但是:<ul><li><code>std::deque</code>没有splice方法</li><li><code>std::deque</code>在<code>emplace</code>和<code>insert</code>等系列方法后迭代器失效。那么比较难同时使用<code>std::unordered_map</code>, 至少不是这样的类型:  <code>std::unordered_map&lt;T, typename std::deque&lt;T&gt;::iterator&gt;</code><blockquote><p>There are still a few inaccuracies in this section, refer to individual member function pages for more detail. […]<br><span class="exturl" data-url="aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2NvbnRhaW5lci9kZXF1ZQ==" title="https://en.cppreference.com/w/cpp/container/deque">https://en.cppreference.com/w/cpp/container/deque<i class="fa fa-external-link"></i></span></p></blockquote></li><li>最重要的是<code>std::list</code>的iterator不会因为insert, erase而invalid。这个点很吸引人。我经常使用<code>std::list</code>搭配<code>std::unordered_map</code>, 例如我们可以完成这里的LRU, 也可以通过类似的方式完成two queue(或许我们以后会提到)。<blockquote><p>Adding, removing and moving the elements within the list or across several lists does not invalidate the iterators or references. An iterator is invalidated only when the corresponding element is deleted.<br><span class="exturl" data-url="aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2NvbnRhaW5lci9saXN0" title="https://en.cppreference.com/w/cpp/container/list">https://en.cppreference.com/w/cpp/container/list<i class="fa fa-external-link"></i></span></p></blockquote></li></ul></li></ul><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a><code>Insert</code></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Insert value into LRU</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> LRUReplacer&lt;T&gt;::Insert(<span class="keyword">const</span> T &amp;value) {</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::shared_mutex&gt; <span class="title">lockGuard</span><span class="params">(latch)</span></span>;</span><br><span class="line">  assert(ht.<span class="built_in">size</span>() == lru_list.<span class="built_in">size</span>());</span><br><span class="line">  <span class="comment">// 1. Check if the value already there</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> got = ht.<span class="built_in">find</span>(value);</span><br><span class="line">  <span class="keyword">if</span> (got == ht.<span class="built_in">end</span>()) {</span><br><span class="line">    <span class="comment">// 2.1 value no there, then insert it</span></span><br><span class="line">    lru_list.emplace_front(value);</span><br><span class="line">    ht.emplace(value, lru_list.<span class="built_in">begin</span>());</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 2.2 value already there, adjust the LRU list</span></span><br><span class="line">    lru_list.splice(lru_list.<span class="built_in">begin</span>(), lru_list, got-&gt;second);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Victim"><a href="#Victim" class="headerlink" title="Victim"></a><code>Victim</code></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* If LRU is non-empty, pop the head member from LRU to argument "value", and</span></span><br><span class="line"><span class="comment"> * return true. If LRU is empty, return false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">bool</span> LRUReplacer&lt;T&gt;::Victim(T &amp;value) {</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::shared_mutex&gt; <span class="title">lockGuard</span><span class="params">(latch)</span></span>;</span><br><span class="line">  <span class="comment">// 0. Check the size, if any can be victimized</span></span><br><span class="line">  <span class="keyword">if</span> (ht.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  assert(ht.<span class="built_in">size</span>() == lru_list.<span class="built_in">size</span>());</span><br><span class="line">  <span class="comment">// 1. Pop from the end of the list</span></span><br><span class="line">  value = lru_list.back();</span><br><span class="line">  lru_list.pop_back();</span><br><span class="line">  <span class="comment">// 2. Erase from the hash table</span></span><br><span class="line">  ht.erase(value);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Erase"><a href="#Erase" class="headerlink" title="Erase"></a><code>Erase</code></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Remove value from LRU. If removal is successful, return true, otherwise</span></span><br><span class="line"><span class="comment"> * return false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">bool</span> LRUReplacer&lt;T&gt;::Erase(<span class="keyword">const</span> T &amp;value) {</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::shared_mutex&gt; <span class="title">lockGuard</span><span class="params">(latch)</span></span>;</span><br><span class="line">  assert(ht.<span class="built_in">size</span>() == lru_list.<span class="built_in">size</span>());</span><br><span class="line">  <span class="comment">// 1. Check if the value already there</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> got = ht.<span class="built_in">find</span>(value);</span><br><span class="line">  <span class="keyword">if</span> (got == ht.<span class="built_in">end</span>()) {</span><br><span class="line">    <span class="comment">// 2.1 value no there, do nothing</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 2.2 value already there, erase from the LRU list and the hash table</span></span><br><span class="line">    lru_list.erase(got-&gt;second);</span><br><span class="line">    ht.erase(got);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nha2VieXRoZW9jZWFuTHVvL0NNVTE1LTQ0NS0yMDE3L2Jsb2IvbWFzdGVyL3Rlc3QvYnVmZmVyL2xydV9yZXBsYWNlcl90ZXN0LmNwcA==" title="https://github.com/cakebytheoceanLuo/CMU15-445-2017/blob/master/test/buffer/lru_replacer_test.cpp">https://github.com/cakebytheoceanLuo/CMU15-445-2017/blob/master/test/buffer/lru_replacer_test.cpp<i class="fa fa-external-link"></i></span></li></ul><p>我准备了非常丰富的多线程的test，它们能检查线程是否安全，同时也是对锁粒度和性能的考验(如果性能太差会需要很长时间):</p><ul><li><code>ConcurrentInsertTest</code></li><li><code>ConcurrentMultiInsertTest</code></li><li><code>ConcurrentEraseTest</code></li><li><code>ConcurrentVictimTest</code></li><li><code>ConcurrentMixedTest</code></li></ul><h1 id="MY-TODO"><a href="#MY-TODO" class="headerlink" title="MY-TODO"></a>MY-TODO</h1><ul><li>尝试使用<code>std::deque</code>, 比较实现细节和性能:<ul><li>见 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xhbmNlY29wcGVyL2NtdTE1NDQ1X2ZhbGwyMDE3L2Jsb2IvbWFzdGVyL3NxbGl0ZS1mYWxsMjAxNy9zcmMvYnVmZmVyL2xydV9yZXBsYWNlci5jcHA=" title="https://github.com/lancecopper/cmu15445_fall2017/blob/master/sqlite-fall2017/src/buffer/lru_replacer.cpp">https://github.com/lancecopper/cmu15445_fall2017/blob/master/sqlite-fall2017/src/buffer/lru_replacer.cpp<i class="fa fa-external-link"></i></span></li><li>见 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JyYWdDYXQvQ01VLTE1NDQ1LURCL2Jsb2IvbWFzdGVyL3NyYy9pbmNsdWRlL2J1ZmZlci9scnVfcmVwbGFjZXIuaA==" title="https://github.com/BragCat/CMU-15445-DB/blob/master/src/include/buffer/lru_replacer.h">https://github.com/BragCat/CMU-15445-DB/blob/master/src/include/buffer/lru_replacer.h<i class="fa fa-external-link"></i></span></li><li>(实现中没有使用hash table)</li></ul></li></ul><hr><p>引用:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTgvcHJvamVjdDEv" title="https://15445.courses.cs.cmu.edu/fall2018/project1/">https://15445.courses.cs.cmu.edu/fall2018/project1/<i class="fa fa-external-link"></i></span></li></ul><p>推荐的阅读:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdS1qaWFuaGFvL0NNVS0xNS00NDUvdHJlZS9tYXN0ZXIvTGFiMS1CdWZmZXItUG9vbCMlRTUlOEYlQUYlRTYlODklQTklRTUlQjElOTUlRTclOUElODQlRTUlOTMlODglRTUlQjglOEMlRTglQTElQTg=" title="https://github.com/liu-jianhao/CMU-15-445/tree/master/Lab1-Buffer-Pool#%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E5%93%88%E5%B8%8C%E8%A1%A8">https://github.com/liu-jianhao/CMU-15-445/tree/master/Lab1-Buffer-Pool#%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E5%93%88%E5%B8%8C%E8%A1%A8<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ2F0c2J5MTIzL3AvMTA2MTMxNjAuaHRtbA==" title="https://www.cnblogs.com/gatsby123/p/10613160.html">https://www.cnblogs.com/gatsby123/p/10613160.html<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9lZGUwODlkM2Q4YWQ=" title="https://www.jianshu.com/p/ede089d3d8ad">https://www.jianshu.com/p/ede089d3d8ad<i class="fa fa-external-link"></i></span></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;我摘抄题目的重点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is a generic class that is used to keep track of when elements that it is tracking are used. You will need to implement the least-recently used policy discussed in the class and the textbook.&lt;/li&gt;
&lt;li&gt;It is up to you to decide how you want to implement the data structures to store the meta-data about the elements inside of &lt;code&gt;LRUReplacer&lt;/code&gt;. For example, you can use the &lt;code&gt;ExtendibleHashTable&lt;/code&gt; that you built in the first task or use a built-in STL container. &lt;/li&gt;
&lt;li&gt;You do not need to worry about a maximun size of the data structures. You can assume that you will not run out of memory. Again, you need to make sure that the operations are thread-safe.&lt;/li&gt;
&lt;li&gt;我对比过这部分的Fall2017的源代码和Fall2018没有区别， Fall2018多了一个test: &lt;code&gt;ConcurrencyTest&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Data Structure" scheme="https://cakebytheoceanluo.github.io/categories/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://cakebytheoceanluo.github.io/categories/Algorithm/"/>
    
    
      <category term="Page" scheme="https://cakebytheoceanluo.github.io/tags/Page/"/>
    
      <category term="LRU" scheme="https://cakebytheoceanluo.github.io/tags/LRU/"/>
    
      <category term="Cache" scheme="https://cakebytheoceanluo.github.io/tags/Cache/"/>
    
  </entry>
  
  <entry>
    <title>LRU练习</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/26/LRU%E7%BB%83%E4%B9%A0/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/26/LRU%E7%BB%83%E4%B9%A0/</id>
    <published>2020-04-26T16:45:24.000Z</published>
    <updated>2020-04-26T16:52:36.097Z</updated>
    
    <content type="html"><![CDATA[<p>最近最少使用算法(LRU, Least Recently Used)选择最近最少使用的内容作为替换对象。LRU是一种缓存文件置换机制，即电脑处理缓存存储器的一种机制。电脑存储器空间的大小固定，无法容纳服务器上所有的文件，所以当有新的文件要被置换入缓存时，必须根据一定的原则来取代掉适当的文件。此原则即所谓缓存文件置换机制。<sup><a href="#fn1">1</a></sup></p><p>这篇文章中我们模糊Cache replacement policies和Page replacement algorithm这两个概念,而主要注意在<strong>Cache replacement policies</strong>。有关的区别:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FjaGVfcmVwbGFjZW1lbnRfcG9saWNpZXM=" title="https://en.wikipedia.org/wiki/Cache_replacement_policies">https://en.wikipedia.org/wiki/Cache_replacement_policies<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGFnZV9yZXBsYWNlbWVudF9hbGdvcml0aG0=" title="https://en.wikipedia.org/wiki/Page_replacement_algorithm">https://en.wikipedia.org/wiki/Page_replacement_algorithm<i class="fa fa-external-link"></i></span></li></ul><p><br></p><ul><li><a href="https://cakebytheoceanluo.github.io/2020/04/20/Leetcode-Algo-146-lru-cache/">[Leetcode-Algorithm] 146.lru-cache</a></li></ul><a id="more"></a><h1 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h1><p>首先替换最近最少使用的元素。LRU算法踪何时使用了哪个元素。确保算法始终替换最近最少使用的元素，这中操作是非常昂贵的。因为要从操作系统中获取时间是一个很贵的操作，不管是software timer还是hardware timer。细讲一下, 从hardware timer获取时间会更加昂贵，因为需要更多的hardware interrupt和TRAP进操作系统的kernel。这是因为这个原因，实现上会采用LRU的近似，而不是严格比较时间点(timestamp)。</p><p>General implementations of this technique require keeping “age bits” for cache-lines and track the “Least Recently Used” cache-line based on age-bits. In such an implementation, every time a cache-line is used, the age of all other cache-lines changes. LRU is actually a family of caching algorithms with members including 2Q by Theodore Johnson and Dennis Shasha, and LRU/K by Pat O’Neil, Betty O’Neil and Gerhard Weikum。<sup><a href="#fn2">2</a></sup></p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="wiki例子-2"><a href="#wiki例子-2" class="headerlink" title="wiki例子 2"></a>wiki例子 <sup><a href="#fn2">2</a></sup></h2><p>访问的顺序是:  <code>A B C D E D F</code></p><p><img data-src="https://upload.wikimedia.org/wikipedia/commons/8/88/Lruexample.png" alt="wiki例子"></p><ul><li><code>E</code>被访问时: cache miss发生, 最近最少使用的<code>A</code>被替换成<code>E</code></li><li><code>F</code>被访问时: cache miss发生, 最近最少使用的<code>B</code>被替换成<code>F</code></li></ul><h2 id="例子一-3"><a href="#例子一-3" class="headerlink" title="例子一 3"></a>例子一 <sup><a href="#fn3">3</a></sup></h2><p>访问的顺序是:  <code>7 0 1 2 0 3 0 4</code>, 另外cache的容量是3</p><p><img data-src="https://upload-images.jianshu.io/upload_images/2176221-485341bf9e2408ba.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/720/format/webp" alt="例子图"></p><ul><li>上图中先后顺序由队列中顺序显示<ul><li>新加入的元素在队列上面 <code>list.head</code></li><li>后加入的元素在队列下面 <code>list.tail</code></li></ul></li></ul><h2 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h2><p>访问的顺序是(即图中的<code>Anfrage</code>列): <code>1 3 5 4 2 4 3 2 1 0 5 3</code>, 另外cache的容量在下面第一张图中是4, 在第二张图中是5:</p><p><img data-src="https://cakebytheoceanluo.github.io/images/Algo/LRU_1.png" alt="LRU_1"></p><p><img data-src="https://cakebytheoceanluo.github.io/images/Algo/LRU_2.png" alt="LRU_2"></p><p>由于LRU, 我们存储了元素的id，还需要存储该元素最近被访问的时间点， 即图中的<code>(element id, access time)</code>这个对。另外<code>Nr Pagefaults</code>指的是直到当前page fault出现的总次数。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>具体实现见　</p><ul><li><a href="https://cakebytheoceanluo.github.io/2020/04/20/Leetcode-Algo-146-lru-cache/">[Leetcode-Algorithm] 146.lru-cache</a><!-- - CMU TODO: --></li></ul><h1 id="Modern-Operating-Systems读书笔记-4"><a href="#Modern-Operating-Systems读书笔记-4" class="headerlink" title="Modern Operating Systems读书笔记 4"></a>Modern Operating Systems读书笔记 <sup><a href="#fn4">4</a></sup></h1><p>A good approximation to the <strong>optimal algorithm</strong> is based on the observation that pages that have been heavily used in the last few instructions will probably be heavily used again soon. Conversely, pages that have not been used for ages will probably remain unused for a long time. This idea suggests a realizable algorithm: when a page fault occurs, throw out the page that has been unused for the longest time. This strategy is called <strong>LRU (Least Recently Used) paging</strong>.</p><p>LRU is theoretically realizable but <strong>not cheap</strong> by a long shot: </p><ul><li>To fully implement LRU, it is necessary to maintain a linked list of all pages in memory, with the most recently used page at the front and the least recently used page at the rear. </li><li>The difficulty is that the list must be updated on every memory reference. Finding a page in the list, deleting it, and then moving it to the front is <strong>a very time consuming operation, even in hardware (assuming that such hardware could be built)</strong></li></ul><p>However, there are other ways to implement LRU with special hardware. Let us consider the simplest way first:</p><ul><li>This method requires equipping the hardware with a 64-bit counter, <em>C</em>, that is automatically incremented after each instruction.</li><li>Furthermore, each page table entry must also have a field large enough to contain the counter. After each memory reference, the current value of <em>C</em> is stored in the page table entry for the page just referenced. </li><li>When a page fault occurs, the operating system examines all the counters in the page table to find the lowest one. That page is the least recently used.</li></ul><!-- TODO: 3.4.7 Simulating LRU in Software --><hr><p>引用: </p><p><a name="fn1">1</a>: <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUJGJUFCJUU1JThGJTk2JUU2JTk2JTg3JUU0JUJCJUI2JUU3JUJEJUFFJUU2JThGJTlCJUU2JUE5JTlGJUU1JTg4JUI2" title="https://zh.wikipedia.org/wiki/%E5%BF%AB%E5%8F%96%E6%96%87%E4%BB%B6%E7%BD%AE%E6%8F%9B%E6%A9%9F%E5%88%B6">https://zh.wikipedia.org/wiki/%E5%BF%AB%E5%8F%96%E6%96%87%E4%BB%B6%E7%BD%AE%E6%8F%9B%E6%A9%9F%E5%88%B6<i class="fa fa-external-link"></i></span></p><p><a name="fn2">2</a>: <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FjaGVfcmVwbGFjZW1lbnRfcG9saWNpZXMjTGVhc3RfcmVjZW50bHlfdXNlZF8oTFJV" title="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU">https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU<i class="fa fa-external-link"></i></span>)</p><p><a name="fn3">3</a>: <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC83NGE0ZWZhY2IwYTc=" title="https://www.jianshu.com/p/74a4efacb0a7">https://www.jianshu.com/p/74a4efacb0a7<i class="fa fa-external-link"></i></span></p><p><a name="fn4">4</a>: Modern Operating Systems 4th Edition - Andrew Tanenbaum  - 3.4.6 The Least Recently Used (LRU) Page Replacement Algorithm</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近最少使用算法(LRU, Least Recently Used)选择最近最少使用的内容作为替换对象。LRU是一种缓存文件置换机制，即电脑处理缓存存储器的一种机制。电脑存储器空间的大小固定，无法容纳服务器上所有的文件，所以当有新的文件要被置换入缓存时，必须根据一定的原则来取代掉适当的文件。此原则即所谓缓存文件置换机制。&lt;sup&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;这篇文章中我们模糊Cache replacement policies和Page replacement algorithm这两个概念,而主要注意在&lt;strong&gt;Cache replacement policies&lt;/strong&gt;。有关的区别:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FjaGVfcmVwbGFjZW1lbnRfcG9saWNpZXM=&quot; title=&quot;https://en.wikipedia.org/wiki/Cache_replacement_policies&quot;&gt;https://en.wikipedia.org/wiki/Cache_replacement_policies&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGFnZV9yZXBsYWNlbWVudF9hbGdvcml0aG0=&quot; title=&quot;https://en.wikipedia.org/wiki/Page_replacement_algorithm&quot;&gt;https://en.wikipedia.org/wiki/Page_replacement_algorithm&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/04/20/Leetcode-Algo-146-lru-cache/&quot;&gt;[Leetcode-Algorithm] 146.lru-cache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://cakebytheoceanluo.github.io/categories/Algorithm/"/>
    
    
      <category term="Page" scheme="https://cakebytheoceanluo.github.io/tags/Page/"/>
    
      <category term="LRU" scheme="https://cakebytheoceanluo.github.io/tags/LRU/"/>
    
      <category term="Cache" scheme="https://cakebytheoceanluo.github.io/tags/Cache/"/>
    
  </entry>
  
  <entry>
    <title>Cache replacement policies &amp; Page replacement algorithm</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/23/cache-page-replacement/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/23/cache-page-replacement/</id>
    <published>2020-04-23T21:51:16.000Z</published>
    <updated>2020-04-26T16:54:07.374Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章中我们<strong>区分</strong>Cache replacement policies和Page replacement algorithm这两个概念:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FjaGVfcmVwbGFjZW1lbnRfcG9saWNpZXM=" title="https://en.wikipedia.org/wiki/Cache_replacement_policies">https://en.wikipedia.org/wiki/Cache_replacement_policies<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGFnZV9yZXBsYWNlbWVudF9hbGdvcml0aG0=" title="https://en.wikipedia.org/wiki/Page_replacement_algorithm">https://en.wikipedia.org/wiki/Page_replacement_algorithm<i class="fa fa-external-link"></i></span></li></ul><a id="more"></a><h1 id="Cache-replacement-policies-缓存文件置换机制"><a href="#Cache-replacement-policies-缓存文件置换机制" class="headerlink" title="Cache replacement policies 缓存文件置换机制"></a>Cache replacement policies 缓存文件置换机制</h1><p>Cache replacement policies是指<strong>普遍</strong>的缓存算法，不针对一种硬件，也不针对存储的形式。 cache algorithms, cache replacement algorithms, cache replacement policies都是同义词。</p><p>In computing, <strong>cache algorithms</strong> are optimizing instructions or algorithms, that a computer program or a hardware-maintained structure can utilize in order to manage a cache of information stored on the computer. <strong>Caching improves performance by keeping recent or often-used data items in memory locations that are faster or computationally cheaper to access than normal memory stores.</strong> When the cache is full, the algorithm must choose which items to discard to make room for the new ones.<sup><a href="#fn1">1</a></sup></p><p>(缓存文件置换机制是电脑处理缓存存储器的一种机制。电脑存储器空间的大小固定，无法容纳服务器上所有的文件，所以当有新的文件要被置换入缓存时，必须根据一定的原则来取代掉适当的文件。此原则即所谓缓存文件置换机制。<sup><a href="#fn2">2</a></sup>)</p><p>缓存文件置换方法有:</p><ul><li>FIFO</li><li>LFU</li><li>LRU<ul><li><a href="https://cakebytheoceanluo.github.io/2020/04/26/LRU%E7%BB%83%E4%B9%A0/">LRU 练习</a></li><li><a href="https://cakebytheoceanluo.github.io/2020/04/20/Leetcode-Algo-146-lru-cache/">[Leetcode-Algorithm] 146.lru-cache</a></li></ul></li><li>NMRU</li><li>…</li></ul><h1 id="Page-replacement-algorithm-页面置换算法"><a href="#Page-replacement-algorithm-页面置换算法" class="headerlink" title="Page replacement algorithm 页面置换算法"></a>Page replacement algorithm 页面置换算法</h1><p>Page replacement algorithm是一种<strong>特殊</strong>的缓存算法，指内存和硬盘之间的缓存，而缓存的最小单位是一个page页。它应用于操作系统和数据库管理系统中。在具体的操作系统或者数据库语境中，页面置换算法会变得不再理论，而需要非常实现相关，因为实际中页面置换算法的使用率非常高，可以类比人类的呼吸一样频发，因此需要高效的实现。</p><p>为提高内存利用率，解决内存供不应求的问题，更加合理的使用内存，人们创造了分页式内存抽象。同时有一个虚拟内存的概念，是指将内存中暂时不需要的部分写入硬盘，看上去硬盘扩展了内存的容量，所以叫做“虚拟”内存。使用虚拟内存，应用程序可以使用比实际物理内存更大的内存空间。可以认为这个更大的内存空间就在硬盘上，只有将某一部分需要被用到时，才被写入真实内存；当它暂时不再被用到时，又被写回硬盘。分页式内存管理将物理内存分为等大的小块，每块大小通常为1K、2K、4K等，称为页帧；逻辑内存(使用虚拟内存技术扩大的内存，可认为其位于硬盘上)也被分为等大的小块，称为页；且页和页帧的大小一定是一样的，它是写入真实内存和写回硬盘最小单位。<sup><a href="#fn3">3</a></sup></p><p>页面置换算法: 在地址映射过程中，如果发现所要访问的页page不在内存中，则产生page fault。当发生page fault时，如果操作系统内存中没有空闲页，则操作系统必须在内存选择一个页将其移出内存，以便为即将调入的页面让出空间。而具体选择哪一个页面由页面置换算法决定，具体的影响因素也因页面置换算法的不同而不同。</p><p>页面置换算法依旧是缓存文件置换算法的具体实现，而且最小单位变成了一个页page。</p><p><br></p><p>In a computer operating system that uses paging for virtual memory management, <strong>page replacement algorithms decide which memory pages to page out,</strong> sometimes called swap out, or write to disk, when a page of memory needs to be allocated. <strong>Page replacement happens when a requested page is not in memory (page fault) and a free page cannot be used to satisfy the allocation</strong>, either because there are none, or because the number of free pages is lower than some threshold.</p><p>When the page that was selected for replacement and paged out is referenced again it has to be paged in (read in from disk), and this involves waiting for I/O completion. This determines the quality of the page replacement algorithm: the less time waiting for page-ins, the better the algorithm. A page replacement algorithm looks at the limited information about accesses to the pages provided by hardware, and tries to guess which pages should be replaced to minimize the total number of page misses, while balancing this with the costs (primary storage and processor time) of the algorithm itself.</p><p>The page replacing problem is a typical <em>online problem</em> from the competitive analysis perspective in the sense that the optimal deterministic algorithm is known.</p><p><a name="fn1">1</a>: <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FjaGVfcmVwbGFjZW1lbnRfcG9saWNpZXM=" title="https://en.wikipedia.org/wiki/Cache_replacement_policies">https://en.wikipedia.org/wiki/Cache_replacement_policies<i class="fa fa-external-link"></i></span></p><p><a name="fn2">2</a>: <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUJGJUFCJUU1JThGJTk2JUU2JTk2JTg3JUU0JUJCJUI2JUU3JUJEJUFFJUU2JThGJTlCJUU2JUE5JTlGJUU1JTg4JUI2" title="https://zh.wikipedia.org/wiki/%E5%BF%AB%E5%8F%96%E6%96%87%E4%BB%B6%E7%BD%AE%E6%8F%9B%E6%A9%9F%E5%88%B6">https://zh.wikipedia.org/wiki/%E5%BF%AB%E5%8F%96%E6%96%87%E4%BB%B6%E7%BD%AE%E6%8F%9B%E6%A9%9F%E5%88%B6<i class="fa fa-external-link"></i></span></p><p><a name="fn3">3</a>: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2NoaXBzL3AvMTA5MjAxNDUuaHRtbA==" title="https://www.cnblogs.com/schips/p/10920145.html">https://www.cnblogs.com/schips/p/10920145.html<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章中我们&lt;strong&gt;区分&lt;/strong&gt;Cache replacement policies和Page replacement algorithm这两个概念:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FjaGVfcmVwbGFjZW1lbnRfcG9saWNpZXM=&quot; title=&quot;https://en.wikipedia.org/wiki/Cache_replacement_policies&quot;&gt;https://en.wikipedia.org/wiki/Cache_replacement_policies&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGFnZV9yZXBsYWNlbWVudF9hbGdvcml0aG0=&quot; title=&quot;https://en.wikipedia.org/wiki/Page_replacement_algorithm&quot;&gt;https://en.wikipedia.org/wiki/Page_replacement_algorithm&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://cakebytheoceanluo.github.io/categories/Algorithm/"/>
    
    
      <category term="Page" scheme="https://cakebytheoceanluo.github.io/tags/Page/"/>
    
      <category term="Cache" scheme="https://cakebytheoceanluo.github.io/tags/Cache/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-Algorithm] 146.lru-cache</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/20/Leetcode-Algo-146-lru-cache/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/20/Leetcode-Algo-146-lru-cache/</id>
    <published>2020-04-20T19:08:50.000Z</published>
    <updated>2020-04-26T16:53:28.090Z</updated>
    
    <content type="html"><![CDATA[<p>146.LRU Cache</p><p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: <code>get</code> and <code>put</code>.</p><p><code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br><code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p><p>Follow up:<br>Could you do both operations in O(1) time complexity?</p><p>Example:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LRUCache cache = <span class="keyword">new</span> LRUCache( <span class="number">2</span> <span class="comment">/* capacity */</span> );</span><br><span class="line"></span><br><span class="line">cache.<span class="built_in">put</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">cache.<span class="built_in">put</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">cache.<span class="built_in">get</span>(<span class="number">1</span>);       <span class="comment">// returns 1</span></span><br><span class="line">cache.<span class="built_in">put</span>(<span class="number">3</span>, <span class="number">3</span>);    <span class="comment">// evicts key 2</span></span><br><span class="line">cache.<span class="built_in">get</span>(<span class="number">2</span>);       <span class="comment">// returns -1 (not found)</span></span><br><span class="line">cache.<span class="built_in">put</span>(<span class="number">4</span>, <span class="number">4</span>);    <span class="comment">// evicts key 1</span></span><br><span class="line">cache.<span class="built_in">get</span>(<span class="number">1</span>);       <span class="comment">// returns -1 (not found)</span></span><br><span class="line">cache.<span class="built_in">get</span>(<span class="number">3</span>);       <span class="comment">// returns 3</span></span><br><span class="line">cache.<span class="built_in">get</span>(<span class="number">4</span>);       <span class="comment">// returns 4</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>为了<code>put</code>和<code>get</code>有O(1)的时间复杂度，我们使用双向链表std::list和哈希表std::unordered_map作为cache的数据结构。std::list插入删除效率高, std::unordered_map保存每个节点的地址，可以基本保证在O(1)时间内查找节点。</p><p>这里的unordered_map的类型是: <code>std::unordered_map&lt;int, std::list&lt;std::pair&lt;int, int&gt;&gt;::iterator&gt;</code>。</p><ul><li>我尝试过使用<code>std::pair&lt;int, int&gt;*</code>作为value，但是效果不好。这是最合适的是使用list的iterator</li></ul><p><img data-src="https://upload-images.jianshu.io/upload_images/2176221-4ac97ba07a33267c.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/720/format/webp" alt="图片来源: https://www.jianshu.com/p/74a4efacb0a7"></p><p><img data-src="https://img2018.cnblogs.com/blog/1566782/201907/1566782-20190713105655398-1688289084.jpg" alt="图片来源: https://www.cnblogs.com/kyoner/p/11179766.html"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    LRUCache(<span class="keyword">int</span> capacity) : capacity(capacity) {}; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>{</span><br><span class="line">        <span class="keyword">auto</span> got = ht.<span class="built_in">find</span>(key);</span><br><span class="line">        <span class="keyword">if</span> (got != ht.<span class="built_in">end</span>()) {</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">auto</span> result = got-&gt;second-&gt;second;</span><br><span class="line">            l.splice(l.<span class="built_in">begin</span>(), l, got-&gt;second); <span class="comment">// 把当前访问的节点移到链表头部,并且更新map中该节点的地址</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>{</span><br><span class="line">        <span class="keyword">auto</span> got = ht.<span class="built_in">find</span>(key);</span><br><span class="line">        <span class="keyword">if</span> (got != ht.<span class="built_in">end</span>()) {</span><br><span class="line">            got-&gt;second-&gt;second = value;</span><br><span class="line">            l.splice(l.<span class="built_in">begin</span>(), l, got-&gt;second);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 删除链表尾部节点（最少访问的节点）</span></span><br><span class="line">            <span class="keyword">if</span> (ht.<span class="built_in">size</span>() == capacity) {</span><br><span class="line">                ht.erase(l.back().first);</span><br><span class="line">                l.pop_back();</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 插入新节点到链表头部,并且更新map中增加该节点</span></span><br><span class="line">            l.emplace_front(key, value);</span><br><span class="line">            ht[key] = l.<span class="built_in">begin</span>();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; l;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;::iterator&gt; ht;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><ul><li><code>l.splice(l.begin(), l, got-&gt;second);</code> 可以替换为: <code>l.erase(got-&gt;second); l.emplace_front(key, result); ht[key] = l.begin();</code></li><li><p><code>put</code>也可以是:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>{</span><br><span class="line">    <span class="keyword">auto</span> got = ht.<span class="built_in">find</span>(key);</span><br><span class="line">    <span class="keyword">if</span> (got != ht.<span class="built_in">end</span>()) {</span><br><span class="line">        <span class="comment">// 移除该一出现节点</span></span><br><span class="line">        l.erase(got-&gt;second);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// 删除链表尾部节点（最少访问的节点）</span></span><br><span class="line">        <span class="keyword">if</span> (ht.<span class="built_in">size</span>() == capacity) {</span><br><span class="line">            ht.erase(l.back().first);</span><br><span class="line">            l.pop_back();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 插入新节点到链表头部,并且更新map中增加该节点</span></span><br><span class="line">    l.emplace_front(key, value);</span><br><span class="line">    ht[key] = l.<span class="built_in">begin</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><a href="https://cakebytheoceanluo.github.io/2020/04/19/std-list-splice/">std::list::splice 详解</a></p></li></ul><p><br></p><p>引用和推荐的阅读：</p><p><a href="https://cakebytheoceanluo.github.io/2020/04/26/LRU%E7%BB%83%E4%B9%A0/">LRU 练习</a></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbHJ1LWNhY2hlLw==" title="https://leetcode.com/problems/lru-cache/">https://leetcode.com/problems/lru-cache/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vVGVub3NEb0l0L3AvMzQxNzE1Ny5odG1s" title="https://www.cnblogs.com/TenosDoIt/p/3417157.html">https://www.cnblogs.com/TenosDoIt/p/3417157.html<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vRGhvdXNlL3AvODYxNTQ4MS5odG1s" title="https://www.cnblogs.com/Dhouse/p/8615481.html">https://www.cnblogs.com/Dhouse/p/8615481.html<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNDEzMzA2Nw==" title="https://zhuanlan.zhihu.com/p/34133067">https://zhuanlan.zhihu.com/p/34133067<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC83NGE0ZWZhY2IwYTc=" title="https://www.jianshu.com/p/74a4efacb0a7">https://www.jianshu.com/p/74a4efacb0a7<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va3lvbmVyL3AvMTExNzk3NjYuaHRtbA==" title="https://www.cnblogs.com/kyoner/p/11179766.html">https://www.cnblogs.com/kyoner/p/11179766.html<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;146.LRU Cache&lt;/p&gt;
&lt;p&gt;Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;get(key)&lt;/code&gt; - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.&lt;br&gt;&lt;code&gt;put(key, value)&lt;/code&gt; - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.&lt;/p&gt;
&lt;p&gt;Follow up:&lt;br&gt;Could you do both operations in O(1) time complexity?&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LRUCache cache = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LRUCache( &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* capacity */&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cache.&lt;span class=&quot;built_in&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cache.&lt;span class=&quot;built_in&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cache.&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);       &lt;span class=&quot;comment&quot;&gt;// returns 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cache.&lt;span class=&quot;built_in&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);    &lt;span class=&quot;comment&quot;&gt;// evicts key 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cache.&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);       &lt;span class=&quot;comment&quot;&gt;// returns -1 (not found)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cache.&lt;span class=&quot;built_in&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);    &lt;span class=&quot;comment&quot;&gt;// evicts key 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cache.&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);       &lt;span class=&quot;comment&quot;&gt;// returns -1 (not found)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cache.&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);       &lt;span class=&quot;comment&quot;&gt;// returns 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cache.&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);       &lt;span class=&quot;comment&quot;&gt;// returns 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://cakebytheoceanluo.github.io/categories/Algorithm/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="LRU" scheme="https://cakebytheoceanluo.github.io/tags/LRU/"/>
    
      <category term="Cache" scheme="https://cakebytheoceanluo.github.io/tags/Cache/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
      <category term="C++" scheme="https://cakebytheoceanluo.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>std::list::splice详解</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/19/std-list-splice/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/19/std-list-splice/</id>
    <published>2020-04-19T21:17:24.000Z</published>
    <updated>2020-04-19T21:19:36.862Z</updated>
    
    <content type="html"><![CDATA[<p><code>std::list::splice</code>详解</p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p><code>splice</code>方法将list的元素进行<strong>拼接合并</strong>，原理是改变结点指针的指向，属于常数的复杂度。这个方法是<code>std::list</code>特有的，它<strong>不需要复制拷贝</strong>，直接对同类型的list中的节点的指针进行操作。</p><p>list容器底层实现是一个带头结点的双向链表double linked list。由于list每个节点是单独的，所以list在随机插入和随机删除都是O(1)的复杂度。在list中移动数据或者两个list之间移动数据的时候，直接把节点摘下来，接入到新的位置就可以了，非常高效。</p><p><code>splice</code>方法有三种声明/作用/复杂度：</p><ol><li>entire list: <code>void splice ( iterator pos, list&amp; other );</code>　<ul><li>将list <code>other</code>中的元素全都移到caller container的position处</li><li><strong>复杂度: Constant</strong></li></ul></li><li>single element: <code>void splice ( iterator pos, list&amp; other, iterator it );</code><ul><li>仅将list <code>other</code>中的由迭代器it指向的元素移到caller container的position处</li><li><strong>复杂度: Constant</strong></li></ul></li><li>element range: <code>void splice ( iterator pos, list&amp; other, iterator first, iterator last );</code><ul><li>list <code>other</code>的迭代器区间 $[\mathrm{first}, \mathrm{last})$ 中的元素移动到caller container的position处</li><li><strong>复杂度: Constant if <code>other</code> refers to the same object as <code>*this</code>, otherwise linear in <code>std::distance(first, last)</code>.</strong> <sup><a href="#fn1">1</a></sup></li></ul></li></ol><p>caller container := 调用者容器</p><p>由此可见，<strong>这个方法总是将list <code>other</code>中元素移动(剪切)到caller container中。</strong></p><a id="more"></a><p><br></p><p>Transfers elements from one list to another. <strong>No elements are copied or moved</strong>, only the internal pointers of the list nodes are re-pointed. The behavior is undefined if: <code>get_allocator() != other.get_allocator()</code>.<sup><a href="#fn1">1</a></sup></p><p>具体参数见:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY3BsdXNwbHVzLmNvbS9yZWZlcmVuY2UvbGlzdC9saXN0L3NwbGljZS8=" title="https://www.cplusplus.com/reference/list/list/splice/">https://www.cplusplus.com/reference/list/list/splice/<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2NvbnRhaW5lci9saXN0L3NwbGljZQ==" title="https://en.cppreference.com/w/cpp/container/list/splice">https://en.cppreference.com/w/cpp/container/list/splice<i class="fa fa-external-link"></i></span></li></ul><h1 id="例子一2"><a href="#例子一2" class="headerlink" title="例子一2"></a>例子一<sup><a href="#fn2">2</a></sup></h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// splicing lists</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; mylist1, mylist2;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set some initial values:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">4</span>; ++i)</span><br><span class="line">     mylist1.push_back(i);      <span class="comment">// mylist1: 1 2 3 4</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">3</span>; ++i)</span><br><span class="line">     mylist2.push_back(i*<span class="number">10</span>);   <span class="comment">// mylist2: 10 20 30</span></span><br><span class="line"></span><br><span class="line">  it = mylist1.<span class="built_in">begin</span>();</span><br><span class="line">  ++it;                         <span class="comment">// points to 2 in mylist1 (the 2th element)</span></span><br><span class="line"></span><br><span class="line">  mylist1.splice (it, mylist2); <span class="comment">// mylist1: 1 10 20 30 2 3 4</span></span><br><span class="line">                                <span class="comment">// mylist2 (empty)</span></span><br><span class="line">                                <span class="comment">// "it" still points to 2 in mylist1 (the 5th element)</span></span><br><span class="line">                                <span class="comment">// it由于是指向的mylist1, splice后，迭代器it依然存在于mylist1中，故而不失效</span></span><br><span class="line">                                          </span><br><span class="line">  mylist2.splice (mylist2.<span class="built_in">begin</span>(), mylist1, it);</span><br><span class="line">                                <span class="comment">// mylist1: 1 10 20 30 3 4</span></span><br><span class="line">                                <span class="comment">// mylist2: 2</span></span><br><span class="line">                                <span class="comment">// "it" is now VALID in mylist2, points to 2 (the 1st element).</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  it = mylist1.<span class="built_in">begin</span>();</span><br><span class="line">  <span class="built_in">std</span>::advance(it,<span class="number">3</span>);           <span class="comment">// "it" points now to 30 in mylist1 (the 4th element)</span></span><br><span class="line">                                <span class="comment">// 注意此处mylist前后交换了，这可以用作list形如循环移位的操作</span></span><br><span class="line"></span><br><span class="line">  mylist1.splice ( mylist1.<span class="built_in">begin</span>(), mylist1, it, mylist1.<span class="built_in">end</span>());</span><br><span class="line">                                <span class="comment">// mylist1: 30 3 4 1 10 20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mylist1 contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (it=mylist1.<span class="built_in">begin</span>(); it!=mylist1.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"mylist2 contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (it=mylist2.<span class="built_in">begin</span>(); it!=mylist2.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输出:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mylist1 contains: 30 3 4 1 10 20</span><br><span class="line">mylist2 contains: 2</span><br></pre></td></tr></tbody></table></figure><h1 id="对splice后的iterator的研究"><a href="#对splice后的iterator的研究" class="headerlink" title="对splice后的iterator的研究"></a>对<code>splice</code>后的iterator的研究</h1><p>我们关注<a href="#基础">基础</a>中的三点中的后两点，这里<strong>使用过的iterator依旧指向原先所指的元素，但是在<code>*this</code>中, 而不是在<code>other</code>中</strong>。注意到这一点可以让我们编程中更高效，比如使用<code>splice</code>前后的iterator的从属关系变更，这个点比使用指针更加高效。</p><p>这个部分的启发来自于: <span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTU2MTI3MDAvc3RsLWxpc3RzcGxpY2UtaXRlcmF0b3ItdmFsaWRpdHk=" title="https://stackoverflow.com/questions/15612700/stl-listsplice-iterator-validity">https://stackoverflow.com/questions/15612700/stl-listsplice-iterator-validity<i class="fa fa-external-link"></i></span></p><p>下面是来自三个不同地方的引用, 来解释这个<em>iterator从属关系变更</em>:</p><h2 id="cppreference-1"><a href="#cppreference-1" class="headerlink" title="cppreference 1"></a>cppreference <sup><a href="#fn1">1</a></sup></h2><p><strong>No iterators or references become invalidated, the iterators to moved elements remain valid, but now refer into <code>*this,</code> not into <code>other</code>.</strong></p><ol><li>Transfers all elements from <code>other</code> into <code>*this</code>. The elements are inserted before the element pointed to by <code>pos</code>. The container <code>other</code> becomes <strong>empty</strong> after the operation. <strong>The behavior is undefined if other refers to the same object as <code>*this</code>.</strong></li><li>Transfers the element pointed to by <code>it</code> from other into <code>*this</code>. The element is inserted before the element pointed to by <code>pos</code>.</li><li>Transfers the elements in the range $[\mathrm{first}, \mathrm{last})$ from <code>other</code> into <code>*this</code>. The elements are inserted before the element pointed to by <code>pos</code>. <strong>The behavior is undefined if <code>pos</code> is an iterator in the range $[\mathrm{first}, \mathrm{last})$.</strong></li></ol><p>以上三点对应<a href="#基础">基础</a>中的三点</p><h2 id="cplusplus-2"><a href="#cplusplus-2" class="headerlink" title="cplusplus 2"></a>cplusplus <sup><a href="#fn2">2</a></sup></h2><p>Iterator validity:<br>No changes on the iterators, pointers and references related to the container before the call.<br><strong>The iterators, pointers and references that referred to transferred elements keep referring to those same elements, but iterators now iterate into the container the elements have been transferred to.</strong></p><h2 id="C-Standard-3"><a href="#C-Standard-3" class="headerlink" title="C++ Standard 3"></a>C++ Standard <sup><a href="#fn3">3</a></sup></h2><p>23.3.5.5 list operations [list.ops]</p><p> <code>void splice(const_iterator position, list&amp; x, const_iterator i);</code><br> <code>void splice(const_iterator position, list&amp;&amp; x, const_iterator i);</code></p><p> <em>Effects:</em> Inserts an element pointed to by <code>i</code> from list <code>x</code> before <code>position</code> and removes the element from <code>x</code>. The result is unchanged if <code>position == i</code> or <code>position == ++i</code>. Pointers and references to <code>*i</code> continue to refer to this same element but as a member of <code>*this</code>. Iterators to <code>*i</code> (including <code>i</code> itself) continue to refer to the same element, but now behave as iterators into <code>*this</code>, not into <code>x</code>.</p><p><br></p><h2 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h2><p><strong>注意下面例子中<code>it</code>在<code>splice</code>前后隐式地归属于另外一个std::list</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// splicing lists</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; mylist1, mylist2;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set some initial values:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">4</span>; ++i)</span><br><span class="line">     mylist1.push_back(i);      <span class="comment">// mylist1: 1 2 3 4</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">3</span>; ++i)</span><br><span class="line">     mylist2.push_back(i*<span class="number">10</span>);   <span class="comment">// mylist2: 10 20 30</span></span><br><span class="line"></span><br><span class="line">  it = mylist1.<span class="built_in">begin</span>();</span><br><span class="line">  ++it;                         <span class="comment">// points to 2 in mylist1 (the 2th element)</span></span><br><span class="line"></span><br><span class="line">  mylist2.splice (mylist2.<span class="built_in">begin</span>(), mylist1, it);</span><br><span class="line">                                <span class="comment">// mylist1: 1 3 4</span></span><br><span class="line">                                <span class="comment">// mylist2: 2 10 20 30</span></span><br><span class="line">                                <span class="comment">// "it" is now VALID in mylist2, points to 2 (the 1st element).</span></span><br><span class="line"></span><br><span class="line">  it++;                         <span class="comment">// "it" points to 10 in mylist2 (the 2rd element).</span></span><br><span class="line">  it++;                         <span class="comment">// "it" points to 20 in mylist2 (the 3th element).</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="例子代码下载"><a href="#例子代码下载" class="headerlink" title="例子代码下载"></a>例子代码下载</h1><p><a href="https://cakebytheoceanluo.github.io/download/code/cxx/std::list::splice_1.cc">例子一下载</a></p><p><a href="https://cakebytheoceanluo.github.io/download/code/cxx/std::list::splice_2.cc">例子二下载</a></p><p>编译方法:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ g++ std::list::splice_1.cc</span><br><span class="line">$ g++ std::list::splice_2.cc</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>引用和推荐的阅读：</p><p><a name="fn1">1</a>: <span class="exturl" data-url="aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2NvbnRhaW5lci9saXN0L3NwbGljZQ==" title="https://en.cppreference.com/w/cpp/container/list/splice">https://en.cppreference.com/w/cpp/container/list/splice<i class="fa fa-external-link"></i></span></p><p><a name="fn2">2</a>: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY3BsdXNwbHVzLmNvbS9yZWZlcmVuY2UvbGlzdC9saXN0L3NwbGljZS8=" title="https://www.cplusplus.com/reference/list/list/splice/">https://www.cplusplus.com/reference/list/list/splice/<i class="fa fa-external-link"></i></span></p><p><a name="fn3">3</a>: <span class="exturl" data-url="aHR0cDovL3d3dy5vcGVuLXN0ZC5vcmcvanRjMS9zYzIyL3dnMjEvZG9jcy9wYXBlcnMvMjAxNC9uNDI5Ni5wZGY=" title="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTA5MzE0L2FydGljbGUvZGV0YWlscy85MDU3NTAzNA==" title="https://blog.csdn.net/qq_41909314/article/details/90575034">https://blog.csdn.net/qq_41909314/article/details/90575034<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTU2MTI3MDAvc3RsLWxpc3RzcGxpY2UtaXRlcmF0b3ItdmFsaWRpdHk=" title="https://stackoverflow.com/questions/15612700/stl-listsplice-iterator-validity">https://stackoverflow.com/questions/15612700/stl-listsplice-iterator-validity<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTM4MzcxMjEvZnVuY3Rpb25pbmctb2Ytc3BsaWNlLWluLWNwcA==" title="https://stackoverflow.com/questions/13837121/functioning-of-splice-in-cpp">https://stackoverflow.com/questions/13837121/functioning-of-splice-in-cpp<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;std::list::splice&lt;/code&gt;详解&lt;/p&gt;
&lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1&gt;&lt;p&gt;&lt;code&gt;splice&lt;/code&gt;方法将list的元素进行&lt;strong&gt;拼接合并&lt;/strong&gt;，原理是改变结点指针的指向，属于常数的复杂度。这个方法是&lt;code&gt;std::list&lt;/code&gt;特有的，它&lt;strong&gt;不需要复制拷贝&lt;/strong&gt;，直接对同类型的list中的节点的指针进行操作。&lt;/p&gt;
&lt;p&gt;list容器底层实现是一个带头结点的双向链表double linked list。由于list每个节点是单独的，所以list在随机插入和随机删除都是O(1)的复杂度。在list中移动数据或者两个list之间移动数据的时候，直接把节点摘下来，接入到新的位置就可以了，非常高效。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;splice&lt;/code&gt;方法有三种声明/作用/复杂度：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;entire list: &lt;code&gt;void splice ( iterator pos, list&amp;amp; other );&lt;/code&gt;　&lt;ul&gt;
&lt;li&gt;将list &lt;code&gt;other&lt;/code&gt;中的元素全都移到caller container的position处&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复杂度: Constant&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;single element: &lt;code&gt;void splice ( iterator pos, list&amp;amp; other, iterator it );&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;仅将list &lt;code&gt;other&lt;/code&gt;中的由迭代器it指向的元素移到caller container的position处&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复杂度: Constant&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;element range: &lt;code&gt;void splice ( iterator pos, list&amp;amp; other, iterator first, iterator last );&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;list &lt;code&gt;other&lt;/code&gt;的迭代器区间 $[\mathrm{first}, \mathrm{last})$ 中的元素移动到caller container的position处&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复杂度: Constant if &lt;code&gt;other&lt;/code&gt; refers to the same object as &lt;code&gt;*this&lt;/code&gt;, otherwise linear in &lt;code&gt;std::distance(first, last)&lt;/code&gt;.&lt;/strong&gt; &lt;sup&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;caller container := 调用者容器&lt;/p&gt;
&lt;p&gt;由此可见，&lt;strong&gt;这个方法总是将list &lt;code&gt;other&lt;/code&gt;中元素移动(剪切)到caller container中。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming languages" scheme="https://cakebytheoceanluo.github.io/categories/Programming-languages/"/>
    
    
      <category term="C++" scheme="https://cakebytheoceanluo.github.io/tags/C/"/>
    
      <category term="STL" scheme="https://cakebytheoceanluo.github.io/tags/STL/"/>
    
      <category term="std::list" scheme="https://cakebytheoceanluo.github.io/tags/std-list/"/>
    
  </entry>
  
  <entry>
    <title>[CMU-15445]17_18_Project1_1</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/17/CMU-15445-17-18-Project1-1/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/17/CMU-15445-17-18-Project1-1/</id>
    <published>2020-04-17T14:11:06.000Z</published>
    <updated>2020-08-17T12:40:59.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>我摘抄题目的重点:</p><ul><li>Your table needs to automatically grow in size as needed but you do not need shrink it. That is, you do not need to implement support for shrinking or compacting the hash table. </li><li>Check out chapters 11.5-11.7 in the textbook for more information on how to implement this table. </li><li>见<a href="https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/">Database System Concepts 精读 [11.6-11.7] Hashing</a></li></ul><p><br></p><ul><li>我对比过这部分的Fall2017的源代码和Fall2018没有区别</li></ul><a id="more"></a><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>我们通过和算法原理和test来理解整个hash table的运作。我们先只观察insert, 它也是这次作业中最难的部分。</p><h2 id="SampleTest"><a href="#SampleTest" class="headerlink" title="SampleTest"></a>SampleTest</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">TEST(ExtendibleHashTest, SampleTest) {</span><br><span class="line">  <span class="comment">// set leaf size as 2</span></span><br><span class="line">  ExtendibleHash&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt; *test =</span><br><span class="line">      <span class="keyword">new</span> ExtendibleHash&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// insert several key/value pairs</span></span><br><span class="line">  test-&gt;Insert(<span class="number">1</span>, <span class="string">"a"</span>);</span><br><span class="line">  test-&gt;Insert(<span class="number">2</span>, <span class="string">"b"</span>);</span><br><span class="line">  test-&gt;Insert(<span class="number">3</span>, <span class="string">"c"</span>);</span><br><span class="line">  test-&gt;Insert(<span class="number">4</span>, <span class="string">"d"</span>);</span><br><span class="line">  test-&gt;Insert(<span class="number">5</span>, <span class="string">"e"</span>);</span><br><span class="line">  test-&gt;Insert(<span class="number">6</span>, <span class="string">"f"</span>);</span><br><span class="line">  test-&gt;Insert(<span class="number">7</span>, <span class="string">"g"</span>);</span><br><span class="line">  test-&gt;Insert(<span class="number">8</span>, <span class="string">"h"</span>);</span><br><span class="line">  test-&gt;Insert(<span class="number">9</span>, <span class="string">"i"</span>);</span><br><span class="line">  EXPECT_EQ(<span class="number">2</span>, test-&gt;GetLocalDepth(<span class="number">0</span>));</span><br><span class="line">  EXPECT_EQ(<span class="number">3</span>, test-&gt;GetLocalDepth(<span class="number">1</span>));</span><br><span class="line">  EXPECT_EQ(<span class="number">2</span>, test-&gt;GetLocalDepth(<span class="number">2</span>));</span><br><span class="line">  EXPECT_EQ(<span class="number">2</span>, test-&gt;GetLocalDepth(<span class="number">3</span>));</span><br><span class="line">  EXPECT_EQ(<span class="number">3</span>, test-&gt;GetLocalDepth(<span class="number">5</span>));  <span class="comment">// Added by Jigao Luo</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// find test</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> result;</span><br><span class="line">  test-&gt;Find(<span class="number">9</span>, result);</span><br><span class="line">  EXPECT_EQ(<span class="string">"i"</span>, result);</span><br><span class="line">  test-&gt;Find(<span class="number">8</span>, result);</span><br><span class="line">  EXPECT_EQ(<span class="string">"h"</span>, result);</span><br><span class="line">  test-&gt;Find(<span class="number">2</span>, result);</span><br><span class="line">  EXPECT_EQ(<span class="string">"b"</span>, result);</span><br><span class="line">  EXPECT_EQ(<span class="number">0</span>, test-&gt;Find(<span class="number">10</span>, result));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// delete test</span></span><br><span class="line">  EXPECT_EQ(<span class="number">1</span>, test-&gt;Remove(<span class="number">8</span>));</span><br><span class="line">  EXPECT_EQ(<span class="number">0</span>, test-&gt;Find(<span class="number">8</span>, result));  <span class="comment">// Added by Jigao Luo</span></span><br><span class="line">  EXPECT_EQ(<span class="number">1</span>, test-&gt;Remove(<span class="number">4</span>));</span><br><span class="line">  EXPECT_EQ(<span class="number">0</span>, test-&gt;Find(<span class="number">4</span>, result));  <span class="comment">// Added by Jigao Luo</span></span><br><span class="line">  EXPECT_EQ(<span class="number">1</span>, test-&gt;Remove(<span class="number">1</span>));</span><br><span class="line">  EXPECT_EQ(<span class="number">0</span>, test-&gt;Find(<span class="number">1</span>, result));  <span class="comment">// Added by Jigao Luo</span></span><br><span class="line">  EXPECT_EQ(<span class="number">0</span>, test-&gt;Remove(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> test;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Init:<br><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Project1718/P1_T1_1.png" alt="Init"></li></ul><p><br></p><ul><li><code>test-&gt;Insert(1, "a"); test-&gt;Insert(2, "b");</code>之后:<br><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Project1718/P1_T1_2.png" alt="insert 1, 2"></li></ul><p><br></p><ul><li><code>test-&gt;Insert(3, "c"); test-&gt;Insert(4, "d");</code>之后:<br><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Project1718/P1_T1_3.png" alt="insert 3, 4"></li></ul><p><br></p><ul><li><code>test-&gt;Insert(5, "e"); test-&gt;Insert(6, "f"); test-&gt;Insert(7, "g"); test-&gt;Insert(8, "h");</code>之后:<br><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Project1718/P1_T1_4.png" alt="insert 5, 6, 7, 8"></li></ul><p><br></p><ul><li><code>test-&gt;Insert(9, "i");</code>之后:<br><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Project1718/P1_T1_5.png" alt="insert 9"></li></ul><p><br></p><p>insert结束后，每个元素所在和它二进制表达相符所指向的的bucket。如3和7在<code>011</code>和<code>111</code>所指向的bucket, <code>3 = 0b11</code>, <code>7 = 0b111</code></p><p><br><br><br><br><br></p><h2 id="BasicDepthTest"><a href="#BasicDepthTest" class="headerlink" title="BasicDepthTest"></a>BasicDepthTest</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">TEST(ExtendibleHashTest, BasicDepthTest) {</span><br><span class="line">  <span class="comment">// set leaf size as 2</span></span><br><span class="line">  ExtendibleHash&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt; *test =</span><br><span class="line">      <span class="keyword">new</span> ExtendibleHash&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// insert several key/value pairs</span></span><br><span class="line">  test-&gt;Insert(<span class="number">6</span>, <span class="string">"a"</span>);   <span class="comment">// b'0110</span></span><br><span class="line">  test-&gt;Insert(<span class="number">10</span>, <span class="string">"b"</span>);  <span class="comment">// b'1010</span></span><br><span class="line">  test-&gt;Insert(<span class="number">14</span>, <span class="string">"c"</span>);  <span class="comment">// b'1110</span></span><br><span class="line"></span><br><span class="line">  EXPECT_EQ(<span class="number">3</span>, test-&gt;GetGlobalDepth());</span><br><span class="line"></span><br><span class="line">  EXPECT_EQ(<span class="number">3</span>, test-&gt;GetLocalDepth(<span class="number">2</span>));</span><br><span class="line">  EXPECT_EQ(<span class="number">3</span>, test-&gt;GetLocalDepth(<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">  EXPECT_EQ(<span class="number">2</span>, test-&gt;GetLocalDepth(<span class="number">0</span>));  <span class="comment">// Modified by Jigao Luo</span></span><br><span class="line">  EXPECT_EQ(<span class="number">2</span>, test-&gt;GetLocalDepth(<span class="number">4</span>));  <span class="comment">// Modified by Jigao Luo</span></span><br><span class="line"></span><br><span class="line">  EXPECT_EQ(<span class="number">1</span>, test-&gt;GetLocalDepth(<span class="number">1</span>));  <span class="comment">// Modified by Jigao Luo</span></span><br><span class="line">  EXPECT_EQ(<span class="number">1</span>, test-&gt;GetLocalDepth(<span class="number">3</span>));  <span class="comment">// Modified by Jigao Luo</span></span><br><span class="line">  EXPECT_EQ(<span class="number">1</span>, test-&gt;GetLocalDepth(<span class="number">5</span>));  <span class="comment">// Modified by Jigao Luo</span></span><br><span class="line">  EXPECT_EQ(<span class="number">1</span>, test-&gt;GetLocalDepth(<span class="number">7</span>));  <span class="comment">// Modified by Jigao Luo</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// four buckets in use</span></span><br><span class="line">  EXPECT_EQ(<span class="number">4</span>, test-&gt;GetNumBuckets());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// insert more key/value pairs</span></span><br><span class="line">  test-&gt;Insert(<span class="number">1</span>, <span class="string">"d"</span>);</span><br><span class="line">  test-&gt;Insert(<span class="number">3</span>, <span class="string">"e"</span>);</span><br><span class="line">  test-&gt;Insert(<span class="number">5</span>, <span class="string">"f"</span>);</span><br><span class="line"></span><br><span class="line">  EXPECT_EQ(<span class="number">5</span>, test-&gt;GetNumBuckets());</span><br><span class="line"></span><br><span class="line">  EXPECT_EQ(<span class="number">3</span>, test-&gt;GetGlobalDepth());  <span class="comment">// Added by Jigao Luo</span></span><br><span class="line"></span><br><span class="line">  EXPECT_EQ(<span class="number">2</span>, test-&gt;GetLocalDepth(<span class="number">0</span>));  <span class="comment">// Added by Jigao Luo</span></span><br><span class="line"></span><br><span class="line">  EXPECT_EQ(<span class="number">2</span>, test-&gt;GetLocalDepth(<span class="number">1</span>));</span><br><span class="line">  EXPECT_EQ(<span class="number">2</span>, test-&gt;GetLocalDepth(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">  EXPECT_EQ(<span class="number">3</span>, test-&gt;GetLocalDepth(<span class="number">2</span>));  <span class="comment">// Added by Jigao Luo</span></span><br><span class="line"></span><br><span class="line">  EXPECT_EQ(<span class="number">2</span>, test-&gt;GetLocalDepth(<span class="number">3</span>));</span><br><span class="line">  EXPECT_EQ(<span class="number">2</span>, test-&gt;GetLocalDepth(<span class="number">7</span>));  <span class="comment">// Added by Jigao Luo</span></span><br><span class="line"></span><br><span class="line">  EXPECT_EQ(<span class="number">3</span>, test-&gt;GetLocalDepth(<span class="number">6</span>));  <span class="comment">// Added by Jigao Luo</span></span><br><span class="line">  <span class="keyword">delete</span> test;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Init:<br><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Project1718/P1_T1_1.png" alt="Init"></li></ul><p><br></p><ul><li><code>test-&gt;Insert(6, "a"); test-&gt;Insert(10, "b");</code>之后:<br><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Project1718/P1_T1_6.png" alt="insert 6, 10"></li></ul><p><br></p><ul><li><code>test-&gt;Insert(14, "c");</code>之后:<br><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Project1718/P1_T1_7.png" alt="global depth = 1"><br><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Project1718/P1_T1_8.png" alt="global depth = 2"><br><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Project1718/P1_T1_9.png" alt="global depth = 3"></li></ul><p><code>6 = 0b110</code>, <code>10 = 0b1010</code>, <code>14 = 0b1110</code></p><ul><li>global depth = 1的时候, 6和10的最后一个bit都是<code>0</code>, 所以在同一个bucket</li><li>global depth = 2的时候, 6和10的最后两个bit都是<code>10</code>, 所以在同一个bucket</li><li>global depth = 3的时候, 6和10的最后的三个bit不同，它们俩分开，14才有空间插入</li></ul><p><br></p><ul><li><code>test-&gt;Insert(1, "d"); test-&gt;Insert(3, "e");</code>之后:<br><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Project1718/P1_T1_10.png" alt="insert 1, 3"></li></ul><p><br></p><ul><li><code>test-&gt;Insert(t, "f");</code>之后:<br><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Project1718/P1_T1_11.png" alt="insert 5"></li></ul><p><br><br><br><br><br></p><h2 id="split-bucket前后"><a href="#split-bucket前后" class="headerlink" title="split bucket前后"></a>split bucket前后</h2><p>我们假定global depth是5， bucket_j的local depth是2。在这种情况下有 $8 = 2^{5-2} = 2^3$个bucket address table条目/指针指向bucket_j。</p><h3 id="split-bucket前"><a href="#split-bucket前" class="headerlink" title="split bucket前"></a>split bucket前</h3><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Project1718/P1_T1_12.png" alt="split bucket前"></p><h3 id="split-bucket后"><a href="#split-bucket后" class="headerlink" title="split bucket后"></a>split bucket后</h3><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Project1718/P1_T1_13.png" alt="split bucket后"></p><p>split bucket后：</p><ul><li>bucket j的local depth是3, 分裂出来的新bucket z的local depth也是3</li><li>有 $4 = 2^{5-3} = 2^2$个bucket address table条目/指针指向bucket j，同样的情况也发生在bucket z身上</li><li>新到达的local depth是3， 因此从右边数第3个bit是0的条目指向bucket j, 是1的条目指向bucket z。前者我用红色的连线，后者我用绿色的连线。即指向bucket z的条目后三位bit都是<code>110</code>, 我称之为<em>下半区</em>。</li><li>我们考虑怎么去实现上一点。我们已知bucket z对应的条目模式pattern是<code>XX110</code>(<code>X</code>代表0或1)。<ul><li>我这里将数字值最小的一个条目<code>00110</code>称为base point基准点。<ul><li>获得base point的普遍方式是: 将从左第local depth设置成1，左侧剩下的(local depth - 1)个bits使用原bucket j的(local depth - 1)个bits。</li></ul></li><li>我们从base point开始做iteration迭代, 次数是4，即绿连线的个数，称之为iterations。<ul><li>获得iterations的普遍方式是: $2^{\;(\mathrm{global\;depth} - \mathrm{local\;depth})}$</li></ul></li><li>每一次迭代我们都在base point上加一个递增量，获得下一个属于bucket z的条目。这个递增量在这图中是<code>1000</code>, 我们称之为iter_incr。<ul><li>获得iter_incr的普遍方式是: $1 &lt;&lt; \mathrm{local\;depth}$</li></ul></li></ul></li></ul><p><br><br><br></p><p>到目前为止上面的图片都很重要，需要被全面理解，才能开始写代码。如果不太理解，可以去书中仔细看看。下面两个链接也能帮助你:</p><ul><li><a href="https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/">Database System Concepts 精读 [11.6-11.7] Hashing</a></li><li><a href="https://cakebytheoceanluo.github.io/2020/04/12/Extendable-Hashing-Exercise/">Extendable Hashing 练习</a></li></ul><p>另外图中bucket id(比如图中bucket下面的<code>bucket0</code>, <code>bucket1</code>等等)不重要，因为我们不根据它们的名字去确定它们，我们根据bucket address table对应位置的bucket指针去寻找对应的bucket。这句话我会在实现部分重复一次。</p><p><br></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="Bit-Operation-位操作"><a href="#Bit-Operation-位操作" class="headerlink" title="Bit Operation 位操作"></a>Bit Operation 位操作</h2><p>我用了两个pre-computed table去完成两个位操作的函数。我想法和目的是使这两个函数足够快。毕竟整个Extendible Hash Table的核心基于位操作。</p><h3 id="GET-LAST-N-BITS"><a href="#GET-LAST-N-BITS" class="headerlink" title="GET_LAST_N_BITS"></a><code>GET_LAST_N_BITS</code></h3><p><code>GET_LAST_N_BITS</code>这个函数可以获得参数的后n个bits</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Pre-computed mask array to get the last n bits of an int</span></span><br><span class="line"><span class="comment">// Usage Example: value &amp; LAST_N_BIT_MASK[2] ==&gt; value &amp; 0x3 ==&gt; value &amp; 0b11 =&gt; get the last two bits of value</span></span><br><span class="line"><span class="comment">// This array should/must fit into L1 cache, so we can "get the last bits of an int" in SINGLE bit operator (&amp;)</span></span><br><span class="line"><span class="comment">// Alternative we can use calculation like: value &amp; ((1 &lt;&lt; n) - 1) to get the same job done.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">size_t</span>, 32&gt; LAST_N_BITS_MASK { <span class="number">0</span>,</span><br><span class="line">                                                           <span class="number">0x1</span>,        <span class="number">0x3</span>,        <span class="number">0x7</span>,       <span class="number">0xF</span>,</span><br><span class="line">                                                           <span class="number">0x1F</span>,       <span class="number">0x3F</span>,       <span class="number">0x7F</span>,      <span class="number">0xFF</span>,</span><br><span class="line">                                                           <span class="number">0x1FF</span>,      <span class="number">0x3FF</span>,      <span class="number">0x7FF</span>,     <span class="number">0xFFF</span>,</span><br><span class="line">                                                           <span class="number">0x1FFF</span>,     <span class="number">0x3FFF</span>,     <span class="number">0x7FFF</span>,    <span class="number">0xFFFF</span>,</span><br><span class="line">                                                           <span class="number">0x1FFFF</span>,    <span class="number">0x3FFFF</span>,    <span class="number">0x7FFFF</span>,   <span class="number">0xFFFFF</span>,</span><br><span class="line">                                                           <span class="number">0x1FFFFF</span>,   <span class="number">0x3FFFFF</span>,   <span class="number">0x7FFFFF</span>,  <span class="number">0xFFFFFF</span>,</span><br><span class="line">                                                           <span class="number">0x1FFFFFF</span>,  <span class="number">0x3FFFFFF</span>,  <span class="number">0x7FFFFFF</span>, <span class="number">0xFFFFFFF</span>,</span><br><span class="line">                                                           <span class="number">0x1FFFFFFF</span>, <span class="number">0x3FFFFFFF</span>, <span class="number">0x7FFFFFFF</span> };</span><br><span class="line"></span><br><span class="line"><span class="function">__always_inline <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GET_LAST_N_BITS</span><span class="params">(<span class="keyword">size_t</span> value, <span class="keyword">int</span> n)</span> </span>{ <span class="keyword">return</span> value &amp; LAST_N_BITS_MASK[n]; }</span><br></pre></td></tr></tbody></table></figure><h3 id="GET-LAST-N-TH-BIT"><a href="#GET-LAST-N-TH-BIT" class="headerlink" title="GET_LAST_N_TH_BIT"></a><code>GET_LAST_N_TH_BIT</code></h3><p><code>GET_LAST_N_TH_BIT</code>这个函数可以获得参数的后第n个bit</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Pre-computed mask array to get the last n-th bit of an int</span></span><br><span class="line"><span class="comment">// Usage Example: value &amp; LAST_N_BIT_MASK[2] ==&gt; value &amp; 0x2 ==&gt; value &amp; 0b10 =&gt; get the last 2rd bit of value</span></span><br><span class="line"><span class="comment">// This array should/must fit into L1 cache, so we can "get the last bits of an int" in SINGLE bit operator (&amp;)</span></span><br><span class="line"><span class="comment">// Alternative we can use calculation like: value &amp; ((1 &lt;&lt; (n - 1))) to get the same job done.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">size_t</span>, 32&gt; LAST_N_TH_BIT_MASK { <span class="number">0</span>,</span><br><span class="line">                                                             <span class="number">0x1</span>,        <span class="number">0x2</span>,        <span class="number">0x4</span>,       <span class="number">0x8</span>,</span><br><span class="line">                                                             <span class="number">0x10</span>,       <span class="number">0x20</span>,       <span class="number">0x40</span>,      <span class="number">0x80</span>,</span><br><span class="line">                                                             <span class="number">0x100</span>,      <span class="number">0x200</span>,      <span class="number">0x400</span>,     <span class="number">0x800</span>,</span><br><span class="line">                                                             <span class="number">0x1000</span>,     <span class="number">0x2000</span>,     <span class="number">0x4000</span>,    <span class="number">0x8000</span>,</span><br><span class="line">                                                             <span class="number">0x10000</span>,    <span class="number">0x20000</span>,    <span class="number">0x40000</span>,   <span class="number">0x80000</span>,</span><br><span class="line">                                                             <span class="number">0x100000</span>,   <span class="number">0x200000</span>,   <span class="number">0x400000</span>,  <span class="number">0x800000</span>,</span><br><span class="line">                                                             <span class="number">0x1000000</span>,  <span class="number">0x2000000</span>,  <span class="number">0x4000000</span>, <span class="number">0x8000000</span>,</span><br><span class="line">                                                             <span class="number">0x10000000</span>, <span class="number">0x20000000</span>, <span class="number">0x40000000</span> };</span><br><span class="line"></span><br><span class="line"><span class="function">__always_inline <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GET_LAST_N_TH_BIT</span><span class="params">(<span class="keyword">size_t</span> value, <span class="keyword">int</span> n)</span> </span>{ <span class="keyword">return</span> value &amp; LAST_N_TH_BIT_MASK[n]; }</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="struct-Bucket"><a href="#struct-Bucket" class="headerlink" title="struct Bucket"></a><code>struct Bucket</code></h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bucket</span> {</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;K&gt; keys;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;V&gt; values;</span><br><span class="line">  <span class="keyword">int</span> localDepth = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">std</span>::shared_mutex bucket_latch;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// constructor</span></span><br><span class="line">  Bucket() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">  Bucket(<span class="keyword">int</span> localDepth) : localDepth(localDepth) {};</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">const</span> K &amp;key, V &amp;value)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Exist</span><span class="params">(<span class="keyword">const</span> K &amp;key, <span class="keyword">const</span> V &amp;value)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Remove</span><span class="params">(<span class="keyword">const</span> K &amp;key)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">const</span> K &amp;key, <span class="keyword">const</span> V &amp;value)</span></span>;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>Bucket需要存储keys, values和这个bucket自己的local depth。</p><p>我看了很多其他人的代码，很多人用<code>std::map</code>或者<code>std::unordered_map</code>去存储key, value。这样当然没错，只是我自己觉得很不舒服 — 用一个hash table去实现另一个hash table。 </p><p>我使用的方法类似下图中表达的意思: 分开存储key和value，它们的位置一对一对应：<br><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec07/18.jpg" alt="18.jpg"></p><ul><li>因为这题中我的实现key是不被排序的。这里提一下我如何去删除一个key, value对。举例我们要删除K3， 我们让<code>keys[3] = keys[n]; keys.pop_back();</code>， 然后对value也做同样的操作即可。这样删除的操作是常数时间复杂度，另外key的顺序对我们无关。</li><li>另外我的bucket也有一个<code>std::shared_mutex bucket_latch;</code>, 我在尽量细化程序锁的粒度。</li><li>其他我用了Find, Exist, Remove, Insert的函数对应hash table的同名函数，也是为了帮助这四个同名函数。它们实现都是正常思路，这里不再赘述。</li></ul><hr><h2 id="class-ExtendibleHash-attributes"><a href="#class-ExtendibleHash-attributes" class="headerlink" title="class ExtendibleHash attributes"></a><code>class ExtendibleHash</code> attributes</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the element number limitation in a single bucket</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> bucketSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// global depth</span></span><br><span class="line"><span class="keyword">int</span> globalDepth = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// number of buckets</span></span><br><span class="line"><span class="keyword">int</span> numBuckets = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// number of keys</span></span><br><span class="line"><span class="keyword">size_t</span> <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bucket Address Table a.k.a Directory</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Bucket&gt;&gt; bucketAddressTable = {};</span><br><span class="line"></span><br><span class="line"><span class="keyword">mutable</span> <span class="built_in">std</span>::shared_mutex global_latch;</span><br></pre></td></tr></tbody></table></figure><ul><li><code>const size_t bucketSize = 0;</code>因为是<code>const</code>, 所以只能在Initializer list中被初始化。见<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvd2hlbi1kby13ZS11c2UtaW5pdGlhbGl6ZXItbGlzdC1pbi1jLw==" title="https://www.geeksforgeeks.org/when-do-we-use-initializer-list-in-c/">When do we use Initializer List in C++?<i class="fa fa-external-link"></i></span><!-- TODO:学这个链接的页面 --></li><li><code>std::shared_ptr&lt;Bucket&gt;</code>当然可以被替换成<code>Bucket*</code></li><li><code>size_t size = 0;</code>是我个人喜好，去记录hash table中存储的数量。不是必需的成员。</li><li><code>mutable std::shared_mutex global_latch;</code>这个相当于是全局的锁，可以锁住<code>class ExtendibleHash</code>的所有成员，自然包括了它的所有的bucket。</li></ul><hr><h2 id="class-ExtendibleHash-number-function-public-private"><a href="#class-ExtendibleHash-number-function-public-private" class="headerlink" title="class ExtendibleHash number function (public, private)"></a><code>class ExtendibleHash</code> number function (public, private)</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// get the size of hash table, added by Jigao</span></span><br><span class="line">  <span class="function">__always_inline <span class="keyword">size_t</span> <span class="title">GetSize</span><span class="params">()</span> <span class="keyword">override</span> </span>{ </span><br><span class="line">    <span class="function"><span class="built_in">std</span>::shared_lock&lt;<span class="built_in">std</span>::shared_mutex&gt; <span class="title">shared_lock</span><span class="params">(global_latch)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">size</span>; </span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * helper function to return pointer to bucket of the key</span></span><br><span class="line"><span class="comment">   * NOT THREAD SAFE, MUST PROTECTED BY LATCH</span></span><br><span class="line"><span class="comment">   * @return a shared point of the bucket, where the key lands</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Bucket&gt; <span class="title">GetBucket</span><span class="params">(<span class="keyword">const</span> K &amp;key)</span> <span class="keyword">const</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> bucketAddressTable[GET_LAST_N_BITS(HashKey(key), globalDepth)];</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * check the existence of a key and update the value, if the key exists</span></span><br><span class="line"><span class="comment">   * NOT THREAD SAFE, MUST PROTECTED BY LATCH</span></span><br><span class="line"><span class="comment">   * @return true for the key exists, otherwise false</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Exists</span><span class="params">(<span class="keyword">const</span> K &amp;key, <span class="keyword">const</span> V &amp;value)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * double the size of bucket address table</span></span><br><span class="line"><span class="comment">   * NOT THREAD SAFE, MUST PROTECTED BY LATCH</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Grow</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> it = <span class="number">0</span>, old_size = bucketAddressTable.<span class="built_in">size</span>(); it != old_size; it++) {</span><br><span class="line">      bucketAddressTable.emplace_back(bucketAddressTable[it]);</span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><ul><li><code>GetSize()</code>和之前的<code>size</code>关联。不是必需的成员。(我在<code>hash_table.h</code>中加入了这个函数: <code>virtual size_t GetSize() = 0;</code> 当然这也只是我自己的喜好)</li><li><code>GetBucket</code>是insert, find, remove中必需的函数: 根据一个key，找到它对应的bucket。</li><li><code>bool Exists(const K &amp;key, const V &amp;value);</code>检查一个key是否存在，如果它存在的话，更新它的value。这个也是insert, find, remove时候重要的函数。<ul><li>对比: <code>bool Find(const K &amp;key, V &amp;value) override;</code>是通过key，找到对应的value</li></ul></li><li><code>Grow()</code> 即global depth增加的时候被使用，bucket address table翻倍。(从很多例子中可以找到)</li><li>其他题目要求的方法在有这部分被省略，我们在下一个部分仔细讲。</li></ul><p><br><br><br></p><p>我看了很多其他人的代码， 下面是一些我注意到的：</p><ul><li>有些同学的<code>bucketAddressTable</code>的条目有时候会是一个<code>nullptr</code>，　这个至少和我们的练习中都不一样。练习中每一个<code>bucketAddressTable</code>的条目<strong>都是bucket pointer</strong>，<strong>会出现多个条目指向同一个bucket的情况(即global depth &gt; local depth)</strong></li><li>有些同学的local depth可能是-1， 但是练习中<strong>每一个bucket的local depth都是正值</strong></li><li>指针数组能增长，它的长度总是2的幂，因此数组每增长一次，桶的数目就<strong>翻倍</strong>。有些同学的实现中<code>bucketAddressTable</code>的大小不都是2的倍数。</li><li>我的实现中，每次bucket已满之后，<strong>只新建一个新的bucket</strong> <!-- https://github.com/gatsbyd/cmu_15445_2018/blob/master/src/hash/extendible_hash.cpp#L114 --></li><li>有些同学用<code>while</code>循环，我选择了<code>goto</code>，因为我是在insert过程中判断是否需要继续，而不是过程一开始</li></ul><h3 id="Find"><a href="#Find" class="headerlink" title="Find"></a><code>Find</code></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * lookup function to find value associate with input key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V&gt;</span><br><span class="line"><span class="keyword">bool</span> ExtendibleHash&lt;K, V&gt;::Find(<span class="keyword">const</span> K &amp;key, V &amp;value) {</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::shared_lock&lt;<span class="built_in">std</span>::shared_mutex&gt; <span class="title">global_lock</span><span class="params">(global_latch)</span></span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> bucket = GetBucket(key);</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::shared_lock&lt;<span class="built_in">std</span>::shared_mutex&gt; <span class="title">bucket_lock_guard</span><span class="params">(bucket-&gt;bucket_latch)</span></span>;</span><br><span class="line">  global_lock.unlock();</span><br><span class="line">  <span class="keyword">return</span> bucket-&gt;Find(key, value);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>根据这个<code>Find</code>函数，我可以猜测，这个hash tbale是<strong>不考虑重复的键值(duplicate key value)</strong>。不然<code>Find</code>函数的设计不会是上面这样。因此我们在插入(<code>Insert</code>)的时候需要考虑，该key是否已经出现过:<ul><li>如果已经出现过, update value</li><li>如果没出现过，简单插入即可</li></ul></li><li>Find属于一个读操作，所以我们只需要获得<code>global_latch</code>和对应<code>bucket-&gt;bucket_latch</code>的<code>std::shared_lock&lt;std::shared_mutex&gt;</code>即可。</li></ul><h3 id="Remove"><a href="#Remove" class="headerlink" title="Remove"></a><code>Remove</code></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * delete &lt;key,value&gt; entry in hash table</span></span><br><span class="line"><span class="comment"> * Shrink &amp; Combination is not required for this project</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V&gt;</span><br><span class="line"><span class="keyword">bool</span> ExtendibleHash&lt;K, V&gt;::Remove(<span class="keyword">const</span> K &amp;key) {</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::shared_lock&lt;<span class="built_in">std</span>::shared_mutex&gt; <span class="title">global_lock</span><span class="params">(global_latch)</span></span>;</span><br><span class="line">  <span class="built_in">size</span>--;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> bucket = GetBucket(key);</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::shared_mutex&gt; <span class="title">bucket_lock_guard</span><span class="params">(bucket-&gt;bucket_latch)</span></span>;</span><br><span class="line">  global_lock.unlock();</span><br><span class="line">  <span class="keyword">return</span> bucket-&gt;Remove(key);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a><code>Insert</code></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * insert &lt;key,value&gt; entry in hash table</span></span><br><span class="line"><span class="comment"> * Split &amp; Redistribute bucket when there is overflow and if necessary increase</span></span><br><span class="line"><span class="comment"> * global depth</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V&gt;</span><br><span class="line"><span class="keyword">void</span> ExtendibleHash&lt;K, V&gt;::Insert(<span class="keyword">const</span> K &amp;key, <span class="keyword">const</span> V &amp;value) {</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::shared_mutex&gt; <span class="title">global_lock</span><span class="params">(global_latch)</span></span>;</span><br><span class="line">  <span class="comment">// 0. Check the existence and update the value</span></span><br><span class="line">  <span class="keyword">if</span> (Exists(key, value)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. Look up the correspond bucket</span></span><br><span class="line">  check:</span><br><span class="line">  <span class="keyword">auto</span> bucket_j = GetBucket(key);</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::shared_mutex&gt; <span class="title">bucket_lock_guard</span><span class="params">(bucket_j-&gt;bucket_latch)</span></span>;</span><br><span class="line">  <span class="keyword">auto</span>&amp; keys_j = bucket_j-&gt;keys;</span><br><span class="line">  <span class="keyword">auto</span>&amp; values_j = bucket_j-&gt;values;</span><br><span class="line">  assert(keys_j.<span class="built_in">size</span>() == values_j.<span class="built_in">size</span>());</span><br><span class="line">  assert(keys_j.<span class="built_in">size</span>() &lt;= bucketSize);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. Check the bucket, if is full</span></span><br><span class="line">  <span class="keyword">if</span> (keys_j.<span class="built_in">size</span>() == bucketSize) {</span><br><span class="line">    <span class="comment">// 2.1 Bucket full</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> last_n_bits_global = GET_LAST_N_BITS(HashKey(key), globalDepth);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> last_n_bits_local = GET_LAST_N_BITS(last_n_bits_global, bucket_j-&gt;localDepth);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> old_localDepth = bucket_j-&gt;localDepth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.1.1 Compare the global depth (i) and local depth (i_j)</span></span><br><span class="line">    <span class="keyword">if</span> (globalDepth == old_localDepth) {</span><br><span class="line">      <span class="comment">// 2.1.1.1 i == i_j, only one entry in the bucket address table points to bucket j</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2.1.1.1.1 increase the size of the bucket address table.</span></span><br><span class="line">      <span class="comment">//           It replaces each entry by two entries, both of which contain the same pointer as the original entry.</span></span><br><span class="line">      globalDepth++;</span><br><span class="line">      Grow();</span><br><span class="line">      assert((<span class="keyword">decltype</span>(bucketAddressTable.<span class="built_in">size</span>()))(<span class="number">1</span> &lt;&lt; globalDepth) == bucketAddressTable.<span class="built_in">size</span>());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.1.1.2 i &gt; i_j, more than one entry in the bucket address table points to bucket j.</span></span><br><span class="line">    <span class="comment">//                  The system can split bucket $j$ without increasing the size of the bucket address table</span></span><br><span class="line">    <span class="comment">//                  Do Nothing For This Case</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.1.2 The system allocates a new bucket z,</span></span><br><span class="line">    <span class="comment">//         and sets i_j and i_z to the value that results from adding 1 to the original i_j value.</span></span><br><span class="line">    bucket_j-&gt;localDepth++;</span><br><span class="line">    <span class="keyword">auto</span> bucket_z = <span class="built_in">std</span>::make_shared&lt;Bucket&gt;(bucket_j-&gt;localDepth);</span><br><span class="line">    numBuckets++;</span><br><span class="line">    <span class="keyword">auto</span>&amp; keys_z = bucket_z-&gt;keys;</span><br><span class="line">    <span class="keyword">auto</span>&amp; values_z = bucket_z-&gt;values;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.1.3 Next, to adjust the entries in the bucket address table that previously pointed to bucket j</span></span><br><span class="line">    <span class="keyword">int</span> base_point = (<span class="number">1</span> &lt;&lt; old_localDepth) + last_n_bits_local;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> iter_incr = <span class="number">1</span> &lt;&lt; (bucket_j-&gt;localDepth);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">size_t</span> iterations = <span class="built_in">std</span>::<span class="built_in">max</span>(((globalDepth - bucket_j-&gt;localDepth) &lt;&lt; <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> it = <span class="number">0</span>; it != iterations; it++, base_point += iter_incr) {</span><br><span class="line">      bucketAddressTable[base_point] = bucket_z;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.1.4 rehash each record in bucket j, and allocates it either to bucket j or bucket z</span></span><br><span class="line">    <span class="comment">// 2.1.4.1 Find all match index in keys of bucket j</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; matches;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> it = keys_j.<span class="built_in">size</span>() - <span class="number">1</span>; ; --it) {</span><br><span class="line">      <span class="keyword">if</span> (GET_LAST_N_TH_BIT(HashKey(keys_j[it]), bucket_j-&gt;localDepth) != <span class="number">0</span>) {</span><br><span class="line">        matches.push_back(it);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> (it == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.1.4.2 Insert matches to bucket z, and remove matches from bucket j</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; it : matches) {</span><br><span class="line">      keys_z.emplace_back(keys_j[it]);</span><br><span class="line">      values_z.emplace_back(values_j[it]);</span><br><span class="line"></span><br><span class="line">      keys_j[it] = keys_j.back();</span><br><span class="line">      keys_j.pop_back();</span><br><span class="line">      values_j[it] = values_j.back();</span><br><span class="line">      values_j.pop_back();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.1.5 Check if there is place to insert after rehashing</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> to_bucket_z = GET_LAST_N_TH_BIT(HashKey(key), bucket_j-&gt;localDepth);</span><br><span class="line">    <span class="keyword">if</span>((matches.empty() &amp;&amp; !to_bucket_z) || matches.<span class="built_in">size</span>() + to_bucket_z &gt; bucketSize) {</span><br><span class="line">      <span class="comment">// 2.1.5.1 No place, so repeat again</span></span><br><span class="line">      <span class="keyword">goto</span> check;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.1.5.2 Exists space, insert key and value</span></span><br><span class="line">    <span class="keyword">if</span> (to_bucket_z) {</span><br><span class="line">      bucket_z-&gt;Insert(key, value);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      bucket_j-&gt;Insert(key, value);</span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 2.2 Bucket not full, just simple insert</span></span><br><span class="line">    bucket_j-&gt;Insert(key, value);</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// Insert Done</span></span><br><span class="line">  <span class="built_in">size</span>++;</span><br><span class="line">  assert(keys_j.<span class="built_in">size</span>() == values_j.<span class="built_in">size</span>());</span><br><span class="line">  assert(keys_j.<span class="built_in">size</span>() &lt;= bucketSize);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Insert我严格<strong>按照DSC书中的描述</strong></li></ul><ol><li><code>if (Exists(key, value)) return;</code>: Exists方法看这个key是否已经出现过，如果已经出现过，更新对应的value。</li><li><code>auto bucket_j = GetBucket(key);</code>: 得到对应的bucket， 称之为<strong>bucket_j</strong></li><li><code>if (keys_j.size() == bucketSize)</code>: 看这个bucket是否已满<ul><li>2.1. bucket已满<ul><li>2.1.1. <code>if (globalDepth == old_localDepth)</code> 比较global depth $i$ 和 local depth $i_j$ <ul><li>2.1.1.1.  $i = i_j$ 相等: <code>globalDepth++; Grow();</code> 增长global depth, 对bucket address table进行翻倍操作</li><li>2.1.1.2.  $i \neq i_j$ 不相等: 只可能是$i &gt; i_j$</li></ul></li><li>2.1.2.  <code>bucket_j-&gt;localDepth++; auto bucket_z = std::make_shared&lt;Bucket&gt;(bucket_j-&gt;localDepth); numBuckets++;</code> 增长bucket_j的local depth。 新建一个<strong>bucket_z</strong>， 使它有同样的local depth</li><li>2.1.3. <code>for (size_t it = 0; it != iterations; it++, base_point += iter_incr) bucketAddressTable[base_point] = bucket_z;</code> 调整bucket address table中的条目，使部分指向原bucket_j的条目指向bucket_z。这部分具体见<a href="#split-bucket前后">split bucket前后</a></li><li>2.1.4. <strong>rehash</strong>, 将bucket_j中从左第local depth个bit是1的元素移动到bucket_z。即我的<a href="#split-bucket前后">split bucket前后</a>提到的<em>下半区</em>的概念。</li><li>2.1.5. <code>const bool to_bucket_z = GET_LAST_N_TH_BIT(HashKey(key), bucket_j-&gt;localDepth); if((matches.empty() &amp;&amp; !to_bucket_z) || matches.size() + to_bucket_z &gt; bucketSize) goto check;</code> 我们查看我们这一次插入的key是属于bucket_j还是bucket_z。再看对应bucket是否还是满的:<ul><li>2.1.5.1 如果对应bucket还是满的: <code>goto check;</code>， 这里 <code>check</code>即我们的第一步<code>1.</code></li><li>2.1.5.1 如果对应bucket未满: <code>Insert(key, value);</code></li></ul></li></ul></li><li>2.2. bucket未满</li><li><code>Insert(key, value);</code>即可</li></ul></li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><code>hash_table.h</code>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nha2VieXRoZW9jZWFuTHVvL0NNVTE1LTQ0NS0yMDE3L2Jsb2IvbWFzdGVyL3NyYy9pbmNsdWRlL2hhc2gvaGFzaF90YWJsZS5o" title="https://github.com/cakebytheoceanLuo/CMU15-445-2017/blob/master/src/include/hash/hash_table.h">https://github.com/cakebytheoceanLuo/CMU15-445-2017/blob/master/src/include/hash/hash_table.h<i class="fa fa-external-link"></i></span></li><li><code>extendible_hash.h</code>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nha2VieXRoZW9jZWFuTHVvL0NNVTE1LTQ0NS0yMDE3L2Jsb2IvbWFzdGVyL3NyYy9pbmNsdWRlL2hhc2gvZXh0ZW5kaWJsZV9oYXNoLmg=" title="https://github.com/cakebytheoceanLuo/CMU15-445-2017/blob/master/src/include/hash/extendible_hash.h">https://github.com/cakebytheoceanLuo/CMU15-445-2017/blob/master/src/include/hash/extendible_hash.h<i class="fa fa-external-link"></i></span></li><li><code>extendible_hash.cpp</code>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nha2VieXRoZW9jZWFuTHVvL0NNVTE1LTQ0NS0yMDE3L2Jsb2IvbWFzdGVyL3NyYy9oYXNoL2V4dGVuZGlibGVfaGFzaC5jcHA=" title="https://github.com/cakebytheoceanLuo/CMU15-445-2017/blob/master/src/hash/extendible_hash.cpp">https://github.com/cakebytheoceanLuo/CMU15-445-2017/blob/master/src/hash/extendible_hash.cpp<i class="fa fa-external-link"></i></span></li></ul><p><br></p><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nha2VieXRoZW9jZWFuTHVvL0NNVTE1LTQ0NS0yMDE3L2Jsb2IvbWFzdGVyL3Rlc3QvaGFzaC9leHRlbmRpYmxlX2hhc2hfdGVzdC5jcHA=" title="https://github.com/cakebytheoceanLuo/CMU15-445-2017/blob/master/test/hash/extendible_hash_test.cpp">https://github.com/cakebytheoceanLuo/CMU15-445-2017/blob/master/test/hash/extendible_hash_test.cpp<i class="fa fa-external-link"></i></span></p><p>代码链接以后会附上</p><p>我准备了非常丰富的多线程的test，它们能检查线程是否安全，同时也是对锁粒度和性能的考验(如果性能太差会需要很长时间):</p><ul><li><code>EnormeConcurrentInsertTest</code></li><li><code>EnormeRandomConcurrentInsertTest</code></li><li><code>EnormeConcurrentRemoveTest</code></li><li><code>EnormeRandomConcurrentRemoveTest</code></li><li><code>EnormeConcurrentTest</code></li><li><code>EnormeRandomConcurrentTest</code></li><li><code>EnormeRandomConcurrentTest2</code></li></ul><h1 id="MY-TODO"><a href="#MY-TODO" class="headerlink" title="MY-TODO"></a>MY-TODO</h1><p>写这次的过程中还是发现一些问题:</p><ul><li>Insert时锁的粒度或许可以更小， 考虑是否有必要，是否能带来性能的提升<ul><li>见 stronaut0131: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FzdHJvbmF1dDAxMzEvY211MTUtNDQ1LTIwMTc=" title="https://github.com/astronaut0131/cmu15-445-2017">https://github.com/astronaut0131/cmu15-445-2017<i class="fa fa-external-link"></i></span></li><li>见 Junoth: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1bm90aC9DTVUtMTUtNDQ1" title="https://github.com/Junoth/CMU-15-445">https://github.com/Junoth/CMU-15-445<i class="fa fa-external-link"></i></span></li><li>RWLock 见lancecopper: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xhbmNlY29wcGVyL2NtdTE1NDQ1X2ZhbGwyMDE3L2Jsb2IvbWFzdGVyL3NxbGl0ZS1mYWxsMjAxNy9zcmMvaGFzaC9leHRlbmRpYmxlX2hhc2guY3Bw" title="https://github.com/lancecopper/cmu15445_fall2017/blob/master/sqlite-fall2017/src/hash/extendible_hash.cpp">https://github.com/lancecopper/cmu15445_fall2017/blob/master/sqlite-fall2017/src/hash/extendible_hash.cpp<i class="fa fa-external-link"></i></span></li></ul></li></ul><hr><p>引用:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTgvcHJvamVjdDEv" title="https://15445.courses.cs.cmu.edu/fall2018/project1/">https://15445.courses.cs.cmu.edu/fall2018/project1/<i class="fa fa-external-link"></i></span></li></ul><p>推荐的阅读:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdS1qaWFuaGFvL0NNVS0xNS00NDUvdHJlZS9tYXN0ZXIvTGFiMS1CdWZmZXItUG9vbCMlRTUlOEYlQUYlRTYlODklQTklRTUlQjElOTUlRTclOUElODQlRTUlOTMlODglRTUlQjglOEMlRTglQTElQTg=" title="https://github.com/liu-jianhao/CMU-15-445/tree/master/Lab1-Buffer-Pool#%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E5%93%88%E5%B8%8C%E8%A1%A8">https://github.com/liu-jianhao/CMU-15-445/tree/master/Lab1-Buffer-Pool#%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E5%93%88%E5%B8%8C%E8%A1%A8<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ2F0c2J5MTIzL3AvMTA2MTMxNjAuaHRtbA==" title="https://www.cnblogs.com/gatsby123/p/10613160.html">https://www.cnblogs.com/gatsby123/p/10613160.html<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9lZGUwODlkM2Q4YWQ=" title="https://www.jianshu.com/p/ede089d3d8ad">https://www.jianshu.com/p/ede089d3d8ad<i class="fa fa-external-link"></i></span></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;我摘抄题目的重点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your table needs to automatically grow in size as needed but you do not need shrink it. That is, you do not need to implement support for shrinking or compacting the hash table. &lt;/li&gt;
&lt;li&gt;Check out chapters 11.5-11.7 in the textbook for more information on how to implement this table. &lt;/li&gt;
&lt;li&gt;见&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/&quot;&gt;Database System Concepts 精读 [11.6-11.7] Hashing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我对比过这部分的Fall2017的源代码和Fall2018没有区别&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Data Structure" scheme="https://cakebytheoceanluo.github.io/categories/Data-Structure/"/>
    
      <category term="Access Methods" scheme="https://cakebytheoceanluo.github.io/categories/Access-Methods/"/>
    
      <category term="Hash Table" scheme="https://cakebytheoceanluo.github.io/categories/Hash-Table/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/categories/Indexing/"/>
    
    
      <category term="Dynamic Hashing Scheme" scheme="https://cakebytheoceanluo.github.io/tags/Dynamic-Hashing-Scheme/"/>
    
      <category term="Extendible Hashing" scheme="https://cakebytheoceanluo.github.io/tags/Extendible-Hashing/"/>
    
  </entry>
  
  <entry>
    <title>[CMU-15445]17_18_Project0</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/16/CMU-15445-17-18-Project0/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/16/CMU-15445-17-18-Project0/</id>
    <published>2020-04-16T12:02:27.000Z</published>
    <updated>2020-08-17T12:00:30.640Z</updated>
    
    <content type="html"><![CDATA[<p>我目前正在写CMU-15445的课程项目。这篇文章关注17Fall和18Fall的课程项目，因为这两年的作业类似，而且基于同一个代码框架。(18Fall应该去掉该代码框架中的一些bug，但是大体框架是类似)</p><p>我整理了一些我网上能搜到的相关博客文章和代码实现。我自己的实现文章中，我和下面的实现对比。</p><a id="more"></a><h1 id="博客文章"><a href="#博客文章" class="headerlink" title="博客文章"></a>博客文章</h1><p>west_liu (liu-jianhao): <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlc3Ricm9va2xpdS9hcnRpY2xlL2RldGFpbHMvODM5MjcwODM=" title="https://blog.csdn.net/westbrookliu/article/details/83927083">https://blog.csdn.net/westbrookliu/article/details/83927083<i class="fa fa-external-link"></i></span></p><p>Gatsby123 (gatsbyd): <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ2F0c2J5MTIzL3AvMTIwNzU1ODMuaHRtbA==" title="https://www.cnblogs.com/gatsby123/p/12075583.html">https://www.cnblogs.com/gatsby123/p/12075583.html<i class="fa fa-external-link"></i></span></p><p>西部小笼包 (yixuaz): <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vbmIvMzYyNjU4NDE=" title="https://www.jianshu.com/nb/36265841">https://www.jianshu.com/nb/36265841<i class="fa fa-external-link"></i></span></p><p>丁浩羚 HDing Blog: <span class="exturl" data-url="aHR0cHM6Ly9obGRpbmd6eWRvbmcuZ2l0aHViLmlvL3RhZ3MvI2RhdGFiYXNl" title="https://hldingzydong.github.io/tags/#database">https://hldingzydong.github.io/tags/#database<i class="fa fa-external-link"></i></span></p><p>我: <a href="https://cakebytheoceanluo.github.io/categories/CMU-15445/">https://cakebytheoceanluo.github.io/categories/CMU-15445/</a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>west_liu (liu-jianhao): <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdS1qaWFuaGFvL0NNVS0xNS00NDU=" title="https://github.com/liu-jianhao/CMU-15-445">https://github.com/liu-jianhao/CMU-15-445<i class="fa fa-external-link"></i></span><br><!-- - Fork : https://github.com/YvetteCh/dbms (only Project1 Task1)　这人没劲 --></p><p>Gatsby123 (gatsbyd): <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dhdHNieWQvY211XzE1NDQ1XzIwMTg=" title="https://github.com/gatsbyd/cmu_15445_2018">https://github.com/gatsbyd/cmu_15445_2018<i class="fa fa-external-link"></i></span></p><p>西部小笼包 (yixuaz): <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lpeHVhei9DTVUtMTU0NDU=" title="https://github.com/yixuaz/CMU-15445">https://github.com/yixuaz/CMU-15445<i class="fa fa-external-link"></i></span></p><p>我: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nha2VieXRoZW9jZWFuTHVvL0NNVTE1LTQ0NS0yMDE3" title="https://github.com/cakebytheoceanLuo/CMU15-445-2017">https://github.com/cakebytheoceanLuo/CMU15-445-2017<i class="fa fa-external-link"></i></span></p><!-- 丁浩羚 HDing Blog: https://github.com/hldingzydong/CMU15-445-lab　和west_liu (liu-jianhao)一样 --><p><br></p><p>下面是没有对应博客的实现:</p><p>lancecopper: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xhbmNlY29wcGVyL2NtdTE1NDQ1X2ZhbGwyMDE3" title="https://github.com/lancecopper/cmu15445_fall2017">https://github.com/lancecopper/cmu15445_fall2017<i class="fa fa-external-link"></i></span> <!-- 很好 --></p><p>liujxing: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdWp4aW5nL0NNVV8xNTQ0NV9GYWxsMjAxN19EYXRhYmFzZVN5c3RlbXM=" title="https://github.com/liujxing/CMU_15445_Fall2017_DatabaseSystems">https://github.com/liujxing/CMU_15445_Fall2017_DatabaseSystems<i class="fa fa-external-link"></i></span> <!-- TODO:中文注释 --></p><p>Nov11: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RheWE2NjYvMTUtNDQ1" title="https://github.com/Taya666/15-445">https://github.com/Taya666/15-445<i class="fa fa-external-link"></i></span>　(原repo中已删除)</p><p>gigimushroom: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpZ2ltdXNocm9vbS9EYXRhYmFzZUJhY2tlbmRFbmdpbmU=" title="https://github.com/gigimushroom/DatabaseBackendEngine">https://github.com/gigimushroom/DatabaseBackendEngine<i class="fa fa-external-link"></i></span></p><p>xc42: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hjNDIvdG95REI=" title="https://github.com/xc42/toyDB">https://github.com/xc42/toyDB<i class="fa fa-external-link"></i></span></p><p>761417898: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzc2MTQxNzg5OC9jbXUxNS00NDVsYWI=" title="https://github.com/761417898/cmu15-445lab">https://github.com/761417898/cmu15-445lab<i class="fa fa-external-link"></i></span></p><p>程嵇邢滑 xingdl2007: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpbmdkbDIwMDcvY211MTUtNDQ1" title="https://github.com/xingdl2007/cmu15-445">https://github.com/xingdl2007/cmu15-445<i class="fa fa-external-link"></i></span></p><p>hqnddw: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hxbmRkdy9DTVUtMTU0NDUtZGF0YWJhc2U=" title="https://github.com/hqnddw/CMU-15445-database">https://github.com/hqnddw/CMU-15445-database<i class="fa fa-external-link"></i></span></p><p>ssujeen: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NzdWplZW4vMTU0NDUtZGI=" title="https://github.com/ssujeen/15445-db">https://github.com/ssujeen/15445-db<i class="fa fa-external-link"></i></span> <!-- TODO: 很一般--></p><p>junjieliu2910: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2p1bmppZWxpdTI5MTAvY211LTE1LTQ0NQ==" title="https://github.com/junjieliu2910/cmu-15-445">https://github.com/junjieliu2910/cmu-15-445<i class="fa fa-external-link"></i></span> <!-- BUGGY --></p><p><br></p><p>下面是不完整的实现:</p><p>FateTHarlaown: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ZhdGVUSGFybGFvd24vY211MTUtNDQ1bGFi" title="https://github.com/FateTHarlaown/cmu15-445lab">https://github.com/FateTHarlaown/cmu15-445lab<i class="fa fa-external-link"></i></span> (only Project1)<!-- TODO:这人不错 --></p><p>astronaut0131: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FzdHJvbmF1dDAxMzEvY211MTUtNDQ1LTIwMTc=" title="https://github.com/astronaut0131/cmu15-445-2017">https://github.com/astronaut0131/cmu15-445-2017<i class="fa fa-external-link"></i></span> (only Project1)<!-- TODO:这人不错 --></p><p>uniquebby: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VuaXF1ZWJieS8yMDE3Y211MTUtNDQ1" title="https://github.com/uniquebby/2017cmu15-445">https://github.com/uniquebby/2017cmu15-445<i class="fa fa-external-link"></i></span> (only Project1, 2, 3)</p><p>hcyezhang: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hjeWV6aGFuZy9DTVUxNS00NDUtRGF0YWJhc2UtU3lzdGVtcw==" title="https://github.com/hcyezhang/CMU15-445-Database-Systems">https://github.com/hcyezhang/CMU15-445-Database-Systems<i class="fa fa-external-link"></i></span> (only Project1, 2, 3)</p><p>sql-ai: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NxbC1haS9jbXVEQg==" title="https://github.com/sql-ai/cmuDB">https://github.com/sql-ai/cmuDB<i class="fa fa-external-link"></i></span> (only Project1, 2)</p><p>hxin18: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h4aW4xOC8xNTQ0NQ==" title="https://github.com/hxin18/15445">https://github.com/hxin18/15445<i class="fa fa-external-link"></i></span> (only Project1, 2)<!-- TODFO:TODO: 和west_liu (liu-jianhao) --></p><p>Jiawei0227: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ppYXdlaTAyMjcvQ01VLURhdGFiYXNl" title="https://github.com/Jiawei0227/CMU-Database">https://github.com/Jiawei0227/CMU-Database<i class="fa fa-external-link"></i></span> (only Project1)</p><p>BragCat: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JyYWdDYXQvQ01VLTE1NDQ1LURC" title="https://github.com/BragCat/CMU-15445-DB">https://github.com/BragCat/CMU-15445-DB<i class="fa fa-external-link"></i></span> (only Project1)</p><p>MiracleMa: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pcmFjbGVNYS9DTVUxNS00NDU=" title="https://github.com/MiracleMa/CMU15-445">https://github.com/MiracleMa/CMU15-445<i class="fa fa-external-link"></i></span> (only Project1)</p><p>Junoth: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1bm90aC9DTVUtMTUtNDQ1" title="https://github.com/Junoth/CMU-15-445">https://github.com/Junoth/CMU-15-445<i class="fa fa-external-link"></i></span> (only Project1)</p><p>ComputerCourses: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NvbXB1dGVyQ291cnNlcy9DTVUtMTUtNDQ1" title="https://github.com/ComputerCourses/CMU-15-445">https://github.com/ComputerCourses/CMU-15-445<i class="fa fa-external-link"></i></span> (only Project1)</p><p>LucienXian: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0x1Y2llblhpYW4vQ01VMTU0NDU=" title="https://github.com/LucienXian/CMU15445">https://github.com/LucienXian/CMU15445<i class="fa fa-external-link"></i></span> (only Project1)</p><p>jackwener: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2phY2t3ZW5lci9jbXUtMTU0NDU=" title="https://github.com/jackwener/cmu-15445">https://github.com/jackwener/cmu-15445<i class="fa fa-external-link"></i></span> (only Project1)</p><p>FlorianFANG: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0Zsb3JpYW5GQU5HL2NtdS0xNTQ0NQ==" title="https://github.com/FlorianFANG/cmu-15445">https://github.com/FlorianFANG/cmu-15445<i class="fa fa-external-link"></i></span> (only Project1)</p><p>JiankunDai: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ppYW5rdW5EYWkvY211LTE1NDQ1LWZhbGwyMDE4" title="https://github.com/JiankunDai/cmu-15445-fall2018">https://github.com/JiankunDai/cmu-15445-fall2018<i class="fa fa-external-link"></i></span> (only Project1)</p><p>xuchongfeng: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3h1Y2hvbmdmZW5nL2Ric3lzdGVtLWNtdS0xNS00NDU=" title="https://github.com/xuchongfeng/dbsystem-cmu-15-445">https://github.com/xuchongfeng/dbsystem-cmu-15-445<i class="fa fa-external-link"></i></span> (only Project1 Task 1)</p><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码:"></a>源代码:</h1><p>上面项目的第一个commit大致可以作为开始。下面有几个例子:</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ppYXdlaTAyMjcvQ01VLURhdGFiYXNlL3RyZWUvNDQxZDQ4NjczMzUzYmYwNzA3NDdjZjg4OGExMzdlMzMxMDYzZmNlZg==" title="https://github.com/Jiawei0227/CMU-Database/tree/441d48673353bf070747cf888a137e331063fcef">https://github.com/Jiawei0227/CMU-Database/tree/441d48673353bf070747cf888a137e331063fcef<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Rpb3h5Z2VuL0NNVTE1LTQ0NQ==" title="https://github.com/dioxygen/CMU15-445">https://github.com/dioxygen/CMU15-445<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RKLUxFU1NPTi9DTVUtMTU0NDU=" title="https://github.com/DJ-LESSON/CMU-15445">https://github.com/DJ-LESSON/CMU-15445<i class="fa fa-external-link"></i></span></p><p>它们都来自Fall 2017, 版本均为:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">15-445/645 Project Source Code</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Created: Nov 21 2017 @ 00:28:55</span><br><span class="line">Last Commit: be0f6dd92b4c3eaa52a6456bd8847773ab65b3ed</span><br></pre></td></tr></tbody></table></figure><h2 id="Fall-2018"><a href="#Fall-2018" class="headerlink" title="Fall 2018"></a>Fall 2018</h2><p>不建议使用2018的，因为代码里面声明不允许公开</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2phY2t3ZW5lci9jbXUtMTU0NDU=" title="https://github.com/jackwener/cmu-15445">https://github.com/jackwener/cmu-15445<i class="fa fa-external-link"></i></span></p><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>需要更多的test可以使用这里的:</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lpeHVhei9DTVUtMTU0NDUvYmxvYi9tYXN0ZXIvY211XzE1NDQ1XzIwMTcoc29sKS5yYXI=" title="https://github.com/yixuaz/CMU-15445/blob/master/cmu_15445_2017(sol).rar">https://github.com/yixuaz/CMU-15445/blob/master/cmu_15445_2017(sol).rar<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdS1qaWFuaGFvL0NNVS0xNS00NDUvdHJlZS9tYXN0ZXIvTGFiL3Rlc3Q=" title="https://github.com/liu-jianhao/CMU-15-445/tree/master/Lab/test">https://github.com/liu-jianhao/CMU-15-445/tree/master/Lab/test<i class="fa fa-external-link"></i></span></p><h1 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></tbody></table></figure><p>源代码如果想通过build，需要改<code>CMakelist.txt</code>31行:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(CMAKE_CXX_FLAGS <span class="string">"<span class="variable">${CMAKE_CXX_FLAGS}</span> -fPIC -Wall -Wextra -Werror -march=native"</span>)</span><br></pre></td></tr></tbody></table></figure><p>改成:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(CMAKE_CXX_FLAGS <span class="string">"<span class="variable">${CMAKE_CXX_FLAGS}</span> -fPIC -Wall -Wextra -march=native"</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>一个Java的实现: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RyZWFNZXI5NjMvVG95REI=" title="https://github.com/DreaMer963/ToyDB">https://github.com/DreaMer963/ToyDB<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我目前正在写CMU-15445的课程项目。这篇文章关注17Fall和18Fall的课程项目，因为这两年的作业类似，而且基于同一个代码框架。(18Fall应该去掉该代码框架中的一些bug，但是大体框架是类似)&lt;/p&gt;
&lt;p&gt;我整理了一些我网上能搜到的相关博客文章和代码实现。我自己的实现文章中，我和下面的实现对比。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
    
  </entry>
  
  <entry>
    <title>[DBMS] Cluster Index</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/15/DBMS-Cluster-Index/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/15/DBMS-Cluster-Index/</id>
    <published>2020-04-15T17:24:04.000Z</published>
    <updated>2020-04-16T10:01:41.791Z</updated>
    
    <content type="html"><![CDATA[<p>有关Clustered Indexes: <a href="https://cakebytheoceanluo.github.io/2020/03/19/CMU-15445-Lec07/#Clustered-Indexes">[CMU-15445] Lec07 Tree Indexes Part I - 树索引 I - Clustered Indexes</a></p><p>我们这次在PostgreSQL中使用Clustered Indexes。</p><p>这篇文章中我会提到，ctid和页面布局, 具体可以看下面两篇文章:</p><ul><li><a href="https://cakebytheoceanluo.github.io/2020/03/11/DBMS-PostgreSQL-PageLayout/">[DBMS][PostgreSQL] Page Layout 页面布局</a></li><li><a href="https://cakebytheoceanluo.github.io/2020/04/14/DBMS-Tree-Index-pageinspect/">[DBMS] Tree Index pageinspect 索引页面内容</a></li></ul><a id="more"></a><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>我们采用一个email邮件地址数据集。获得数据集和导入数据集的方式见: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#Email%E6%95%B0%E6%8D%AE%E9%9B%86-Mock">[DBMS] PostgreSQL 导入数据集 - Email 数据集 (Mock)</a></p><p>注: CMU课上使用的数据集更大一些，email数量更多，因为我看到课上对应的数据库有195254个page。我这个数据集在我的电脑上psql对应生成7155个page。我觉得page数量不是这次实验的重点。大家可以自己调整数据集大小。</p><hr><h1 id="建立CLUSTER之前"><a href="#建立CLUSTER之前" class="headerlink" title="建立CLUSTER之前"></a>建立CLUSTER之前</h1><p>在下面的输出中， 我记录了min, ctid = ‘(0, 1)’, 和第一个page的页面布局</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">testdb=# select <span class="built_in">min</span>(email) from emails;</span><br><span class="line">        <span class="built_in">min</span>        </span><br><span class="line">-------------------</span><br><span class="line"> aabbott@gmail.com</span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# SELECT * FROM emails LIMIT <span class="number">1</span>;</span><br><span class="line"> id |       email       </span><br><span class="line">----+-------------------</span><br><span class="line">  <span class="number">1</span> | bgordon@gmail.com</span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# select * from emails where ctid = '(0, 1)';</span><br><span class="line"> id |       email       </span><br><span class="line">----+-------------------</span><br><span class="line">  <span class="number">1</span> | bgordon@gmail.com</span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# SELECT * FROM bt_page_items('idx_emails_tree', 1) LIMIT 30;</span><br><span class="line"> itemoffset |    ctid    | itemlen | nulls | vars |                                              data                                               </span><br><span class="line">------------+------------+---------+-------+------+-------------------------------------------------------------------------------------------------</span><br><span class="line">          <span class="number">1</span> | (<span class="number">6415</span>,<span class="number">82</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">61</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">64</span> <span class="number">65</span> <span class="number">72</span> <span class="number">73</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">2</span> | (<span class="number">930</span>,<span class="number">44</span>)   |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">62</span> <span class="number">62</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">74</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">3</span> | (<span class="number">6803</span>,<span class="number">28</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2b</span> <span class="number">61</span> <span class="number">61</span> <span class="number">62</span> <span class="number">62</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">74</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">7</span>a <span class="number">61</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">7</span>a <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">4</span> | (<span class="number">5178</span>,<span class="number">134</span>) |      <span class="number">40</span> | f     | t    | <span class="number">37</span> <span class="number">61</span> <span class="number">61</span> <span class="number">62</span> <span class="number">62</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">74</span> <span class="number">40</span> <span class="number">68</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">79</span> <span class="number">2</span>d <span class="number">6</span>d <span class="number">61</span> <span class="number">72</span> <span class="number">73</span> <span class="number">68</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">5</span> | (<span class="number">4236</span>,<span class="number">78</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2f</span> <span class="number">61</span> <span class="number">61</span> <span class="number">62</span> <span class="number">62</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">74</span> <span class="number">40</span> <span class="number">6</span>c <span class="number">69</span> <span class="number">76</span> <span class="number">69</span> <span class="number">6</span>e <span class="number">67</span> <span class="number">73</span> <span class="number">74</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span></span><br><span class="line">          <span class="number">6</span> | (<span class="number">588</span>,<span class="number">40</span>)   |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">67</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">76</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">6</span>e <span class="number">65</span> <span class="number">74</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">7</span> | (<span class="number">6302</span>,<span class="number">7</span>)   |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">8</span> | (<span class="number">97</span>,<span class="number">49</span>)    |      <span class="number">32</span> | f     | t    | <span class="number">29</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">9</span> | (<span class="number">6440</span>,<span class="number">31</span>)  |      <span class="number">40</span> | f     | t    | <span class="number">39</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">6</span>a <span class="number">6f</span> <span class="number">68</span> <span class="number">6</span>e <span class="number">73</span> <span class="number">74</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>d <span class="number">63</span> <span class="number">68</span> <span class="number">61</span> <span class="number">76</span> <span class="number">65</span> <span class="number">7</span>a <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">10</span> | (<span class="number">3822</span>,<span class="number">91</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2b</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">74</span> <span class="number">74</span> <span class="number">68</span> <span class="number">65</span> <span class="number">77</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">11</span> | (<span class="number">1076</span>,<span class="number">67</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">76</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">61</span> <span class="number">2</span>e <span class="number">69</span> <span class="number">6</span>e <span class="number">66</span> <span class="number">6f</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">12</span> | (<span class="number">5452</span>,<span class="number">38</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">77</span> <span class="number">61</span> <span class="number">72</span> <span class="number">64</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">13</span> | (<span class="number">5708</span>,<span class="number">3</span>)   |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">14</span> | (<span class="number">4341</span>,<span class="number">15</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">62</span> <span class="number">72</span> <span class="number">65</span> <span class="number">77</span> <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">15</span> | (<span class="number">1007</span>,<span class="number">78</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">63</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">6</span>e <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">16</span> | (<span class="number">4823</span>,<span class="number">89</span>)  |      <span class="number">40</span> | f     | t    | <span class="number">37</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">63</span> <span class="number">61</span> <span class="number">72</span> <span class="number">74</span> <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>d <span class="number">6</span>d <span class="number">69</span> <span class="number">74</span> <span class="number">63</span> <span class="number">68</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">17</span> | (<span class="number">2327</span>,<span class="number">93</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">63</span> <span class="number">6</span>c <span class="number">61</span> <span class="number">72</span> <span class="number">6b</span> <span class="number">2</span>d <span class="number">6</span>d <span class="number">6f</span> <span class="number">73</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">18</span> | (<span class="number">6987</span>,<span class="number">113</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">64</span> <span class="number">61</span> <span class="number">76</span> <span class="number">69</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">19</span> | (<span class="number">2724</span>,<span class="number">91</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">6</span>d <span class="number">6f</span> <span class="number">72</span> <span class="number">65</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">20</span> | (<span class="number">839</span>,<span class="number">25</span>)   |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">21</span> | (<span class="number">2210</span>,<span class="number">118</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">22</span> | (<span class="number">2699</span>,<span class="number">76</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">23</span> | (<span class="number">2862</span>,<span class="number">117</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">24</span> | (<span class="number">6372</span>,<span class="number">87</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">25</span> | (<span class="number">6533</span>,<span class="number">8</span>)   |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">26</span> | (<span class="number">7071</span>,<span class="number">19</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">27</span> | (<span class="number">2316</span>,<span class="number">42</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6f</span> <span class="number">72</span> <span class="number">64</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">28</span> | (<span class="number">2299</span>,<span class="number">16</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">29</span> | (<span class="number">2694</span>,<span class="number">130</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">30</span> | (<span class="number">2818</span>,<span class="number">106</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">(<span class="number">30</span> rows)</span><br></pre></td></tr></tbody></table></figure><h1 id="建立CLUSTER"><a href="#建立CLUSTER" class="headerlink" title="建立CLUSTER"></a>建立CLUSTER</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">testdb=# CLUSTER emails USING idx_emails_tree;</span><br><span class="line">CLUSTER</span><br></pre></td></tr></tbody></table></figure><p>这个语句会重新排列page上的tuple。结果page上的tuple的顺序，会和<code>idx_emails_tree</code>索引中的大小顺序一直。</p><h1 id="建立CLUSTER之后"><a href="#建立CLUSTER之后" class="headerlink" title="建立CLUSTER之后"></a>建立CLUSTER之后</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">testdb=# select <span class="built_in">min</span>(email) from emails;</span><br><span class="line">        <span class="built_in">min</span>        </span><br><span class="line">-------------------</span><br><span class="line"> aabbott@gmail.com</span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# SELECT * FROM emails LIMIT <span class="number">1</span>;</span><br><span class="line">   id   |       email       </span><br><span class="line">--------+-------------------</span><br><span class="line"> <span class="number">129990</span> | aabbott@gmail.com</span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure><p><code>SELECT * FROM emails LIMIT 1;</code>的结果已经变成最小值了。</p><p><br></p><h2 id="ctid-‘-0-1-’"><a href="#ctid-‘-0-1-’" class="headerlink" title="ctid = ‘(0, 1)’"></a>ctid = ‘(0, 1)’</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">testdb=# select * from emails where ctid = '(0, 1)';</span><br><span class="line"> id |       email       </span><br><span class="line">----+-------------------</span><br><span class="line"> <span class="number">129990</span> | aabbott@gmail.com</span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><p>页面布局从原来无序的record id， 变成现在的排序的record id, 它对应的元素也被排序了。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">testdb=# SELECT * FROM bt_page_items('idx_emails_tree', 1) LIMIT 30;</span><br><span class="line"> itemoffset |  ctid  | itemlen | nulls | vars |                                              data                                               </span><br><span class="line">------------+--------+---------+-------+------+-------------------------------------------------------------------------------------------------</span><br><span class="line">          <span class="number">1</span> | (<span class="number">1</span>,<span class="number">52</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">61</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">64</span> <span class="number">65</span> <span class="number">72</span> <span class="number">73</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">2</span> | (<span class="number">0</span>,<span class="number">1</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">62</span> <span class="number">62</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">74</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">3</span> | (<span class="number">0</span>,<span class="number">2</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2b</span> <span class="number">61</span> <span class="number">61</span> <span class="number">62</span> <span class="number">62</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">74</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">7</span>a <span class="number">61</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">7</span>a <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">4</span> | (<span class="number">0</span>,<span class="number">3</span>)  |      <span class="number">40</span> | f     | t    | <span class="number">37</span> <span class="number">61</span> <span class="number">61</span> <span class="number">62</span> <span class="number">62</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">74</span> <span class="number">40</span> <span class="number">68</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">79</span> <span class="number">2</span>d <span class="number">6</span>d <span class="number">61</span> <span class="number">72</span> <span class="number">73</span> <span class="number">68</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">5</span> | (<span class="number">0</span>,<span class="number">4</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2f</span> <span class="number">61</span> <span class="number">61</span> <span class="number">62</span> <span class="number">62</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">74</span> <span class="number">40</span> <span class="number">6</span>c <span class="number">69</span> <span class="number">76</span> <span class="number">69</span> <span class="number">6</span>e <span class="number">67</span> <span class="number">73</span> <span class="number">74</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span></span><br><span class="line">          <span class="number">6</span> | (<span class="number">0</span>,<span class="number">5</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">67</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">76</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">6</span>e <span class="number">65</span> <span class="number">74</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">7</span> | (<span class="number">0</span>,<span class="number">6</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">8</span> | (<span class="number">0</span>,<span class="number">7</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">29</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">9</span> | (<span class="number">0</span>,<span class="number">8</span>)  |      <span class="number">40</span> | f     | t    | <span class="number">39</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">6</span>a <span class="number">6f</span> <span class="number">68</span> <span class="number">6</span>e <span class="number">73</span> <span class="number">74</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>d <span class="number">63</span> <span class="number">68</span> <span class="number">61</span> <span class="number">76</span> <span class="number">65</span> <span class="number">7</span>a <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">10</span> | (<span class="number">0</span>,<span class="number">9</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2b</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">74</span> <span class="number">74</span> <span class="number">68</span> <span class="number">65</span> <span class="number">77</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">11</span> | (<span class="number">0</span>,<span class="number">10</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">76</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">61</span> <span class="number">2</span>e <span class="number">69</span> <span class="number">6</span>e <span class="number">66</span> <span class="number">6f</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">12</span> | (<span class="number">0</span>,<span class="number">11</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6f</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">40</span> <span class="number">77</span> <span class="number">61</span> <span class="number">72</span> <span class="number">64</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">13</span> | (<span class="number">0</span>,<span class="number">12</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">14</span> | (<span class="number">0</span>,<span class="number">13</span>) |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">62</span> <span class="number">72</span> <span class="number">65</span> <span class="number">77</span> <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">15</span> | (<span class="number">0</span>,<span class="number">14</span>) |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">63</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">6</span>e <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">16</span> | (<span class="number">0</span>,<span class="number">15</span>) |      <span class="number">40</span> | f     | t    | <span class="number">37</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">63</span> <span class="number">61</span> <span class="number">72</span> <span class="number">74</span> <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>d <span class="number">6</span>d <span class="number">69</span> <span class="number">74</span> <span class="number">63</span> <span class="number">68</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">17</span> | (<span class="number">0</span>,<span class="number">16</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">63</span> <span class="number">6</span>c <span class="number">61</span> <span class="number">72</span> <span class="number">6b</span> <span class="number">2</span>d <span class="number">6</span>d <span class="number">6f</span> <span class="number">73</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">18</span> | (<span class="number">0</span>,<span class="number">17</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">64</span> <span class="number">61</span> <span class="number">76</span> <span class="number">69</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">19</span> | (<span class="number">0</span>,<span class="number">18</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">6</span>d <span class="number">6f</span> <span class="number">72</span> <span class="number">65</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">20</span> | (<span class="number">0</span>,<span class="number">19</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">21</span> | (<span class="number">0</span>,<span class="number">20</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">22</span> | (<span class="number">0</span>,<span class="number">21</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">23</span> | (<span class="number">0</span>,<span class="number">22</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">24</span> | (<span class="number">0</span>,<span class="number">23</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">25</span> | (<span class="number">0</span>,<span class="number">24</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">26</span> | (<span class="number">0</span>,<span class="number">25</span>) |      <span class="number">32</span> | f     | t    | <span class="number">23</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">27</span> | (<span class="number">0</span>,<span class="number">26</span>) |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6f</span> <span class="number">72</span> <span class="number">64</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">28</span> | (<span class="number">0</span>,<span class="number">27</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">29</span> | (<span class="number">0</span>,<span class="number">28</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">30</span> | (<span class="number">0</span>,<span class="number">29</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">(<span class="number">30</span> rows)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有关Clustered Indexes: &lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/19/CMU-15445-Lec07/#Clustered-Indexes&quot;&gt;[CMU-15445] Lec07 Tree Indexes Part I - 树索引 I - Clustered Indexes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们这次在PostgreSQL中使用Clustered Indexes。&lt;/p&gt;
&lt;p&gt;这篇文章中我会提到，ctid和页面布局, 具体可以看下面两篇文章:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/11/DBMS-PostgreSQL-PageLayout/&quot;&gt;[DBMS][PostgreSQL] Page Layout 页面布局&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/04/14/DBMS-Tree-Index-pageinspect/&quot;&gt;[DBMS] Tree Index pageinspect 索引页面内容&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Access Methods" scheme="https://cakebytheoceanluo.github.io/categories/Access-Methods/"/>
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="B Tree" scheme="https://cakebytheoceanluo.github.io/categories/B-Tree/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/categories/Indexing/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/categories/PostgreSQL/"/>
    
    
      <category term="Page" scheme="https://cakebytheoceanluo.github.io/tags/Page/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/tags/Indexing/"/>
    
      <category term="B Tree" scheme="https://cakebytheoceanluo.github.io/tags/B-Tree/"/>
    
      <category term="Clustered Index" scheme="https://cakebytheoceanluo.github.io/tags/Clustered-Index/"/>
    
  </entry>
  
  <entry>
    <title>[DBMS]Tree Index pageinspect 索引页面内容</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/14/DBMS-Tree-Index-pageinspect/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/14/DBMS-Tree-Index-pageinspect/</id>
    <published>2020-04-14T18:33:38.000Z</published>
    <updated>2020-04-15T17:25:55.134Z</updated>
    
    <content type="html"><![CDATA[<p>数据库的索引基本分为两种类型:</p><ul><li>Hash Index</li><li>Tree Index</li></ul><p>我们今天来看一看PostgreSQL中的Tree Index的page格式。</p><p>B+ Tree中元素的排序有多种方法: </p><ul><li>PostgreSQL根据record id来排序</li><li>MySQL根据primary key来排序</li></ul><a id="more"></a><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>我们采用一个email邮件地址数据集。获得数据集和导入数据集的方式见: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#Email%E6%95%B0%E6%8D%AE%E9%9B%86-Mock">[DBMS] PostgreSQL 导入数据集 - Email 数据集 (Mock)</a></p><p>注: CMU课上使用的数据集更大一些，email数量更多，因为我看到课上对应的数据库有195254个page。我这个数据集在我的电脑上psql对应生成7155个page。我觉得page数量不是这次实验的重点。大家可以自己调整数据集大小。</p><hr><h1 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testdb=# CREATE INDEX idx_emails_tree ON emails (email);</span><br><span class="line">CREATE INDEX</span><br><span class="line">testdb=# create extension pgstattuple;</span><br><span class="line">CREATE EXTENSION</span><br><span class="line">testdb=# create extension pageinspect;</span><br><span class="line">CREATE EXTENSION</span><br></pre></td></tr></tbody></table></figure><h1 id="查看页面"><a href="#查看页面" class="headerlink" title="查看页面"></a>查看页面</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">testdb=# SELECT * FROM pgstatindex('idx_emails_tree');</span><br><span class="line"> version | tree_level | index_size | root_block_no | internal_pages | leaf_pages | empty_pages | deleted_pages | avg_leaf_density | leaf_fragmentation </span><br><span class="line">---------+------------+------------+---------------+----------------+------------+-------------+---------------+------------------+--------------------</span><br><span class="line">       <span class="number">2</span> |          <span class="number">2</span> |   <span class="number">43622400</span> |           <span class="number">152</span> |             <span class="number">38</span> |       <span class="number">5286</span> |           <span class="number">0</span> |             <span class="number">0</span> |            <span class="number">90.15</span> |                  <span class="number">0</span></span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure><ul><li><code>root_block_no</code> 是B tree的root根, 即page<code>152</code></li></ul><p><br></p><p>然后我们看看这个page的内容:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">testdb=# SELECT * FROM bt_page_items('idx_emails_tree', 152);</span><br><span class="line"> itemoffset |   ctid   | itemlen | nulls | vars |                                                          data                                                           </span><br><span class="line">------------+----------+---------+-------+------+-------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">          <span class="number">1</span> | (<span class="number">3</span>,<span class="number">1</span>)    |       <span class="number">8</span> | f     | f    | </span><br><span class="line">          <span class="number">2</span> | (<span class="number">151</span>,<span class="number">1</span>)  |      <span class="number">40</span> | f     | t    | <span class="number">33</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">62</span> <span class="number">65</span> <span class="number">72</span> <span class="number">32</span> <span class="number">38</span> <span class="number">40</span> <span class="number">6</span>d <span class="number">75</span> <span class="number">72</span> <span class="number">70</span> <span class="number">68</span> <span class="number">79</span> <span class="number">2</span>d <span class="number">77</span> <span class="number">6f</span> <span class="number">6f</span> <span class="number">64</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">6</span>e <span class="number">65</span> <span class="number">74</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">3</span> | (<span class="number">299</span>,<span class="number">1</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">61</span> <span class="number">72</span> <span class="number">6f</span> <span class="number">64</span> <span class="number">67</span> <span class="number">65</span> <span class="number">72</span> <span class="number">73</span> <span class="number">40</span> <span class="number">79</span> <span class="number">61</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6f</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">4</span> | (<span class="number">444</span>,<span class="number">1</span>)  |      <span class="number">40</span> | f     | t    | <span class="number">39</span> <span class="number">62</span> <span class="number">69</span> <span class="number">6</span>e <span class="number">67</span> <span class="number">72</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">40</span> <span class="number">6</span>a <span class="number">6f</span> <span class="number">6</span>e <span class="number">65</span> <span class="number">73</span> <span class="number">2</span>d <span class="number">64</span> <span class="number">61</span> <span class="number">76</span> <span class="number">65</span> <span class="number">6</span>e <span class="number">70</span> <span class="number">6f</span> <span class="number">72</span> <span class="number">74</span> <span class="number">2</span>e <span class="number">6f</span> <span class="number">72</span> <span class="number">67</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">5</span> | (<span class="number">588</span>,<span class="number">1</span>)  |      <span class="number">40</span> | f     | t    | <span class="number">33</span> <span class="number">62</span> <span class="number">72</span> <span class="number">6f</span> <span class="number">77</span> <span class="number">6</span>e <span class="number">69</span> <span class="number">6</span>e <span class="number">67</span> <span class="number">68</span> <span class="number">65</span> <span class="number">6</span>e <span class="number">72</span> <span class="number">79</span> <span class="number">40</span> <span class="number">63</span> <span class="number">61</span> <span class="number">73</span> <span class="number">74</span> <span class="number">72</span> <span class="number">6f</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">6</span> | (<span class="number">733</span>,<span class="number">1</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">63</span> <span class="number">66</span> <span class="number">69</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">64</span> <span class="number">73</span> <span class="number">40</span> <span class="number">66</span> <span class="number">69</span> <span class="number">73</span> <span class="number">68</span> <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">7</span> | (<span class="number">872</span>,<span class="number">1</span>)  |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">63</span> <span class="number">6b</span> <span class="number">69</span> <span class="number">64</span> <span class="number">64</span> <span class="number">40</span> <span class="number">72</span> <span class="number">65</span> <span class="number">65</span> <span class="number">76</span> <span class="number">65</span> <span class="number">73</span> <span class="number">2</span>d <span class="number">64</span> <span class="number">69</span> <span class="number">61</span> <span class="number">7</span>a <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">8</span> | (<span class="number">1017</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">33</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">74</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">68</span> <span class="number">61</span> <span class="number">79</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">79</span> <span class="number">40</span> <span class="number">76</span> <span class="number">61</span> <span class="number">72</span> <span class="number">67</span> <span class="number">61</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">69</span> <span class="number">6</span>e <span class="number">66</span> <span class="number">6f</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">          <span class="number">9</span> | (<span class="number">1165</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">37</span> <span class="number">64</span> <span class="number">65</span> <span class="number">62</span> <span class="number">72</span> <span class="number">61</span> <span class="number">39</span> <span class="number">30</span> <span class="number">40</span> <span class="number">62</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">61</span> <span class="number">72</span> <span class="number">64</span> <span class="number">2</span>d <span class="number">70</span> <span class="number">61</span> <span class="number">72</span> <span class="number">6b</span> <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">10</span> | (<span class="number">1313</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">31</span> <span class="number">65</span> <span class="number">64</span> <span class="number">75</span> <span class="number">61</span> <span class="number">72</span> <span class="number">64</span> <span class="number">6f</span> <span class="number">77</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">73</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d</span><br><span class="line">         <span class="number">11</span> | (<span class="number">1461</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">66</span> <span class="number">61</span> <span class="number">72</span> <span class="number">72</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">65</span> <span class="number">72</span> <span class="number">69</span> <span class="number">63</span> <span class="number">40</span> <span class="number">79</span> <span class="number">61</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6f</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">12</span> | (<span class="number">1605</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">37</span> <span class="number">67</span> <span class="number">62</span> <span class="number">65</span> <span class="number">6</span>e <span class="number">6</span>a <span class="number">61</span> <span class="number">6</span>d <span class="number">69</span> <span class="number">6</span>e <span class="number">40</span> <span class="number">73</span> <span class="number">6</span>e <span class="number">79</span> <span class="number">64</span> <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>d <span class="number">6b</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">79</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">13</span> | (<span class="number">1750</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">39</span> <span class="number">68</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">6</span>d <span class="number">6f</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">79</span> <span class="number">40</span> <span class="number">62</span> <span class="number">72</span> <span class="number">6f</span> <span class="number">77</span> <span class="number">6</span>e <span class="number">2</span>d <span class="number">64</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">67</span> <span class="number">61</span> <span class="number">64</span> <span class="number">6f</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">14</span> | (<span class="number">1894</span>,<span class="number">1</span>) |      <span class="number">48</span> | f     | t    | <span class="number">47</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">79</span> <span class="number">72</span> <span class="number">6f</span> <span class="number">64</span> <span class="number">72</span> <span class="number">69</span> <span class="number">67</span> <span class="number">75</span> <span class="number">65</span> <span class="number">7</span>a <span class="number">40</span> <span class="number">77</span> <span class="number">69</span> <span class="number">6</span>e <span class="number">74</span> <span class="number">65</span> <span class="number">72</span> <span class="number">73</span> <span class="number">2</span>d <span class="number">6</span>a <span class="number">65</span> <span class="number">6</span>e <span class="number">6b</span> <span class="number">69</span> <span class="number">6</span>e <span class="number">73</span> <span class="number">2</span>e <span class="number">6</span>e <span class="number">65</span> <span class="number">74</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">15</span> | (<span class="number">2042</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">6</span>a <span class="number">61</span> <span class="number">6</span>d <span class="number">65</span> <span class="number">73</span> <span class="number">33</span> <span class="number">30</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">16</span> | (<span class="number">2190</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2f</span> <span class="number">6</span>a <span class="number">65</span> <span class="number">6</span>e <span class="number">6</span>e <span class="number">69</span> <span class="number">66</span> <span class="number">65</span> <span class="number">72</span> <span class="number">68</span> <span class="number">69</span> <span class="number">63</span> <span class="number">6b</span> <span class="number">73</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6f</span> <span class="number">64</span> <span class="number">2</span>e <span class="number">6f</span> <span class="number">72</span> <span class="number">67</span> <span class="number">00</span></span><br><span class="line">         <span class="number">17</span> | (<span class="number">2340</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2b</span> <span class="number">6</span>a <span class="number">6f</span> <span class="number">68</span> <span class="number">6</span>e <span class="number">73</span> <span class="number">6</span>e <span class="number">6f</span> <span class="number">77</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">18</span> | (<span class="number">2484</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">29</span> <span class="number">6</span>a <span class="number">75</span> <span class="number">6</span>c <span class="number">69</span> <span class="number">61</span> <span class="number">30</span> <span class="number">37</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">19</span> | (<span class="number">2632</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2b</span> <span class="number">6b</span> <span class="number">65</span> <span class="number">6</span>e <span class="number">6</span>e <span class="number">65</span> <span class="number">74</span> <span class="number">68</span> <span class="number">39</span> <span class="number">34</span> <span class="number">40</span> <span class="number">72</span> <span class="number">6f</span> <span class="number">67</span> <span class="number">65</span> <span class="number">72</span> <span class="number">73</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">20</span> | (<span class="number">2781</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2f</span> <span class="number">6</span>c <span class="number">61</span> <span class="number">72</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">74</span> <span class="number">72</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">67</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span></span><br><span class="line">         <span class="number">21</span> | (<span class="number">2929</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">33</span> <span class="number">6</span>c <span class="number">6f</span> <span class="number">6</span>e <span class="number">67</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">78</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">64</span> <span class="number">72</span> <span class="number">69</span> <span class="number">61</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">22</span> | (<span class="number">3073</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">31</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">72</span> <span class="number">74</span> <span class="number">69</span> <span class="number">6</span>e <span class="number">6</span>c <span class="number">61</span> <span class="number">75</span> <span class="number">72</span> <span class="number">61</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d</span><br><span class="line">         <span class="number">23</span> | (<span class="number">3215</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">31</span> <span class="number">6</span>d <span class="number">65</span> <span class="number">6</span>c <span class="number">69</span> <span class="number">73</span> <span class="number">73</span> <span class="number">61</span> <span class="number">77</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">73</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">40</span> <span class="number">79</span> <span class="number">61</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6f</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d</span><br><span class="line">         <span class="number">24</span> | (<span class="number">3358</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">31</span> <span class="number">6</span>d <span class="number">69</span> <span class="number">74</span> <span class="number">63</span> <span class="number">68</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">6</span>a <span class="number">61</span> <span class="number">6</span>d <span class="number">65</span> <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d</span><br><span class="line">         <span class="number">25</span> | (<span class="number">3508</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">6</span>e <span class="number">68</span> <span class="number">75</span> <span class="number">67</span> <span class="number">68</span> <span class="number">65</span> <span class="number">73</span> <span class="number">40</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">72</span> <span class="number">74</span> <span class="number">69</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">26</span> | (<span class="number">3656</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">70</span> <span class="number">61</span> <span class="number">67</span> <span class="number">65</span> <span class="number">73</span> <span class="number">74</span> <span class="number">65</span> <span class="number">70</span> <span class="number">68</span> <span class="number">65</span> <span class="number">6</span>e <span class="number">40</span> <span class="number">79</span> <span class="number">61</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6f</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">27</span> | (<span class="number">3804</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">33</span> <span class="number">70</span> <span class="number">6f</span> <span class="number">72</span> <span class="number">74</span> <span class="number">65</span> <span class="number">72</span> <span class="number">6</span>a <span class="number">65</span> <span class="number">6</span>e <span class="number">6</span>e <span class="number">69</span> <span class="number">66</span> <span class="number">65</span> <span class="number">72</span> <span class="number">40</span> <span class="number">79</span> <span class="number">61</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6f</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">28</span> | (<span class="number">3955</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">35</span> <span class="number">72</span> <span class="number">65</span> <span class="number">65</span> <span class="number">73</span> <span class="number">65</span> <span class="number">6</span>a <span class="number">65</span> <span class="number">6</span>e <span class="number">6</span>e <span class="number">69</span> <span class="number">66</span> <span class="number">65</span> <span class="number">72</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">29</span> | (<span class="number">4099</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">72</span> <span class="number">6f</span> <span class="number">62</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">73</span> <span class="number">6b</span> <span class="number">61</span> <span class="number">72</span> <span class="number">61</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">72</span> <span class="number">74</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">30</span> | (<span class="number">4244</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">27</span> <span class="number">73</span> <span class="number">61</span> <span class="number">72</span> <span class="number">61</span> <span class="number">68</span> <span class="number">31</span> <span class="number">30</span> <span class="number">40</span> <span class="number">66</span> <span class="number">6f</span> <span class="number">77</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>e <span class="number">62</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">31</span> | (<span class="number">4388</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">3</span>d <span class="number">73</span> <span class="number">69</span> <span class="number">6</span>d <span class="number">73</span> <span class="number">61</span> <span class="number">6</span>c <span class="number">65</span> <span class="number">78</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">64</span> <span class="number">65</span> <span class="number">72</span> <span class="number">40</span> <span class="number">68</span> <span class="number">65</span> <span class="number">73</span> <span class="number">73</span> <span class="number">2</span>d <span class="number">63</span> <span class="number">61</span> <span class="number">72</span> <span class="number">74</span> <span class="number">65</span> <span class="number">72</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">32</span> | (<span class="number">4530</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2</span>d <span class="number">73</span> <span class="number">74</span> <span class="number">65</span> <span class="number">77</span> <span class="number">61</span> <span class="number">72</span> <span class="number">74</span> <span class="number">74</span> <span class="number">61</span> <span class="number">72</span> <span class="number">61</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">33</span> | (<span class="number">4677</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">33</span> <span class="number">74</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">70</span> <span class="number">73</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">73</span> <span class="number">68</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">62</span> <span class="number">79</span> <span class="number">40</span> <span class="number">79</span> <span class="number">61</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">6f</span> <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">34</span> | (<span class="number">4826</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">75</span> <span class="number">6</span>a <span class="number">6f</span> <span class="number">6</span>e <span class="number">65</span> <span class="number">73</span> <span class="number">40</span> <span class="number">76</span> <span class="number">61</span> <span class="number">75</span> <span class="number">67</span> <span class="number">68</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">35</span> | (<span class="number">4974</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">2f</span> <span class="number">77</span> <span class="number">61</span> <span class="number">72</span> <span class="number">64</span> <span class="number">64</span> <span class="number">61</span> <span class="number">6</span>e <span class="number">69</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">40</span> <span class="number">6</span>a <span class="number">6f</span> <span class="number">68</span> <span class="number">6</span>e <span class="number">73</span> <span class="number">6f</span> <span class="number">6</span>e <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span></span><br><span class="line">         <span class="number">36</span> | (<span class="number">5115</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">25</span> <span class="number">77</span> <span class="number">6b</span> <span class="number">65</span> <span class="number">6</span>d <span class="number">70</span> <span class="number">40</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">74</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">         <span class="number">37</span> | (<span class="number">5268</span>,<span class="number">1</span>) |      <span class="number">40</span> | f     | t    | <span class="number">33</span> <span class="number">7</span>a <span class="number">61</span> <span class="number">63</span> <span class="number">68</span> <span class="number">61</span> <span class="number">72</span> <span class="number">79</span> <span class="number">32</span> <span class="number">37</span> <span class="number">40</span> <span class="number">63</span> <span class="number">6</span>c <span class="number">61</span> <span class="number">72</span> <span class="number">6b</span> <span class="number">2</span>d <span class="number">72</span> <span class="number">75</span> <span class="number">69</span> <span class="number">7</span>a <span class="number">2</span>e <span class="number">6</span>e <span class="number">65</span> <span class="number">74</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">(<span class="number">37</span> rows)</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>我们可以选一行， 比如第24行, 将它从hex decode出来:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">testdb=# SELECT *, CONVERT_FROM(DECODE(data, 'hex'), 'latin1') FROM bt_page_items('idx_emails_tree', 152) where itemoffset = 24;</span><br><span class="line"> itemoffset |   ctid   | itemlen | nulls | vars |                                  data                                   |       convert_from       </span><br><span class="line">------------+----------+---------+-------+------+-------------------------------------------------------------------------+--------------------------</span><br><span class="line">         <span class="number">24</span> | (<span class="number">3358</span>,<span class="number">1</span>) |      <span class="number">32</span> | f     | t    | <span class="number">31</span> <span class="number">6</span>d <span class="number">69</span> <span class="number">74</span> <span class="number">63</span> <span class="number">68</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">6</span>c <span class="number">6</span>a <span class="number">61</span> <span class="number">6</span>d <span class="number">65</span> <span class="number">73</span> <span class="number">40</span> <span class="number">67</span> <span class="number">6</span>d <span class="number">61</span> <span class="number">69</span> <span class="number">6</span>c <span class="number">2</span>e <span class="number">63</span> <span class="number">6f</span> <span class="number">6</span>d | <span class="number">1</span>mitchelljames@gmail.com</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>推荐阅读:</p><p>[DBMS][PostgreSQL] Page Layout 页面布局: <a href="https://cakebytheoceanluo.github.io/2020/03/11/DBMS-PostgreSQL-PageLayout/">https://cakebytheoceanluo.github.io/2020/03/11/DBMS-PostgreSQL-PageLayout/</a></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjEvcGFnZWluc3BlY3QuaHRtbA==" title="https://www.postgresql.org/docs/9.1/pageinspect.html">https://www.postgresql.org/docs/9.1/pageinspect.html<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cDovL2Fpcy5raHN0dS5ydS9wb3N0Z3Jlc3FsL2h0bWwvcGFnZWluc3BlY3QuaHRtbA==" title="http://ais.khstu.ru/postgresql/html/pageinspect.html">http://ais.khstu.ru/postgresql/html/pageinspect.html<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9wYXF1aWVyLnh5ei9wb3N0Z3Jlc3FsLTIvcG9zdGdyZXMtY29udHJpYi1tb2R1bGUtaGlnaGxpZ2h0LXBhZ2VpbnNwZWN0Lw==" title="https://paquier.xyz/postgresql-2/postgres-contrib-module-highlight-pageinspect/">https://paquier.xyz/postgresql-2/postgres-contrib-module-highlight-pageinspect/<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库的索引基本分为两种类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hash Index&lt;/li&gt;
&lt;li&gt;Tree Index&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们今天来看一看PostgreSQL中的Tree Index的page格式。&lt;/p&gt;
&lt;p&gt;B+ Tree中元素的排序有多种方法: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PostgreSQL根据record id来排序&lt;/li&gt;
&lt;li&gt;MySQL根据primary key来排序&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Access Methods" scheme="https://cakebytheoceanluo.github.io/categories/Access-Methods/"/>
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="B Tree" scheme="https://cakebytheoceanluo.github.io/categories/B-Tree/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/categories/Indexing/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/categories/PostgreSQL/"/>
    
    
      <category term="Page" scheme="https://cakebytheoceanluo.github.io/tags/Page/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/tags/Indexing/"/>
    
      <category term="B Tree" scheme="https://cakebytheoceanluo.github.io/tags/B-Tree/"/>
    
  </entry>
  
  <entry>
    <title>[DBMS]Hash Index与Tree Index</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/13/DBMS-Hash-Index%E4%B8%8ETree-Index/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/13/DBMS-Hash-Index%E4%B8%8ETree-Index/</id>
    <published>2020-04-13T10:37:01.000Z</published>
    <updated>2020-04-13T10:43:01.014Z</updated>
    
    <content type="html"><![CDATA[<p>数据库的索引基本分为两种类型:</p><ul><li>Hash Index</li><li>Tree Index</li></ul><p>我们今天来看一看PostgreSQL中的这两种索引会如何帮助我们的query。</p><a id="more"></a><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>我们采用一个email邮件地址数据集。获得数据集和导入数据集的方式见: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#Email%E6%95%B0%E6%8D%AE%E9%9B%86-Mock">[DBMS] PostgreSQL 导入数据集 - Email 数据集 (Mock)</a></p><p>注: CMU课上使用的数据集更大一些，email数量更多，因为我看到课上对应的数据库有195254个page。我这个数据集在我的电脑上psql对应生成7155个page。我觉得page数量不是这次实验的重点。大家可以自己调整数据集大小。</p><hr><h1 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h1><h2 id="psql"><a href="#psql" class="headerlink" title="psql"></a>psql</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">testdb=# \timing</span><br><span class="line">Timing is on.</span><br><span class="line">testdb=# CREATE EXTENSION pg_prewarm;</span><br><span class="line">ERROR:  extension <span class="string">"pg_prewarm"</span> already <span class="built_in">exists</span></span><br><span class="line">Time: <span class="number">0.415</span> ms</span><br><span class="line">testdb=# select pg_prewarm('emails');</span><br><span class="line"> pg_prewarm </span><br><span class="line">------------</span><br><span class="line">       <span class="number">7155</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">29.132</span> ms</span><br><span class="line">testdb=# <span class="built_in">set</span> max_parallel_workers_per_gather = <span class="number">0</span>;</span><br><span class="line">SET</span><br><span class="line">Time: <span class="number">0.211</span> ms</span><br></pre></td></tr></tbody></table></figure><h2 id="获得email"><a href="#获得email" class="headerlink" title="获得email"></a>获得email</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">testdb=# select <span class="built_in">min</span>(email) from emails;</span><br><span class="line">        <span class="built_in">min</span>        </span><br><span class="line">-------------------</span><br><span class="line"> aabbott@gmail.com</span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">97.120</span> ms</span><br><span class="line">testdb=# select * from emails where email like 'a%' limit 1;</span><br><span class="line"> id |          email           </span><br><span class="line">----+--------------------------</span><br><span class="line"> <span class="number">21</span> | anita32@aguilar-paul.com</span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.272</span> ms</span><br></pre></td></tr></tbody></table></figure><p>接下来我们注意这两个email:</p><ul><li><code>aabbott@gmail.com</code></li><li><code>anita32@aguilar-paul.com</code></li></ul><p><br><br><br></p><h1 id="Hash-Index"><a href="#Hash-Index" class="headerlink" title="Hash Index"></a>Hash Index</h1><p>我们知道Hash Table只能寻找相等的值，因此Hash Index也只能优化Point Query - 寻找相等的值。Hash Index对于Range Query - 寻找大于小于关系 - 无能为力。我们下面会用例子的Query Plan看看。</p><h2 id="Create-Index"><a href="#Create-Index" class="headerlink" title="Create Index"></a>Create Index</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">testdb=# CREATE INDEX idx_emails_hash ON emails USING HASH (email);</span><br><span class="line">CREATE INDEX</span><br><span class="line">Time: <span class="number">1490.544</span> ms (<span class="number">00</span>:<span class="number">01.491</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="Point-Query"><a href="#Point-Query" class="headerlink" title="Point Query"></a>Point Query</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email = 'aabbott@gmail.com';</span><br><span class="line">                                   QUERY PLAN                                   </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Index Scan <span class="keyword">using</span> idx_emails_hash on <span class="title">emails</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.12</span><span class="number">.04</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Index Cond: ((email)::text = 'aabbott@gmail.com</span><br><span class="line"> '::text)</span><br><span class="line">(<span class="number">3</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.434</span> ms</span><br><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email = 'aabbott@gmail.com' OR email = 'anita32@aguilar-paul.com';</span><br><span class="line">                                                     QUERY PLAN                                                      </span><br><span class="line">---------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Bitmap Heap Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">8.03</span>.<span class="number">.23</span><span class="number">.81</span> rows=<span class="number">4</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Recheck Cond: (((email)::text = 'aabbott@gmail.com'::text) OR ((email)::text = 'anita32@aguilar-paul.com'::text))</span><br><span class="line">   -&gt;  BitmapOr  (cost=<span class="number">8.03</span>.<span class="number">.8</span><span class="number">.03</span> rows=<span class="number">4</span> <span class="built_in">width</span>=<span class="number">0</span>)</span><br><span class="line">         -&gt;  <span class="function">Bitmap Index Scan on <span class="title">idx_emails_hash</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.4</span><span class="number">.01</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">0</span>)</span></span></span><br><span class="line">               Index Cond: ((email)::text = 'aabbott@gmail.com'::text)</span><br><span class="line">         -&gt;  <span class="function">Bitmap Index Scan on <span class="title">idx_emails_hash</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.4</span><span class="number">.01</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">0</span>)</span></span></span><br><span class="line">               Index Cond: ((email)::text = 'anita32@aguilar-paul.com'::text)</span><br><span class="line">(<span class="number">7</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.307</span> ms</span><br></pre></td></tr></tbody></table></figure><ul><li>我们查看如下两个Point Query的Query Plan，都能发现<code>Index Cond</code>， <code>Index Scan using idx_emails_hash on emails</code> 或 <code>Bitmap Index Scan on idx_emails_hash</code> 说明在使用我们的Hash Index <ul><li><code>SELECT * FROM emails WHERE email = 'aabbott@gmail.com';</code></li><li><code>SELECT * FROM emails WHERE email = 'aabbott@gmail.com' OR email = 'anita32@aguilar-paul.com';</code></li></ul></li></ul><p>另外Bitmap能告诉我们match的位置offset。具体我们会在以后描述具体的bitmap。<!-- TODO: --></p><h2 id="Range-Query"><a href="#Range-Query" class="headerlink" title="Range Query"></a>Range Query</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email LIKE 'aabbott@gmail.co%';</span><br><span class="line">                         QUERY PLAN                         </span><br><span class="line">------------------------------------------------------------</span><br><span class="line"> <span class="function">Seq Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.19655</span><span class="number">.00</span> rows=<span class="number">99</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Filter: ((email)::text ~~ 'aabbott@gmail.co%'::text)</span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.273</span> ms</span><br><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email &gt; 'aabbott@gmail.co%';</span><br><span class="line">                           QUERY PLAN                           </span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"> <span class="function">Seq Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.19655</span><span class="number">.00</span> rows=<span class="number">999901</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Filter: ((email)::text &gt; 'aabbott@gmail.co%'::text)</span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.496</span> ms</span><br></pre></td></tr></tbody></table></figure><ul><li>我们查看如下两个Range Query的Query Plan，没有发现<code>Index</code>等字眼，只能看到<code>Seq Scan on emails</code>, 说明我们的Hash Index对于Range Query没有帮助。<ul><li><code>SELECT * FROM emails WHERE email LIKE 'aabbott@gmail.co%';</code></li><li><code>SELECT * FROM emails WHERE email &gt; 'aabbott@gmail.co%';</code></li></ul></li></ul><p><br></p><h1 id="Tree-Index"><a href="#Tree-Index" class="headerlink" title="Tree Index"></a>Tree Index</h1><p>我们知道B Tree可以优化Point Query， 也可以优化Range Query。我们下面会用例子的Query Plan看看。大家可以提前思考， 如果Tree Index和Hash Index都存在，它们一定会被选用吗？会在什么情况下被选用?</p><p>我给一个trival的猜测， 我们在实验结束的时候，看看这个猜测是否正确:</p><ul><li>Point Query: 使用Hash Index</li><li>Range Query: 使用Tree Index</li></ul><h2 id="Create-Index-1"><a href="#Create-Index-1" class="headerlink" title="Create Index"></a>Create Index</h2><p>Tree是psql中默认的Index结构:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">testdb=# CREATE INDEX idx_emails_tree ON emails (email);</span><br><span class="line">CREATE INDEX</span><br><span class="line">Time: <span class="number">3775.712</span> ms (<span class="number">00</span>:<span class="number">03.776</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="Point-Query-1"><a href="#Point-Query-1" class="headerlink" title="Point Query"></a>Point Query</h2><h3 id="Tree-Index-Hash-Index共存"><a href="#Tree-Index-Hash-Index共存" class="headerlink" title="Tree Index, Hash Index共存"></a>Tree Index, Hash Index共存</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email = 'aabbott@gmail.com';</span><br><span class="line">                                   QUERY PLAN                                   </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Index Scan <span class="keyword">using</span> idx_emails_hash on <span class="title">emails</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.12</span><span class="number">.04</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Index Cond: ((email)::text = 'aabbott@gmail.com'::text)</span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.339</span> ms</span><br><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email = 'aabbott@gmail.com' OR email = 'anita32@aguilar-paul.com';</span><br><span class="line">                                                     QUERY PLAN                                                      </span><br><span class="line">---------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Bitmap Heap Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">8.03</span>.<span class="number">.23</span><span class="number">.81</span> rows=<span class="number">4</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Recheck Cond: (((email)::text = 'aabbott@gmail.com'::text) OR ((email)::text = 'anita32@aguilar-paul.com'::text))</span><br><span class="line">   -&gt;  BitmapOr  (cost=<span class="number">8.03</span>.<span class="number">.8</span><span class="number">.03</span> rows=<span class="number">4</span> <span class="built_in">width</span>=<span class="number">0</span>)</span><br><span class="line">         -&gt;  <span class="function">Bitmap Index Scan on <span class="title">idx_emails_hash</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.4</span><span class="number">.01</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">0</span>)</span></span></span><br><span class="line">               Index Cond: ((email)::text = 'aabbott@gmail.com'::text)</span><br><span class="line">         -&gt;  <span class="function">Bitmap Index Scan on <span class="title">idx_emails_hash</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.4</span><span class="number">.01</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">0</span>)</span></span></span><br><span class="line">               Index Cond: ((email)::text = 'anita32@aguilar-paul.com'::text)</span><br><span class="line">(<span class="number">7</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.452</span> ms</span><br></pre></td></tr></tbody></table></figure><ul><li>我们查看之前使用的Point Query的Query Plan，我们发现没有什么大变化 - 还是使用Hash Index。</li></ul><h3 id="只有Tree-Index"><a href="#只有Tree-Index" class="headerlink" title="只有Tree Index"></a>只有Tree Index</h3><p>我们先删除/drop之前建立的Hash Index:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">testdb=# DROP INDEX idx_emails_hash ;</span><br><span class="line">DROP INDEX</span><br><span class="line">Time: <span class="number">9.760</span> ms</span><br><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email = 'aabbott@gmail.com';</span><br><span class="line">                                   QUERY PLAN                                   </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Index Scan <span class="keyword">using</span> idx_emails_tree on <span class="title">emails</span>  <span class="params">(cost=<span class="number">0.42</span>.<span class="number">.12</span><span class="number">.46</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Index Cond: ((email)::text = 'aabbott@gmail.com'::text)</span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.355</span> ms</span><br><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email = 'aabbott@gmail.com' OR email = 'anita32@aguilar-paul.com';</span><br><span class="line">                                                     QUERY PLAN                                                      </span><br><span class="line">---------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Bitmap Heap Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">8.88</span>.<span class="number">.24</span><span class="number">.66</span> rows=<span class="number">4</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Recheck Cond: (((email)::text = 'aabbott@gmail.com'::text) OR ((email)::text = 'anita32@aguilar-paul.com'::text))</span><br><span class="line">   -&gt;  BitmapOr  (cost=<span class="number">8.88</span>.<span class="number">.8</span><span class="number">.88</span> rows=<span class="number">4</span> <span class="built_in">width</span>=<span class="number">0</span>)</span><br><span class="line">         -&gt;  <span class="function">Bitmap Index Scan on <span class="title">idx_emails_tree</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.4</span><span class="number">.44</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">0</span>)</span></span></span><br><span class="line">               Index Cond: ((email)::text = 'aabbott@gmail.com'::text)</span><br><span class="line">         -&gt;  <span class="function">Bitmap Index Scan on <span class="title">idx_emails_tree</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.4</span><span class="number">.44</span> rows=<span class="number">2</span> <span class="built_in">width</span>=<span class="number">0</span>)</span></span></span><br><span class="line">               Index Cond: ((email)::text = 'anita32@aguilar-paul.com'::text)</span><br><span class="line">(<span class="number">7</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.464</span> ms</span><br></pre></td></tr></tbody></table></figure><ul><li>我们查看之前使用的Point Query的Query Plan，我们发现没有Hash Index后，数据库选用了Tree Index来优化Point Query</li></ul><h2 id="Range-Query-1"><a href="#Range-Query-1" class="headerlink" title="Range Query"></a>Range Query</h2><h3 id="字母顺序较后的email"><a href="#字母顺序较后的email" class="headerlink" title="字母顺序较后的email"></a>字母顺序较后的email</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email &gt; 'r%';</span><br><span class="line">                                      QUERY PLAN                                      </span><br><span class="line">--------------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Bitmap Heap Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">7855.73</span>.<span class="number">.18390</span><span class="number">.26</span> rows=<span class="number">270362</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Recheck Cond: ((email)::text &gt; 'r%'::text)</span><br><span class="line">   -&gt;  <span class="function">Bitmap Index Scan on <span class="title">idx_emails_tree</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.7788</span><span class="number">.14</span> rows=<span class="number">270362</span> <span class="built_in">width</span>=<span class="number">0</span>)</span></span></span><br><span class="line">         Index Cond: ((email)::text &gt; 'r%'::text)</span><br><span class="line">(<span class="number">4</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.321</span> ms</span><br></pre></td></tr></tbody></table></figure><ul><li>这里我们尝试搜索字母顺序较后的email， 比如<code>r</code>开头的email。我们发现<code>Index Cond</code>和<code>Bitmap Index Scan on idx_emails_tree</code>， 说明数据库采用Tree Index去优化Query Plan。 </li></ul><h3 id="字母顺序较前的email"><a href="#字母顺序较前的email" class="headerlink" title="字母顺序较前的email"></a>字母顺序较前的email</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email LIKE 'aabbott@gmail.co%';</span><br><span class="line">                         QUERY PLAN                         </span><br><span class="line">------------------------------------------------------------</span><br><span class="line"> <span class="function">Seq Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.19655</span><span class="number">.00</span> rows=<span class="number">99</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Filter: ((email)::text ~~ 'aabbott@gmail.co%'::text)</span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.503</span> ms</span><br><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email &gt; 'aabbott@gmail.co%';</span><br><span class="line">                           QUERY PLAN                            </span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"> <span class="function">Seq Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.19655</span><span class="number">.00</span> rows=<span class="number">1000000</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Filter: ((email)::text &gt; 'aabbott@gmail.co%'::text)</span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.313</span> ms</span><br></pre></td></tr></tbody></table></figure><ul><li>我们查看使用过的两个Range Query的Query Plan，没有发现<code>Index</code>等字眼，只能看到<code>Seq Scan on emails</code>, 说明我们的Tree Index对于这俩Range Query没有帮助。这是为什么呢? 为什么Tree Index对于Range Query会时而出现，时而不出现呢?</li></ul><p><br><br><br></p><p>这里的原因可以从这部分获得灵感 <a href="https://cakebytheoceanluo.github.io/2020/03/19/CMU-15445-Lec07/#Node-size">[CMU-15445] Lec07 Tree Indexes Part I - 树索引 I - Node size</a>: Leaf Node Scans vs. Root-to-Leaf Traversals</p><p>我们如果查询:</p><ul><li>字母顺序较后的email: 它们在树中的排序比较后面，即在较为后面的leaf node中， 使用Tree Index的root-to-leaf traversal可能可以更快完成query。</li><li>字母顺序较前的email: 它们在树中的排序比较前面，即在较为前面的leaf node中。(<code>aabbott@gmail.com</code>甚至是最小值，那么就在头一个leaf node中)。 使用Tree Index的root-to-leaf traversal可能会带来更多random I/O, 让query变慢。反而简单的sequential scan带来的sequential I/O更快。</li></ul><p><br></p><p>我们可以自己去尝试，实际上直到<code>p%</code>都是用sequtial scan的:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">testdb=# EXPLAIN SELECT * FROM emails WHERE email &gt; 'p%';</span><br><span class="line">                           QUERY PLAN                           </span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"> <span class="function">Seq Scan on <span class="title">emails</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.19655</span><span class="number">.00</span> rows=<span class="number">311110</span> <span class="built_in">width</span>=<span class="number">26</span>)</span></span></span><br><span class="line">   Filter: ((email)::text &gt; 'p%'::text)</span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.298</span> ms</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>另外提一下，我在上面都是用<strong>可能</strong>这个次去描述各种途径。但是在数据库内部有一个很重要的组件 - 优化器 Query Optimizer - 它实际上是客观的去预估每一中Query Plan的成本，选择出成本最低的方式， 然后执行这个成本最低的方式。我们之前这些尝试中获得的Query Plan， 都是Query Optimizer计算出的’最低成本’的方式。Query Optimizer会在这门课Lec14, Lec15课中提到。它注定是数据库中最繁琐，最难以解决的部分。</p><p><br></p><p>然后我们回过头看看我们之前给出的猜测, 来对它进行修正: </p><p>如果Tree Index和Hash Index都存在</p><ul><li>Point Query: 非常大概率使用Hash Index</li><li>Range Query: 有可能使用Tree Index， 也有可能Sequtial scan, 即不使用Tree Index</li></ul><p>具体使用Index与否，使用哪一种Index和具体问题相关，和数据库内部的Query Optimizer相关。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库的索引基本分为两种类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hash Index&lt;/li&gt;
&lt;li&gt;Tree Index&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们今天来看一看PostgreSQL中的这两种索引会如何帮助我们的query。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Access Methods" scheme="https://cakebytheoceanluo.github.io/categories/Access-Methods/"/>
    
      <category term="Hash Table" scheme="https://cakebytheoceanluo.github.io/categories/Hash-Table/"/>
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="B Tree" scheme="https://cakebytheoceanluo.github.io/categories/B-Tree/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/categories/Indexing/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/categories/PostgreSQL/"/>
    
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/tags/Indexing/"/>
    
      <category term="B Tree" scheme="https://cakebytheoceanluo.github.io/tags/B-Tree/"/>
    
  </entry>
  
  <entry>
    <title>Extendable Hashing 练习</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/12/Extendable-Hashing-Exercise/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/12/Extendable-Hashing-Exercise/</id>
    <published>2020-04-12T18:52:43.000Z</published>
    <updated>2020-04-12T18:56:28.707Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章对我见过的Extendable Hashing的练习题进行了收录。Extendable Hashing的介绍见我一篇精读文章 <a href="https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/">Database System Concepts 精读 [11.6-11.7] Hashing</a></p><a id="more"></a><h1 id="TUM数据库课程练习课"><a href="#TUM数据库课程练习课" class="headerlink" title="TUM数据库课程练习课"></a>TUM数据库课程练习课</h1><p>在TUM的例子中global depth从1开始</p><h2 id="例题一-1"><a href="#例题一-1" class="headerlink" title="例题一 1"></a>例题一 <sup><a href="#fn1">1</a></sup></h2><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_1_1.png" alt="hash value"></p><ul><li>KundenNr 顾客号码</li><li>Binär 二进制表达</li><li>Umgekehrt Binär 倒置的二进制表达，<strong>这个是我们的hash key</strong></li></ul><p><br></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_1_2.png" alt="Init: global depth = 1."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_1_3.png" alt="Insert 010100 Müller, 100110 Meier."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_1_4.png" alt="Insert 011110 Schmidt."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_1_5.png" alt="Global depth = 2."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_1_6.png" alt="Local depth = 2."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_1_7.png" alt="Global depth = 3."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_1_8.png" alt="Insert 010010 Krause, 000101 Schulz, 101101 Kaufman."></p><h2 id="例题二-2"><a href="#例题二-2" class="headerlink" title="例题二 2"></a>例题二 <sup><a href="#fn2">2</a></sup></h2><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_1.png" alt="hash value"></p><ul><li>MatrNr 学号</li><li>Binär 二进制表达</li><li>Umgekehrt Binär 倒置的二进制表达，<strong>这个是我们的hash key</strong></li></ul><p><br></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_2.png" alt="Init: global depth = 1."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_3.png" alt="Insert 2 Müller, 8 Schmidt."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_4.png" alt="Insert 19 Fischer."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_5.png" alt="Global depth = 2."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_6.png" alt="Local depth = 2. Insert 16 Huber."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_7.png" alt="Global depth = 3."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_8.png" alt="Local depth = 3. Insert 20 Bauer."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_9.png" alt="Insert 34 Schneider."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_2_10.png" alt="Local depth = 3. Insert 30 Wagner."></p><h2 id="例题三-3"><a href="#例题三-3" class="headerlink" title="例题三 3"></a>例题三 <sup><a href="#fn3">3</a></sup></h2><p>用在extendable hash table存储十亿人(10,000,000,000)的信息:</p><ul><li>税号: 10B，对每一个人都唯一，作为hash key</li><li>其他信息: 名字，国家，城市，邮编，地址, 一共 100B</li></ul><p><br></p><ul><li>hash table的key是税号, value是PID(page id, 8B), 即对应一个bucket。Bucket所在的page页的大小是4KiB。我们假设每一个bucket对应的page的75%的容量被使用。</li><li>hash bucket中保存每一个对应的TID (8B), 这个TID对应一个页上的位置，存储着这个人的其他信息。</li><li>问: 存储这个hash table需要多少存储容量?</li></ul><p>答案:</p><ul><li>bucket/page的每一个条目是税号和这个人对应的TID。一个bucket中有: $n = \frac{4\mathrm{KiB}}{10 \mathrm{B} + 8 \mathrm{B}} = 170$个条目。</li><li>需要的bucket/page数量: $p = \frac{10^{10}}{n} = 58 * 10^{6}$</li><li>引用这些page至少需要的bit数量: $\lceil\log_2 p \rceil = 26$</li><li>至少需要的bucket/page数量: $2^{26}$</li><li>每一个bucket/page的PID引用都存储在hash table中: $8B * 2^{26} = 512 \mathrm{MiB}$ 即存储这个hash table需要的存储容量</li></ul><p><br></p><ul><li>注意: 100B其他信息存储在其他page中，我们不需要关心这些page。只需要关心这些page的PID， 大小是8B。</li></ul><p><img data-src="https://cakebytheoceanluo.github.io/images/GDB/EH_3_1.png" alt="图解."></p><ul><li>上图中只有bucket pointer存储在hash table中。左侧的index in Bits并不需要存储。</li><li>上图中绿色和蓝色也不存储在hash table中。绿色只是形象化bucket pointer。蓝色是存储着18B(税号和TID)的bucket，即bucket pointer所指向的地方。</li></ul><!-- # CMUTODO:# P1T1TODO:link --><h1 id="Database-System-Concepts-Practice-Exercise-4"><a href="#Database-System-Concepts-Practice-Exercise-4" class="headerlink" title="Database System Concepts - Practice Exercise 4"></a>Database System Concepts - Practice Exercise <sup><a href="#fn4">4</a></sup></h1><h2 id="11-6"><a href="#11-6" class="headerlink" title="11.6"></a>11.6</h2><p>Suppose that we are using extendable hashing on a file that contains records with the following search-key values: <code>2, 3, 5, 7, 11, 17, 19, 23, 29, 31</code></p><p>Show the extendable hash structure for this file if the hash function is <code>h(x) = x mod 8</code> and buckets can hold three records</p><p><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.S1.png" alt="11.6."></p><p>右侧同一个bucket中的hash value相同, 即余数相同。</p><p><br></p><h2 id="11-7"><a href="#11-7" class="headerlink" title="11.7"></a>11.7</h2><p>Show how the extendable hash structure of Practice Exercise 11.6 changes as the result of each of the following steps:</p><ul><li>a. Delete 11.</li><li>b. Delete 31.</li><li>c. Insert 1.</li><li>d. Insert 15.</li></ul><p><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.S2.png" alt="11.6."></p><p><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.S3.png" alt="11.6."></p><h2 id="11-9"><a href="#11-9" class="headerlink" title="11.9"></a>11.9</h2><p>Give pseudocode for deletion of entries from an extendable hash structure, including details of when and how to coalesce buckets. Do not bother about reducing the size of the bucket address table.</p><p>见另一篇文章, <a href="https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/">Database System Concepts 精读 [11.6-11.7] Hashing</a></p><h2 id="11-10"><a href="#11-10" class="headerlink" title="11.10"></a>11.10</h2><p>Suggest an efficient way to test if the <em>bucket address table</em> in extendable hashing can be reduced in size, by storing an extra count with the <em>bucket address table</em>. Give details of how the count should be maintained when buckets are split, coalesced, or deleted. </p><p>(Note: Reducing the size of the <em>bucket address table</em> is an <strong>expensive</strong> operation, and subsequent inserts may cause the table to grow again. Therefore, it is best not to reduce the size as soon as it is possible to do so, but instead do it only if the number of index entries becomes small compared to the bucket-address-table size.)</p><p><br></p><p>Answer: </p><p>If the hash table is currently using $i$ bits of the hash value, then maintain a count of buckets for which the length of common hash prefix is exactly $i$.</p><p>Consider a bucket $j$ with length of common hash prefix $i_j$. If the bucket is being split, and $i_j$ is equal to $i$, then reset the count to 1. If the bucket is being split and $i_j$ is one less that $i$, then increase the count by 1. It the bucket if being coalesced, and $i_j$ is equal to $i$ then decrease the count by 1. If the count becomes 0, then the bucket address table can be reduced in size at that point.</p><p>However, note that if the bucket address table is not reduced at that point, then the count has no significance afterwards. If we want to postpone the reduction, we have to keep an array of counts, i.e. a count for each value of common hash prefix. The array has to be updated in a similar fashion. The bucket address table can be reduced if the $i^{th}$ entry of the array is 0, where $i$ is the number of bits the table is using. Since bucket table reduction is an expensive operation, it is not always advisable to reduce the table. It should be reduced only when sufficient number of entries at the end of count array become 0.</p><!-- # 实现TODO: link --><hr><p>引用:</p><ul><li><p><a name="fn1">1</a>: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vTG9lc3VuZzA5LnBkZj9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/Loesung09.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/Loesung09.pdf?lang=de<i class="fa fa-external-link"></i></span></p></li><li><p><a name="fn2">2</a>: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vTG9lc3VuZzEyLnBkZj9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/Loesung12.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/Loesung12.pdf?lang=de<i class="fa fa-external-link"></i></span></p></li><li><p><a name="fn3">3</a>: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vTG9lc3VuZzEwLnBkZj9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/Loesung10.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/Loesung10.pdf?lang=de<i class="fa fa-external-link"></i></span></p></li><li><p><a name="fn4">4</a>: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L3ByYWN0aWNlLWV4ZXItZGlyL2luZGV4Lmh0bWw=" title="https://www.db-book.com/db6/practice-exer-dir/index.html">https://www.db-book.com/db6/practice-exer-dir/index.html<i class="fa fa-external-link"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L3ByYWN0aWNlLWV4ZXItZGlyLzExcy5wZGY=" title="https://www.db-book.com/db6/practice-exer-dir/11s.pdf">https://www.db-book.com/db6/practice-exer-dir/11s.pdf<i class="fa fa-external-link"></i></span></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章对我见过的Extendable Hashing的练习题进行了收录。Extendable Hashing的介绍见我一篇精读文章 &lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/&quot;&gt;Database System Concepts 精读 [11.6-11.7] Hashing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Data Structure" scheme="https://cakebytheoceanluo.github.io/categories/Data-Structure/"/>
    
      <category term="Access Methods" scheme="https://cakebytheoceanluo.github.io/categories/Access-Methods/"/>
    
      <category term="Hash Table" scheme="https://cakebytheoceanluo.github.io/categories/Hash-Table/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/categories/Indexing/"/>
    
    
      <category term="Dynamic Hashing Scheme" scheme="https://cakebytheoceanluo.github.io/tags/Dynamic-Hashing-Scheme/"/>
    
      <category term="Extendible Hashing" scheme="https://cakebytheoceanluo.github.io/tags/Extendible-Hashing/"/>
    
      <category term="Books" scheme="https://cakebytheoceanluo.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>Database System Concepts 精读 [11.6-11.7] Hashing</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/</id>
    <published>2020-04-11T14:19:16.000Z</published>
    <updated>2020-04-12T18:56:23.511Z</updated>
    
    <content type="html"><![CDATA[<p>[11.6-11.7] Hashing</p><a id="more"></a><h1 id="11-6-Static-Hashing"><a href="#11-6-Static-Hashing" class="headerlink" title="11.6 Static Hashing"></a>11.6 Static Hashing</h1><ul><li>One disadvantage of <strong>sequential file organization</strong> is that we must access an index structure to locate data, or must use binary search, and that results in more I/O operations. 总之很慢 </li><li>File organizations based on the technique of hashing allow us to avoid accessing an index structure. Hashing also provides a way of constructing indices.</li></ul><p><br></p><p><strong>Bucket</strong> := a unit of storage that can store one or more records. <strong>A bucket is typically a disk block, but could be chosen to be smaller or larger than a disk block.</strong> Bucket也可以是一个页(page)</p><p>$K$ := the set of all search-key values</p><p>$B$ := the set of all bucket addresses. </p><p>A hash function $h: K \rightarrow B$</p><p>$n_b$ := number of buckets</p><p><br></p><p><strong>Insert</strong> a record with search key $K_i$ at bucket with address $h(K_i)$. Assume for now that there is space in the bucket to store the record. Then, the record is stored in that bucket</p><p><strong>Look up</strong>: <em>check the search-key value</em> of every record in bucket with address $h(K_i)$</p><p><strong>Delete</strong>: Loop up + delete the found record</p><p><strong>Two different purposes of Hasing:</strong></p><ul><li>In a <strong>hash file organization</strong>, we obtain the address of the disk block containing a desired record directly by　computing a function on the search-key value of the record. </li><li>In a <strong>hash index organization</strong> we organize the search keys, with their associated pointers, into a hash file structure. 　　见11.6.3</li></ul><p>其实哈希表在数据库中有更多用途，见我的另一篇文章<a href="https://cakebytheoceanluo.github.io/2020/03/18/CMU-15445-Lec06/#Data-Structure-in-DBMS">[CMU-15445]Lec06 Hash Tables - 哈希表 Data Structure in DBMS</a></p><h2 id="11-6-1-Hash-Function"><a href="#11-6-1-Hash-Function" class="headerlink" title="11.6.1 Hash Function"></a>11.6.1 Hash Function</h2><p>Typical hash functions perform computation on the internal binary machine representation of characters in the search key. A simple hash function of this type first computes the sum of the binary representations of the characters of a key, then returns the sum modulo the number of buckets. 基于二进制形式，做一些位操作(bit operation)</p><p>Hash functions require careful design. A bad hash function may result in lookup taking time proportional to the number of search keys in the file. A well-designed function gives an average-case lookup time that is a (small) constant, independent of the number of search keys in the file.</p><h3 id="Two-Qualities"><a href="#Two-Qualities" class="headerlink" title="Two Qualities"></a>Two Qualities</h3><p>An ideal hash function distributes the stored keys uniformly across all the buckets, so that every bucket has the same number of records. We want to choose a hash function that assigns search-key values to buckets in such a way that the distribution has <em>two</em> qualities:</p><ul><li><strong>The distribution is uniform</strong>: the hash function <strong>assigns each bucket the same number of search-key values</strong> from the set of all possible search-key values.</li><li><strong>The distribution is random</strong>: in the average case, each bucket will have nearly the same number of values assigned to it, <strong>regardless of the actual distribution of search-key values</strong>. More precisely, <strong>the hash value will not be correlated to any externally visible ordering on the search-key values</strong>, such as alphabetic ordering or ordering by the length of the search keys; the hash function will appear to be </li><li>第一点指的是<strong>distribution of search-key values is uniform</strong>, 这个分布和实际的数据集(record)无关。只是考虑每一个bucket理论接收的search key的数量。</li><li>第二点指的是<strong>distribution of search-key values is random</strong>, 能获得<strong>distribution of records is uniform</strong>, 即数据集(record)相关。它可以去掉相关联(不相等)的search-key中的关联, 使这些关联的search-key的哈希值随机化, 也失去原有的关联。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>1.<em>People Name</em>‘s Hash Function: mapping names beginning with the ith letter of the alphabet to the ith bucket and having 26 buckets.</p><ul><li>simple</li><li>no uniform distribution: <strong>more</strong> names to begin with such letters as B and R than Q and X, for example.</li></ul><p>2.Salary’s Hash Function: the minimum salary is $30,000 and the maximum salary is $130,000, and we use a hash function that <strong>divides the values into 10 ranges</strong>, $30,000-$40,000, $40,001-$50,000 and so on.</p><ul><li><strong>uniform</strong> distribution of search-key values (since each bucket has the same number of different salary values)</li><li>no random distribution. Records with salaries between $60,001 and $70,000 are <strong>far more common than</strong> are<br>records with salaries between $30,001 and $40,000. As a result, <strong><em>the distribution of records</em></strong> is not uniform - some buckets receive more records than others do. <strong>If the function has a random distribution, even if there are such correlations in the search keys, the randomness of the distribution will make it very likely that all buckets will have roughly the same number of records, as long as each search key occurs in only a small fraction of the records.</strong> (If a single search key occurs in a large fraction of the records, the bucket containing it is likely to have more records than other buckets, regardless of the hash function used.)</li></ul><p>3.Let $s$ be a string of length $n$, and let $s[i]$ denote the $i$th byte of the string. </p><ul><li>The hash function is defined as: $h(s) = s[0] ∗ 31(n−1) + s[1] ∗ 31(n−2) + ··· + s[n − 1] \; \% \; n_b$</li></ul><p><br></p><h2 id="11-6-2-Handling-of-Bucket-Overflows"><a href="#11-6-2-Handling-of-Bucket-Overflows" class="headerlink" title="11.6.2 Handling of Bucket Overflows"></a>11.6.2 Handling of Bucket Overflows</h2><p>Bucket overflow can occur for several reasons:</p><ul><li><strong>Insufficient buckets</strong>:<br>The number of buckets $n_b$ must be chosen such that $n_b &gt; n_r / f_r$, where $n_r$ denotes the total number of records that will be stored and $f_r$ denotes the number of records that will fit in a bucket. <strong>This designation assumes that the total number of records is known when the hash function is chosen.</strong> The probability of bucket overflow is reduced, the number of buckets<br>is chosen to be $(n_r / f_r) ∗ (1 + d)$, where d is a fudge factor, typically around 0.2. Some space is wasted: About 20 percent of the space in the buckets will be empty.</li><li><strong>Skew</strong>:<br>Some buckets are <strong>assigned more records than are others</strong>, so a bucket may overflow even when other buckets still have space. This situation is called bucket <em>skew</em>. Skew can occur for two reasons:<ol><li>Multiple records may have <strong>the same search key</strong>.　(见后面<a href="#insertion">Dynamic Hashing - Insertion</a>中的对重复的描述 和 <a href="#例子">例子中第五步</a>)</li><li>The chosen hash function may result in non-uniform distribution of search keys (已经在<a href="#two-qualities">Two Qualities</a>中讨论过)</li></ol></li></ul><h3 id="Overflow-Buckets"><a href="#Overflow-Buckets" class="headerlink" title="Overflow Buckets"></a>Overflow Buckets</h3><p>We handle bucket overflow by using <strong>overflow buckets</strong>. If a record must be inserted into a bucket b, and b is already full, the system provides an overflow bucket for $b$, and inserts the record into the overflow bucket. If the overflow bucket is also full, the system provides another overflow bucket, and so on. </p><p>All the overflow buckets of a given bucket are chained together in a linked list, as in <em>Figure 11.24</em>. Overflow handling using such a linked list is called <strong>overflow chaining</strong>. 也叫hashing with chaining或chained hashing, 见我的另一篇文章<a href="https://cakebytheoceanluo.github.io/2020/03/18/CMU-15445-Lec06/#Chained-Hashing">[CMU-15445]Lec06 Hash Tables - 哈希表- Chained Hashing</a></p><p><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.24.png" alt="Figure 11.24 Overflow chaining in a hash structure."></p><h4 id="Lookup-Algorithm"><a href="#Lookup-Algorithm" class="headerlink" title="Lookup Algorithm"></a>Lookup Algorithm</h4><p>The system uses the hash function on the search key to identify a bucket $b$. The system must examine all the records in bucket $b$ to see whether they match the search key, as before. In addition, if bucket $b$ has overflow buckets, the system must examine the records in all the overflow buckets also.</p><h4 id="Closed-Addressing-Hashing-amp-Open-Addressing-Hashing"><a href="#Closed-Addressing-Hashing-amp-Open-Addressing-Hashing" class="headerlink" title="Closed Addressing Hashing &amp; Open Addressing Hashing"></a>Closed Addressing Hashing &amp; Open Addressing Hashing</h4><p>The form of hash structure with <strong>overflow buckets</strong> referred to as <strong>closed addressing hashing</strong>. An important drawback of closed addressing hashing is that we must choose the hash function when we implement the system, and it　cannot be changed easily thereafter if the file being indexed grows or shrinks. Since the function $h$ maps search-key values to a fixed set $B$ of bucket addresses, we waste space if $B$ is made large to handle future growth of the file. If $B$ is too small, the buckets contain records of many different search-key values, and bucket overflows can occur. <strong>As the file grows, performance suffers</strong>. </p><p>An alternative approach <strong>open addressing hashing</strong>: </p><ul><li>the set of buckets is fixed, and there are no overflow chains. </li><li>Instead, if a bucket is full, the system inserts records in some other bucket in the initial set of buckets $B$.<ul><li>One policy <strong>linear probing</strong> is to use the next bucket (in cyclic order) that has space</li><li>Other policies, such as computing further hash functions, are also used. </li></ul></li></ul><p>Open addressing hashing has been used to construct symbol tables for compilers and assemblers, but closed addressing hashing is preferable for database systems. The reason is that <strong>deletion under open addressing hashing</strong> is troublesome. Usually, compilers and assemblers perform only lookup and insertion operations on their symbol tables. However, in a database system, it is important to be able to handle deletion as<br>well as insertion. Thus, open addressing hashing is of only minor importance in database implementation.</p><p>实际上open addressing hashing在数据库依然很常见被应用的，特别是hash join中我们只使用hash table的lookup和insert, 根本不delete。更多用途见我的另一篇文章<a href="https://cakebytheoceanluo.github.io/2020/03/18/CMU-15445-Lec06/#Data-Structure-in-DBMS">[CMU-15445]Lec06 Hash Tables - 哈希表 Data Structure in DBMS</a></p><h2 id="11-6-3-Hash-Indices"><a href="#11-6-3-Hash-Indices" class="headerlink" title="11.6.3 Hash Indices"></a>11.6.3 Hash Indices</h2><p>Hashing can be used not only for file organization, but also for <strong>index-structure creation</strong>. </p><p><strong>A hash index organizes the search keys, with their associated pointers, into a hash file structure</strong>. We construct a hash index as follows. We apply a hash function on a search key to identify a bucket, and store the key and its associated pointers in the bucket (or in overflow buckets). <em>Figure 11.25</em> shows a secondary hash index on the instructor file, for the search key ID. The hash function in the figure computes the sum of the digits of the ID modulo 8. The hash index has eight buckets, each of size 2 (realistic indices would, of course, have much larger bucket sizes). One of the buckets has three keys mapped to it, so it has an overflow bucket. In this example, ID is a primary key for instructor, so each search key has only one associated pointer. In general, multiple pointers can be associated with each key.</p><p><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.25.png" alt="Figure 11.25 Hash index on search key *ID* of instructor file."></p><ul><li>图中<code>33456</code>是一个<strong>到另一个bucket的指针</strong>，其余的指针都是指向文件位置。在这这里我们混淆或者普遍化<em>指针</em>这个词，它在这里指内存上的地址和硬盘上的地址。</li></ul><p>We use the term hash index to denote hash file structures as well as secondary hash indices. Strictly speaking, hash indices are only secondary index structures. A hash index is never needed as a clustering index structure, since, if a file itself is organized by hashing, there is no need for a separate hash index structure on it. However, since hash file organization provides the same direct access to records that indexing provides, we pretend that a file organized by hashing also has a clustering hash index on it.</p><h1 id="11-7-Dynamic-Hashing"><a href="#11-7-Dynamic-Hashing" class="headerlink" title="11.7 Dynamic Hashing"></a>11.7 Dynamic Hashing</h1><p>Extendable hashing is one form of dynamic hashing techniques, which allow the hash function to be <strong>modified dynamically to accommodate the growth or shrinkage of the database</strong>. </p><h2 id="11-7-1-Data-Structure"><a href="#11-7-1-Data-Structure" class="headerlink" title="11.7.1 Data Structure"></a>11.7.1 Data Structure</h2><ul><li>Space Efficiency: Extendable hashing copes with changes in database size by splitting and coalescing buckets as the database grows and shrinks. </li><li>Low Performance Overhead: the reorganization is performed on only one bucket at a time</li></ul><p>Hash Function: $h$ generates values over a relatively large range ($b$-bit binary integers). A typical value for $b$ is 32.</p><p><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.26.png" alt="Figure 11.26 General extendable hash structure"></p><ul><li>We do not create a bucket for each hash value. Indeed, $2^{32}$ is over 4 billion, and that many buckets is unreasonable for all but the largest databases. </li><li>Instead, we <strong>create buckets on demand</strong>, as records are inserted into the file. We do not use the entire b bits of the hash value initially. </li><li>At any point, we use <strong>$i$ bits indicating that $i$ bits of the hash value $h(K)$ are required to determine the correct bucket for $K$</strong>, where $0 \leq i \leq b$. These $i$ bits are used as an offset into an additional table of bucket addresses. The value of $i$ grows and shrinks with the size of the database.</li><li>All such entries will have <strong>a common hash prefix</strong>, but the length of this prefix may be <strong>less than $i$</strong>. Therefore, we associate with each bucket an integer giving the length of the common hash prefix. In <em>Figure 11.26</em> the integer associated with bucket $j$ is shown as $i_j$. The number of bucket-address-tableentries that point to bucket $j$ is $2^{(i-i_j)}$</li><li>图中左侧<code>bucket address table</code>也称为<code>global directory</code></li><li>图中右侧<code>bucket</code>也称为<code>local bucket</code></li></ul><h2 id="11-7-2-Queries-and-Updates"><a href="#11-7-2-Queries-and-Updates" class="headerlink" title="11.7.2 Queries and Updates"></a>11.7.2 Queries and Updates</h2><p>search-key value $K_l$</p><h3 id="Lookup"><a href="#Lookup" class="headerlink" title="Lookup"></a>Lookup</h3><ol><li>take the first $i$ high-order bits of $h(K_l)$</li><li>look at the corresponding <strong>bucket address table entry</strong> for this bit string</li><li>follow the <strong>bucket pointer</strong> in the table entry.</li></ol><h3 id="Insertion"><a href="#Insertion" class="headerlink" title="Insertion"></a>Insertion</h3><ol><li>先按照Lookup 找到对应的bucket (见<a href="#-loopup">Loopup步骤</a>)</li><li>bucket是否满了: <ul><li>没有满: 简单插入即可</li><li>满: If the bucket is full, it <strong>must split the bucket</strong> and <strong>redistribute the current records</strong>, plus the new one. To split the bucket, the system <strong>must first determine from the hash value whether it needs to increase the number of bits that it uses</strong>.<ul><li>If $i = i_j$, only one entry in the bucket address table points to bucket $j$: <ul><li>The system needs to <strong>increase the size of the bucket address table</strong> so that it can include pointers to the two buckets that result from splitting bucket $j$. It does so by considering an additional bit of the hash value. It increments the value of $i$ by 1, thus doubling the size of the bucket address table. <strong>It replaces each entry by two entries, both of which contain the same pointer as the original entry. Now two entries in <em>the bucket address table</em> point to bucket $j$</strong>. </li><li>The system allocates a new bucket (bucket $z$), and sets the second entry to point to the new bucket. It sets $i_j$ and $i_z$ equal to $i$. </li><li>Next, it rehashes each record in bucket $j$ and, depending on the first $i$ bits (remember the system has added 1 to $i$), either keeps it in bucket $j$ or allocates it to the newly created bucket $z$.</li><li>The system now reattempts the insertion of the new record. <ul><li>Usually, the attempt will succeed. </li><li>However, if all the records in bucket $j$, as well as the new  record, have the same hash-value prefix, it will be necessary to split a bucket again, since all the records in bucket $j$ and the new record are assigned to the same bucket. If the hash function has been chosen carefully, it is unlikely that a single insertion will require that a bucket be split more than once, <strong>unless there are a large number of records with the same search key</strong>.<br>If all the records in bucket $j$ have the <strong>same search-key value (即允许出现重复的key value)</strong>, no amount of splitting will help. In such cases, overflow buckets are used to store the records, as in static hashing. (见<a href="#例子">例子中第五步</a>)</li></ul></li></ul></li><li>If $i &gt; i_j$, then more than one entry in the bucket address table points to bucket $j$. <ul><li><strong>The system can split bucket $j$ without increasing the size of the bucket address table</strong>. Observe that all the entries that point to bucket $j$ correspond to hash prefixes that have the same value on the leftmost $i_j$ bits.</li><li><strong>The system allocates a new bucket (bucket $z$), and sets $i_j$ and $i_z$ to the value that results from adding 1 to the original $i_j$ value.</strong> </li><li>Next, the system needs to <strong>adjust the entries in <em>the bucket address table</em> that previously pointed to bucket $j$</strong>. (Note that with the new value for $i_j$, not all the entries correspond to hash prefixes that have the same value on the leftmost $i_j$ bits.) The system leaves the first half of the entries as they were (pointing to bucket $j$), and sets all the remaining entries to point to the newly created bucket (bucket $z$).</li><li>Next, as in the previous case, the system rehashes each record in bucket $j$, and allocates it either to bucket $j$ or to the newly created bucket $z$.</li></ul></li><li><strong>Note that, in both cases, the system needs to recompute the hash function on only the records in bucket $j$.</strong></li><li>总体上: $i = i_j$的情况只比$i &gt; i_j$的情况多了一步, 即<strong>increase the size of the bucket address table</strong>。</li></ul></li></ul></li></ol><h3 id="Deletion"><a href="#Deletion" class="headerlink" title="Deletion"></a>Deletion</h3><ol><li>先按照Lookup 找到对应的bucket (见<a href="#-loopup">Loopup步骤</a>)</li><li>It removes both the search key from the bucket and the record from the file. </li><li>The bucket is removed if it becomes empty. Note that, at this point, several buckets can be coalesced, and the size of the bucket address table can be cut in half.</li><li>The bucket address table can be reduced in size. Unlike coalescing of buckets, changing the size of the bucket address table is a rather expensive operation if the table is large. Therefore it may be worthwhile to reduce the bucket-address-table size only if the number of buckets reduces greatly.</li></ol><p><br></p><blockquote><p>Let $i$ denote the number of bits of the hash value used in the hash table. Let <strong>bsize</strong> denote the maximum capacity of each bucket. The pseudocode is shown in Figure 11.2.<br>Note that we can <strong>only merge two buckets at a time</strong>. The common hash prefix of the resultant bucket will have length one less than the two buckets merged. Hence we look at the buddy bucket of bucket $j$ differing from it only at the last bit. If the common hash prefix of this bucket is not $i_j$, then this implies that the buddy bucket has been further split and merge is not possible.<br>When merge is successful, further merging may be possible, which is handled by a recursive call to <em>coalesce</em> at the end of the function. <sup><a href="#fn1">1</a></sup></p></blockquote><p><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.S4.png" alt="11.Solution. <sup>[1](#fn1)</sup>"></p><p><br><br><br></p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>Search Key: <em>dept_name</em> with 32-bit hash value<br><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.27.png" alt="Figure 11.27 Hash Function for *dept_name*."></p><p><br><br><br></p><p>To illustrate all the features of extendable hashing in a small structure, we shall make the unrealistic assumption that a bucket can hold only two records.</p><ol><li><p>The file is empty:<br><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.28.png" alt="Figure 11.28 Initial extendable hash structure."></p></li><li><ul><li>insert record (10101, Srinivasan, Comp. Sci., 65000); </li><li>insert record (12121, Wu, Finance, 90000); </li><li>insert record (15151, Mozart, Music, 40000);<ul><li>split since $i_0$ full and $i=i_0$;<br><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.29.png" alt="Figure 11.29 Hash structure after three insertions."></li></ul></li></ul></li><li><ul><li>insert record (22222,Einstein,Physics,95000);<ul><li>split since $i_1$ full and $i=i_1$;<br><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.30.png" alt="Figure 11.30 Hash structure after four insertions."></li></ul></li></ul></li><li><ul><li>insert record (32343, El Said, History, 60000);</li><li>insert record (33456, Gold, Physics, 87000);<ul><li>split since $i_1$ full and $i=i_1$;<br><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.31.png" alt="Figure 11.31 Hash structure after six insertions."></li></ul></li></ul></li><li><ul><li>insert record (45565, Katz, Comp. Sci., 75000);<ul><li>split since $i_3$ full;<br><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.32.png" alt="Figure 11.32 Hash structure after seven insertions."></li></ul></li></ul></li><li><ul><li>insert record (58583, Califieri, History, 62000);</li><li>insert record (83821, Brandt, Comp. Sci., 92000);<ul><li>This overflow cannot be handled by increasing the number of bits, since there are three records with exactly the same hash value. Hence the system uses an overflow bucket.<br><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.33.png" alt="Figure 11.33 Hash structure after eleven insertions."></li></ul></li></ul></li><li><ul><li>insert record (98345, Kim, Elec. Eng., 80000);<ul><li>split since $i_0$ full;<br><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.34.png" alt="Figure 11.34 Extendable hash structure for the instructor file."></li></ul></li></ul></li></ol><h1 id="11-7-3-Static-Hashing-versus-Dynamic-Hashing"><a href="#11-7-3-Static-Hashing-versus-Dynamic-Hashing" class="headerlink" title="11.7.3 Static Hashing versus Dynamic Hashing"></a>11.7.3 Static Hashing versus Dynamic Hashing</h1><p>实际上是讨论<strong>extendable hashing的优缺点</strong></p><h2 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h2><ul><li><strong>performance does not degrade</strong> as the file grows </li><li><strong>minimal space overhead</strong>: Although the bucket address table incurs additional overhead, it contains one pointer for each hash value for the current prefix length. This table is thus small. The main space saving of extendable hashing over other forms of hashing is that no buckets need to be reserved for future growth; rather, buckets can be allocated dynamically.</li></ul><h2 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages"></a>Disadvantages</h2><ul><li>lookup involves <strong>an additional level of indirection (使用一次指针)</strong>, since the system <strong>must access the bucket address table</strong> before accessing the bucket itself. This extra reference has only a minor effect on performance. Although the hash structures that we discussed in Section 11.6 do not have this extra level of indirection, they lose their minor performance advantage as they become full.</li></ul><p>another form of dynamic hashing: <strong>linear hashing</strong>, which avoids the extra level of indirection associated with extendable hashing, at the possible cost of more overflow buckets. <a href="https://cakebytheoceanluo.github.io/2020/03/18/CMU-15445-Lec06/#Linear-Hashing">见博客另一篇文章: [CMU-15445]Lec06 Hash Tables - 哈希表 - Linear Hashing</a></p><hr><h1 id="Errata-2"><a href="#Errata-2" class="headerlink" title="Errata 2"></a>Errata <sup><a href="#fn2">2</a></sup></h1><p><img data-src="https://cakebytheoceanluo.github.io/images/DSC/11.E1.png" alt="Errata"></p><p>17已经被我在这篇文章中纠正</p><p>18在图中，但是不重要</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><p><a name="#fn1">1</a>: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L3ByYWN0aWNlLWV4ZXItZGlyL2luZGV4Lmh0bWw=" title="https://www.db-book.com/db6/practice-exer-dir/index.html">https://www.db-book.com/db6/practice-exer-dir/index.html<i class="fa fa-external-link"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L3ByYWN0aWNlLWV4ZXItZGlyLzExcy5wZGY=" title="https://www.db-book.com/db6/practice-exer-dir/11s.pdf">https://www.db-book.com/db6/practice-exer-dir/11s.pdf<i class="fa fa-external-link"></i></span></p></li><li><p><a name="#fn2">2</a>: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L2VycmF0YS1kaXIvZXJyYXRhLXBhcnQzLnBkZg==" title="https://www.db-book.com/db6/errata-dir/errata-part3.pdf">https://www.db-book.com/db6/errata-dir/errata-part3.pdf<i class="fa fa-external-link"></i></span></p></li><li><p>Abraham Silberschatz, Henry F. Korth, S. Sudarshan: <strong>Database System Concepts</strong>, 6th Edition. McGraw-Hill Book Company 2010</p><ul><li>6th Edition: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L2luZGV4Lmh0bWw=" title="https://www.db-book.com/db6/index.html">https://www.db-book.com/db6/index.html<i class="fa fa-external-link"></i></span></li><li>7th Edition: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI3L2luZGV4Lmh0bWw=" title="https://www.db-book.com/db7/index.html">https://www.db-book.com/db7/index.html<i class="fa fa-external-link"></i></span></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[11.6-11.7] Hashing&lt;/p&gt;
    
    </summary>
    
    
      <category term="Data Structure" scheme="https://cakebytheoceanluo.github.io/categories/Data-Structure/"/>
    
      <category term="Access Methods" scheme="https://cakebytheoceanluo.github.io/categories/Access-Methods/"/>
    
      <category term="Hash Table" scheme="https://cakebytheoceanluo.github.io/categories/Hash-Table/"/>
    
      <category term="Database System Concepts" scheme="https://cakebytheoceanluo.github.io/categories/Database-System-Concepts/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/categories/Indexing/"/>
    
    
      <category term="Dynamic Hashing Scheme" scheme="https://cakebytheoceanluo.github.io/tags/Dynamic-Hashing-Scheme/"/>
    
      <category term="Extendible Hashing" scheme="https://cakebytheoceanluo.github.io/tags/Extendible-Hashing/"/>
    
      <category term="Hash Function" scheme="https://cakebytheoceanluo.github.io/tags/Hash-Function/"/>
    
      <category term="Hash Scheme" scheme="https://cakebytheoceanluo.github.io/tags/Hash-Scheme/"/>
    
      <category term="Static Hashing Scheme" scheme="https://cakebytheoceanluo.github.io/tags/Static-Hashing-Scheme/"/>
    
      <category term="Chained Hashing" scheme="https://cakebytheoceanluo.github.io/tags/Chained-Hashing/"/>
    
      <category term="Books" scheme="https://cakebytheoceanluo.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>Database System Concepts-精读</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/10/DSC-0/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/10/DSC-0/</id>
    <published>2020-04-10T16:41:55.000Z</published>
    <updated>2020-04-11T14:31:36.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="笔记文章链接"><a href="#笔记文章链接" class="headerlink" title="笔记文章链接"></a>笔记文章链接</h1><ul><li>Chapter 11 Indexing and Hashing:<ul><li>11.6-11.7 Hashing: <a href="https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/">Database System Concepts 精读 [11.6-11.7] Hashing</a></li></ul></li></ul><p>此区域持续更新</p><hr><a id="more"></a><h1 id="笔记概要"><a href="#笔记概要" class="headerlink" title="笔记概要"></a>笔记概要</h1><p>此系列文章会不定时更新。<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><p>我在这里分享我的读书笔记, 我使用是这本书第六版: Abraham Silberschatz, Henry F. Korth, S. Sudarshan: <strong>Database System Concepts</strong>, 6th Edition. McGraw-Hill Book Company 2010</p><blockquote><ul><li>帆船书：Abraham Silberschatz, Henry F. Korth, S. Sudarshan: <strong>Database System Concepts</strong>, 6th Edition. McGraw-Hill Book Company 2010<ul><li>第六版: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L2luZGV4Lmh0bWw=" title="https://www.db-book.com/db6/index.html">https://www.db-book.com/db6/index.html<i class="fa fa-external-link"></i></span></li><li>第七版 2019: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI3L2luZGV4Lmh0bWw=" title="https://www.db-book.com/db7/index.html">https://www.db-book.com/db7/index.html<i class="fa fa-external-link"></i></span></li><li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xMDU0ODM3OS8=" title="https://book.douban.com/subject/10548379/">https://book.douban.com/subject/10548379/<i class="fa fa-external-link"></i></span></li><li>注: 高等教育出版社有出版英文影印版, 豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yNjA0NTkzMS8=" title="https://book.douban.com/subject/26045931/">https://book.douban.com/subject/26045931/<i class="fa fa-external-link"></i></span></li><li>注: 机械工业出版社有出版英文影印版, 豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yMDQ4MDY5My8=" title="https://book.douban.com/subject/20480693/">https://book.douban.com/subject/20480693/<i class="fa fa-external-link"></i></span></li></ul></li></ul></blockquote><p>— 引用自我的另一篇文章<a href="https://cakebytheoceanluo.github.io/2020/03/10/books/">[DBMS Books] 数据库书籍推荐</a></p><p>我的笔记属于<strong>精读细读</strong>, 大致上我会仔细看对应的部分两次, 然后留下笔记。我的目标是: </p><ul><li>在我<strong>重视部分</strong>笔记会使用原文量的50%。我重视部分大致和<strong>数据库的实现和算法相关</strong>。</li><li>我目前先不处理<strong>不太重视部分</strong>。比如数据库的理论的部分: Relation Algebra, Function Dependence.</li></ul><p>因此我的笔记会强烈依赖于英文原文。笔记对我个人的用途是，在实现的时候可以有很大的帮助和提示(正是因为这个原因，我不会大量更改原文)。对于大家，可以把我的笔记想象成原书的精简版。或者可以读完书以后，那我的笔记去复习。</p><p>我具体会<strong>增加</strong>的地方:</p><ul><li>段落重新排序</li><li>添加少量注释和解释(<strong>使用中文</strong>)</li><li>添加到其它笔记的链接</li><li>重新组织语言</li></ul><p>我具体会<strong>保留</strong>的部分:</p><ul><li>数据库实现相关<ul><li>数据库中的算法和数据结构</li></ul></li><li>各个概念的定义</li><li>各个部分的关联性和优缺点</li></ul><p>我具体会<strong>去掉</strong>的地方:</p><ul><li>非核心例子</li><li>去掉教科书中重复提示的部分</li></ul><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>此系列文章不构成商业行为，若有侵权，我立即删除。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>我在这一篇文章中对我这本书的读书笔记引用进行声明:</p><p>Abraham Silberschatz, Henry F. Korth, S. Sudarshan: <strong>Database System Concepts</strong>, 6th Edition. McGraw-Hill Book Company 2010</p><ul><li>6th Edition: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L2luZGV4Lmh0bWw=" title="https://www.db-book.com/db6/index.html">https://www.db-book.com/db6/index.html<i class="fa fa-external-link"></i></span></li><li>7th Edition: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI3L2luZGV4Lmh0bWw=" title="https://www.db-book.com/db7/index.html">https://www.db-book.com/db7/index.html<i class="fa fa-external-link"></i></span></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;笔记文章链接&quot;&gt;&lt;a href=&quot;#笔记文章链接&quot; class=&quot;headerlink&quot; title=&quot;笔记文章链接&quot;&gt;&lt;/a&gt;笔记文章链接&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Chapter 11 Indexing and Hashing:&lt;ul&gt;
&lt;li&gt;11.6-11.7 Hashing: &lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/04/11/DSC-11-6-11-7-Hashing/&quot;&gt;Database System Concepts 精读 [11.6-11.7] Hashing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此区域持续更新&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Database System Concepts" scheme="https://cakebytheoceanluo.github.io/categories/Database-System-Concepts/"/>
    
    
      <category term="Books" scheme="https://cakebytheoceanluo.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-窗口函数(7)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/09/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-7/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/09/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-7/</id>
    <published>2020-04-09T13:37:29.000Z</published>
    <updated>2020-04-09T13:38:14.738Z</updated>
    
    <content type="html"><![CDATA[<p>在了解了窗口函数后， 我们这次对它进行最后(?)一次练习。我们考虑一个秋有问题，即一些连续的数字是否被使用完。这次的数据集直接存在于SQL语句里面。</p><a id="more"></a><h1 id="秋游问题"><a href="#秋游问题" class="headerlink" title="秋游问题"></a>秋游问题</h1><p>我们用SQL为下面的问题建立一个模型：</p><ul><li>我们在A点到B点游玩，这两点之前有很多路段可以去游玩，而我们以及游玩过其中部分的路段了</li><li><code>trails</code>指所有的路段，这些路段有自己的<code>id</code>去确定唯一性<ul><li>我们一共有两种路段, 分别为<code>id</code>0和1， <code>leg</code>长度为28和15</li></ul></li><li><code>completed</code>指我们已经玩过的路段</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> trails (<span class="keyword">id</span>, leg) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">28</span>) leg</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="number">2</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">15</span>) leg</span><br><span class="line">    ),</span><br><span class="line">     completed (trail_id , leg) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">values</span> (<span class="number">1</span> ,<span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">8</span>), (<span class="number">1</span>, <span class="number">9</span>), (<span class="number">1</span>, <span class="number">22</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">23</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">               (<span class="number">2</span>, <span class="number">11</span>), (<span class="number">2</span>,<span class="number">12</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> completed;</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="完成连续的路段的数量"><a href="#完成连续的路段的数量" class="headerlink" title="完成连续的路段的数量"></a>完成连续的路段的数量</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> trails (<span class="keyword">id</span>, leg) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">28</span>) leg</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="number">2</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">15</span>) leg</span><br><span class="line">    ),</span><br><span class="line">     completed (trail_id , leg) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">values</span> (<span class="number">1</span> ,<span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">8</span>), (<span class="number">1</span>, <span class="number">9</span>), (<span class="number">1</span>, <span class="number">22</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">23</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">               (<span class="number">2</span>, <span class="number">11</span>), (<span class="number">2</span>,<span class="number">12</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span> (*)</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> trail_id,</span><br><span class="line">                    leg - row_number() <span class="keyword">over</span> (</span><br><span class="line">                        <span class="keyword">partition</span> <span class="keyword">by</span> trail_id</span><br><span class="line">                        <span class="keyword">order</span> <span class="keyword">by</span> leg) <span class="keyword">section</span></span><br><span class="line">    <span class="keyword">from</span> completed</span><br><span class="line">) <span class="keyword">as</span> temp;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> count </span><br><span class="line"><span class="comment">-------</span></span><br><span class="line">     5</span><br><span class="line">(1 row)</span><br></pre></td></tr></tbody></table></figure><p>这题中表格的思路是</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> trails (<span class="keyword">id</span>, leg) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">28</span>) leg</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="number">2</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">15</span>) leg</span><br><span class="line">    ),</span><br><span class="line">     completed (trail_id , leg) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">values</span> (<span class="number">1</span> ,<span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">8</span>), (<span class="number">1</span>, <span class="number">9</span>), (<span class="number">1</span>, <span class="number">22</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">23</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">               (<span class="number">2</span>, <span class="number">11</span>), (<span class="number">2</span>,<span class="number">12</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> trail_id,</span><br><span class="line">                leg,</span><br><span class="line">                row_number() <span class="keyword">over</span> (</span><br><span class="line">                    <span class="keyword">partition</span> <span class="keyword">by</span> trail_id</span><br><span class="line">                    <span class="keyword">order</span> <span class="keyword">by</span> leg),</span><br><span class="line">                leg - row_number() <span class="keyword">over</span> (</span><br><span class="line">                    <span class="keyword">partition</span> <span class="keyword">by</span> trail_id</span><br><span class="line">                    <span class="keyword">order</span> <span class="keyword">by</span> leg) <span class="keyword">section</span></span><br><span class="line"><span class="keyword">from</span> completed</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> trail_id, <span class="keyword">section</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> trail_id | leg | row_number | section </span><br><span class="line"><span class="comment">----------+-----+------------+---------</span></span><br><span class="line">        1 |   1 |          1 |       0</span><br><span class="line">        1 |   2 |          2 |       0</span><br><span class="line">        1 |   3 |          3 |       0</span><br><span class="line">        1 |   8 |          4 |       4</span><br><span class="line">        1 |   9 |          5 |       4</span><br><span class="line">        1 |  22 |          6 |      16</span><br><span class="line">        1 |  23 |          7 |      16</span><br><span class="line">        2 |   1 |          1 |       0</span><br><span class="line">        2 |   2 |          2 |       0</span><br><span class="line">        2 |  11 |          3 |       8</span><br><span class="line">        2 |  12 |          4 |       8</span><br><span class="line">(11 rows)</span><br></pre></td></tr></tbody></table></figure><p><code>section</code>值相同的部分，属于连续的路段</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> trails (<span class="keyword">id</span>, leg) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">28</span>) leg</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="number">2</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">15</span>) leg</span><br><span class="line">    ),</span><br><span class="line">     completed (trail_id , leg) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">values</span> (<span class="number">1</span> ,<span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">8</span>), (<span class="number">1</span>, <span class="number">9</span>), (<span class="number">1</span>, <span class="number">22</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">23</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">               (<span class="number">2</span>, <span class="number">11</span>), (<span class="number">2</span>,<span class="number">12</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> trail_id,</span><br><span class="line">                leg - row_number() <span class="keyword">over</span> (</span><br><span class="line">                    <span class="keyword">partition</span> <span class="keyword">by</span> trail_id</span><br><span class="line">                    <span class="keyword">order</span> <span class="keyword">by</span> leg) <span class="keyword">section</span></span><br><span class="line"><span class="keyword">from</span> completed</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> trail_id, <span class="keyword">section</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> trail_id | section </span><br><span class="line"><span class="comment">----------+---------</span></span><br><span class="line">        1 |       0</span><br><span class="line">        1 |       4</span><br><span class="line">        1 |      16</span><br><span class="line">        2 |       0</span><br><span class="line">        2 |       8</span><br><span class="line">(5 rows)</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="求连续路段长度的平均值，最大值和最小值"><a href="#求连续路段长度的平均值，最大值和最小值" class="headerlink" title="求连续路段长度的平均值，最大值和最小值"></a>求连续路段长度的平均值，最大值和最小值</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> trails (<span class="keyword">id</span>, leg) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">28</span>) leg</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="number">2</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">15</span>) leg</span><br><span class="line">    ),</span><br><span class="line">     completed (trail_id , leg) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">values</span> (<span class="number">1</span> ,<span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">8</span>), (<span class="number">1</span>, <span class="number">9</span>), (<span class="number">1</span>, <span class="number">22</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">23</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">               (<span class="number">2</span>, <span class="number">11</span>), (<span class="number">2</span>,<span class="number">12</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(c), <span class="keyword">min</span>(c), <span class="keyword">max</span>(c)</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> c</span><br><span class="line">    <span class="keyword">from</span> (</span><br><span class="line">        <span class="keyword">select</span> trail_id,</span><br><span class="line">        leg - row_number() <span class="keyword">over</span> (</span><br><span class="line">            <span class="keyword">partition</span> <span class="keyword">by</span> trail_id</span><br><span class="line">            <span class="keyword">order</span> <span class="keyword">by</span> leg) <span class="keyword">as</span> <span class="keyword">section</span></span><br><span class="line">        <span class="keyword">from</span> completed</span><br><span class="line">    ) <span class="keyword">as</span> temp_count</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> trail_id , <span class="keyword">section</span></span><br><span class="line">) <span class="keyword">as</span> temp_stat;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">        avg         | min | max </span><br><span class="line"><span class="comment">--------------------+-----+-----</span></span><br><span class="line"> 2.2000000000000000 |   2 |   3</span><br><span class="line">(1 row)</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="对未完成的路段进行分析"><a href="#对未完成的路段进行分析" class="headerlink" title="对未完成的路段进行分析"></a>对未完成的路段进行分析</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> trails (<span class="keyword">id</span>, leg) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">28</span>) leg</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="number">2</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">15</span>) leg</span><br><span class="line">    ),</span><br><span class="line">     completed (trail_id , leg) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">values</span> (<span class="number">1</span> ,<span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">8</span>), (<span class="number">1</span>, <span class="number">9</span>), (<span class="number">1</span>, <span class="number">22</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">23</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">               (<span class="number">2</span>, <span class="number">11</span>), (<span class="number">2</span>,<span class="number">12</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    <span class="keyword">min</span>(leg) <span class="keyword">as</span> firstLeg,</span><br><span class="line">    <span class="keyword">max</span>(leg) <span class="keyword">as</span> LastLeg,</span><br><span class="line">    <span class="keyword">max</span>(leg) - <span class="keyword">min</span>(leg) + <span class="number">1</span> <span class="keyword">as</span> <span class="keyword">length</span>,</span><br><span class="line">    <span class="keyword">section</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>,</span><br><span class="line">           leg,</span><br><span class="line">           leg - row_number() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">order</span> <span class="keyword">by</span> leg) <span class="keyword">section</span></span><br><span class="line">    <span class="keyword">from</span> trails</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> completed c</span><br><span class="line">        <span class="keyword">where</span> trail_id = trails.id</span><br><span class="line">        <span class="keyword">and</span> trails.leg = c.leg</span><br><span class="line">    )</span><br><span class="line">) <span class="keyword">as</span> temp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>, <span class="keyword">section</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">length</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> id | firstleg | lastleg | length | section </span><br><span class="line"><span class="comment">----+----------+---------+--------+---------</span></span><br><span class="line">  2 |       13 |      15 |      3 |       4</span><br><span class="line">  1 |        4 |       7 |      4 |       3</span><br><span class="line">  1 |       24 |      28 |      5 |       7</span><br><span class="line">  2 |        3 |      10 |      8 |       2</span><br><span class="line">  1 |       10 |      21 |     12 |       5</span><br><span class="line">(5 rows)</span><br></pre></td></tr></tbody></table></figure><p>思路:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> trails (<span class="keyword">id</span>, leg) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">28</span>) leg</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="number">2</span>, leg</span><br><span class="line">    <span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">15</span>) leg</span><br><span class="line">    ),</span><br><span class="line">     completed (trail_id , leg) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">values</span> (<span class="number">1</span> ,<span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">8</span>), (<span class="number">1</span>, <span class="number">9</span>), (<span class="number">1</span>, <span class="number">22</span>),</span><br><span class="line">               (<span class="number">1</span>, <span class="number">23</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">               (<span class="number">2</span>, <span class="number">11</span>), (<span class="number">2</span>,<span class="number">12</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,</span><br><span class="line">       leg,</span><br><span class="line">       row_number() <span class="keyword">over</span> w,</span><br><span class="line">       leg - row_number() <span class="keyword">over</span> w <span class="keyword">section</span></span><br><span class="line"><span class="keyword">from</span> trails</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> completed c</span><br><span class="line">    <span class="keyword">where</span> trail_id = trails.id</span><br><span class="line">    <span class="keyword">and</span> trails.leg = c.leg</span><br><span class="line">)</span><br><span class="line"><span class="keyword">window</span> w <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">id</span></span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> leg</span><br><span class="line">)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>, leg;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> id | leg | row_number | section </span><br><span class="line"><span class="comment">----+-----+------------+---------</span></span><br><span class="line">  1 |   4 |          1 |       3</span><br><span class="line">  1 |   5 |          2 |       3</span><br><span class="line">  1 |   6 |          3 |       3</span><br><span class="line">  1 |   7 |          4 |       3</span><br><span class="line">  1 |  10 |          5 |       5</span><br><span class="line">  1 |  11 |          6 |       5</span><br><span class="line">  1 |  12 |          7 |       5</span><br><span class="line">  1 |  13 |          8 |       5</span><br><span class="line">  1 |  14 |          9 |       5</span><br><span class="line">  1 |  15 |         10 |       5</span><br><span class="line">  1 |  16 |         11 |       5</span><br><span class="line">  1 |  17 |         12 |       5</span><br><span class="line">  1 |  18 |         13 |       5</span><br><span class="line">  1 |  19 |         14 |       5</span><br><span class="line">  1 |  20 |         15 |       5</span><br><span class="line">  1 |  21 |         16 |       5</span><br><span class="line">  1 |  24 |         17 |       7</span><br><span class="line">  1 |  25 |         18 |       7</span><br><span class="line">  1 |  26 |         19 |       7</span><br><span class="line">  1 |  27 |         20 |       7</span><br><span class="line">  1 |  28 |         21 |       7</span><br><span class="line">  2 |   3 |          1 |       2</span><br><span class="line">  2 |   4 |          2 |       2</span><br><span class="line">  2 |   5 |          3 |       2</span><br><span class="line">  2 |   6 |          4 |       2</span><br><span class="line">  2 |   7 |          5 |       2</span><br><span class="line">  2 |   8 |          6 |       2</span><br><span class="line">  2 |   9 |          7 |       2</span><br><span class="line">  2 |  10 |          8 |       2</span><br><span class="line">  2 |  13 |          9 |       4</span><br><span class="line">  2 |  14 |         10 |       4</span><br><span class="line">  2 |  15 |         11 |       4</span><br><span class="line">(32 rows)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在了解了窗口函数后， 我们这次对它进行最后(?)一次练习。我们考虑一个秋有问题，即一些连续的数字是否被使用完。这次的数据集直接存在于SQL语句里面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-窗口函数(6)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/08/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-6/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/08/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-6/</id>
    <published>2020-04-08T17:34:47.000Z</published>
    <updated>2020-04-08T17:44:29.206Z</updated>
    
    <content type="html"><![CDATA[<p>我们继续练习窗口函数，这次我们使用TPC-H数据集来练习。TPC-H是一个商业决策方向的数据集，因此里面有很多金额/销售额/年度销售额/国家销售额等等OLAP的数目可以被计算。</p><a id="more"></a><h1 id="TPC-H-数据集"><a href="#TPC-H-数据集" class="headerlink" title="TPC-H 数据集"></a>TPC-H 数据集</h1><p>我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注<code>select...from...where</code>这种读操作，分析query　(analytical query)。<br><code>TPC-H</code>数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p><p><strong>本地载入改数据集</strong>的方法见我的博客两篇文章:</p><ul><li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5TPC-H%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS] PostgreSQL 导入 TPC-H 数据集</a></li><li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS] PostgreSQL 导入数据集</a></li></ul><p><br><br><br></p><h2 id="sets-rollup-cube"><a href="#sets-rollup-cube" class="headerlink" title="sets, rollup, cube"></a>sets, rollup, cube</h2><p><img data-src="https://cakebytheoceanluo.github.io/images/FDE/chap3/36.jpg" alt="36.jpg"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">group by grouping sets ((a, b), (a), ())</span><br><span class="line">``` </span><br><span class="line">= </span><br><span class="line">```SQL</span><br><span class="line">group by rollup (a, b)</span><br></pre></td></tr></tbody></table></figure><p>=<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a, b, <span class="keyword">sum</span>(x) <span class="keyword">from</span> r <span class="keyword">group</span> <span class="keyword">by</span> a, b</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> a, <span class="literal">null</span>, <span class="keyword">sum</span>(x) <span class="keyword">from</span> r <span class="keyword">group</span> <span class="keyword">by</span> a</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="literal">null</span>, <span class="literal">null</span>, <span class="keyword">sum</span>(x) <span class="keyword">from</span> r;</span><br></pre></td></tr></tbody></table></figure><p></p><p><br><br><br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">group by cube (a, b)</span><br><span class="line">``` </span><br><span class="line">= </span><br><span class="line">```SQL</span><br><span class="line">group by grouping sets ((a, b), (a), (b), ())</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><ul><li>其中<code>()</code>指的是空集</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x, y) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                        (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                        (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">                        (<span class="literal">NULL</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(y)</span><br><span class="line"><span class="keyword">from</span> testdata</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> x;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> x | sum </span><br><span class="line"><span class="comment">---+-----</span></span><br><span class="line">   |   4</span><br><span class="line"> 1 |   5</span><br><span class="line">(2 rows)</span><br></pre></td></tr></tbody></table></figure><p><br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x, y) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                        (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                        (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">                        (<span class="literal">NULL</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(y), <span class="keyword">grouping</span>(x)</span><br><span class="line"><span class="keyword">from</span> testdata</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">rollup</span>(x);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> x | sum | grouping </span><br><span class="line"><span class="comment">---+-----+----------</span></span><br><span class="line">   |   9 |        1</span><br><span class="line">   |   4 |        0</span><br><span class="line"> 1 |   5 |        0</span><br><span class="line">(3 rows)</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><h3 id="计算各个nation-region-all-全球-的revenue"><a href="#计算各个nation-region-all-全球-的revenue" class="headerlink" title="计算各个nation, region, all(全球)的revenue:"></a>计算各个nation, region, all(全球)的revenue:</h3><p><img data-src="https://cakebytheoceanluo.github.io/images/FDE/chap3/37.jpg" alt="37.jpg"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(o_totalprice) <span class="keyword">as</span> revenue, r_name, n_name</span><br><span class="line"><span class="keyword">from</span> orders, customer, nation, region</span><br><span class="line"><span class="keyword">where</span> o_custkey = c_custkey <span class="keyword">and</span> c_nationkey = n_nationkey <span class="keyword">and</span> n_regionkey = r_regionkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">rollup</span>(r_name, n_name)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> r_name, n_name;</span><br></pre></td></tr></tbody></table></figure><h4 id="grouping"><a href="#grouping" class="headerlink" title="grouping"></a>grouping</h4><p>下面这个版本在上面SQL基础上加上了<code>grouping</code>, 它代表<strong>被聚合成组的个数</strong>：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(o_totalprice) <span class="keyword">as</span> revenue, r_name, n_name, <span class="keyword">grouping</span>(r_name, n_name)</span><br><span class="line"><span class="keyword">from</span> orders, customer, nation, region</span><br><span class="line"><span class="keyword">where</span> o_custkey = c_custkey <span class="keyword">and</span> c_nationkey = n_nationkey <span class="keyword">and</span> n_regionkey = r_regionkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">rollup</span>(r_name, n_name)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> r_name, n_name;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">     revenue     |          r_name           |          n_name           | grouping </span><br><span class="line"><span class="comment">-----------------+---------------------------+---------------------------+----------</span></span><br><span class="line">   9065723966.78 | AFRICA                    | ALGERIA                   |        0</span><br><span class="line">   9032642974.38 | AFRICA                    | ETHIOPIA                  |        0</span><br><span class="line">   8897163266.18 | AFRICA                    | KENYA                     |        0</span><br><span class="line">   8985579085.22 | AFRICA                    | MOROCCO                   |        0</span><br><span class="line">   9249114609.66 | AFRICA                    | MOZAMBIQUE                |        0</span><br><span class="line">  45230223902.22 | AFRICA                    |                           |        1</span><br><span class="line">   9022490350.05 | AMERICA                   | ARGENTINA                 |        0</span><br><span class="line">   9107367126.70 | AMERICA                   | BRAZIL                    |        0</span><br><span class="line">   9143635385.19 | AMERICA                   | CANADA                    |        0</span><br><span class="line">   8946481134.38 | AMERICA                   | PERU                      |        0</span><br><span class="line">   9086969258.89 | AMERICA                   | UNITED STATES             |        0</span><br><span class="line">  45306943255.21 | AMERICA                   |                           |        1</span><br><span class="line">   9161685172.34 | ASIA                      | CHINA                     |        0</span><br><span class="line">   9035791922.09 | ASIA                      | INDIA                     |        0</span><br><span class="line">   9300830039.29 | ASIA                      | INDONESIA                 |        0</span><br><span class="line">   8993418470.64 | ASIA                      | JAPAN                     |        0</span><br><span class="line">   9121689438.20 | ASIA                      | VIETNAM                   |        0</span><br><span class="line">  45613415042.56 | ASIA                      |                           |        1</span><br><span class="line">   9318715232.78 | EUROPE                    | FRANCE                    |        0</span><br><span class="line">   9039194008.74 | EUROPE                    | GERMANY                   |        0</span><br><span class="line">   9196280024.51 | EUROPE                    | ROMANIA                   |        0</span><br><span class="line">   9282323186.28 | EUROPE                    | RUSSIA                    |        0</span><br><span class="line">   8956753007.40 | EUROPE                    | UNITED KINGDOM            |        0</span><br><span class="line">  45793265459.71 | EUROPE                    |                           |        1</span><br><span class="line">   8925726169.17 | MIDDLE EAST               | EGYPT                     |        0</span><br><span class="line">   9025552858.09 | MIDDLE EAST               | IRAN                      |        0</span><br><span class="line">   8892603095.99 | MIDDLE EAST               | IRAQ                      |        0</span><br><span class="line">   9229296044.98 | MIDDLE EAST               | JORDAN                    |        0</span><br><span class="line">   8812280619.53 | MIDDLE EAST               | SAUDI ARABIA              |        0</span><br><span class="line">  44885458787.76 | MIDDLE EAST               |                           |        1</span><br><span class="line"> 226829306447.46 |                           |                           |        3</span><br><span class="line">(31 rows)</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><h2 id="cube"><a href="#cube" class="headerlink" title="cube"></a><code>cube</code></h2><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><ul><li>求出所有要求的lineitem的trade volume(即l_quantity * l_extendedprice)的总和<ul><li>这些lineitem被要求：对应<code>nation.n_name</code>是<code>UNITED STATES</code>, 对应的<code>c_mktsegment</code>是<code>AUTOMOBILE</code></li></ul></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span> (l_quantity * l_extendedprice)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    lineitem,</span><br><span class="line">    orders,</span><br><span class="line">    customer,</span><br><span class="line">    nation</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    l_orderkey = o_orderkey <span class="keyword">and</span></span><br><span class="line">    o_custkey = c_custkey <span class="keyword">and</span></span><br><span class="line">    c_nationkey = n_nationkey <span class="keyword">and</span></span><br><span class="line">    c_mktsegment = <span class="string">'AUTOMOBILE'</span> <span class="keyword">and</span></span><br><span class="line">    n_name = <span class="string">'UNITED STATES'</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>求所有要求的lineitem的trade volume的总和<ul><li>这些lineitem被要求是来自被同一个nation的supplier和customer</li></ul></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">sum</span>(l_quantity * l_extendedprice)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    lineitem,</span><br><span class="line">    orders,</span><br><span class="line">    customer,</span><br><span class="line">    supplier</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    l_orderkey = o_orderkey <span class="keyword">and</span></span><br><span class="line">    o_custkey = c_custkey <span class="keyword">and</span></span><br><span class="line">    l_suppkey = s_suppkey <span class="keyword">and</span></span><br><span class="line">    s_nationkey = c_nationkey;</span><br></pre></td></tr></tbody></table></figure><p>为了对类似这些Query进行加速，我们可以用<code>cube</code>函数来物质化(materialize)预先计算(precompute)集合(aggregates)。</p><p><br></p><h3 id="物质化一个在维度c-mktsegment-c-nation-s-nation上的cube-在组里面对l-quantity-l-extendedprice求和"><a href="#物质化一个在维度c-mktsegment-c-nation-s-nation上的cube-在组里面对l-quantity-l-extendedprice求和" class="headerlink" title="物质化一个在维度c_mktsegment, c_nation, s_nation上的cube, 在组里面对l_quantity * l_extendedprice求和"></a>物质化一个在维度<code>c_mktsegment, c_nation, s_nation</code>上的<code>cube</code>, 在组里面对<code>l_quantity * l_extendedprice</code>求和</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> volume_cube (</span><br><span class="line">    volume <span class="built_in">bigint</span>,</span><br><span class="line">    c_mktsegment <span class="built_in">character</span> (<span class="number">10</span>),</span><br><span class="line">    c_nationkey <span class="built_in">integer</span>,</span><br><span class="line">    s_nationkey <span class="built_in">integer</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> volume_cube2 (</span><br><span class="line">    volume <span class="built_in">bigint</span>,</span><br><span class="line">    c_mktsegment <span class="built_in">character</span> (<span class="number">10</span>),</span><br><span class="line">    c_nationkey <span class="built_in">integer</span>,</span><br><span class="line">    s_nationkey <span class="built_in">integer</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> volume_cube2 <span class="keyword">select</span></span><br><span class="line">    <span class="keyword">sum</span>(l_quantity * l_extendedprice),</span><br><span class="line">    c_mktsegment,</span><br><span class="line">    c_nationkey,</span><br><span class="line">    s_nationkey</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    lineitem,</span><br><span class="line">    orders,</span><br><span class="line">    customer,</span><br><span class="line">    supplier</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    l_orderkey = o_orderkey <span class="keyword">and</span></span><br><span class="line">    o_custkey = c_custkey <span class="keyword">and</span></span><br><span class="line">    l_suppkey = s_suppkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    <span class="keyword">cube</span> (</span><br><span class="line">    c_mktsegment,</span><br><span class="line">    c_nationkey,</span><br><span class="line">    s_nationkey</span><br><span class="line">    );</span><br></pre></td></tr></tbody></table></figure><h3 id="改写引入中的两个例子"><a href="#改写引入中的两个例子" class="headerlink" title="改写引入中的两个例子"></a>改写引入中的两个例子</h3><p>可以对运行时间进行比较，在<code>psql</code>命令行中输入<code>\timing</code>:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tpch1=# \timing</span><br><span class="line">Timing is on.</span><br></pre></td></tr></tbody></table></figure><p><br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> volume</span><br><span class="line"><span class="keyword">from</span> volume_cube2, nation</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    c_mktsegment = <span class="string">'AUTOMOBILE'</span> <span class="keyword">and</span></span><br><span class="line">    c_nationkey = n_nationkey <span class="keyword">and</span></span><br><span class="line">    n_name = <span class="string">'UNITED STATES'</span> <span class="keyword">and</span></span><br><span class="line">    s_nationkey <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   volume    </span><br><span class="line"><span class="comment">-------------</span></span><br><span class="line"> 59435954414</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 1.048 ms</span><br></pre></td></tr></tbody></table></figure><p>&lt;/br&gt;<br>&lt;/br&gt;</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(volume)</span><br><span class="line"><span class="keyword">from</span> volume_cube2</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    c_nationkey = s_nationkey <span class="keyword">and</span></span><br><span class="line">    c_mktsegment <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     sum      </span><br><span class="line"><span class="comment">--------------</span></span><br><span class="line"> 309577834070</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 1.505 ms</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><p>下面是引入例子所需要的时间，它们很慢：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">       sum        </span><br><span class="line"><span class="comment">------------------</span></span><br><span class="line"> 59435954414.0900</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 1301.876 ms (00:01.302)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">        sum        </span><br><span class="line"><span class="comment">-------------------</span></span><br><span class="line"> 309577834069.9700</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 4526.136 ms (00:04.526)</span><br></pre></td></tr></tbody></table></figure><h3 id="考虑物质化一个在维度p-partkey-s-partkey-o-orderkey-c-custkey上的cube是否合理"><a href="#考虑物质化一个在维度p-partkey-s-partkey-o-orderkey-c-custkey上的cube是否合理" class="headerlink" title="考虑物质化一个在维度p_partkey, s_partkey, o_orderkey, c_custkey上的cube是否合理"></a>考虑物质化一个在维度<code>p_partkey, s_partkey, o_orderkey, c_custkey</code>上的<code>cube</code>是否合理</h3><p>即使是唯一的元素(unique elements)的个数：200k <em> 800k </em> 1500k * 150k = 3.6e22</p><p>这个数字是cube至少拥有的条目总数的下限</p><p>假设每个元素都是4Byte的Int，预先计算需要的空间是：1.44e23 Byte = 192 Zebibyte </p><p>这个空间占用过大，这个考虑是非常不合理的</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们继续练习窗口函数，这次我们使用TPC-H数据集来练习。TPC-H是一个商业决策方向的数据集，因此里面有很多金额/销售额/年度销售额/国家销售额等等OLAP的数目可以被计算。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="TUM-IN2326" scheme="https://cakebytheoceanluo.github.io/categories/TUM-IN2326/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-窗口函数(5)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/06/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-5/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/06/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-5/</id>
    <published>2020-04-06T13:16:29.000Z</published>
    <updated>2020-04-06T13:46:10.936Z</updated>
    
    <content type="html"><![CDATA[<p>我们继续练习窗口函数，这次我们使用TPC-H数据集来练习。TPC-H是一个商业决策方向的数据集，因此里面有很多金额/销售额/年度销售额/国家销售额等等OLAP的数目可以被计算。</p><a id="more"></a><h1 id="TPC-H-数据集"><a href="#TPC-H-数据集" class="headerlink" title="TPC-H 数据集"></a>TPC-H 数据集</h1><p>我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注<code>select...from...where</code>这种读操作，分析query　(analytical query)。<br><code>TPC-H</code>数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p><p><strong>本地载入改数据集</strong>的方法见我的博客两篇文章:</p><ul><li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5TPC-H%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS] PostgreSQL 导入 TPC-H 数据集</a></li><li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS] PostgreSQL 导入数据集</a></li></ul><h2 id="统计每一个customer的总o-totalprice"><a href="#统计每一个customer的总o-totalprice" class="headerlink" title="统计每一个customer的总o_totalprice"></a>统计每一个customer的总o_totalprice</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o_custkey, o_orderdate,</span><br><span class="line">       <span class="keyword">sum</span>(o_totalprice) <span class="keyword">over</span> <span class="comment">-- window function</span></span><br><span class="line">    (<span class="keyword">partition</span> <span class="keyword">by</span> o_custkey <span class="comment">-- partitioning clause</span></span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> o_orderdate <span class="comment">-- ordering clause</span></span><br><span class="line">    <span class="keyword">range</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span></span><br><span class="line">    ) <span class="comment">-- framing clause</span></span><br><span class="line">    <span class="keyword">as</span> o_totalprice_sum</span><br><span class="line"><span class="keyword">from</span> orders;</span><br></pre></td></tr></tbody></table></figure><p>课件上面的版本其实不能充分显示出window function的作用，我们可以用下面的版本，同时看一下对应的输出：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o_custkey, o_orderdate, o_totalprice,</span><br><span class="line">       <span class="keyword">sum</span>(o_totalprice) <span class="keyword">over</span> <span class="comment">-- window function</span></span><br><span class="line">    (<span class="keyword">partition</span> <span class="keyword">by</span> o_custkey <span class="comment">-- partitioning clause</span></span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> o_orderdate <span class="comment">-- ordering clause</span></span><br><span class="line">    <span class="keyword">range</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span></span><br><span class="line">    ) <span class="comment">-- framing clause</span></span><br><span class="line">    <span class="keyword">as</span> o_totalprice_sum</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_custkey, o_orderdate;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> o_custkey | o_orderdate | o_totalprice | o_totalprice_sum </span><br><span class="line"><span class="comment">-----------+-------------+--------------+------------------</span></span><br><span class="line">         1 | 1992-10-21  |    202660.52 |        202660.52</span><br><span class="line">         1 | 1993-08-05  |      4225.26 |        206885.78</span><br><span class="line">         1 | 1997-05-09  |    113954.89 |        320840.67</span><br><span class="line">         1 | 1997-11-21  |     39835.54 |        360676.21</span><br><span class="line">         1 | 1998-05-31  |    159171.69 |        519847.90</span><br><span class="line">         2 | 1992-07-08  |     44777.63 |         44777.63</span><br><span class="line">         2 | 1992-08-28  |     89399.40 |        134177.03</span><br><span class="line">         2 | 1993-03-09  |    169847.63 |        304024.66</span><br><span class="line">         2 | 1993-07-31  |     29305.47 |        333330.13</span><br><span class="line">         2 | 1993-12-31  |    179984.42 |        513314.55</span><br><span class="line">         2 | 1994-04-20  |     41433.48 |        554748.03</span><br><span class="line">         2 | 1996-08-16  |     63873.14 |        618621.17</span><br><span class="line">         2 | 1997-06-09  |     24362.39 |        642983.56</span><br><span class="line">         2 | 1998-05-28  |    140363.70 |        783347.26</span><br><span class="line">         .................................................</span><br></pre></td></tr></tbody></table></figure><p>我们可以关注<code>o_totalprice_sum</code>这个字段，它对每一个独立的<code>o_custkey</code>的不同<code>o_orderdate</code>的<code>o_totalprice</code>进行累加。</p><ul><li><code>o_custkey</code>: partition</li><li><code>o_orderdate</code>: order by 进行排序</li><li><code>range between unbounded preceding and current row</code>： 从这个<code>o_custkey</code>第一个<code>o_orderdate</code>到当前<code>o_orderdate</code></li></ul><p><br></p><p>针对这第一个例子，我们来用<strong>不带window function的版本</strong>去完成同样这个任务，<strong>统计每一个customer的总o_totalprice</strong>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o1.o_custkey, o1.o_orderdate, o1.o_totalprice, <span class="keyword">sum</span>(o2.o_totalprice) <span class="keyword">as</span> o_totalprice_sum</span><br><span class="line"><span class="keyword">from</span> orders o1, orders o2</span><br><span class="line"><span class="keyword">where</span> o1.o_custkey = o2.o_custkey <span class="keyword">and</span> o1.o_orderdate &gt;= o2.o_orderdate</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> o1.o_custkey, o1.o_orderdate, o1.o_totalprice</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o1.o_custkey, o1.o_orderdate;</span><br></pre></td></tr></tbody></table></figure><p>这里还需要提一下，上面这个不带window function的版本运行很慢，而带window function会快很多。(我在PostgreSQL和HyPer均比较过。)</p><p><br></p><h2 id="累计每一个o-orderdate-customer的o-totalprice，按照o-custkey来顺序累加"><a href="#累计每一个o-orderdate-customer的o-totalprice，按照o-custkey来顺序累加" class="headerlink" title="累计每一个o_orderdate customer的o_totalprice，按照o_custkey来顺序累加"></a>累计每一个o_orderdate customer的o_totalprice，按照o_custkey来顺序累加</h2><p>累计每一个o_orderdate(每一天)customer的o_totalprice，按照o_custkey来顺序累加</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o_orderdate, o_custkey, o_totalprice, <span class="keyword">sum</span>(o_totalprice) <span class="keyword">over</span></span><br><span class="line">    (<span class="keyword">partition</span> <span class="keyword">by</span> o_orderdate</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> o_custkey</span><br><span class="line">    <span class="keyword">range</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span></span><br><span class="line">    ) <span class="keyword">as</span> o_totalprice_sum</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_orderdate, o_custkey;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> o_orderdate | o_custkey | o_totalprice | o_totalprice_sum </span><br><span class="line"><span class="comment">-------------+-----------+--------------+------------------</span></span><br><span class="line"> 1992-01-01  |        34 |     86534.05 |         86534.05</span><br><span class="line"> 1992-01-01  |        92 |     24660.06 |        111194.11</span><br><span class="line"> 1992-01-02  |        17 |     40975.96 |         40975.96</span><br><span class="line"> 1992-01-02  |        49 |    210713.88 |        251689.84</span><br><span class="line"> 1992-01-02  |        64 |    127527.05 |        379216.89</span><br><span class="line"> 1992-01-04  |        70 |     84053.93 |         84053.93</span><br><span class="line"> 1992-01-06  |        11 |    118570.79 |        118570.79</span><br><span class="line"> 1992-01-06  |        37 |     91795.13 |        210365.92</span><br><span class="line"> 1992-01-07  |        62 |     58168.07 |         58168.07</span><br><span class="line"> 1992-01-09  |        13 |    145040.38 |        145040.38</span><br><span class="line"> 1992-01-09  |        25 |    145906.24 |        290946.62</span><br><span class="line"> .........................................................</span><br></pre></td></tr></tbody></table></figure><p>不带window function的版本：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o1.o_orderdate, o1.o_custkey, o1.o_totalprice, <span class="keyword">sum</span>(o2.o_totalprice) <span class="keyword">as</span> o_totalprice_sum</span><br><span class="line"><span class="keyword">from</span> orders o1, orders o2</span><br><span class="line"><span class="keyword">where</span> o1.o_orderdate = o2.o_orderdate <span class="keyword">and</span> o1.o_custkey &gt;= o2.o_custkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> o1.o_orderdate, o1.o_custkey, o1.o_totalprice</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_orderdate, o_custkey;</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="计算每一个GERMANY的customer每一年的running-sum-o-totalprice"><a href="#计算每一个GERMANY的customer每一年的running-sum-o-totalprice" class="headerlink" title="计算每一个GERMANY的customer每一年的running sum(o_totalprice)"></a>计算每一个GERMANY的customer每一年的running sum(o_totalprice)</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> base_table <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> c_custkey, <span class="keyword">extract</span>(<span class="keyword">year</span> <span class="keyword">from</span> o_orderdate) <span class="keyword">as</span> <span class="keyword">year</span>, <span class="keyword">sum</span>(o_totalprice) <span class="keyword">as</span> yr_revernue</span><br><span class="line">    <span class="keyword">from</span> nation, customer, orders</span><br><span class="line">    <span class="keyword">where</span> n_name = <span class="string">'GERMANY'</span> <span class="keyword">and</span> n_nationkey = c_nationkey <span class="keyword">and</span> c_custkey = o_custkey</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> c_custkey, <span class="keyword">year</span></span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> c_custkey, <span class="keyword">year</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *,</span><br><span class="line">       <span class="keyword">sum</span>(yr_revernue) <span class="keyword">over</span> (</span><br><span class="line">           <span class="keyword">partition</span> <span class="keyword">by</span> c_custkey</span><br><span class="line">           <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">year</span></span><br><span class="line">           <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">following</span></span><br><span class="line">           ) <span class="keyword">as</span> running_sum</span><br><span class="line"><span class="keyword">from</span> base_table;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">c_custkey | year | yr_revernue | running_sum </span><br><span class="line"><span class="comment">-----------+------+-------------+-------------</span></span><br><span class="line">        62 | 1992 |   169991.32 |   169991.32</span><br><span class="line">        62 | 1993 |   174385.47 |   344376.79</span><br><span class="line">        62 | 1994 |    89262.19 |   433638.98</span><br><span class="line">        62 | 1995 |   526408.33 |   960047.31</span><br><span class="line">        62 | 1996 |   412013.97 |  1372061.28</span><br><span class="line">        62 | 1997 |   286185.97 |  1658247.25</span><br><span class="line">        62 | 1998 |   397422.69 |  2055669.94</span><br><span class="line">        71 | 1992 |   403017.41 |   403017.41</span><br><span class="line">        71 | 1993 |   348239.45 |   751256.86</span><br><span class="line">        71 | 1994 |   270189.86 |  1021446.72</span><br><span class="line">        71 | 1995 |   239565.38 |  1261012.10</span><br><span class="line">        71 | 1997 |   203579.58 |  1464591.68</span><br><span class="line">        71 | 1998 |   174001.98 |  1638593.66</span><br><span class="line">        .....................................</span><br></pre></td></tr></tbody></table></figure><p>&lt;/br&gt;</p><h3 id="对不同国家的order数量进行排序，选出前几名"><a href="#对不同国家的order数量进行排序，选出前几名" class="headerlink" title="对不同国家的order数量进行排序，选出前几名"></a>对不同国家的order数量进行排序，选出前几名</h3><p><img data-src="https://cakebytheoceanluo.github.io/images/FDE/chap3/28.jpg" alt="28.jpg"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *, </span><br><span class="line">        <span class="keyword">case</span> (<span class="keyword">rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> c <span class="keyword">desc</span>)) </span><br><span class="line">              <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">'gold'</span> </span><br><span class="line">              <span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">'silver'</span> </span><br><span class="line">              <span class="keyword">when</span> <span class="number">3</span> <span class="keyword">then</span> <span class="string">'bronze'</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> c_custkey, <span class="keyword">count</span>(*) <span class="keyword">as</span> c</span><br><span class="line">    <span class="keyword">from</span> customer <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders</span><br><span class="line">    <span class="keyword">on</span> o_custkey = c_custkey</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> c_custkey) <span class="keyword">as</span> tmp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c_custkey, <span class="keyword">count</span>(*) <span class="keyword">as</span> c,</span><br><span class="line">       <span class="keyword">rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span>(*) <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="keyword">rank</span>,</span><br><span class="line">       <span class="keyword">case</span> (<span class="keyword">rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span>(*) <span class="keyword">desc</span>))  </span><br><span class="line">             <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">'gold'</span> </span><br><span class="line">             <span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">'silver'</span> </span><br><span class="line">             <span class="keyword">when</span> <span class="number">3</span> <span class="keyword">then</span> <span class="string">'bronze'</span> <span class="keyword">else</span> <span class="string">' '</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> customer <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders</span><br><span class="line"><span class="keyword">on</span> o_custkey = c_custkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c_custkey</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> c_custkey | c  | case </span><br><span class="line"><span class="comment">-----------+----+------</span></span><br><span class="line">      3451 | 41 | gold</span><br><span class="line">    102022 | 41 | gold</span><br><span class="line">    102004 | 41 | gold</span><br><span class="line">    122623 | 40 | </span><br><span class="line">     79300 | 40 | </span><br><span class="line">    117082 | 40 | </span><br><span class="line">     69682 | 39 | </span><br><span class="line">    143500 | 39 | </span><br><span class="line">    129637 | 38 | </span><br><span class="line">    124048 | 38 |</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *, </span><br><span class="line">       <span class="keyword">case</span> (<span class="keyword">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> c <span class="keyword">desc</span>)) </span><br><span class="line">             <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">'gold'</span> </span><br><span class="line">             <span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">'silver'</span> </span><br><span class="line">             <span class="keyword">when</span> <span class="number">3</span> <span class="keyword">then</span> <span class="string">'bronze'</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> c_custkey, <span class="keyword">count</span>(*) <span class="keyword">as</span> c</span><br><span class="line">    <span class="keyword">from</span> customer <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders</span><br><span class="line">    <span class="keyword">on</span> o_custkey = c_custkey</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> c_custkey) <span class="keyword">as</span> tmp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c_custkey, <span class="keyword">count</span>(*) <span class="keyword">as</span> c,</span><br><span class="line">       <span class="keyword">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span>(*) <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="keyword">rank</span>,</span><br><span class="line">       <span class="keyword">case</span> (<span class="keyword">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span>(*) <span class="keyword">desc</span>))  </span><br><span class="line">             <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">'gold'</span> </span><br><span class="line">             <span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">'silver'</span> </span><br><span class="line">             <span class="keyword">when</span> <span class="number">3</span> <span class="keyword">then</span> <span class="string">'bronze'</span> <span class="keyword">else</span> <span class="string">' '</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> customer <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders</span><br><span class="line"><span class="keyword">on</span> o_custkey = c_custkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c_custkey</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> c_custkey | c  |  case  </span><br><span class="line"><span class="comment">-----------+----+--------</span></span><br><span class="line">      3451 | 41 | gold</span><br><span class="line">    102022 | 41 | gold</span><br><span class="line">    102004 | 41 | gold</span><br><span class="line">    122623 | 40 | silver</span><br><span class="line">     79300 | 40 | silver</span><br><span class="line">    117082 | 40 | silver</span><br><span class="line">     69682 | 39 | bronze</span><br><span class="line">    143500 | 39 | bronze</span><br><span class="line">    129637 | 38 | </span><br><span class="line">    124048 | 38 |</span><br></pre></td></tr></tbody></table></figure><p>给出了两种不同方法，取决于我们怎么定义奖牌(怎么定义排名)。</p><p><br><br><br>s</p><h3 id="求每一年的revenue的百分比比前一年的变化："><a href="#求每一年的revenue的百分比比前一年的变化：" class="headerlink" title="求每一年的revenue的百分比比前一年的变化："></a>求每一年的revenue的百分比比前一年的变化：</h3><p><img data-src="https://cakebytheoceanluo.github.io/images/FDE/chap3/29.jpg" alt="29.jpg"></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> orders_with_years <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> * , <span class="keyword">extract</span>(<span class="keyword">year</span> <span class="keyword">from</span> o_orderdate) <span class="keyword">as</span> <span class="keyword">year</span></span><br><span class="line">    <span class="keyword">from</span> orders</span><br><span class="line">    ), tmp_re <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">year</span>, <span class="keyword">sum</span>(o_totalprice) <span class="keyword">as</span> revenue</span><br><span class="line">    <span class="keyword">from</span> orders_with_years</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">year</span></span><br><span class="line">    ), tmp_re_comp <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *, lag(revenue, <span class="number">1</span>, <span class="literal">null</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">year</span>) <span class="keyword">as</span> prev</span><br><span class="line">    <span class="keyword">from</span> tmp_re</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *, <span class="keyword">round</span>(<span class="number">100</span> * ((revenue - prev) / prev), <span class="number">2</span>) <span class="keyword">as</span> differ_percentage</span><br><span class="line"><span class="keyword">from</span> tmp_re_comp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">year</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> year |    revenue     |      prev      | differ_percentage </span><br><span class="line"><span class="comment">------+----------------+----------------+-------------------</span></span><br><span class="line"> 1992 | 34330674052.43 |                |                  </span><br><span class="line"> 1993 | 34340410079.03 | 34330674052.43 |              0.03</span><br><span class="line"> 1994 | 34416369052.97 | 34340410079.03 |              0.22</span><br><span class="line"> 1995 | 34546133183.60 | 34416369052.97 |              0.38</span><br><span class="line"> 1996 | 34609364760.86 | 34546133183.60 |              0.18</span><br><span class="line"> 1997 | 34373633413.04 | 34609364760.86 |             -0.68</span><br><span class="line"> 1998 | 20212721905.53 | 34373633413.04 |            -41.20</span><br></pre></td></tr></tbody></table></figure><hr><p>引用: </p><p>课件: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvY2hhcHRlcjMucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们继续练习窗口函数，这次我们使用TPC-H数据集来练习。TPC-H是一个商业决策方向的数据集，因此里面有很多金额/销售额/年度销售额/国家销售额等等OLAP的数目可以被计算。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="TUM-IN2326" scheme="https://cakebytheoceanluo.github.io/categories/TUM-IN2326/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-窗口函数(4)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/05/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-4/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/05/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-4/</id>
    <published>2020-04-05T18:08:57.000Z</published>
    <updated>2020-04-05T18:09:42.250Z</updated>
    
    <content type="html"><![CDATA[<p>在前三篇文章中我们基本上认识了window function。这次我们有具体的数据集去进行大量练习(绝大部分是排名)。</p><a id="more"></a><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注<code>select...from...where</code>这种读操作，分析query　(analytical query)。<br>数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p><p>架构 Schema:<br><img data-src="https://db.in.tum.de/teaching/ws1920/grundlagen/uni.png?lang=de" alt="schema_de"></p><p><img data-src="https://hyper-db.de/uniEngl.png" alt="schema_en"></p><p>下载:<br><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vdW5pX215c3FsLnNxbD9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de<i class="fa fa-external-link"></i></span></p><p>Schma和大部分SQL语句来自<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL2tlbXBlci8/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/kemper/?lang=de">Prof. Alfons Kemper, Ph.D.<i class="fa fa-external-link"></i></span>的课件和书。</p><p>课件：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></li></ul><p>书：　<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p><p><br><br><br></p><h1 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h1><h2 id="教授例子"><a href="#教授例子" class="headerlink" title="教授例子"></a>教授例子</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> Professors;</span><br><span class="line"></span><br><span class="line"> persnr |    name     | paygrade | room | salary | taxclass </span><br><span class="line"><span class="comment">--------+-------------+----------+------+--------+----------</span></span><br><span class="line">   2125 | Sokrates    | C4       |  226 |  85000 |        1</span><br><span class="line">   2126 | Russel      | C4       |  232 |  80000 |        3</span><br><span class="line">   2127 | Kopernikus  | C3       |  310 |  65000 |        5</span><br><span class="line">   2128 | Aristoteles | C4       |  250 |  85000 |        1</span><br><span class="line">   2133 | Popper      | C3       |   52 |  68000 |        1</span><br><span class="line">   2134 | Augustinus  | C3       |  309 |  55000 |        5</span><br><span class="line">   2136 | Curie       | C4       |   36 |  95000 |        3</span><br><span class="line">   2137 | Kant        | C4       |    7 |  98000 |        1</span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="根据salary排名"><a href="#根据salary排名" class="headerlink" title="根据salary排名:"></a>根据salary排名:</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, salary,</span><br><span class="line">       <span class="keyword">rank</span>() <span class="keyword">over</span> (</span><br><span class="line">           <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span></span><br><span class="line">       ) <span class="keyword">as</span> <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">FROM</span> Professors</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">rank</span> <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | salary | rank </span><br><span class="line"><span class="comment">--------+-------------+--------+------</span></span><br><span class="line">   2137 | Kant        |  98000 |    1</span><br><span class="line">   2136 | Curie       |  95000 |    2</span><br><span class="line">   2125 | Sokrates    |  85000 |    3</span><br><span class="line">   2128 | Aristoteles |  85000 |    3</span><br><span class="line">   2126 | Russel      |  80000 |    5</span><br><span class="line">   2133 | Popper      |  68000 |    6</span><br><span class="line">   2127 | Kopernikus  |  65000 |    7</span><br><span class="line">   2134 | Augustinus  |  55000 |    8</span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="在同一个pay-grade组中，根据salary排名"><a href="#在同一个pay-grade组中，根据salary排名" class="headerlink" title="在同一个pay grade组中，根据salary排名:"></a>在同一个pay grade组中，根据salary排名:</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, salary, paygrade,</span><br><span class="line">       <span class="keyword">rank</span>() <span class="keyword">over</span> (</span><br><span class="line">           <span class="keyword">partition</span> <span class="keyword">by</span> paygrade</span><br><span class="line">           <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span></span><br><span class="line">       ) <span class="keyword">as</span> <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">FROM</span> Professors</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> paygrade <span class="keyword">asc</span>, <span class="keyword">rank</span> <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | salary | paygrade | rank </span><br><span class="line">--------+-------------+--------+----------+------</span><br><span class="line">   2133 | Popper      |  68000 | C3       |    1</span><br><span class="line">   2127 | Kopernikus  |  65000 | C3       |    2</span><br><span class="line">   2134 | Augustinus  |  55000 | C3       |    3</span><br><span class="line">   2137 | Kant        |  98000 | C4       |    1</span><br><span class="line">   2136 | Curie       |  95000 | C4       |    2</span><br><span class="line">   2128 | Aristoteles |  85000 | C4       |    3</span><br><span class="line">   2125 | Sokrates    |  85000 | C4       |    3</span><br><span class="line">   2126 | Russel      |  80000 | C4       |    5</span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="在同一个pay-grade组中，计算salary-running-sum"><a href="#在同一个pay-grade组中，计算salary-running-sum" class="headerlink" title="在同一个pay grade组中，计算salary running sum:"></a>在同一个pay grade组中，计算salary running sum:</h3><p>在同一个pay grade组中，计算每一个professor的salary running sum(即salary小于该professor的其他professor的salary总和)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, paygrade, salary,</span><br><span class="line">       <span class="keyword">sum</span>(salary) <span class="keyword">OVER</span> (</span><br><span class="line">           <span class="keyword">PARTITION</span> <span class="keyword">BY</span> paygrade</span><br><span class="line">           <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span></span><br><span class="line">        )</span><br><span class="line"><span class="keyword">FROM</span> Professors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> paygrade <span class="keyword">ASC</span>, salary <span class="keyword">ASC</span>;</span><br></pre></td></tr></tbody></table></figure><p>或者加上一行<code>range</code>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, paygrade, salary,</span><br><span class="line">       <span class="keyword">sum</span>(salary) <span class="keyword">OVER</span> (</span><br><span class="line">           <span class="keyword">PARTITION</span> <span class="keyword">BY</span> paygrade</span><br><span class="line">           <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span></span><br><span class="line">           <span class="keyword">RANGE</span> <span class="keyword">BETWEEN</span> <span class="keyword">UNBOUNDED</span> <span class="keyword">PRECEDING</span> <span class="keyword">AND</span> <span class="keyword">CURRENT</span> <span class="keyword">ROW</span> <span class="comment">-- 这行是默认值</span></span><br><span class="line">        )</span><br><span class="line"><span class="keyword">FROM</span> Professors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> paygrade <span class="keyword">ASC</span>, salary <span class="keyword">ASC</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | paygrade | salary |  sum   </span><br><span class="line"><span class="comment">--------+-------------+----------+--------+--------</span></span><br><span class="line">   2134 | Augustinus  | C3       |  55000 |  55000</span><br><span class="line">   2127 | Kopernikus  | C3       |  65000 | 120000</span><br><span class="line">   2133 | Popper      | C3       |  68000 | 188000</span><br><span class="line">   2126 | Russel      | C4       |  80000 |  80000</span><br><span class="line">   2125 | Sokrates    | C4       |  85000 | 250000</span><br><span class="line">   2128 | Aristoteles | C4       |  85000 | 250000</span><br><span class="line">   2136 | Curie       | C4       |  95000 | 345000</span><br><span class="line">   2137 | Kant        | C4       |  98000 | 443000</span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="在同一个pay-grade组中，计算salary-running-average"><a href="#在同一个pay-grade组中，计算salary-running-average" class="headerlink" title="在同一个pay grade组中，计算salary running average:"></a>在同一个pay grade组中，计算salary running average:</h3><ul><li>在同一个pay grade组中，计算每一个professor的salary running average(即考虑两个上方的professor，再考虑两个下方的professor)</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, paygrade, salary,</span><br><span class="line">       <span class="keyword">avg</span>(salary) <span class="keyword">OVER</span> (</span><br><span class="line">           <span class="keyword">PARTITION</span> <span class="keyword">BY</span> paygrade</span><br><span class="line">           <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span></span><br><span class="line">           <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> <span class="number">2</span> <span class="keyword">PRECEDING</span> <span class="keyword">AND</span> <span class="number">2</span> <span class="keyword">FOLLOWING</span></span><br><span class="line">           )</span><br><span class="line"><span class="keyword">FROM</span> Professors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> paygrade <span class="keyword">ASC</span>, salary <span class="keyword">ASC</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | paygrade | salary |        avg         </span><br><span class="line"><span class="comment">--------+-------------+----------+--------+--------------------</span></span><br><span class="line">   2134 | Augustinus  | C3       |  55000 | 62666.666666666667</span><br><span class="line">   2127 | Kopernikus  | C3       |  65000 | 62666.666666666667</span><br><span class="line">   2133 | Popper      | C3       |  68000 | 62666.666666666667</span><br><span class="line">   2126 | Russel      | C4       |  80000 | 83333.333333333333</span><br><span class="line">   2125 | Sokrates    | C4       |  85000 | 86250.000000000000</span><br><span class="line">   2128 | Aristoteles | C4       |  85000 | 88600.000000000000</span><br><span class="line">   2136 | Curie       | C4       |  95000 | 90750.000000000000</span><br><span class="line">   2137 | Kant        | C4       |  98000 | 92666.666666666667</span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><ul><li>在pay grade组中，计算每一个professor的salary running average(即考虑比该professor的salary低5000,高5000区间中professor的salary的平均值)：</li></ul><p>PostgreSQL无法执行这一条，需使用HyPer网页接口：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, paygrade, salary,</span><br><span class="line">       <span class="keyword">avg</span>(salary) <span class="keyword">OVER</span> (</span><br><span class="line">           <span class="keyword">PARTITION</span> <span class="keyword">BY</span> paygrade</span><br><span class="line">           <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span></span><br><span class="line">           <span class="keyword">RANGE</span> <span class="keyword">BETWEEN</span> <span class="number">5000</span> <span class="keyword">PRECEDING</span> <span class="keyword">AND</span> <span class="number">5000</span> <span class="keyword">FOLLOWING</span></span><br><span class="line">           )</span><br><span class="line"><span class="keyword">FROM</span> Professors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> paygrade <span class="keyword">ASC</span>, salary <span class="keyword">ASC</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | paygrade | salary |        avg         </span><br><span class="line"><span class="comment">--------+-------------+----------+--------+--------------------</span></span><br><span class="line">   2134 | Augustinus  | C3       |  55000 | 55000.0000</span><br><span class="line">   2127 | Kopernikus  | C3       |  65000 | 66500.0000</span><br><span class="line">   2133 | Popper      | C3       |  68000 | 66500.0000</span><br><span class="line">   2126 | Russel      | C4       |  80000 | 83333.3333</span><br><span class="line">   2125 | Sokrates    | C4       |  85000 | 83333.3333</span><br><span class="line">   2128 | Aristoteles | C4       |  85000 | 83333.3333</span><br><span class="line">   2136 | Curie       | C4       |  95000 | 96500.0000</span><br><span class="line">   2137 | Kant        | C4       |  98000 | 96500.0000</span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="根据salary排名，给出前一名和后一名："><a href="#根据salary排名，给出前一名和后一名：" class="headerlink" title="根据salary排名，给出前一名和后一名："></a>根据salary排名，给出前一名和后一名：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, salary,</span><br><span class="line">       lag(<span class="keyword">name</span>) <span class="keyword">OVER</span> (</span><br><span class="line">           <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span></span><br><span class="line">           ),</span><br><span class="line">       <span class="keyword">lead</span>(<span class="keyword">name</span>) <span class="keyword">OVER</span> (</span><br><span class="line">           <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span></span><br><span class="line">           )</span><br><span class="line"><span class="keyword">FROM</span> Professors;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | salary |     lag     |    lead     </span><br><span class="line"><span class="comment">--------+-------------+--------+-------------+-------------</span></span><br><span class="line">   2137 | Kant        |  98000 |             | Curie</span><br><span class="line">   2136 | Curie       |  95000 | Kant        | Sokrates</span><br><span class="line">   2125 | Sokrates    |  85000 | Curie       | Aristoteles</span><br><span class="line">   2128 | Aristoteles |  85000 | Sokrates    | Russel</span><br><span class="line">   2126 | Russel      |  80000 | Aristoteles | Popper</span><br><span class="line">   2133 | Popper      |  68000 | Russel      | Kopernikus</span><br><span class="line">   2127 | Kopernikus  |  65000 | Popper      | Augustinus</span><br><span class="line">   2134 | Augustinus  |  55000 | Kopernikus  | </span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><ul><li>计算出salary的前三名：</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, salary, <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> *,</span><br><span class="line">           <span class="keyword">rank</span>() <span class="keyword">OVER</span> (</span><br><span class="line">               <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">desc</span></span><br><span class="line">               ) <span class="keyword">as</span> <span class="keyword">rank</span></span><br><span class="line">    <span class="keyword">FROM</span> Professors</span><br><span class="line">) <span class="keyword">as</span> temp</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">rank</span> &lt; <span class="number">4</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">), temp <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> *,</span><br><span class="line">           <span class="keyword">rank</span>() <span class="keyword">OVER</span> (</span><br><span class="line">               <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">desc</span></span><br><span class="line">               ) <span class="keyword">as</span> <span class="keyword">rank</span></span><br><span class="line">    <span class="keyword">FROM</span> Professors</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, salary, <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">FROM</span> temp</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">rank</span> &lt; <span class="number">4</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | salary | rank </span><br><span class="line"><span class="comment">--------+-------------+--------+------</span></span><br><span class="line">   2137 | Kant        |  98000 |    1</span><br><span class="line">   2136 | Curie       |  95000 |    2</span><br><span class="line">   2125 | Sokrates    |  85000 |    3</span><br><span class="line">   2128 | Aristoteles |  85000 |    3</span><br><span class="line">(4 rows)</span><br></pre></td></tr></tbody></table></figure><p>不使用窗口函数的版本：<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">2125</span>, <span class="string">'Sokrates'</span>, <span class="string">'C4'</span>, <span class="number">226</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2126</span>, <span class="string">'Russel'</span>, <span class="string">'C4'</span>, <span class="number">232</span>, <span class="number">80000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2127</span>, <span class="string">'Kopernikus'</span>, <span class="string">'C3'</span>, <span class="number">310</span>, <span class="number">65000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2128</span>, <span class="string">'Aristoteles'</span>, <span class="string">'C4'</span>, <span class="number">250</span>, <span class="number">85000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2133</span>, <span class="string">'Popper'</span>, <span class="string">'C3'</span>, <span class="number">52</span>, <span class="number">68000</span>, <span class="number">1</span>),</span><br><span class="line">           (<span class="number">2134</span>, <span class="string">'Augustinus'</span>, <span class="string">'C3'</span>, <span class="number">309</span>, <span class="number">55000</span>, <span class="number">5</span>),</span><br><span class="line">           (<span class="number">2136</span>, <span class="string">'Curie'</span>, <span class="string">'C4'</span>, <span class="number">36</span>, <span class="number">95000</span>, <span class="number">3</span>),</span><br><span class="line">           (<span class="number">2137</span>, <span class="string">'Kant'</span>, <span class="string">'C4'</span>, <span class="number">7</span>, <span class="number">98000</span>, <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> persnr, <span class="keyword">name</span>, salary</span><br><span class="line"><span class="keyword">FROM</span> Professors p</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">3</span> &gt; (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">count</span>(*)</span><br><span class="line">    <span class="keyword">FROM</span> Professors c</span><br><span class="line">    <span class="keyword">WHERE</span> p.salary &lt; c.salary</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | salary </span><br><span class="line"><span class="comment">--------+-------------+--------</span></span><br><span class="line">   2125 | Sokrates    |  85000</span><br><span class="line">   2128 | Aristoteles |  85000</span><br><span class="line">   2136 | Curie       |  95000</span><br><span class="line">   2137 | Kant        |  98000</span><br><span class="line">(4 rows)</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>这里要提一下，下面这个版本不对，它无法照顾到并列的名次:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Professors (persnr, <span class="keyword">name</span>, paygrade, room, salary, taxclass) <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">values</span> (<span class="number">2125</span>,<span class="string">'Sokrates'</span>,<span class="string">'C4'</span>,<span class="number">226</span>,<span class="number">85000</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2126</span>,<span class="string">'Russel'</span>,<span class="string">'C4'</span>,<span class="number">232</span>,<span class="number">80000</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">2127</span>,<span class="string">'Kopernikus'</span>,<span class="string">'C3'</span>,<span class="number">310</span>,<span class="number">65000</span>,<span class="number">5</span>),</span><br><span class="line">(<span class="number">2128</span>,<span class="string">'Aristoteles'</span>,<span class="string">'C4'</span>,<span class="number">250</span>,<span class="number">85000</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2133</span>,<span class="string">'Popper'</span>,<span class="string">'C3'</span>,<span class="number">52</span>,<span class="number">68000</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2134</span>,<span class="string">'Augustinus'</span>,<span class="string">'C3'</span>,<span class="number">309</span>,<span class="number">55000</span>,<span class="number">5</span>),</span><br><span class="line">(<span class="number">2136</span>,<span class="string">'Curie'</span>,<span class="string">'C4'</span>,<span class="number">36</span>,<span class="number">95000</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">2137</span>,<span class="string">'Kant'</span>,<span class="string">'C4'</span>,<span class="number">7</span>,<span class="number">98000</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> persnr, <span class="keyword">name</span>, salary</span><br><span class="line"><span class="keyword">from</span> Professors</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> persnr |    name     | salary </span><br><span class="line"><span class="comment">--------+-------------+--------</span></span><br><span class="line">   2137 | Kant        |  98000</span><br><span class="line">   2136 | Curie       |  95000</span><br><span class="line">   2128 | Aristoteles |  85000</span><br><span class="line">(3 rows)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前三篇文章中我们基本上认识了window function。这次我们有具体的数据集去进行大量练习(绝大部分是排名)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]高级SQL-窗口函数(3)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/04/04/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-3/"/>
    <id>https://cakebytheoceanluo.github.io/2020/04/04/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-3/</id>
    <published>2020-04-04T15:12:47.000Z</published>
    <updated>2020-04-04T15:13:47.357Z</updated>
    
    <content type="html"><![CDATA[<p>在前两篇文章中我们基本上认识了window function。这次我们有具体的数据集去进行大量练习(绝大部分是排名)。</p><a id="more"></a><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注<code>select...from...where</code>这种读操作，分析query　(analytical query)。<br>数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p><p>架构 Schema:<br><img data-src="https://db.in.tum.de/teaching/ws1920/grundlagen/uni.png?lang=de" alt="schema_de"></p><p><img data-src="https://hyper-db.de/uniEngl.png" alt="schema_en"></p><p>下载:<br><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vdW5pX215c3FsLnNxbD9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de<i class="fa fa-external-link"></i></span></p><p>Schma和大部分SQL语句来自<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL2tlbXBlci8/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/kemper/?lang=de">Prof. Alfons Kemper, Ph.D.<i class="fa fa-external-link"></i></span>的课件和书。</p><p>课件：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></li></ul><p>书：　<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p><p><br><br><br></p><h1 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h1><h2 id="成绩例子"><a href="#成绩例子" class="headerlink" title="成绩例子"></a>成绩例子</h2><p>我们采用一个更大的表格，基于原数据集表格<code>pruefen</code>：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> examination (MatrNr, CourseNr, PersNr, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="number">29120</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.3</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> examination;</span><br><span class="line"></span><br><span class="line"> matrnr | coursenr | persnr | grade </span><br><span class="line"><span class="comment">--------+----------+--------+-------</span></span><br><span class="line">  28106 |     5001 |   2126 |   1.0</span><br><span class="line">  27550 |     4630 |   2137 |   2.0</span><br><span class="line">  29555 |        0 |      0 |   1.3</span><br><span class="line">  29120 |        0 |      0 |   3.0</span><br><span class="line">  25403 |     5041 |   2125 |   2.0</span><br><span class="line">  29555 |        0 |      0 |   2.0</span><br><span class="line">  29555 |        0 |      0 |   1.0</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="基于学生的平均成绩-确定同年级中的排名"><a href="#基于学生的平均成绩-确定同年级中的排名" class="headerlink" title="基于学生的平均成绩 确定同年级中的排名:"></a>基于学生的平均成绩 确定同年级中的排名:</h3><p>基于学生的平均成绩 确定同年级中的排名(和同一个学期的同学比较)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> examination (MatrNr, CourseNr, PersNr, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="number">29120</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.3</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">), grades (MatrNr, Semester, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.matrnr, semester, <span class="keyword">avg</span>(Grade) <span class="comment">-- 计算平均成绩</span></span><br><span class="line">    <span class="keyword">from</span> studenten s, examination p</span><br><span class="line">    <span class="keyword">where</span> s.matrnr = p.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, semester</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * , </span><br><span class="line">       <span class="keyword">rank</span> () <span class="keyword">over</span> (</span><br><span class="line">           <span class="keyword">partition</span> <span class="keyword">by</span> Semester <span class="comment">-- 和同一学期的同学比较</span></span><br><span class="line">           <span class="keyword">order</span> <span class="keyword">by</span> Grade <span class="keyword">asc</span>    <span class="comment">-- 数字小是高分　排名也靠前</span></span><br><span class="line">           ) <span class="keyword">as</span> Rang</span><br><span class="line"><span class="keyword">from</span> grades</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> semester, rang;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>不使用窗口函数的版本：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> examination (MatrNr, CourseNr, PersNr, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="number">29120</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.3</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">), grades (MatrNr, Semester, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.matrnr, semester, <span class="keyword">avg</span>(Grade) <span class="comment">-- 计算平均成绩</span></span><br><span class="line">    <span class="keyword">from</span> studenten s, examination p</span><br><span class="line">    <span class="keyword">where</span> s.matrnr = p.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, semester</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * ,</span><br><span class="line">       (<span class="keyword">select</span> <span class="keyword">count</span>(*) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">from</span> Grades x</span><br><span class="line">        <span class="keyword">where</span> x.Semester = n.Semester <span class="keyword">and</span> x.Grade &lt; n.Grade) <span class="keyword">as</span> Rang</span><br><span class="line"><span class="keyword">from</span> grades n</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> semester, rang;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> matrnr | semester |         grade          | rang </span><br><span class="line"><span class="comment">--------+----------+------------------------+------</span></span><br><span class="line">  29555 |        2 |     1.4333333333333333 |    1</span><br><span class="line">  29120 |        2 |     3.0000000000000000 |    2</span><br><span class="line">  28106 |        3 | 1.00000000000000000000 |    1</span><br><span class="line">  27550 |        6 |     2.0000000000000000 |    1</span><br><span class="line">  25403 |       12 |     2.0000000000000000 |    1</span><br><span class="line">(5 rows)</span><br></pre></td></tr></tbody></table></figure><p><br></p><h3 id="在上一步的基础上，增加离平均成绩的差距"><a href="#在上一步的基础上，增加离平均成绩的差距" class="headerlink" title="在上一步的基础上，增加离平均成绩的差距:"></a>在上一步的基础上，增加离平均成绩的差距:</h3><p>在上一步的基础上，增加每个同学离平均成绩的差距，和同年级平均成绩的差距(和同一个学期的同学比较)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> examination (MatrNr, CourseNr, PersNr, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="number">29120</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.3</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">), grades (MatrNr, Semester, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.matrnr, semester, <span class="keyword">avg</span>(Grade) <span class="comment">-- 计算平均成绩</span></span><br><span class="line">    <span class="keyword">from</span> studenten s, examination p</span><br><span class="line">    <span class="keyword">where</span> s.matrnr = p.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, semester</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * ,</span><br><span class="line">       <span class="keyword">rank</span> () <span class="keyword">over</span> (</span><br><span class="line">           <span class="keyword">partition</span> <span class="keyword">by</span> Semester <span class="comment">-- 和同一学期的同学比较</span></span><br><span class="line">           <span class="keyword">order</span> <span class="keyword">by</span> Grade <span class="keyword">asc</span>    <span class="comment">-- 数字小是高分　排名也靠前</span></span><br><span class="line">           ) <span class="keyword">as</span> Rang,</span><br><span class="line">       <span class="keyword">avg</span> (Grade) <span class="keyword">over</span> (</span><br><span class="line">           <span class="keyword">partition</span> <span class="keyword">by</span> Semester  <span class="comment">-- 和同一学期的同学比较</span></span><br><span class="line">       ) <span class="keyword">as</span> GPA ,                 <span class="comment">-- 同年级的平均成绩</span></span><br><span class="line">       <span class="keyword">avg</span> (Grade) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> Semester) - Grade <span class="keyword">as</span> <span class="keyword">difference</span></span><br><span class="line"><span class="keyword">from</span> grades</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> semester, rang;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>不使用窗口函数的版本：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> examination (MatrNr, CourseNr, PersNr, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="number">29120</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.3</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">), grades (MatrNr, Semester, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.matrnr, semester, <span class="keyword">avg</span>(Grade) <span class="comment">-- 计算平均成绩</span></span><br><span class="line">    <span class="keyword">from</span> studenten s, examination p</span><br><span class="line">    <span class="keyword">where</span> s.matrnr = p.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, semester</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * ,</span><br><span class="line">       (<span class="keyword">select</span> <span class="keyword">count</span>(*) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">from</span> Grades x</span><br><span class="line">        <span class="keyword">where</span> x.Semester = n.Semester <span class="keyword">and</span> x.Grade &lt; n.Grade) <span class="keyword">as</span> Rang,</span><br><span class="line">       (<span class="keyword">select</span> <span class="keyword">avg</span>(x.Grade)</span><br><span class="line">       <span class="keyword">from</span> Grades x</span><br><span class="line">       <span class="keyword">where</span> x.Semester = n.Semester) <span class="keyword">as</span> GPA,</span><br><span class="line">       (<span class="keyword">select</span> <span class="keyword">avg</span>(x.Grade)</span><br><span class="line">       <span class="keyword">from</span> Grades x</span><br><span class="line">       <span class="keyword">where</span> x.Semester = n.Semester) - Grade <span class="keyword">as</span> <span class="keyword">difference</span></span><br><span class="line"><span class="keyword">from</span> grades n</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> semester, rang;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> matrnr | semester |         grade          | rang |          gpa           |       difference       </span><br><span class="line"><span class="comment">--------+----------+------------------------+------+------------------------+------------------------</span></span><br><span class="line">  29555 |        2 |     1.4333333333333333 |    1 |     2.2166666666666667 |     0.7833333333333334</span><br><span class="line">  29120 |        2 |     3.0000000000000000 |    2 |     2.2166666666666667 |    -0.7833333333333333</span><br><span class="line">  28106 |        3 | 1.00000000000000000000 |    1 | 1.00000000000000000000 | 0.00000000000000000000</span><br><span class="line">  27550 |        6 |     2.0000000000000000 |    1 |     2.0000000000000000 |     0.0000000000000000</span><br><span class="line">  25403 |       12 |     2.0000000000000000 |    1 |     2.0000000000000000 |     0.0000000000000000</span><br><span class="line">(5 rows)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前两篇文章中我们基本上认识了window function。这次我们有具体的数据集去进行大量练习(绝大部分是排名)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
</feed>
