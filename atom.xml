<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>关于数据库的一切</title>
  <icon>https://www.gravatar.com/avatar/60437615b712b01d1a7c334c61fc1a4f</icon>
  <subtitle>罗济高的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cakebytheoceanluo.github.io/"/>
  <updated>2020-03-24T17:19:14.746Z</updated>
  <id>https://cakebytheoceanluo.github.io/</id>
  
  <author>
    <name>罗济高</name>
    <email>luojigao@outlook.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[SQL]高级SQL-去关联(1)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/24/SQL-%E9%AB%98%E7%BA%A7SQL-%E5%8E%BB%E5%85%B3%E8%81%94-1/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/24/SQL-%E9%AB%98%E7%BA%A7SQL-%E5%8E%BB%E5%85%B3%E8%81%94-1/</id>
    <published>2020-03-24T17:16:36.000Z</published>
    <updated>2020-03-24T17:19:14.746Z</updated>
    
    <content type="html"><![CDATA[<p>我们在一篇论文解读文章<a href="https://cakebytheoceanluo.github.io/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/">[Paper]BTW 2015 | Unnesting Arbitrary Queries</a>中提到了去关联, 在这一篇文章中我们对这个主题进行<strong>练习</strong>。</p><p>这个主题其实远比大家想象中的要实用: 对于1GiB大小左右的数据集，SQL查询如果拥有$O(n^2)$的时间复杂度，基本可以判断很慢，或者慢到无实际意义。往往我们使用的各种大名鼎鼎的开源数据库和商用数据库不一定支持Unnesting这个feature(具体的支持在各个数据库的Document中描述，在对应的论文中的Motivation部分也有简单提到)。这就意味着, 我们需要手动成为Query Optimizer去优化我们SQL的时间复杂度。 </p><a id="more"></a><h1 id="Correlated-Sub-Query-vs-Uncorrelated-Sub-Query"><a href="#Correlated-Sub-Query-vs-Uncorrelated-Sub-Query" class="headerlink" title="Correlated Sub-Query vs. Uncorrelated Sub-Query"></a>Correlated Sub-Query vs. Uncorrelated Sub-Query</h1><p>一般来说，correlated sub-query(关联子query)的时间复杂度会比uncorrelated sub-query(无关联子query)大。</p><p>当然这部分的前提是：query optimizer(优化器)不对SQL的logical plan进行优化。<br>而一些优秀的数据库<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbmRleC5odG1sIw==" title="https://hyper-db.de/index.html#">HyPer<i class="fa fa-external-link"></i></span>已经把这个问题用query optimizer解决了，它会主动去优化，比如可以<strong>去关联</strong>。</p><p>更多的可以看这一篇论文<span class="exturl" data-url="aHR0cDovL3d3dy5idHctMjAxNS5kZS9yZXMvcHJvY2VlZGluZ3MvSGF1cHRiYW5kL1dpc3MvTmV1bWFubi1Vbm5lc3RpbmdfQXJiaXRyYXJ5X1F1ZXJpZS5wZGY=" title="http://www.btw-2015.de/res/proceedings/Hauptband/Wiss/Neumann-Unnesting_Arbitrary_Querie.pdf">Unnesting Arbitrary Queries, Thomas Neumann and Alfons Kemper, Technische Universitat München<i class="fa fa-external-link"></i></span></p><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>这篇文章中我们会使用如下的数据集:</p><ul><li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#TUM-Uni%E6%95%B0%E6%8D%AE%E9%9B%86">TUM Uni 数据集</a></li><li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#TPC-H">TPC-H 数据集</a></li></ul><p>具体的数据集安装见上面的对应的链接。另外有一些SQL并不对应任何数据集, 只是在论文中逻辑性地被提出和使用，这样的SQL我会特别注明: <strong>不对应数据集</strong>。</p><hr><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><h2 id="使用max代替exists-搜索出生日期比所有教授早的学生"><a href="#使用max代替exists-搜索出生日期比所有教授早的学生" class="headerlink" title="使用max代替exists: 搜索出生日期比所有教授早的学生"></a>使用<code>max</code>代替<code>exists</code>: 搜索出生日期比所有教授早的学生</h2><p>这个Query需要的属性值(gebdatum　出生日期)没有被写入数据集。<br>所以不能运行，但是我们可以看着理解意思。</p><ul><li>correlated sub-query</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.*</span><br><span class="line"><span class="keyword">from</span> studenten s</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> p.*</span><br><span class="line">    <span class="keyword">from</span> professoren p</span><br><span class="line">    <span class="keyword">where</span> p.gebdatum &gt; s.gebdatumm</span><br><span class="line">          )</span><br></pre></td></tr></tbody></table></figure><p>对每一个studenten s都需要看整个professoren表格。<br>这个情况很类似cross product(集合的叉乘)。这个subquery需要被执行<code>|studenten|</code>次。</p><p>如果query optimizer(优化器)不对这个SQL的logical plan进行优化的话，那它的runtime complexity(时间复杂度)是<code>O(|studenten| * |professoren|)</code>，类推到<code>O(n^2)</code>。</p><p><br></p><ul><li>uncorrelated Sub-query</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.*</span><br><span class="line"><span class="keyword">from</span> studenten s</span><br><span class="line"><span class="keyword">where</span> s.gebdatum &lt; (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">max</span>(gebdatum)</span><br><span class="line">    <span class="keyword">from</span> professoren p</span><br><span class="line">          )</span><br></pre></td></tr></tbody></table></figure><p>这样这个subquery只需一次被materialized(materialization，物质化，实例化)，也就是只需要被执行一次得到这个<code>max</code>。然后在去看<code>studenten</code>中的每一个人去和这个<code>max</code>比较。这样肯定会更加有效率。它的runtime complexity是$O(|\mathrm{studenten}| ＋ |\mathrm{professoren}|)$，类推到 $O(n)$。</p><p><br></p><h2 id="使用join代替subquery-搜索出生日期比对应教授早的助手-助手需要在对应教授手下工作"><a href="#使用join代替subquery-搜索出生日期比对应教授早的助手-助手需要在对应教授手下工作" class="headerlink" title="使用join代替subquery: 搜索出生日期比对应教授早的助手(助手需要在对应教授手下工作)"></a>使用join代替subquery: 搜索出生日期比对应教授早的助手(助手需要在对应教授手下工作)</h2><ul><li>correlated sub-query:</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.*</span><br><span class="line"><span class="keyword">from</span> assistenten a</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> p.*</span><br><span class="line">    <span class="keyword">from</span> professoren p</span><br><span class="line">    <span class="keyword">where</span> a.boss = p.persnr <span class="keyword">and</span> p.gebdatum &gt; a.gebdatum</span><br><span class="line">          )</span><br></pre></td></tr></tbody></table></figure><ul><li>unnested query(去嵌套):</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.*</span><br><span class="line"><span class="keyword">from</span> assistenten a, professoren p</span><br><span class="line"><span class="keyword">where</span> a.boss = p.persnr <span class="keyword">and</span> p.gebdatum &gt; a.gebdatum</span><br></pre></td></tr></tbody></table></figure><p>这时候我们直接用<code>join</code>来对原correlated sub-query去嵌套。采用<code>join</code>原因之一是：这时候不需要和所有professoren进行比较，只需要和对应的一个professor比较。</p><p><br></p><hr><h1 id="普遍作法"><a href="#普遍作法" class="headerlink" title="普遍作法"></a>普遍作法</h1><p>我们这里给出一个普遍的作法，但是不百分之百和原论文的想法契合。具体作法最好参考原论文：</p><p>下面这个很明显是一个关联的查询，子查询中需要外界<code>r1</code>的<code>attr1</code>, <code>attr2</code>。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ...</span><br><span class="line"><span class="keyword">from</span> r1, </span><br><span class="line"><span class="keyword">where</span> ... </span><br><span class="line">(</span><br><span class="line">        <span class="keyword">select</span> ...</span><br><span class="line">        <span class="keyword">from</span> r2</span><br><span class="line">        <span class="keyword">where</span> r1.attr1 = ... <span class="keyword">and</span> r1.attr2 = ...</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>那么我们就将这个子查询给抽离出来到<code>from</code>下面或者<code>with</code>里面，提前用不关联的方式物理化它的结果，而不是之后进行低效的笛卡尔积。<br>如果我们想用不关联的方式物理化子查询的结果，我们可以需要<code>r1</code>这个表格的另外一份复制品，但是实际上我们只需要<code>r1</code>中和join相关的字段值：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ...</span><br><span class="line"><span class="keyword">from</span> r1, </span><br><span class="line">       (</span><br><span class="line">        <span class="keyword">select</span> d.attr1, d.attr2 <span class="comment">-- 有可能还有其他聚合函数</span></span><br><span class="line">        <span class="keyword">from</span> r2,</span><br><span class="line">             (<span class="keyword">select</span> <span class="keyword">distinct</span> r1.attr1, r1.attr2 <span class="keyword">from</span> r1) <span class="keyword">as</span> d</span><br><span class="line">        <span class="keyword">where</span> d.attr1 = ... <span class="keyword">and</span> d.attr2 = ...</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> d.attr1, d.attr2</span><br><span class="line">        ) <span class="keyword">as</span> precomputed</span><br><span class="line"><span class="keyword">where</span> ... </span><br><span class="line">        precomputed.attr1 = r1.attr1 <span class="keyword">and</span></span><br><span class="line">        precomputed.attr2 = r1.attr1</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="TPC-H例子一-1"><a href="#TPC-H例子一-1" class="headerlink" title="TPC-H例子一 1"></a>TPC-H例子一 <sup><a href="#fn1">1</a></sup></h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(l_extendedprice)</span><br><span class="line"><span class="keyword">from</span> lineitem l1</span><br><span class="line"><span class="keyword">where</span> l_extendedprice =</span><br><span class="line">   (<span class="keyword">select</span> <span class="keyword">min</span>(l_extendedprice)</span><br><span class="line">    <span class="keyword">from</span> lineitem l2</span><br><span class="line">    <span class="keyword">where</span> l1.l_orderkey = l2.l_orderkey);</span><br></pre></td></tr></tbody></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(l_extendedprice)</span><br><span class="line"><span class="keyword">from</span> lineitem l1,</span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">min</span>(l_extendedprice) m, l_orderkey</span><br><span class="line">    <span class="keyword">from</span> lineitem</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> l_orderkey) l2</span><br><span class="line"><span class="keyword">where</span> l1.l_orderkey = l2.l_orderkey</span><br><span class="line"><span class="keyword">and</span> l_extendedprice = l2.m;</span><br></pre></td></tr></tbody></table></figure><ul><li>这里我们只需要对<code>l2</code>进行一次求值。</li></ul><p><br></p><h1 id="TPC-H例子二-1"><a href="#TPC-H例子二-1" class="headerlink" title="TPC-H例子二 1"></a>TPC-H例子二 <sup><a href="#fn1">1</a></sup></h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c1.c_name</span><br><span class="line"><span class="keyword">from</span> customer c1</span><br><span class="line"><span class="keyword">where</span> c1.c_mktsegment = <span class="string">'AUTOMOBILE'</span> </span><br><span class="line">      <span class="keyword">or</span> c1.c_acctbal &gt;</span><br><span class="line">                        (<span class="keyword">select</span> <span class="keyword">avg</span>(c2.c_acctbal)</span><br><span class="line">                        <span class="keyword">from</span> customer c2</span><br><span class="line">                        <span class="keyword">where</span> c2.c_mktsegment = c1.c_mktsegment);</span><br></pre></td></tr></tbody></table></figure><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c1.c_name</span><br><span class="line"><span class="keyword">from</span> customer c1, (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">avg</span>(c.c_acctbal) <span class="keyword">as</span> <span class="keyword">avg</span>, c_mktsegment</span><br><span class="line">    <span class="keyword">from</span> customer c</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> c_mktsegment</span><br><span class="line">    ) <span class="keyword">as</span> c2</span><br><span class="line"><span class="keyword">where</span> (c1.c_mktsegment = <span class="string">'AUTOMOBILE'</span></span><br><span class="line">      <span class="keyword">or</span> c1.c_acctbal &gt; c2.avg)</span><br><span class="line">      <span class="keyword">and</span> c1.c_mktsegment = c2.c_mktsegment</span><br></pre></td></tr></tbody></table></figure><p><br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> c2 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">avg</span>(c.c_acctbal) <span class="keyword">as</span> <span class="keyword">avg</span>, c_mktsegment</span><br><span class="line">    <span class="keyword">from</span> customer c</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> c_mktsegment</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> c1.c_name</span><br><span class="line"><span class="keyword">from</span> customer c1, c2</span><br><span class="line"><span class="keyword">where</span> (c1.c_mktsegment = <span class="string">'AUTOMOBILE'</span></span><br><span class="line">      <span class="keyword">or</span> c1.c_acctbal &gt; c2.avg)</span><br><span class="line">      <span class="keyword">and</span> c1.c_mktsegment = c2.c_mktsegment</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="TPC-H-Q17-例子"><a href="#TPC-H-Q17-例子" class="headerlink" title="TPC-H Q17 例子"></a>TPC-H Q17 例子</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- TPC-H Query 17</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">        <span class="keyword">sum</span>(l_extendedprice) / <span class="number">7.0</span> <span class="keyword">as</span> avg_yearly</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        lineitem,</span><br><span class="line">        part</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        p_partkey = l_partkey</span><br><span class="line">        <span class="keyword">and</span> p_brand = <span class="string">'Brand#23'</span></span><br><span class="line">        <span class="keyword">and</span> p_container = <span class="string">'MED BOX'</span></span><br><span class="line">        <span class="keyword">and</span> l_quantity &lt; (</span><br><span class="line">                <span class="keyword">select</span></span><br><span class="line">                        <span class="number">0.2</span> * <span class="keyword">avg</span>(l_quantity)</span><br><span class="line">                <span class="keyword">from</span></span><br><span class="line">                        lineitem</span><br><span class="line">                <span class="keyword">where</span></span><br><span class="line">                        l_partkey = p_partkey</span><br><span class="line">        )</span><br></pre></td></tr></tbody></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>很清晰，关联(nested, correlated)的部分如下：<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">from</span><br><span class="line">        lineitem,</span><br><span class="line">        part</span><br><span class="line">...</span><br><span class="line">        and l_quantity &lt; (</span><br><span class="line">                <span class="keyword">select</span></span><br><span class="line">                        <span class="number">0.2</span> * <span class="keyword">avg</span>(l_quantity)</span><br><span class="line">                <span class="keyword">from</span></span><br><span class="line">                        lineitem</span><br><span class="line">                <span class="keyword">where</span></span><br><span class="line">                        l_partkey = p_partkey</span><br><span class="line">        )</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>p_partkey</code>是这个子查询(Sub-Query)中来自外查询的字段，也就是它造成了这个依赖(dependency)。</p><p>我们用文字去描述一下这个关联部分:  </p><ul><li>对每一个子查询的<code>lineitem</code>的元组，需要它的<code>l_partkey</code>字段值依赖于外界<code>part</code>的对应<code>p_partkey</code>字段值。</li><li>外依赖条件指：<code>l_partkey = p_partkey</code></li><li>$D$是<code>part.p_partkey</code>对应字段值的集合。</li></ul><p>我们可以完全抽离这个关联部分到另外一个暂时的表格，再用<strong>外依赖条件</strong>和它regular join。</p><h2 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">        <span class="keyword">sum</span> (l_extendedprice) / <span class="number">7.0</span> <span class="keyword">as</span> avg_yearly</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        lineitem l,</span><br><span class="line">        part,</span><br><span class="line">        (</span><br><span class="line">            <span class="keyword">select</span></span><br><span class="line">                    <span class="number">0.2</span> * <span class="keyword">avg</span> (l_quantity) <span class="keyword">avg</span>, l_partkey</span><br><span class="line">            <span class="keyword">from</span></span><br><span class="line">                    lineitem</span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">                    l_partkey</span><br><span class="line">        ) quaprecomputednt</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        p_partkey = l. l_partkey</span><br><span class="line">        <span class="keyword">and</span> p_brand = <span class="string">'Brand #23'</span></span><br><span class="line">        <span class="keyword">and</span> p_container = <span class="string">'MED BOX'</span></span><br><span class="line">        <span class="keyword">and</span> precomputed.l_partkey = p_partkey  <span class="comment">-- 使用外依赖条件的regular join</span></span><br><span class="line">        <span class="keyword">and</span> l_quantity &lt; precomputed.avg       <span class="comment">-- 去除原依赖</span></span><br></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> precomputed <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">            <span class="number">0.2</span> * <span class="keyword">avg</span> (l_quantity) <span class="keyword">avg</span> , l_partkey</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">            lineitem</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">            l_partkey</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">        <span class="keyword">sum</span> (l_extendedprice) / <span class="number">7.0</span> <span class="keyword">as</span> avg_yearly</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        lineitem l,</span><br><span class="line">        part,</span><br><span class="line">        precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        p_partkey = l. l_partkey</span><br><span class="line">        <span class="keyword">and</span> p_brand = <span class="string">'Brand #23'</span></span><br><span class="line">        <span class="keyword">and</span> p_container = <span class="string">'MED BOX'</span></span><br><span class="line">        <span class="keyword">and</span> precomputed.l_partkey = p_partkey  <span class="comment">-- 使用外依赖条件的regular join</span></span><br><span class="line">        <span class="keyword">and</span> l_quantity &lt; precomputed.avg       <span class="comment">-- 去除原依赖</span></span><br></pre></td></tr></tbody></table></figure><p>引用: </p><p><a name="fn1">1</a>: TUM Foundation of Data Engineering Chap3.Advanced SQL: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvY2hhcHRlcjMucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de<i class="fa fa-external-link"></i></span></p><p>2.<span class="exturl" data-url="aHR0cHM6Ly9kbC5naS5kZS9iaXRzdHJlYW0vaGFuZGxlLzIwLjUwMC4xMjExNi8yNDE4LzM4My5wZGY/c2VxdWVuY2U9MQ==" title="https://dl.gi.de/bitstream/handle/20.500.12116/2418/383.pdf?sequence=1">Unnesting Arbitrary Queries - Thomas Neumann and Alfons Kemper - (BTW 2015)<i class="fa fa-external-link"></i></span></p><p>3.<a href="https://cakebytheoceanluo.github.io/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/">https://cakebytheoceanluo.github.io/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在一篇论文解读文章&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/&quot;&gt;[Paper]BTW 2015 | Unnesting Arbitrary Queries&lt;/a&gt;中提到了去关联, 在这一篇文章中我们对这个主题进行&lt;strong&gt;练习&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这个主题其实远比大家想象中的要实用: 对于1GiB大小左右的数据集，SQL查询如果拥有$O(n^2)$的时间复杂度，基本可以判断很慢，或者慢到无实际意义。往往我们使用的各种大名鼎鼎的开源数据库和商用数据库不一定支持Unnesting这个feature(具体的支持在各个数据库的Document中描述，在对应的论文中的Motivation部分也有简单提到)。这就意味着, 我们需要手动成为Query Optimizer去优化我们SQL的时间复杂度。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Query Optimizer" scheme="https://cakebytheoceanluo.github.io/categories/Query-Optimizer/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Query Optimizer" scheme="https://cakebytheoceanluo.github.io/tags/Query-Optimizer/"/>
    
      <category term="Subquery Optimization" scheme="https://cakebytheoceanluo.github.io/tags/Subquery-Optimization/"/>
    
  </entry>
  
  <entry>
    <title>[SQL]中级SQL(5)</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/22/SQL-%E4%B8%AD%E7%BA%A7SQL-5/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/22/SQL-%E4%B8%AD%E7%BA%A7SQL-5/</id>
    <published>2020-03-22T13:13:22.000Z</published>
    <updated>2020-03-22T13:15:03.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TPC-H-数据集"><a href="#TPC-H-数据集" class="headerlink" title="TPC-H 数据集"></a>TPC-H 数据集</h1><p>我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注<code>select...from...where</code>这种读操作，分析query　(analytical query)。<br><code>TPC-H</code>数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p><p><strong>本地载入改数据集</strong>的方法见我的博客两篇文章:</p><ul><li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5TPC-H%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS] PostgreSQL 导入 TPC-H 数据集</a></li><li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS] PostgreSQL 导入数据集</a></li></ul><a id="more"></a><h1 id="中级SQL"><a href="#中级SQL" class="headerlink" title="中级SQL"></a>中级SQL</h1><p>这一篇文章其实目的是用简单的SQL去熟悉TPC-H这个数据集，因为这个数据集会在<strong>高级SQL</strong>部分一直被使用。</p><ul><li>有多少customer拥有order，而这个order的comment含有”packages”这个单词？</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> c_custkey)</span><br><span class="line"><span class="keyword">from</span> customer, orders</span><br><span class="line"><span class="keyword">where</span> c_custkey = o_custkey <span class="keyword">and</span> o_comment <span class="keyword">like</span> <span class="string">'%packages%'</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> o_custkey)</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">where</span> o_comment <span class="keyword">like</span> <span class="string">'%packages%'</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>求<code>l_orderkey</code>的数字数量的平均值(<code>char_length()</code>函数)：<ul><li><code>l_orderkey::text</code>和<code>l_orderkey || ''</code>都可以使int变成string<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(<span class="keyword">char_length</span>(l_orderkey || <span class="string">''</span>))</span><br><span class="line"><span class="keyword">from</span> lineitem;</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span> (<span class="keyword">char_length</span>(l_orderkey::<span class="built_in">text</span>))</span><br><span class="line"><span class="keyword">from</span> lineitem ;</span><br></pre></td></tr></tbody></table></figure><ul><li><p>求所有<code>customer</code>和所有<code>supplier</code>的名字：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c_name</span><br><span class="line"><span class="keyword">from</span> customer</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> s_name</span><br><span class="line"><span class="keyword">from</span> supplier</span><br></pre></td></tr></tbody></table></figure></li><li><p>读取10个customers对应的nation，用JSON的形式去表达<code>custkey, name, nation</code>：</p></li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'{" custkey ": '</span> || c_custkey || <span class="string">', " name ":" '</span> || c_name || <span class="string">'", " nation ":{" nationkey ": '</span> || n_nationkey || <span class="string">', " name ":" '</span> || n_name || <span class="string">' "}} '</span> <span class="keyword">as</span> custjson</span><br><span class="line"><span class="keyword">from</span> customer , nation</span><br><span class="line"><span class="keyword">where</span> c_nationkey = n_nationkey <span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></tbody></table></figure><p>输出：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">                                                  custjson                                                  </span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"> {" custkey ": 86, " name ":" Customer#000000086", " nation ":{" nationkey ": 0, " name ":" ALGERIA "}} </span><br><span class="line"> {" custkey ": 80, " name ":" Customer#000000080", " nation ":{" nationkey ": 0, " name ":" ALGERIA "}} </span><br><span class="line"> {" custkey ": 76, " name ":" Customer#000000076", " nation ":{" nationkey ": 0, " name ":" ALGERIA "}} </span><br><span class="line"> {" custkey ": 73, " name ":" Customer#000000073", " nation ":{" nationkey ": 0, " name ":" ALGERIA "}} </span><br><span class="line"> {" custkey ": 48, " name ":" Customer#000000048", " nation ":{" nationkey ": 0, " name ":" ALGERIA "}} </span><br><span class="line"> {" custkey ": 29, " name ":" Customer#000000029", " nation ":{" nationkey ": 0, " name ":" ALGERIA "}} </span><br><span class="line"> {" custkey ": 144, " name ":" Customer#000000144", " nation ":{" nationkey ": 1, " name ":" ARGENTINA "}} </span><br><span class="line"> {" custkey ": 141, " name ":" Customer#000000141", " nation ":{" nationkey ": 1, " name ":" ARGENTINA "}} </span><br><span class="line"> {" custkey ": 106, " name ":" Customer#000000106", " nation ":{" nationkey ": 1, " name ":" ARGENTINA "}} </span><br><span class="line"> {" custkey ": 59, " name ":" Customer#000000059", " nation ":{" nationkey ": 1, " name ":" ARGENTINA "}} </span><br><span class="line">(10 rows)</span><br></pre></td></tr></tbody></table></figure><ul><li>German Supplier在1995年发了多少lineitem?</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(lineitem)</span><br><span class="line"><span class="keyword">from</span> supplier, nation, lineitem</span><br><span class="line"><span class="keyword">where</span> n_name = <span class="string">'GERMANY'</span> <span class="keyword">and</span> n_nationkey = s_nationkey <span class="keyword">and</span> s_suppkey = l_suppkey <span class="keyword">and</span> <span class="keyword">extract</span>(<span class="keyword">year</span> <span class="keyword">from</span> l_shipdate) = <span class="number">1995</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(lineitem)</span><br><span class="line"><span class="keyword">from</span> supplier, nation, lineitem</span><br><span class="line"><span class="keyword">where</span> n_name = <span class="string">'GERMANY'</span> <span class="keyword">and</span> n_nationkey = s_nationkey <span class="keyword">and</span> s_suppkey = l_suppkey <span class="keyword">and</span> l_shipdate <span class="keyword">between</span> <span class="string">'1995-01-01'</span> <span class="keyword">and</span> <span class="string">'1995-12-31'</span></span><br></pre></td></tr></tbody></table></figure><ul><li>搜索EUROPE在FURNITURE　market segment中最高account balance的十个customers:</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c_name, c_acctbal</span><br><span class="line"><span class="keyword">from</span> customer, nation, region</span><br><span class="line"><span class="keyword">where</span> r_name = <span class="string">'EUROPE'</span> <span class="keyword">and</span> r_regionkey = n_regionkey <span class="keyword">and</span> n_nationkey = c_nationkey <span class="keyword">and</span> c_mktsegment = <span class="string">'FURNITURE'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c_acctbal <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><ul><li>How many orders do customer have?</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c_custkey, <span class="keyword">count</span>(o_orderkey) <span class="keyword">as</span> o_count</span><br><span class="line"><span class="keyword">from</span> customer <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders <span class="keyword">on</span> c_custkey = o_custkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c_custkey</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_count <span class="keyword">desc</span>, c_custkey <span class="keyword">asc</span></span><br></pre></td></tr></tbody></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>sum(l_extendedprice * (1 - l_discount))</code>: revenue</li><li>得到年份的例子：<code>extract(year from l_shipdate) = 1995</code></li><li><code>c_mktsegment</code>: market segment</li><li><code>c_acctbal</code>: account balance</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TPC-H-数据集&quot;&gt;&lt;a href=&quot;#TPC-H-数据集&quot; class=&quot;headerlink&quot; title=&quot;TPC-H 数据集&quot;&gt;&lt;/a&gt;TPC-H 数据集&lt;/h1&gt;&lt;p&gt;我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注&lt;code&gt;select...from...where&lt;/code&gt;这种读操作，分析query　(analytical query)。&lt;br&gt;&lt;code&gt;TPC-H&lt;/code&gt;数据集在　&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==&quot; title=&quot;https://hyper-db.de/interface.html&quot;&gt;https://hyper-db.de/interface.html&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;　可以直接使用。另外在这个网页不允许进行写操作:&lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;之类的transactional query。当然&lt;code&gt;create table&lt;/code&gt;和&lt;code&gt;drop table&lt;/code&gt;也不被允许。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本地载入改数据集&lt;/strong&gt;的方法见我的博客两篇文章:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5TPC-H%E6%95%B0%E6%8D%AE%E9%9B%86/&quot;&gt;[DBMS] PostgreSQL 导入 TPC-H 数据集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/&quot;&gt;[DBMS] PostgreSQL 导入数据集&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="TPC-H" scheme="https://cakebytheoceanluo.github.io/tags/TPC-H/"/>
    
  </entry>
  
  <entry>
    <title>[CMU-15445]Lec07 Tree Indexes Part I - 树索引 I</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/19/CMU-15445-Lec07/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/19/CMU-15445-Lec07/</id>
    <published>2020-03-19T18:09:58.000Z</published>
    <updated>2020-03-19T18:15:31.659Z</updated>
    
    <content type="html"><![CDATA[<p>Tree Indexes Part I - 树索引 I</p><p>Slide: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA3LXRyZWVzMS5wZGY=" title="https://15445.courses.cs.cmu.edu/fall2019/slides/07-trees1.pdf">https://15445.courses.cs.cmu.edu/fall2019/slides/07-trees1.pdf<i class="fa fa-external-link"></i></span><br>Note: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDctdHJlZXMxLnBkZg==" title="https://15445.courses.cs.cmu.edu/fall2019/notes/07-trees1.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/07-trees1.pdf<i class="fa fa-external-link"></i></span><br>Readings:  Chapter 11.1-11.4</p><p>Database Tree Indexes 在CMU分成了两部分，在两节课中讲。这是第一部分。</p><p>这节课中，我们会学习数据库的中使用的B+树，它数据库最重要的数据结构。几十年来，数据库的形式和技术变化很大，但是始终坚持在使用B+树以及它的变形。</p><a id="more"></a><p><img data-src="/images/CMU1544564/Lec07/1.jpg" alt="1.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/3.jpg" alt="3.jpg"></p><ul><li>上图我们在前一篇文章<a href="https://cakebytheoceanluo.github.io/2020/03/18/CMU-15445-Lec06/#Data-Structure-in-DBMS">[CMU-15445] Lec06 Hash Tables - 哈希表 - Data Structure in DBMS</a>中已经讨论过。我们现在代入hash table和tree再看看这一页。</li><li>前三点中hash table可以被应用，同时效果不错。但是在<strong>table indexes</strong>中tree更好，以至于各个DBMS默认的table index都是tree。具体tree哪里好，我们会在这几节课中具体讨论。</li></ul><p><img data-src="/images/CMU1544564/Lec07/4.jpg" alt="4.jpg"></p><ul><li>从上图中:</li><li>index索引严格上说不是必须，它的是一个起到提速搜索的数据结构。如果没有它，那就linear sequential scan去找想要的tuple， $O(n)$</li><li>index索引其实将原表格内容存储在数据结构中，因此它也重复(replica)了一部分原表格的内容。如果我们对原表格进行更新(写操作)，那么也需要对index进行同样的操作，<strong>让原表格和index同步</strong>。</li></ul><p><img data-src="/images/CMU1544564/Lec07/5.jpg" alt="5.jpg"></p><ul><li>从上图中:</li><li>index的存在会带来:</li><li>Storage Overhead: index重复了一部分原表格内容，index这个数据结构要占一块存储。常常需要多个page，不能保证全部在内存上。</li><li>Maintenance Overhead: 如果我们对原表格进行更新(写操作)，那么也需要对index进行同样的操作，<strong>让原表格和index同步</strong>。</li></ul><p><img data-src="/images/CMU1544564/Lec07/6.jpg" alt="6.jpg"></p><h1 id="B-Tree-Family"><a href="#B-Tree-Family" class="headerlink" title="B-Tree Family"></a>B-Tree Family</h1><p><img data-src="/images/CMU1544564/Lec07/7.jpg" alt="7.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/8.jpg" alt="8.jpg"></p><ul><li>Efficient locking for concurrent operations on B-trees: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS8xMC4xMTQ1LzMxOTYyOC4zMTk2NjM=" title="https://dl.acm.org/doi/10.1145/319628.319663">https://dl.acm.org/doi/10.1145/319628.319663<i class="fa fa-external-link"></i></span></li></ul><h1 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+ Tree"></a>B+ Tree</h1><p><img data-src="/images/CMU1544564/Lec07/9.jpg" alt="9.jpg"></p><ul><li>Ubiquitous B-Tree: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS8xMC4xMTQ1LzM1Njc3MC4zNTY3NzY=" title="https://dl.acm.org/doi/10.1145/356770.356776">https://dl.acm.org/doi/10.1145/356770.356776<i class="fa fa-external-link"></i></span></li></ul><p><img data-src="/images/CMU1544564/Lec07/10.jpg" alt="10.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/11.jpg" alt="11.jpg"></p><ul><li>从上图中:</li><li>leaf node: 指最下面一层的节点</li><li>inner node: 指非leaf node的节点</li><li>sibling pointer: 指拥有同一个父亲的leaf node</li></ul><p><img data-src="/images/CMU1544564/Lec07/12.jpg" alt="12.jpg"></p><ul><li>从上图中:</li><li>inner node: 由<code>node*</code>和<code>key</code>组成</li><li>leaf node: 由<code>value</code>和<code>key</code>组成</li></ul><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p><img data-src="/images/CMU1544564/Lec07/13.jpg" alt="13.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/15.jpg" alt="15.jpg"></p><ul><li>从上图中:</li><li><code>prev</code>和<code>next</code>是两个指针，指向sibling node</li></ul><p><img data-src="/images/CMU1544564/Lec07/16.jpg" alt="16.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/18.jpg" alt="18.jpg"></p><ul><li>从上图是实际实现中，B+ Tree的样子</li><li><code>sortd keys</code>排列在一块儿。因为scan的时候，只是检查<code>key</code>。另外<code>key</code>的数据类型大小一致,　<code>values</code>大小很可能不一致，如字符串。</li></ul><p><img data-src="/images/CMU1544564/Lec07/19.jpg" alt="19.jpg"></p><h2 id="B-Tree-vs-B-Tree"><a href="#B-Tree-vs-B-Tree" class="headerlink" title="B Tree vs. B+ Tree"></a>B Tree vs. B+ Tree</h2><p><img data-src="/images/CMU1544564/Lec07/20.jpg" alt="20.jpg"></p><ul><li>从上图中:</li><li>B Tree中是没有重复的，<code>key</code>被存储在inner node和leaf node之间</li><li>B+ Tree中是有重复的，<code>key</code>只被存储在leaf node中</li><li><code>key</code>的存储地点不止影响树的样子，更影响多线程更改树信息的性能。B+ Tree的<code>key</code>信息只在leaf node中，更改信息以后只需要向上走，因此只需要latch一个向上的方向。但是B Tree需要latch两个方向，即向上和向下。这个我们会在后两次课中仔细讨论。<!-- TODO:后两次课。 --><!-- TODO: B Tree 介绍 --></li></ul><h2 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h2><p><img data-src="/images/CMU1544564/Lec07/21.jpg" alt="21.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/22.jpg" alt="22.jpg"></p><ul><li>上图中的链接: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY3MudXNmY2EuZWR1L35nYWxsZXMvdmlzdWFsaXphdGlvbi9CUGx1c1RyZWUuaHRtbA==" title="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html<i class="fa fa-external-link"></i></span></li></ul><p>我们使用一下作为Demo:<br><code>insert 4; insert 2; insert 6; insert 1; insert 5;</code><br>得到如下的树:</p><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec07/b+tree_insert.png" alt="B+Tree-Insert"></p><h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><p><img data-src="/images/CMU1544564/Lec07/23.jpg" alt="23.jpg"></p><ul><li>上图中的链接: <span class="exturl" data-url="aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMzQ2LzIwMTUvbm90ZXMvQmxpbmsucHB0eA==" title="https://web.stanford.edu/class/cs346/2015/notes/Blink.pptx">https://web.stanford.edu/class/cs346/2015/notes/Blink.pptx<i class="fa fa-external-link"></i></span></li></ul><p>我们再继续刚刚的Demo:</p><p><code>delete 5; delete 4;</code><br>得到如下的树:</p><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec07/b+tree_delete.png" alt="B+Tree-Delete"></p><h2 id="B-Tree-In-Practice"><a href="#B-Tree-In-Practice" class="headerlink" title="B+ Tree In Practice"></a>B+ Tree In Practice</h2><p><img data-src="/images/CMU1544564/Lec07/24.jpg" alt="24.jpg"></p><ul><li>从上图中:</li><li>Fill-Factor是指<code>leaf node的个数 / 所有 node的个数</code>比值</li><li>实际上B+树不需要５层以上。</li></ul><h2 id="Clustered-Indexes"><a href="#Clustered-Indexes" class="headerlink" title="Clustered Indexes"></a>Clustered Indexes</h2><p><img data-src="/images/CMU1544564/Lec07/25.jpg" alt="25.jpg"></p><p>指页面在硬盘存储的顺序和索引中排序的顺序一致，即也被排序，而并非任意顺序。这种Clustered Indexes在对于range query很有帮助。range query的一个例子是要<code>primary key</code>在0到100的所有tuple。对这个例子，如果我们需要5个page。那这5个page在clustered index以后的硬盘上是连续的，一次sequential I/O就可以解决。如果不使用clustered indexes, 那就可能出现5次random I/O，对应的性能就很垃圾了。</p><!-- TODO:实验 --><h2 id="Selection-Conditions"><a href="#Selection-Conditions" class="headerlink" title="Selection Conditions"></a>Selection Conditions</h2><p>Selection Conditions是B+ tree的优势，指我们可以搜索index对应的search key的prefix前缀, suffix后缀, 或者其中的部分。</p><p>这是hash table无法做到的，它只能搜索完整了search key。</p><p><img data-src="/images/CMU1544564/Lec07/26.jpg" alt="26.jpg"></p><h3 id="前缀例子"><a href="#前缀例子" class="headerlink" title="前缀例子"></a>前缀例子</h3><p>通过前缀我们可以知道我们想要找的tuple出现在index中的区间，即从小于我们前缀的位置，扫描到大于我们前缀的位置。下面是两个前缀的例子:</p><p><img data-src="/images/CMU1544564/Lec07/27.jpg" alt="27.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/28.jpg" alt="28.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/29.jpg" alt="29.jpg"></p><h3 id="后缀例子"><a href="#后缀例子" class="headerlink" title="后缀例子"></a>后缀例子</h3><p>我们缺失一个前缀，那就将所有的可能都填入前缀。这样会产生好几个需要扫描的区间，这些区间的个数等于所有前缀可能的个数。如下图<code>*</code>可以是A, B, C　(例子中合并了后面两个区间到一起)：</p><p><img data-src="/images/CMU1544564/Lec07/30.jpg" alt="30.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/31.jpg" alt="31.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/32.jpg" alt="32.jpg"></p><p><br></p><h2 id="B-Tree-Design-Choices"><a href="#B-Tree-Design-Choices" class="headerlink" title="B+ Tree Design Choices"></a>B+ Tree Design Choices</h2><p><img data-src="/images/CMU1544564/Lec07/33.jpg" alt="33.jpg"></p><ul><li>上图中的链接: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS8xMC4xNTYxLzE5MDAwMDAwMjg=" title="https://dl.acm.org/doi/10.1561/1900000028">https://dl.acm.org/doi/10.1561/1900000028<i class="fa fa-external-link"></i></span></li><li>这部分都是实现的经验之谈</li></ul><h3 id="Node-size"><a href="#Node-size" class="headerlink" title="Node size"></a>Node size</h3><p><img data-src="/images/CMU1544564/Lec07/34.jpg" alt="34.jpg"></p><ul><li>如上图中:</li><li>Node可以是一个page，也可以是多个page</li><li>在速度慢的硬件上的node的容量建议会更大，这样可以减少I/O的次数</li><li>leaf node scan: 涉及数量很多的node, 是sequential I/O</li><li>root-to-leaf traversal: 涉及数量很少的node, 但是是random I/O, 因为这些page很大概率不存储在一起</li></ul><p><br></p><ul><li>另外index和原表格可以使用两个buffer pool:</li><li>index buffer page: 1 MiB</li><li>table data buffer page: 8 KiB</li></ul><h3 id="Merge-Threshold"><a href="#Merge-Threshold" class="headerlink" title="Merge Threshold"></a>Merge Threshold</h3><p><img data-src="/images/CMU1544564/Lec07/35.jpg" alt="35.jpg"></p><ul><li>如上图:</li><li>如果一个node中元素少于<code>M/2 - 1</code>，即没有half-full, 发生underflow。我们可以让这个node保存存在，而不去merge它。然后每一段时间，批量处理B+ tree中所有这类的node。</li></ul><h3 id="Variable-Length-Keys"><a href="#Variable-Length-Keys" class="headerlink" title="Variable Length Keys"></a>Variable Length Keys</h3><p><img data-src="/images/CMU1544564/Lec07/36.jpg" alt="36.jpg"></p><ul><li>如上图:</li><li>Approach 1: Pointers　太慢</li><li>Approach 2: Variable Length Nodes不适合fix size page</li><li>Approach 3: Padding 太浪费空间</li><li>Approach 4: Key Map / Indirection 性能较好</li></ul><h4 id="Key-Map-Indirection"><a href="#Key-Map-Indirection" class="headerlink" title="Key Map / Indirection"></a>Key Map / Indirection</h4><p>这个就和slotted page类似，将vaiable lenght key存在同一个page。</p><p><img data-src="/images/CMU1544564/Lec07/38.jpg" alt="38.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/39.jpg" alt="39.jpg"></p><ul><li>如上图:</li><li>可以在<code>sorted key map</code>这个区域存一个<strong>首字母</strong>，这样可以减少跳到<code>key+values</code>区域的次数。不必每一个<code>key</code>都去看它的全部内容。</li></ul><h3 id="Non-Unique-Indexes"><a href="#Non-Unique-Indexes" class="headerlink" title="Non-Unique Indexes"></a>Non-Unique Indexes</h3><p><img data-src="/images/CMU1544564/Lec07/40.jpg" alt="40.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/41.jpg" alt="41.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/42.jpg" alt="42.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/43.jpg" alt="43.jpg"></p><h3 id="Intra-Node-Search"><a href="#Intra-Node-Search" class="headerlink" title="Intra-Node Search"></a>Intra-Node Search</h3><p>Intra-Node Search指在node中搜索，可以想象成在page中那些已经排序完的数据中搜索：</p><h4 id="Linear"><a href="#Linear" class="headerlink" title="Linear"></a>Linear</h4><p><img data-src="/images/CMU1544564/Lec07/44.jpg" alt="44.jpg"></p><h4 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h4><p><img data-src="/images/CMU1544564/Lec07/46.jpg" alt="46.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/47.jpg" alt="47.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/48.jpg" alt="48.jpg"></p><h4 id="Interpolation"><a href="#Interpolation" class="headerlink" title="Interpolation"></a>Interpolation</h4><p>Interpolation指数字的分布如果已知，可以直接猜到想搜的<code>key</code>的位置。这个属于特例，而且不适用于字符串。</p><p><img data-src="/images/CMU1544564/Lec07/49.jpg" alt="49.jpg"></p><p><br><br><br></p><h2 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h2><p><img data-src="/images/CMU1544564/Lec07/50.jpg" alt="50.jpg"></p><h3 id="Prefix-Compression"><a href="#Prefix-Compression" class="headerlink" title="Prefix Compression"></a>Prefix Compression</h3><p>Prefix Compression即字符串共有的前缀只需要存储一次，能高效节省出存储的空间，同时也可以降低B+ Tree的高度，加快搜索速度。</p><p><img data-src="/images/CMU1544564/Lec07/51.jpg" alt="51.jpg"></p><h3 id="Suffix-Truncation"><a href="#Suffix-Truncation" class="headerlink" title="Suffix Truncation"></a>Suffix Truncation</h3><p>我们在最开始说过leaf node起到存储信息的作用，inner node起到lookup中导航的作用。对于字符串，inner node中没有必要保存全部，只需要保存足够的前缀，<strong>保证大于小于的关系和导航的作用</strong>。见下面的例子中，实际上<code>a</code>和<code>l</code>也已经足够:</p><p><img data-src="/images/CMU1544564/Lec07/52.jpg" alt="52.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/53.jpg" alt="53.jpg"></p><h3 id="Bulk-Insert"><a href="#Bulk-Insert" class="headerlink" title="Bulk Insert"></a>Bulk Insert</h3><p>一次次insert来获得一个B+ Tree很慢。Bulk Insert是将keys先排序，再完成leaf node, 再根据leaf node去完成inner node。Bulk Insert让我们能更快去获得一个B+ Tree:</p><p><img data-src="/images/CMU1544564/Lec07/54.jpg" alt="54.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/55.jpg" alt="55.jpg"></p><h3 id="Pointer-Swizzling"><a href="#Pointer-Swizzling" class="headerlink" title="Pointer Swizzling"></a>Pointer Swizzling</h3><p>我们每一次从B+ Tree中需要一个page，都需要调用buffer pool中的函数，用<code>pageid</code>获得对应page的指针。这种间接indirection，带来固定的开销。而我们可以节省这一部分，特别在B+ Tree的上面几层。因为每次查询都需要上面几层的page，它们属于hot page，即它们经常需要有被访问，每一次都找buffer pool显得花销更大了。我们完全可以把这些page一直留着内存里，然后在B+_Tree中直接带上它们内容的指针，这样访问它们不需要经过buffer pool。而这些hot page的数量不是很多，完全可以长久留着内存中。(见<a href="#b+-tree-in-practice">B+ Tree In Practice</a>中，两层node大概在134个page, 占1MiB。)</p><p><img data-src="/images/CMU1544564/Lec07/57.jpg" alt="57.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/58.jpg" alt="58.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/59.jpg" alt="59.jpg"></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p><img data-src="/images/CMU1544564/Lec07/60.jpg" alt="60.jpg"></p><p><img data-src="/images/CMU1544564/Lec07/61.jpg" alt="61.jpg"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tree Indexes Part I - 树索引 I&lt;/p&gt;
&lt;p&gt;Slide: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA3LXRyZWVzMS5wZGY=&quot; title=&quot;https://15445.courses.cs.cmu.edu/fall2019/slides/07-trees1.pdf&quot;&gt;https://15445.courses.cs.cmu.edu/fall2019/slides/07-trees1.pdf&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Note: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDctdHJlZXMxLnBkZg==&quot; title=&quot;https://15445.courses.cs.cmu.edu/fall2019/notes/07-trees1.pdf&quot;&gt;https://15445.courses.cs.cmu.edu/fall2019/notes/07-trees1.pdf&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Readings:  Chapter 11.1-11.4&lt;/p&gt;
&lt;p&gt;Database Tree Indexes 在CMU分成了两部分，在两节课中讲。这是第一部分。&lt;/p&gt;
&lt;p&gt;这节课中，我们会学习数据库的中使用的B+树，它数据库最重要的数据结构。几十年来，数据库的形式和技术变化很大，但是始终坚持在使用B+树以及它的变形。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Access Methods" scheme="https://cakebytheoceanluo.github.io/categories/Access-Methods/"/>
    
      <category term="B Tree" scheme="https://cakebytheoceanluo.github.io/categories/B-Tree/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/categories/Indexing/"/>
    
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/tags/Indexing/"/>
    
      <category term="B Tree" scheme="https://cakebytheoceanluo.github.io/tags/B-Tree/"/>
    
      <category term="Clustered Index" scheme="https://cakebytheoceanluo.github.io/tags/Clustered-Index/"/>
    
      <category term="Variable Length Key" scheme="https://cakebytheoceanluo.github.io/tags/Variable-Length-Key/"/>
    
      <category term="Prefix Compression" scheme="https://cakebytheoceanluo.github.io/tags/Prefix-Compression/"/>
    
      <category term="Suffix Truncation" scheme="https://cakebytheoceanluo.github.io/tags/Suffix-Truncation/"/>
    
      <category term="Bulk Load (Bulk Insert)" scheme="https://cakebytheoceanluo.github.io/tags/Bulk-Load-Bulk-Insert/"/>
    
      <category term="Pointer Swizzling" scheme="https://cakebytheoceanluo.github.io/tags/Pointer-Swizzling/"/>
    
  </entry>
  
  <entry>
    <title>[CMU-15445]Lec06 Hash Tables - 哈希表</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/18/CMU-15445-Lec06/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/18/CMU-15445-Lec06/</id>
    <published>2020-03-18T18:34:10.000Z</published>
    <updated>2020-03-19T19:51:14.994Z</updated>
    
    <content type="html"><![CDATA[<p>Hash Tables - 哈希表</p><p>Slide: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA2LWhhc2h0YWJsZXMucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/slides/06-hashtables.pdf">https://15445.courses.cs.cmu.edu/fall2019/slides/06-hashtables.pdf<i class="fa fa-external-link"></i></span><br>Note: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDYtaGFzaHRhYmxlcy5wZGY=" title="https://15445.courses.cs.cmu.edu/fall2019/notes/06-hashtables.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/06-hashtables.pdf<i class="fa fa-external-link"></i></span><br>Readings: Chapter 11.6-11.7<!-- TODO:link here --></p><p>这节课中，我们会学习数据库的中使用的哈希表hash table，实际上我们涉及纯算法课中的理论，但更重要的是工程实现的角度。数据库中使用的hash table需要有高性能，多线程读写，内存访问友好。</p><a id="more"></a><p><img data-src="/images/CMU1544564/Lec06/1.jpg" alt="1.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/3.jpg" alt="3.jpg"></p><h1 id="Data-Structure-in-DBMS"><a href="#Data-Structure-in-DBMS" class="headerlink" title="Data Structure in DBMS"></a>Data Structure in DBMS</h1><p><img data-src="/images/CMU1544564/Lec06/4.jpg" alt="4.jpg"></p><ul><li>Internal Metadata: 用于管理数据库内部原数据的数据结构，如 page table, page directory</li><li>Core Data Storage: 存储tuple/表格的数据结构, 如：Memacache数据库用hash table,　MySQL使用B+树</li><li>Temporary Data Structures:对SQL Query暂时的数据结构，如一个使用hash join的SQL Query需要新建一个hash table,然后对它查询，这个hash table是暂时的，即Query结束就清除释放</li><li>Table Indexes: 辅助型索引数据结构, 使得查询更快，不需遍历所有tuple</li></ul><p><img data-src="/images/CMU1544564/Lec06/5.jpg" alt="5.jpg"></p><h1 id="Hash-Table-Overview"><a href="#Hash-Table-Overview" class="headerlink" title="Hash Table Overview"></a>Hash Table Overview</h1><p><img data-src="/images/CMU1544564/Lec06/6.jpg" alt="6.jpg"></p><ul><li>上图中：</li><li>空间复杂度是$O(n)$, hash table并不是一个能节省存储空间的数据结构。</li><li>查询时间复杂度:<ul><li>average case: $O(1)$. 从算法理论上，它的复杂度是一个常数。但在工业中，一个常数也有<strong>大小</strong>之分。比如<strong>小的常数时间复杂度</strong>代表CPU指令数较少，而<strong>大的常数时间复杂度</strong>代表CPU指令数较多，即使它们对应的CPU指令数都是常数，但是运行时间还是有区别。</li><li>worst case: $O(n)$。比如hash function效果很不平均，将所有指hash到了一个位置，反而形成了一个list。这种不平均的hash function比如是：　$f(x) = 1$, 即常数函数。</li></ul></li></ul><p><img data-src="/images/CMU1544564/Lec06/7.jpg" alt="7.jpg"></p><ul><li>上图中：</li><li>f(abc)=0, f(def)=2, f(xyz)=n</li></ul><p><img data-src="/images/CMU1544564/Lec06/8.jpg" alt="8.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/9.jpg" alt="9.jpg"></p><ul><li>上图中的一些假设来自于算法中理论部分，但是实际上：</li><li>没有冲突collision的perfect hash function在大数据前提下是不存在的。hash collision是一定发生的。</li></ul><p><img data-src="/images/CMU1544564/Lec06/10.jpg" alt="10.jpg"></p><ul><li>从上图中, hash table分成两个独立的部分，它们互相不依赖：</li><li>hash function: 即我们之前提到的$f$函数, $f (\mathrm{key}) \rightarrow \mathrm{int} \in D$, $D$是一个int的集合。我们希望这个hash function很快，并且冲突概率很低：<ul><li>我们签名提到的$f(x) = 1$常数函数很快，但是它把任何一个key都匹配到1这个位置，即它的冲突概率是100%,这个非常不好，使我们的hash table变成了list,查询的时间复杂度变成了$O(n)$的average case</li></ul></li><li>hash scheme:　即如何去处理一定会发生的冲突。</li></ul><p><img data-src="/images/CMU1544564/Lec06/11.jpg" alt="11.jpg"></p><p><br></p><h1 id="Hash-Function"><a href="#Hash-Function" class="headerlink" title="Hash Function"></a>Hash Function</h1><p><img data-src="/images/CMU1544564/Lec06/12.jpg" alt="12.jpg"></p><ul><li>上图中:</li><li>我们不考虑密码学cryptographic的hash function,　因为我们只是在数据库内部使用hash table，来<a href="#data-structure-in-dbms">加速处理数据库的元数据, 存储, join, 索引</a>。而不是用来加密解密信息。<strong>数据库希望hash function很快，并且冲突概率很低。</strong></li></ul><p><img data-src="/images/CMU1544564/Lec06/13.jpg" alt="13.jpg"></p><ul><li>CRC-64: <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGUuc3RlcGhhbi1icnVtbWUuY29tL2NyYzMyLw==" title="https://create.stephan-brumme.com/crc32/">https://create.stephan-brumme.com/crc32/<i class="fa fa-external-link"></i></span></li><li>MurmurHash: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FhcHBsZWJ5L3NtaGFzaGVy" title="https://github.com/aappleby/smhasher">https://github.com/aappleby/smhasher<i class="fa fa-external-link"></i></span></li><li>Google CityHash: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jaXR5aGFzaA==" title="https://github.com/google/cityhash">https://github.com/google/cityhash<i class="fa fa-external-link"></i></span></li><li>Facebook XXHash: <span class="exturl" data-url="aHR0cHM6Ly9jeWFuNDk3My5naXRodWIuaW8veHhIYXNoLw==" title="https://cyan4973.github.io/xxHash/">https://cyan4973.github.io/xxHash/<i class="fa fa-external-link"></i></span></li><li>Google FarmHash: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9mYXJtaGFzaA==" title="https://github.com/google/farmhash">https://github.com/google/farmhash<i class="fa fa-external-link"></i></span></li></ul><!-- TODO --><p><img data-src="/images/CMU1544564/Lec06/14.jpg" alt="14.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/15.jpg" alt="15.jpg"></p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYXZsby9oYXNoLWZ1bmN0aW9uLWJlbmNobWFyaw==" title="https://github.com/apavlo/hash-function-benchmark">https://github.com/apavlo/hash-function-benchmark<i class="fa fa-external-link"></i></span></li></ul><p><br></p><p>另外还有一种Fibonacci Hashing, 推荐阅读: <span class="exturl" data-url="aHR0cHM6Ly9wcm9iYWJseWRhbmNlLmNvbS8yMDE4LzA2LzE2L2ZpYm9uYWNjaS1oYXNoaW5nLXRoZS1vcHRpbWl6YXRpb24tdGhhdC10aGUtd29ybGQtZm9yZ290LW9yLWEtYmV0dGVyLWFsdGVybmF0aXZlLXRvLWludGVnZXItbW9kdWxvLw==" title="https://probablydance.com/2018/06/16/fibonacci-hashing-the-optimization-that-the-world-forgot-or-a-better-alternative-to-integer-modulo/">https://probablydance.com/2018/06/16/fibonacci-hashing-the-optimization-that-the-world-forgot-or-a-better-alternative-to-integer-modulo/<i class="fa fa-external-link"></i></span></p><p><br></p><h1 id="Static-Hashing-Schemes"><a href="#Static-Hashing-Schemes" class="headerlink" title="Static Hashing Schemes"></a>Static Hashing Schemes</h1><p>Static Hashing Schemes正如staic所说，这种scheme下的hash table的容量是固定的。如果我们需要在hash的同时，发现容量不够，只能resize到更大的容量，这是我们需要将所有的key再重新hash进扩大容量的hash table。这种resize在static hashing scheme意味者rehashing，这个操作对性能来说是灾难级别的。很显然如果我们能一开始就知道<strong>合适的容量</strong>,　就能直接避免这部分的浪费时间。如何寻找合适的容量，我们可以进行cardinality estimation基数估计。这个部分后面会提到。<!-- TODO: --></p><blockquote><p>A static hashing scheme is one where the size of the hash table is fixed. This means that if the DBMS runs out of storage space in the hash table, then it has to rebuild it from scratch with a larger table. Typically the new hash table is twice the size of the original hash table.</p></blockquote><p><img data-src="/images/CMU1544564/Lec06/16.jpg" alt="16.jpg"></p><h2 id="Linear-Probe-Hashing"><a href="#Linear-Probe-Hashing" class="headerlink" title="Linear Probe Hashing"></a>Linear Probe Hashing</h2><p>Linear Probe Hashing是open address hashing的一种。</p><p>Linear Probing方式虽然简单，但并不是解决冲突的最好的策略，因为它会导致<strong>同类哈希的聚集(Primary Clustering)</strong>。这导致搜索哈希表时，冲突依然存在。如果我们要访问 Edward 的信息，因为 Edward 的社保号 111-00-1235 哈希为 1235，然而我们在 1235 位置找到的是 Bob，所以再搜索 1236，找到的却是 Danny，以此类推直到找到 Edward。<sup><a href="#fn2">2</a></sup></p><p><img data-src="/images/CMU1544564/Lec06/17.jpg" alt="17.jpg"></p><blockquote><ul><li>To see if value is present, go to slot using hash, and scan for the key. The scan stops if you find the desired key or you encounter an empty slot.</li></ul></blockquote><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p>hash table存储不仅仅是<code>value</code>，而是<code>(key, value)</code>这一对。这是因为Linear Probe Hashing会遇到冲突，在查询时需要比较key来确定是否找到(key相等)或者只是一次冲突(key不相等)。</p><p><img data-src="/images/CMU1544564/Lec06/18.jpg" alt="18.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/19.jpg" alt="19.jpg"></p><p>下图中C和A的hash位置相同(冲突), 我们将C写在A的后面，并A连接C：<br><img data-src="/images/CMU1544564/Lec06/20.jpg" alt="20.jpg"></p><p>下图中D和C的hash位置相同(冲突), 我们将D写在C的后面，并C连接D：<br><img data-src="/images/CMU1544564/Lec06/21.jpg" alt="21.jpg"></p><p>下图中E和A/C的hash位置相同(冲突), 我们将E写在C的后面，<strong>但是C后面被D占有了</strong>，所有将E写在D后面,并D连接E：<br><img data-src="/images/CMU1544564/Lec06/22.jpg" alt="22.jpg"></p><p>下图中F和E的hash位置相同(冲突), 我们将F写在E的后面，并E连接F：<br><img data-src="/images/CMU1544564/Lec06/23.jpg" alt="23.jpg"></p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><h4 id="Delete-C"><a href="#Delete-C" class="headerlink" title="Delete C"></a>Delete C</h4><p>下图中我们想删除C, 我们已经见到C和A冲突。我们看第一个位置是key是A, 而A!=C, 然后往下看：<br><img data-src="/images/CMU1544564/Lec06/24.jpg" alt="24.jpg"></p><p>下图中，我们发现在第二个位置, hash table条目中的key是C，而我们就像删去C, C==C。这个条目被删除：<br><img data-src="/images/CMU1544564/Lec06/25.jpg" alt="25.jpg"></p><h4 id="Find-D-after-deletion-of-C"><a href="#Find-D-after-deletion-of-C" class="headerlink" title="Find D after deletion of C"></a>Find D after deletion of C</h4><p>下图中，我们想寻找D。由于之前D和C的hash位置相同(冲突)，而C已经被删除，D失去了和C的联系。导致我们不能找到D：<br><img data-src="/images/CMU1544564/Lec06/26.jpg" alt="26.jpg"></p><h5 id="Approach1-Tombstone"><a href="#Approach1-Tombstone" class="headerlink" title="Approach1: Tombstone"></a>Approach1: Tombstone</h5><p>解决上述问题的第一种方法是使用一个<em>墓碑</em>:　在上面的例子中，我们删除了C，但是留下了一个C的墓碑，墓碑依然保留着到D的联系链接。通过这个墓碑的链接我们可以找到D:<br><img data-src="/images/CMU1544564/Lec06/27.jpg" alt="27.jpg"></p><p>这种作法的缺点是：保存墓碑会占有空间。</p><h5 id="Approach2-Movement"><a href="#Approach2-Movement" class="headerlink" title="Approach2: Movement"></a>Approach2: Movement</h5><p>解决上述问题的第二种方法是<em>移动</em>：即删除一个条目之后，对hash table中和已被删除条目有联系的条目进行移动，移动至正确的地方。</p><p>下面的例子中，只能移动和已被删除<strong>有联系的条目</strong> (B和F并不曾碰撞冲突，但是B在如下例子不应该被移动):</p><p><img data-src="/images/CMU1544564/Lec06/28.jpg" alt="28.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/29.jpg" alt="29.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/30.jpg" alt="30.jpg"></p><p>下图中检查B是否和被删除的条目C存在联系，发现B就在它自己应该在的地方，而和其他条目无任何联系，因次不移动B。<strong>无视那个从上到下的箭头</strong>:<br><img data-src="/images/CMU1544564/Lec06/31.jpg" alt="31.jpg"></p><p>这种作法的缺点是:删除会变得非常麻烦。</p><p><br></p><p>这里提一下，在hash join中，我们只用insert和find这两个函数，而不用delete。对于hash join这中操作可以无视删除会导致的缺点。</p><p>但是在index索引中，insert, find, delete这些操作都被需要。</p><h3 id="Non-Unique-Keys"><a href="#Non-Unique-Keys" class="headerlink" title="Non-Unique Keys"></a>Non-Unique Keys</h3><p>有两种处理<strong>重复key</strong>的方式:</p><ul><li>value list存储重复key所拥有的value</li><li>存储key和value，这样即使key重复,value值也不一样。<strong>这种方式更加常见。</strong><br><img data-src="/images/CMU1544564/Lec06/32.jpg" alt="32.jpg"></li></ul><p><br></p><h2 id="Robin-Hood-Hashing"><a href="#Robin-Hood-Hashing" class="headerlink" title="Robin Hood Hashing"></a>Robin Hood Hashing</h2><p>Robin Hood Hashing和Linear Probe Hashing相比，更可以去平衡冲突，让冲突的key离它应该拥有的位置(optimal position)近一些。正如它的名字一样，罗宾汉，劫富济贫，解决badcase。</p><p><img data-src="/images/CMU1544564/Lec06/33.jpg" alt="33.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/34.jpg" alt="34.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/35.jpg" alt="35.jpg"></p><p>下图中, C与A冲突于红色箭头所指的位置。</p><ul><li>这时A离它的optimal postion距离为0, C离它的optimal postion距离为0。两值相等，C不能获得A的位置。</li><li>C获得A后面空的位置，C离它的optimal postion距离为1：<br><img data-src="/images/CMU1544564/Lec06/36.jpg" alt="36.jpg"></li></ul><p><br></p><p>下图中, D与C冲突于红色箭头所指的位置。</p><ul><li>这时C离它的optimal postion距离为1, D离它的optimal postion距离为0。D的距离值小于C的距离值，D不能获得C的位置。</li><li>D获得C后面空的位置，D离它的optimal postion距离为1：<br><img data-src="/images/CMU1544564/Lec06/37.jpg" alt="37.jpg"></li></ul><p><br></p><p><strong>下两张图中</strong>, E与A冲突于红色箭头所指的位置。</p><ul><li>这时A离它的optimal postion距离为0, E离它的optimal postion距离为0。两值相等，E不能获得A的位置。</li><li>E获得A后面空的位置，然后E与C冲突。</li><li>这时C离它的optimal postion距离为1, E离它的optimal postion距离为1。两值相等，E不能获得C的位置。</li><li>E获得C后面空的位置，然后E与D冲突。这时D离它的optimal postion距离为1, E离它的optimal postion距离为2。<strong>E的距离值大于D的距离值，E获得D的位置。</strong></li><li>D只能向后移动，同时也更新自己离自己optimal position的距离:<br><img data-src="/images/CMU1544564/Lec06/38.jpg" alt="38.jpg"></li></ul><p><img data-src="/images/CMU1544564/Lec06/39.jpg" alt="39.jpg"></p><p><br></p><p>下图中, F与D冲突于红色箭头所指的位置。</p><ul><li>这时D离它的optimal postion距离为2, F离它的optimal postion距离为1。F的距离值小于D的距离值，F不能获得D的位置。</li><li>F获得D后面空的位置，F离它的optimal postion距离为1：<br><img data-src="/images/CMU1544564/Lec06/40.jpg" alt="40.jpg"></li></ul><p><br></p><p>我们比较一下结果：</p><ul><li>Linear Probe Hashing: D在E的上面。D离自己optimal position距离为1,E离自己optimal position距离为3。</li><li>Robin Hood Hashing:　E在D的上面。D离自己optimal position距离为2,E离自己optimal position距离为2。</li></ul><p>Robin Hood Hashing平均了一下各个key离自己optimal position的距离。但是它在insert的时候，有可能会调整其他条目的位置, 在我们的例子中，在insert E的时候调整了D的位置。说明它会需要更多write operation的次数，另外在insert的时候它也有更多条件需要检查，这会造成更多的branch miss prediction。</p><p>实际实现上Linear Probe Hashing更为常见。</p><p><br></p><h2 id="Cuckoo-Hashing"><a href="#Cuckoo-Hashing" class="headerlink" title="Cuckoo Hashing"></a>Cuckoo Hashing</h2><p>Cuckoo Hashing使用多个hash table, 每个hash table拥有自己的hash function (hash function seed)。我们下面的例子是用两个表，当然也可以用三个来实现Cuckoo Hashing。</p><blockquote><p>The hash functions are the same algorithm (e.g., XXHash, CityHash); they generate different hashes for the same key by using different seed values.</p></blockquote><p>insert: </p><ul><li>总向有空位置(optimal position)的hash table插入。如果多个hash table都有空位置可以插入，随意选择其中的一个即可。</li><li>如果所有的hash table都没有空位置可以插入。随机选择一个hash table中对应的位置插入,　并取出原来在这位置上的key, 将它insert到其他的hash table。</li></ul><p>优点是查询快，路径短，最多两次就能查询到。</p><p>缺点是插入性能差，在容量小的情况下很容易冲突。连锁的冲突会陷入死循环, 解决只能增加容量并且rehash。</p><p><img data-src="/images/CMU1544564/Lec06/41.jpg" alt="41.jpg"></p><p>下图中，A对应的位置都是空的，A可以被插入至任何一个hash table，例子中选择了#1:<br><img data-src="/images/CMU1544564/Lec06/42.jpg" alt="42.jpg"></p><p><br></p><p>下图中，B对应的位置只有在#2是空的，那么插入至#2:<br><img data-src="/images/CMU1544564/Lec06/43.jpg" alt="43.jpg"></p><p><br></p><p>下面几张图中，</p><ul><li>C对应的位置<strong>都不是空的</strong>，C可以选择任何一个hash table，代替占有位置的key，例子中选择了#2, 即代替了B</li><li>B被rehash到#1，在#1中B对应的位置也不是空的，B代替占有位置的key A</li><li>A被rehash到#2, 在#2中对应的位置是空的：<br><img data-src="/images/CMU1544564/Lec06/44.jpg" alt="44.jpg"></li></ul><p><img data-src="/images/CMU1544564/Lec06/45.jpg" alt="45.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/46.jpg" alt="46.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/47.jpg" alt="47.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/48.jpg" alt="48.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/49.jpg" alt="49.jpg"></p><p><br></p><p>在Cuckoo Hashing中<strong>有可能不终止</strong>，即进入一个死循环，永远找不到能插入的地方。这时候说明hash table容量太小，需要<code>resize</code>到更大的容量。</p><blockquote><p> If we find a cycle, then we can rebuild all of the hash tables with new hash function seeds (less common) or rebuild the hash tables using larger tables (more common).</p></blockquote><h1 id="Dynamic-Hashing-Schemes"><a href="#Dynamic-Hashing-Schemes" class="headerlink" title="Dynamic Hashing Schemes"></a>Dynamic Hashing Schemes</h1><p>Dynamic Hashing Schemes的特征就是在能持续容量增长，而不需要额外rehash。即resize的操作花销不大。</p><p><img data-src="/images/CMU1544564/Lec06/50.jpg" alt="50.jpg"></p><h2 id="Chained-Hashing"><a href="#Chained-Hashing" class="headerlink" title="Chained Hashing"></a>Chained Hashing</h2><p>Chained Hashing又称Hashing with Chaining。特征是每一个hash table中的条目都是一个linked list of bucket。如果bucket满了，那就再指向一个新的bucket。</p><p><strong>这里的bucket可以具象成一个page。</strong></p><p>优点是实现简单，不需要resize。</p><p>缺点是每一个linked list如果很长, 就变成$O(n)$。</p><p><img data-src="/images/CMU1544564/Lec06/51.jpg" alt="51.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/52.jpg" alt="52.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/53.jpg" alt="53.jpg"></p><h2 id="Extendible-Hashing"><a href="#Extendible-Hashing" class="headerlink" title="Extendible Hashing"></a>Extendible Hashing</h2><ul><li>global <code>n bit</code>: 指key中前n个bit是对左侧directory有效。</li><li>local <code>m bit</code>: 指global中<code>n bit</code>中的前<code>m</code>个bit<strong>在这一个bucket</strong>有效。</li><li>$n \geq m$恒成立</li><li>如果local bucket满了(overflow)，那就增加一个local bit去容纳更多。如果$n=m$，那就先增加一个global bit，再增加local bit。使$n \geq m$条件依然成立</li></ul><p><img data-src="/images/CMU1544564/Lec06/54.jpg" alt="54.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/55.jpg" alt="55.jpg"></p><h3 id="Find-A"><a href="#Find-A" class="headerlink" title="Find A"></a>Find A</h3><p><img data-src="/images/CMU1544564/Lec06/56.jpg" alt="56.jpg"></p><h3 id="Insert-B-No-Overflow"><a href="#Insert-B-No-Overflow" class="headerlink" title="Insert B - No Overflow"></a>Insert B - No Overflow</h3><p><img data-src="/images/CMU1544564/Lec06/57.jpg" alt="57.jpg"></p><h3 id="Insert-C-Overflow"><a href="#Insert-C-Overflow" class="headerlink" title="Insert C - Overflow"></a>Insert C - Overflow</h3><p>C对应的local bucket已经满了，另外local bit = global bit = 2</p><p>我们正如前面介绍的，先增加global bit到3, 再将local bit增加到3, 最后insert C。</p><p><img data-src="/images/CMU1544564/Lec06/58.jpg" alt="58.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/59.jpg" alt="59.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/60.jpg" alt="60.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/61.jpg" alt="61.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/62.jpg" alt="62.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/63.jpg" alt="63.jpg"></p><p>这里有一个上课问题引发的讨论。结果是extendible hash table的<code>resize</code>操作是很简单廉价的。左侧的directory是一个array of pointer或者array of page id。用latch保护这个array,　然后扩大它的容量，复制原来的内容进入以后，就可以解开latch了。这个过程不涉及rehash和大量的数据复制，因此很快速。</p><!-- TODO: TUM GDB 题目 --><h2 id="Linear-Hashing"><a href="#Linear-Hashing" class="headerlink" title="Linear Hashing"></a>Linear Hashing</h2><p>Linear Hashing的目的是不在<code>resize</code>的时候用一个global latch，来提高性能。我们可以从下面例子中看出，在Linear Hashing中只需要去latch一个位置, 即<code>split pointer</code>所指的地方。</p><p>作法是按照<em>顺序</em>去分裂bucket，而不是分裂特定满的bucket。顺序实际上只是bucket id顺序，有一个<code>split pointer</code>去跟踪下一个需要分裂的bucket。而且Linear Hashing使用多个hash function。</p><blockquote><p>Instead of immediately splitting a bucket when it overflows, this scheme maintains a split pointer that keeps track of the next bucket to split. No matter whether this pointer is pointing to the bucket that overflowed, the DBMS always splits. The overflow criterion is left up to the implementation</p></blockquote><p>具体描述和和Java实现，见一篇别人的博客: <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wYmYyNDAwNzg2ZjY=" title="https://www.jianshu.com/p/0bf2400786f6">https://www.jianshu.com/p/0bf2400786f6<i class="fa fa-external-link"></i></span></p><p><img data-src="/images/CMU1544564/Lec06/64.jpg" alt="64.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/65.jpg" alt="65.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/66.jpg" alt="66.jpg"></p><h3 id="Find-6"><a href="#Find-6" class="headerlink" title="Find 6"></a>Find 6</h3><p><img data-src="/images/CMU1544564/Lec06/67.jpg" alt="67.jpg"></p><p><br></p><h3 id="Insert-17-Overflow"><a href="#Insert-17-Overflow" class="headerlink" title="Insert 17 - Overflow"></a>Insert 17 - Overflow</h3><ul><li>Overflow的bucket后面会生成一个新的bucket。</li><li><code>split pointer</code>所指的bucket会进行分裂，分裂成两个bucket，原内容重新用新的hash function，再分配原内容到新旧两个bucket。下面例子中:<ul><li>$\mathrm{hash_2}(8) = 8 \% 8 = 0 \; \rightarrow \mathrm{bucket_0}$</li><li>$\mathrm{hash_2}(20) = 20 \% 8 = 4 \; \rightarrow \mathrm{bucket_4}$</li></ul></li><li>分裂完以后，<code>split pointer</code>指向下一个bucket(bucket id)。</li></ul><p><img data-src="/images/CMU1544564/Lec06/68.jpg" alt="68.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/69.jpg" alt="69.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/70.jpg" alt="70.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/71.jpg" alt="71.jpg"></p><p><br></p><h3 id="Find-20"><a href="#Find-20" class="headerlink" title="Find 20"></a>Find 20</h3><ul><li>先应用$\mathrm{hash_1}$</li><li>$\mathrm{hash_1}$的结果是0, 0这个位置<strong>高于</strong><code>split pointer</code>, 说明0这个位置已经分裂过了。需要再应用$\mathrm{hash_2}$</li></ul><p><img data-src="/images/CMU1544564/Lec06/72.jpg" alt="72.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/73.jpg" alt="73.jpg"></p><p><br></p><h3 id="Find-9"><a href="#Find-9" class="headerlink" title="Find 9"></a>Find 9</h3><ul><li>先应用$\mathrm{hash_1}$</li><li>$\mathrm{hash_1}$的结果是1, 1这个位置<strong>没有高于</strong><code>split pointer</code>, 说明1这个位置没有分裂过了。不需要再应用$\mathrm{hash_2}$</li></ul><p><img data-src="/images/CMU1544564/Lec06/74.jpg" alt="74.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/75.jpg" alt="75.jpg"></p><p><br></p><h3 id="Delete-20"><a href="#Delete-20" class="headerlink" title="Delete 20"></a>Delete 20</h3><p>这个例子中，分裂出的bucket因为删除的原因变成了空bucket。这时候可以回收这个bucket，同时是逆操作之前的分裂步骤，需要将<code>split pointer</code>向上移动。</p><p><img data-src="/images/CMU1544564/Lec06/76.jpg" alt="76.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/77.jpg" alt="77.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/78.jpg" alt="78.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/79.jpg" alt="79.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/80.jpg" alt="80.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/81.jpg" alt="81.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/82.jpg" alt="82.jpg"></p><h3 id="Insert-21"><a href="#Insert-21" class="headerlink" title="Insert 21"></a>Insert 21</h3><p>这里也视作一个overflow。</p><p><img data-src="/images/CMU1544564/Lec06/83.jpg" alt="83.jpg"></p><p><br></p><p>当<code>split point</code>指向4的时候，即分裂完一轮了，当前 # bucket=8。把<code>split point</code>重置成0，<strong>开始下一轮</strong>，每轮的bucket数翻倍，所以hash函数中的取余的数也要翻倍。这样就实现了动态扩展。<sup><a href="#fn1">1</a></sup></p><blockquote><p>When pointer reaches last slot, delete original hash function and replace it with new hash function.</p></blockquote><p><br></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p><img data-src="/images/CMU1544564/Lec06/84.jpg" alt="84.jpg"></p><p><img data-src="/images/CMU1544564/Lec06/85.jpg" alt="85.jpg"></p><p>引用:</p><p><a name="fn1">1</a>: CMU Database Systems - Indexes - fxjwind: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZnhqd2luZC9wLzEwODM0ODQ0Lmh0bWw=" title="https://www.cnblogs.com/fxjwind/p/10834844.html">https://www.cnblogs.com/fxjwind/p/10834844.html<i class="fa fa-external-link"></i></span></p><p><a name="fn1">2</a>: CMU 15445 5. hash 表 - 西部小笼包: <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wYmYyNDAwNzg2ZjY=" title="https://www.jianshu.com/p/0bf2400786f6">https://www.jianshu.com/p/0bf2400786f6<i class="fa fa-external-link"></i></span></p><p>推荐阅读:</p><p>Lec 13 Cuckoo Hashing - CS166 Stanford: <span class="exturl" data-url="aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTY2L2xlY3R1cmVzLzEzL1NtYWxsMTMucGRm" title="https://web.stanford.edu/class/cs166/lectures/13/Small13.pdf">https://web.stanford.edu/class/cs166/lectures/13/Small13.pdf<i class="fa fa-external-link"></i></span></p><p>Extendible Hashing Example: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY29zYy5icm9ja3UuY2EvfmVmb3h3ZWxsLzJQMDMvc2xpZGVzL1dlZWsxMlNsaWRlcy5wZGY=" title="https://www.cosc.brocku.ca/~efoxwell/2P03/slides/Week12Slides.pdf">https://www.cosc.brocku.ca/~efoxwell/2P03/slides/Week12Slides.pdf<i class="fa fa-external-link"></i></span></p><p>LINEAR HASHING - QuePer: <span class="exturl" data-url="aHR0cDovL3F1ZXBlci5pbi9kcnVwYWwvYmxvZ3MvZGJzeXMvbGluZWFyX2hhc2hpbmc=" title="http://queper.in/drupal/blogs/dbsys/linear_hashing">http://queper.in/drupal/blogs/dbsys/linear_hashing<i class="fa fa-external-link"></i></span></p><!-- TODO: --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hash Tables - 哈希表&lt;/p&gt;
&lt;p&gt;Slide: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA2LWhhc2h0YWJsZXMucGRm&quot; title=&quot;https://15445.courses.cs.cmu.edu/fall2019/slides/06-hashtables.pdf&quot;&gt;https://15445.courses.cs.cmu.edu/fall2019/slides/06-hashtables.pdf&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Note: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDYtaGFzaHRhYmxlcy5wZGY=&quot; title=&quot;https://15445.courses.cs.cmu.edu/fall2019/notes/06-hashtables.pdf&quot;&gt;https://15445.courses.cs.cmu.edu/fall2019/notes/06-hashtables.pdf&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Readings: Chapter 11.6-11.7&lt;!-- TODO:link here --&gt;&lt;/p&gt;
&lt;p&gt;这节课中，我们会学习数据库的中使用的哈希表hash table，实际上我们涉及纯算法课中的理论，但更重要的是工程实现的角度。数据库中使用的hash table需要有高性能，多线程读写，内存访问友好。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Access Methods" scheme="https://cakebytheoceanluo.github.io/categories/Access-Methods/"/>
    
      <category term="Hash Table" scheme="https://cakebytheoceanluo.github.io/categories/Hash-Table/"/>
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/categories/Indexing/"/>
    
    
      <category term="Indexing" scheme="https://cakebytheoceanluo.github.io/tags/Indexing/"/>
    
      <category term="Hash Function" scheme="https://cakebytheoceanluo.github.io/tags/Hash-Function/"/>
    
      <category term="Hash Scheme" scheme="https://cakebytheoceanluo.github.io/tags/Hash-Scheme/"/>
    
      <category term="Static Hashing Scheme" scheme="https://cakebytheoceanluo.github.io/tags/Static-Hashing-Scheme/"/>
    
      <category term="Linear Probe Hashing" scheme="https://cakebytheoceanluo.github.io/tags/Linear-Probe-Hashing/"/>
    
      <category term="Robin Hood Hashing" scheme="https://cakebytheoceanluo.github.io/tags/Robin-Hood-Hashing/"/>
    
      <category term="Cuckoo Hashing" scheme="https://cakebytheoceanluo.github.io/tags/Cuckoo-Hashing/"/>
    
      <category term="Dynamic Hashing Scheme" scheme="https://cakebytheoceanluo.github.io/tags/Dynamic-Hashing-Scheme/"/>
    
      <category term="Chained Hashing" scheme="https://cakebytheoceanluo.github.io/tags/Chained-Hashing/"/>
    
      <category term="Extendible Hashing" scheme="https://cakebytheoceanluo.github.io/tags/Extendible-Hashing/"/>
    
      <category term="Linear Hashing" scheme="https://cakebytheoceanluo.github.io/tags/Linear-Hashing/"/>
    
  </entry>
  
  <entry>
    <title>[CMU-15445]Lec05 Buffer Pools - 数据库缓存区</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/17/CMU-15445-Lec05/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/17/CMU-15445-Lec05/</id>
    <published>2020-03-17T18:50:19.000Z</published>
    <updated>2020-03-22T20:02:06.031Z</updated>
    
    <content type="html"><![CDATA[<p>Buffer Pools - 数据库缓存区</p><p>Slide: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA1LWJ1ZmZlcnBvb2wucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/slides/05-bufferpool.pdf">https://15445.courses.cs.cmu.edu/fall2019/slides/05-bufferpool.pdf<i class="fa fa-external-link"></i></span><br>Note: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDUtYnVmZmVycG9vbC5wZGY=" title="https://15445.courses.cs.cmu.edu/fall2019/notes/05-bufferpool.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/05-bufferpool.pdf<i class="fa fa-external-link"></i></span><br>Readings: Chapter 10.5-10.8</p><p>这节两课，我们会学习数据库的缓存区管理，这部分基于前面两节课(Storage I和Storage II)。</p><p>缓存区buffer pool就是在内存中对page的缓存(cache)。</p><a id="more"></a><p><img data-src="/images/CMU1544564/Lec05/1.jpg" alt="1.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/6.jpg" alt="6.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/7.jpg" alt="7.jpg"><br>上图中</p><ul><li>spatial control 空间控制: 物理(physically)上我们需要把有互相依赖的page写在硬盘中很近的位置。在我们使用这些page的时候，可以很快完成硬盘的寻址，sequantial I/O获得这些page。</li><li>temporal contral 时间控制: 我们需要最大化每一个page的左右，最小化花在I/O操作上的时间。</li></ul><p><br></p><p><img data-src="/images/CMU1544564/Lec05/8.jpg" alt="8.jpg"></p><ul><li>上图我们已经在<a href="https://cakebytheoceanluo.github.io/2020/03/11/CMU-15445-Lec03/#Demo">Lec03 - System Design Goals (in Disk-oriented databases) - Demo</a>见过</li></ul><p><br></p><p><img data-src="/images/CMU1544564/Lec05/9.jpg" alt="9.jpg"></p><h1 id="Buffer-Pool-Manager"><a href="#Buffer-Pool-Manager" class="headerlink" title="Buffer Pool Manager"></a>Buffer Pool Manager</h1><h2 id="Buffer-Pool-Organization-Demo"><a href="#Buffer-Pool-Organization-Demo" class="headerlink" title="Buffer Pool Organization - Demo"></a>Buffer Pool Organization - Demo</h2><p>和操作系统中的概念一样，我们将硬盘上的block成为page, 将内存(buffer pool)中的block称为frame，frame可以容纳page。</p><p><code>pin(int pageid)</code>这个函数就代表了之前的<code>get page</code>这个操作。这个函数之后我们可以获得一个指向这个page数据的指针。我们使用完这个page之后，需要<code>unpin(int pageid)</code>。</p><p>在下面3张图中：</p><ul><li>一开始buffer pool是空的</li><li>然后我们<code>pin(pageid 1)</code>, page1被加载进入buffer pool</li><li>然后我们<code>pin(pageid 3)</code>, page3被加载进入buffer pool</li><li>我们会在后面看到一个page table，他负责告诉我们page和frame的对应，例如：page1在frame1, page3在frame2</li></ul><p><img data-src="/images/CMU1544564/Lec05/10.jpg" alt="10.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/11.jpg" alt="11.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/12.jpg" alt="12.jpg"></p><p><br></p><h2 id="Buffer-Pool-Metadata-Demo"><a href="#Buffer-Pool-Metadata-Demo" class="headerlink" title="Buffer Pool Metadata - Demo"></a>Buffer Pool Metadata - Demo</h2><p>这个Demo基于上一个Demo。 我们在这里讨论缓存区的metadata, 它们是管理区的管理信息。</p><ul><li>page table (也和操作系统中概念类似，只是不需要MMU, TLB)是一个in-memory hashtable, 负责 <code>page id -&gt; frame id</code>的映射，例如：page1在frame1, page3在frame2。</li><li>dirty flage: 告诉我们一个buffer pool中的frame是否被改写。如果被改写，即page上出现新数据，需要被写回至硬盘。</li><li>pin / reference counter: 对一个page当前使用的thread数进行计数。我们只允许将此数字为0的page写回硬盘，即当前没有任何thread在使用此page。</li></ul><p>这个Demo中很生动地表达了，如何在多线程的情况下，向buffer pool中加载一个新的page:</p><ul><li>首先我们<code>pin(pageid 2)</code>，但是我们在page table中找不到对应，这时是一个page fault, 说明我们需要从硬盘中加载这个page2</li><li>这时我们给page table上一个global latch，确保我们在整个过程中，没有其他线程会改变这个page table(比如加载page, 移除page)</li><li>确认获得global latch之后，我们向buffer pool加载这个page2, 同时也更新page table等metadata</li><li>整个过程结束后，我们松开global latch。这样整个过程中，只有我们这个当前线程更改了page table。</li><li>其他metadata是否也需要线程安全，取决于具体实现。</li></ul><p><br></p><ul><li>上述中可以不用global latch。而只是给对应的slot来一个latch。保证在过程中，没有其他人会读或者写这个slot。这样依旧是一种线程安全的实现。另外相对性能更好。</li></ul><p><img data-src="/images/CMU1544564/Lec05/13.jpg" alt="13.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/14.jpg" alt="14.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/15.jpg" alt="15.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/16.jpg" alt="16.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/17.jpg" alt="17.jpg"></p><p><br></p><h2 id="Locks-vs-Latches-2"><a href="#Locks-vs-Latches-2" class="headerlink" title="Locks vs. Latches 2"></a>Locks vs. Latches <sup><a href="#fn2">2</a></sup></h2><ul><li>locks是一个high level 很抽象的概念, 它直接和transaction事务相关，应用于事务的lock protocol中。是应用层面的。是逻辑内容的互斥，比如行，表，事务。</li><li>latch基本上和low level实现相关，指<code>std::mutex</code>这类和代码相关的类(class)，来保护代码中的critical section。是应用不可见的，内部数据的互斥。</li><li>(这部分我们以后还会提到)<!-- TODO: --></li></ul><p><img data-src="/images/CMU1544564/Lec05/18.jpg" alt="18.jpg"></p><h2 id="Page-Table-vs-Page-Directory"><a href="#Page-Table-vs-Page-Directory" class="headerlink" title="Page Table vs. Page Directory"></a>Page Table vs. Page Directory</h2><ul><li>在<a href="https://cakebytheoceanluo.github.io/2020/03/11/CMU-15445-Lec03/#Page-Directory">[CMU-15445]Lec03 - Database Storage - Database Heap - Page Directory</a>文章中我们已经提到了 page directory, 它是一个特殊的page, 记录了page对应文件的位置，因此这个page directory也会以page的方式从硬盘读取到内存，最后从内存写回至硬盘。即它是持久化的(persistent, durable)。</li><li>page table 只是一个<code>page id -&gt; frame id</code>的映射, 具体是一个<code>page id -&gt; frame pointer</code>的hash table，指针的位置只是在本次启动有效，因为关机重启后，我们会allocate另一块内存区域给数据库buffer pool。这类完全依赖内存的数据结构(in-memory data structure)没有意义去存到硬盘上。</li></ul><p><img data-src="/images/CMU1544564/Lec05/19.jpg" alt="19.jpg"></p><h2 id="Allocation-Policies"><a href="#Allocation-Policies" class="headerlink" title="Allocation Policies"></a>Allocation Policies</h2><ul><li>global policies: 指所有query, transaction使用同一个buffer pool的replacement policy</li><li>local policies: 指每一个query, transaction可以有一个自己的buffer pool， 和自己的replacement policy。同时可以在一个共有的buffer pool去share pages</li><li>实际上会混合这两种主意， 比如数据table拥有一个buffer pool, index(索引数据结构)拥有另一个buffer pool。这个我们会在index的课上提到。</li></ul><p><img data-src="/images/CMU1544564/Lec05/20.jpg" alt="20.jpg"></p><p><br><br><br></p><h1 id="Buffer-Pool-Optimizations"><a href="#Buffer-Pool-Optimizations" class="headerlink" title="Buffer Pool Optimizations"></a>Buffer Pool Optimizations</h1><p><img data-src="/images/CMU1544564/Lec05/21.jpg" alt="21.jpg"></p><h2 id="Multiple-Buffer-Pools"><a href="#Multiple-Buffer-Pools" class="headerlink" title="Multiple Buffer Pools"></a>Multiple Buffer Pools</h2><p>见<a href="#allocation-policies">Allocation Policies</a>中提到了部分Local Policies。</p><p><img data-src="/images/CMU1544564/Lec05/22.jpg" alt="22.jpg"></p><p>另外这部分不知道为何没有课件， 我截图了视频来作为缺失的课件。</p><ul><li>Approach2 Hashing: 用一个hash function: <code>RID -&gt; buffer pool id</code>, 把有相同hash value的tuple分配到同一个buffer pool，提高buffer pool中的spatial locality(空间局部性)。(类似hash join)</li></ul><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec05/missing_1.png" alt="Lec5_missing_1.jpg"></p><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec05/missing_2.png" alt="Lec5_missing_2.jpg"></p><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec05/missing_3.png" alt="Lec5_missing_3.jpg"></p><h2 id="Pre-Fetching"><a href="#Pre-Fetching" class="headerlink" title="Pre-Fetching"></a>Pre-Fetching</h2><p>我们可以预加载一些page, 一个thread在对page A进行扫描计算的同时，另外一个thread可以将下一个page B加载到buffer pool中。这个方法，是用猜测或者预先的只是，去加载未来可能用得到的page, 最终目的减少从硬盘加载的时间。具体有两种情况，根据这个<strong>下一个page</strong>是哪一个:</p><ul><li>Sequential Scans: 即物理上连续存储的下一个page</li><li>Index Scans: </li></ul><h3 id="Sequential-Scans"><a href="#Sequential-Scans" class="headerlink" title="Sequential Scans"></a>Sequential Scans</h3><p><img data-src="/images/CMU1544564/Lec05/23.jpg" alt="23.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/24.jpg" alt="24.jpg"></p><p>Q1在扫描page1的时候，buffer pool manager发现这是一个sequenial scan，决定pre fetch后面的page，所以在同时将page2,3加载进buffer pool。理想的话，等Q1结束对page1的扫描，page2,3就已经在buffer pool，相当于没有收到page fault的影响，没有浪费时间等待。</p><p><img data-src="/images/CMU1544564/Lec05/25.jpg" alt="25.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/26.jpg" alt="26.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/27.jpg" alt="27.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/28.jpg" alt="28.jpg"></p><h3 id="Index-Scans"><a href="#Index-Scans" class="headerlink" title="Index Scans"></a>Index Scans</h3><p>这里的index是一个B+ Tree， 具体作法是从根节点查找至叶子节点，再水平遍历有关的叶子节点。这时候我们需要的page不一定是物理上连续存储的：</p><p><img data-src="/images/CMU1544564/Lec05/29.jpg" alt="29.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/30.jpg" alt="30.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/31.jpg" alt="31.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/32.jpg" alt="32.jpg"></p><p><br></p><p>下图中很明显表达，我们接下面需要的是page3和page5, 它们不是连续的，也不紧跟在page1(当前page)之后。 但是index这个数据结构告诉我们，下一步是page3和page5被需要，因此去pre fetch它们俩。这里也是一个很明显的例子，操作系统在这一点帮不了我们，操作系统最多能帮我们pre fetch连续的page，但是它不知道index的存在，没有办法帮助我们准确去得到page3和page5：<br><img data-src="/images/CMU1544564/Lec05/33.jpg" alt="33.jpg"></p><h2 id="Scan-Sharing"><a href="#Scan-Sharing" class="headerlink" title="Scan Sharing"></a>Scan Sharing</h2><ul><li>Scan Sharing: reuse data retrieved from storage or operator computations， 即使用其他正在运行的query的中间过程值</li><li>result caching: 只是缓存最终结果值，而不是中间过程值</li></ul><p>具体流程：</p><ul><li>第一个Query已经在运行，有一些中间过程值</li><li>第二个Query开始运行，DBMS发现这第二个Query可以公用第一个Query的值，而且它们俩需要扫描的范围一样。</li><li>DBMS将第二个Query attch进第一个Query, 记录下第二个Query被attach的地方, 让它们俩一起扫描。</li><li>等它们俩共同扫描结束后，再扫描一开始第二个Query跳过的地方。</li></ul><p><img data-src="/images/CMU1544564/Lec05/34.jpg" alt="34.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/35.jpg" alt="35.jpg"></p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>Q1需要扫描所有的page, 将val不断累加。</p><p><img data-src="/images/CMU1544564/Lec05/36.jpg" alt="36.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/37.jpg" alt="37.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/38.jpg" alt="38.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/39.jpg" alt="39.jpg"></p><p><br><br><br></p><p>在Q1扫描至page3的时候，Q2加入。很巧，Q2也需要扫描所有的page, 将val不断累加。这说明Q2已加入就可以使用Q1的中间结果，并且可以和Q1结合在一起扫描剩下的page：<br><img data-src="/images/CMU1544564/Lec05/40.jpg" alt="40.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/41.jpg" alt="41.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/42.jpg" alt="42.jpg"></p><p><br><br><br></p><p>Q1结束后， 这个例子中，Q2还需要扫描它没有扫描过的page， 因为Q2计算平均值， 需要知道每一个page上tuple的个数。</p><p><img data-src="/images/CMU1544564/Lec05/43.jpg" alt="43.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/44.jpg" alt="44.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/45.jpg" alt="45.jpg"></p><p>我们也想象一下，如果没有scan sharing这个feature， Q1和Q2相互竞争buffer pool会导致这两个Query性能都很差。</p><h2 id="Buffer-Pool-Bypass"><a href="#Buffer-Pool-Bypass" class="headerlink" title="Buffer Pool Bypass"></a>Buffer Pool Bypass</h2><p>sequantial scan会将大部分page加载进buffer pool, 而这些page又并不一定在未来会被重复利用。对这种sequantial scan的Query，我们可以单独给allocate一块内存区域，而独立于且不影响buffer pool。这一块专属的内存区域依然能保证对当前Query的性能，而且因为不会<em>打乱污染</em>buffer pool而影响其他Query的性能。这块内存区域会在该sequantial scan Query结束后被释放。</p><p><img data-src="/images/CMU1544564/Lec05/46.jpg" alt="46.jpg"></p><ul><li>Light Scans: <span class="exturl" data-url="aHR0cHM6Ly93d3cuaWJtLmNvbS9zdXBwb3J0L2tub3dsZWRnZWNlbnRlci9lbi9TU0dVOEdfMTIuMS4wL2NvbS5pYm0ucGVyZi5kb2MvaWRzX3ByZl8yMzcuaHRt" title="https://www.ibm.com/support/knowledgecenter/en/SSGU8G_12.1.0/com.ibm.perf.doc/ids_prf_237.htm">https://www.ibm.com/support/knowledgecenter/en/SSGU8G_12.1.0/com.ibm.perf.doc/ids_prf_237.htm<i class="fa fa-external-link"></i></span></li></ul><p><br></p><h2 id="OS-Page-Cache"><a href="#OS-Page-Cache" class="headerlink" title="OS Page Cache"></a>OS Page Cache</h2><p><img data-src="/images/CMU1544564/Lec05/47.jpg" alt="47.jpg"></p><ul><li>O_DIRECT: <span class="exturl" data-url="aHR0cHM6Ly9saW51eC5kaWUubmV0L21hbi8yL29wZW4=" title="https://linux.die.net/man/2/open">https://linux.die.net/man/2/open<i class="fa fa-external-link"></i></span></li><li>大部分DBMS<strong>使用direct I/O</strong>，省去文件被加载入操作系统文件缓存区。direct I/O可以直接讲文件读取到数据库缓存区的address space。省去了从操作系统缓存区复制进数据库缓存区的address space，这样性能也更好。更多见<a href="https://cakebytheoceanluo.github.io/2020/03/11/CMU-15445-Lec03/#mmap">[CMU-15445]Lec03 - Why not use the OS? - mmap</a></li><li>也有其他的DBMS<strong>不使用direct I/O</strong>， 比如PostgreSQL。它们从工程的角度觉得不使用direct I/O更好：数据库buffer pool出现page fault的时候，如果对应的page在操作系统的文件缓存区中，那这时候只需要一次内存中的复制(从操作系统的文件缓存区复制到数据库buffer pool)，而不是去硬盘做漫长的I/O。比如PostgreSQL重启后buffer pool是空的，但是操作系统的page cache以及还是有对应文件，这时候可以从page cache中复制，避免冷启动。</li></ul><p>课上的PostgreSQL实验, 见<a href="https://cakebytheoceanluo.github.io/2020/03/17/DBMS-PostgreSQL-%E7%BC%93%E5%AD%98%E5%8C%BA%E7%AE%A1%E7%90%86BufferPool/">[DBMS][PostgreSQL] 缓存区管理 BufferPool</a></p><p><br></p><h2 id="Buffer-Replacement-Policies"><a href="#Buffer-Replacement-Policies" class="headerlink" title="Buffer Replacement Policies"></a>Buffer Replacement Policies</h2><p>这部分中的理论和操作系统中的页替换没有太大区别。</p><p><img data-src="/images/CMU1544564/Lec05/48.jpg" alt="48.jpg"></p><h3 id="Lest-Recently-Used-LRU"><a href="#Lest-Recently-Used-LRU" class="headerlink" title="Lest Recently Used (LRU)"></a>Lest Recently Used (LRU)</h3><p><img data-src="/images/CMU1544564/Lec05/49.jpg" alt="49.jpg"></p><h3 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h3><p>LRU需要获取真的timestamp，　而无论获取software timer或者hardware timer都是非常昂贵的，需要很多CPU周期。所有我们选用Clock, 它是LRU的一个近似(approximation), 它就去除了每一个page的timestamp属性。而Clock使用一个不准确的时间区间, 即reference至顺时针被选择。具体我们可以看下面的Demo:</p><p>下图我们访问page1, 它在我们buffer pool中，我们得到这个page, 也让它的ref＝1:<br><img data-src="/images/CMU1544564/Lec05/50.jpg" alt="50.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/51.jpg" alt="51.jpg"></p><p><br><br><br></p><p>然后我们需要加载一个新的page5,　要去除一个buffer pool中的page。指针指向的page1的ref=1, 它可以留在buffer pool, 并且ref=0, 指针指向下一个page:</p><p><img data-src="/images/CMU1544564/Lec05/52.jpg" alt="52.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/53.jpg" alt="53.jpg"></p><p><br><br><br></p><p>指针指向的page2的ref=0, 它不可以留在buffer pool：</p><p><img data-src="/images/CMU1544564/Lec05/54.jpg" alt="54.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/55.jpg" alt="55.jpg"></p><p><br><br><br></p><h3 id="Problem-Sequential-Flooding-顺序泛洪"><a href="#Problem-Sequential-Flooding-顺序泛洪" class="headerlink" title="Problem - Sequential Flooding 顺序泛洪"></a>Problem - Sequential Flooding 顺序泛洪</h3><p>LRU和Clock容易收到Sequential Flooding的影响。Sequential Flooding我们之前也间接的提到过，一个Query如果需要扫描所有的page, buffer pool会因为它的变得很乱，而最后留在buffer pool中的page也不一定对未来的Query有帮助。这里我们更严谨定义这个行为叫Sequential Flooding，最后留在buffer pool中的page是最近被使用过的(least recently used)，　但是它们实际上是最不需要的(most unneeded)。(这些page往往是硬盘上最后几个page)</p><p><img data-src="/images/CMU1544564/Lec05/58.jpg" alt="58.jpg"></p><p><br></p><p>下面是一个Demo。下面这个Demo中的问题可以换一个思路解决：每次把Q2带进来的page中page id最大的舍弃。</p><p><img data-src="/images/CMU1544564/Lec05/59.jpg" alt="59.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/60.jpg" alt="60.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/61.jpg" alt="61.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/62.jpg" alt="62.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/63.jpg" alt="63.jpg"></p><h3 id="LRU-K-1"><a href="#LRU-K-1" class="headerlink" title="LRU-K 1"></a>LRU-K <sup><a href="#fn1">1</a></sup></h3><p>LRU-K中的<code>K</code>代表<strong>最近使用的次数</strong>，因此LRU可以认为是LRU-1。LRU-K的主要目的是为了解决LRU算法”缓存污染”的问题，其核心思想是将“最近使用过1次”的判断标准<strong>扩展为“最近使用过K次”</strong>。</p><p>相比LRU，LRU-K需要多维护<strong>一个队列: 缓存队列。它用于记录所有缓存数据被访问的历史。只有当数据的访问次数达到K次的时候，才将数据放入缓存队列</strong>。当需要淘汰数据时，LRU-K会淘汰第K次访问时间距当前时间最大的数据。详细实现如下：</p><ol><li>数据第一次被访问，加入到访问<strong>历史队列</strong></li><li>如果数据在访问<strong>历史队列</strong>里后没有达到K次访问，则按照一定规则(FIFO，LRU)淘汰</li><li>当访问<strong>历史队列</strong>中的数据访问次数达到K次后，将数据索引从<strong>历史队列</strong>删除，将数据移到<strong>缓存队列</strong>中，并缓存此数据，<strong>缓存队列</strong>重新按照时间排序</li><li><strong>缓存队列</strong>中被再次访问后，重新排序</li><li>需要淘汰数据时，淘汰<strong>缓存队列</strong>中排在末尾的数据，即淘汰”倒数第K次访问离现在最久”的数据</li></ol><p>LRU-K具有LRU的优点，同时能够避免LRU的缺点，实际应用中LRU-2是综合各种因素后最优的选择，LRU-3或者更大的K值命中率会高，但适应性差，需要大量的数据访问才能将历史访问记录清除掉。</p><p>另外LRU-K对sequential scan<strong>不敏感</strong>，因为sequential scan只使用每个page一次。而使用一次的page在LRU-K非常容易被evict。</p><!-- TODO: TUM ModernDBS --><p><img data-src="/images/CMU1544564/Lec05/64.jpg" alt="64.jpg"></p><h3 id="Localization"><a href="#Localization" class="headerlink" title="Localization"></a>Localization</h3><p>这部分已经在这课中的实验中体现了：PostgreSQL给每一个Query一个独立的buffer pool， 同时所有Query公用一个shared buffer pool。这最大限度地减少了每个query对buffer pool的污染。</p><p><img data-src="/images/CMU1544564/Lec05/65.jpg" alt="65.jpg"></p><h3 id="Priority-Hints"><a href="#Priority-Hints" class="headerlink" title="Priority Hints"></a>Priority Hints</h3><p>DBMS知道哪些page比较重要，经常访问，打上标签。<sup><a href="#fn2">2</a></sup></p><p><img data-src="/images/CMU1544564/Lec05/67.jpg" alt="67.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/68.jpg" alt="68.jpg"></p><h2 id="Dirty-Pages"><a href="#Dirty-Pages" class="headerlink" title="Dirty Pages"></a>Dirty Pages</h2><p>只有被更改过的page才有必要写回硬盘，持久化。</p><p>DBMS可以定期遍历page table并将脏页写回硬盘。因为如果每次等eviction的时候再去flush脏页，会让eviction的过程非常的慢，所以一般会有个后台进程定期批量的去写回脏页。<sup><a href="#fn2">2</a></sup>当安全地写会脏页之后，DBMS可以evict页面或者只是取消设置dirty bit, 因为这个页面已经<strong>不再脏了</strong>。需要注意的是，在写日志记录之前，我们不会去写脏页。<sup><a href="#fn1">1</a></sup></p><p><img data-src="/images/CMU1544564/Lec05/69.jpg" alt="69.jpg"></p><h2 id="Background-Writing"><a href="#Background-Writing" class="headerlink" title="Background Writing"></a>Background Writing</h2><p>我们需要控制page被写回硬盘的时间，但是如果我们使用<code>mmap</code>,就很难控制每一个page写回的时间点。</p><p><img data-src="/images/CMU1544564/Lec05/70.jpg" alt="70.jpg"></p><h2 id="Other-Memory-Pool"><a href="#Other-Memory-Pool" class="headerlink" title="Other Memory Pool"></a>Other Memory Pool</h2><p><img data-src="/images/CMU1544564/Lec05/71.jpg" alt="71.jpg"></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p><img data-src="/images/CMU1544564/Lec05/72.jpg" alt="72.jpg"></p><p><img data-src="/images/CMU1544564/Lec05/80.jpg" alt="80.jpg"></p><p>引用:</p><p><a name="fn1">1</a>: CMU 15445 4. 缓存层 - 西部小笼包: <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wODUxNDIxZjRjYjg=" title="https://www.jianshu.com/p/0851421f4cb8">https://www.jianshu.com/p/0851421f4cb8<i class="fa fa-external-link"></i></span></p><p><a name="fn2">2</a>: Database Storage - fxjwind: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZnhqd2luZC9wLzEwODE4ODE0Lmh0bWw=" title="https://www.cnblogs.com/fxjwind/p/10818814.html">https://www.cnblogs.com/fxjwind/p/10818814.html<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Buffer Pools - 数据库缓存区&lt;/p&gt;
&lt;p&gt;Slide: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA1LWJ1ZmZlcnBvb2wucGRm&quot; title=&quot;https://15445.courses.cs.cmu.edu/fall2019/slides/05-bufferpool.pdf&quot;&gt;https://15445.courses.cs.cmu.edu/fall2019/slides/05-bufferpool.pdf&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Note: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDUtYnVmZmVycG9vbC5wZGY=&quot; title=&quot;https://15445.courses.cs.cmu.edu/fall2019/notes/05-bufferpool.pdf&quot;&gt;https://15445.courses.cs.cmu.edu/fall2019/notes/05-bufferpool.pdf&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Readings: Chapter 10.5-10.8&lt;/p&gt;
&lt;p&gt;这节两课，我们会学习数据库的缓存区管理，这部分基于前面两节课(Storage I和Storage II)。&lt;/p&gt;
&lt;p&gt;缓存区buffer pool就是在内存中对page的缓存(cache)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Storage" scheme="https://cakebytheoceanluo.github.io/categories/Storage/"/>
    
      <category term="Buffer Management" scheme="https://cakebytheoceanluo.github.io/categories/Buffer-Management/"/>
    
    
      <category term="Page" scheme="https://cakebytheoceanluo.github.io/tags/Page/"/>
    
      <category term="Buffer Pool" scheme="https://cakebytheoceanluo.github.io/tags/Buffer-Pool/"/>
    
      <category term="LRU" scheme="https://cakebytheoceanluo.github.io/tags/LRU/"/>
    
      <category term="Clock" scheme="https://cakebytheoceanluo.github.io/tags/Clock/"/>
    
  </entry>
  
  <entry>
    <title>[DBMS][PostgreSQL]缓存区管理BufferPool</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/17/DBMS-PostgreSQL-%E7%BC%93%E5%AD%98%E5%8C%BA%E7%AE%A1%E7%90%86BufferPool/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/17/DBMS-PostgreSQL-%E7%BC%93%E5%AD%98%E5%8C%BA%E7%AE%A1%E7%90%86BufferPool/</id>
    <published>2020-03-17T18:46:09.000Z</published>
    <updated>2020-03-17T19:15:05.645Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章服务于<a href="https://cakebytheoceanluo.github.io/2020/03/17/CMU-15445-Lec05/">[CMU-15445]Lec05</a></p><p>我们沿用上一个实验的数据集和数据库:</p><ul><li>上一个实验，见<a href="https://cakebytheoceanluo.github.io/2020/03/16/DBMS-Postgres%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98precision-numbers/">[DBMS]Postgres浮点数，定点数精度问题 precision_numbers</a></li><li>具体数据集，见<a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#CMU-15445-%E5%88%86%E6%95%B0%E6%95%B0%E6%8D%AE%E9%9B%86-Mock">[DBMS] PostgreSQL 导入数据集: CMU-15445 分数数据集 (Mock)</a></li></ul><p>这个实验的目的是观察PostgreSQL: </p><ul><li>buffer pool对Query性能的影响,</li><li>操作系统文件缓存区对Query在page fault的影响，因为PostgreSQL不使用direct I/O</li></ul><a id="more"></a><hr><h1 id="清空操作系统-pagecache-dentries-and-inodes"><a href="#清空操作系统-pagecache-dentries-and-inodes" class="headerlink" title="清空操作系统 pagecache, dentries and inodes"></a>清空操作系统 pagecache, dentries and inodes</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:            15G        9.8G        2.3G        1.9G        3.2G        3.3G</span><br><span class="line">Swap:          2.0G        1.4G        643M</span><br><span class="line">$ sync; <span class="built_in">echo</span> 3 | sudo tee /proc/sys/vm/drop_caches</span><br><span class="line">3</span><br><span class="line">$ free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:            15G        9.9G        3.0G        1.8G        2.5G        3.3G</span><br><span class="line">Swap:          2.0G        1.4G        579M</span><br></pre></td></tr></tbody></table></figure><ul><li><code>free -h</code> 可以显示系统空闲以及占用的内存容量<blockquote><pre><code>   free - Display amount of free and used memory in the system</code></pre></blockquote></li><li><code>sync</code> 可以将缓存的页写入硬盘<blockquote><pre><code>   sync - Synchronize cached writes to persistent storage</code></pre></blockquote></li><li><code>echo 3 | sudo tee /proc/sys/vm/drop_caches</code> 释放 pagecache, dentries and inodes</li><li>或者在<code>su</code>的权限下<code>echo 3 &gt; /proc/sys/vm/drop_caches</code></li></ul><p>从上面的输出中，我们可以发现，<code>buff/cache</code>在运行指令后减少了很多，说明这块被释放了一部分。</p><p><br></p><p>有关阅读：</p><ul><li>How do you empty the buffers and cache on a Linux system? - Stackoverflow: <span class="exturl" data-url="aHR0cHM6Ly91bml4LnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy84NzkwOC9ob3ctZG8teW91LWVtcHR5LXRoZS1idWZmZXJzLWFuZC1jYWNoZS1vbi1hLWxpbnV4LXN5c3RlbQ==" title="https://unix.stackexchange.com/questions/87908/how-do-you-empty-the-buffers-and-cache-on-a-linux-system">https://unix.stackexchange.com/questions/87908/how-do-you-empty-the-buffers-and-cache-on-a-linux-system<i class="fa fa-external-link"></i></span></li><li>How to Clear RAM Memory Cache, Buffer and Swap Space on Linux - TecMint: <span class="exturl" data-url="aHR0cHM6Ly93d3cudGVjbWludC5jb20vY2xlYXItcmFtLW1lbW9yeS1jYWNoZS1idWZmZXItYW5kLXN3YXAtc3BhY2Utb24tbGludXgv" title="https://www.tecmint.com/clear-ram-memory-cache-buffer-and-swap-space-on-linux/">https://www.tecmint.com/clear-ram-memory-cache-buffer-and-swap-space-on-linux/<i class="fa fa-external-link"></i></span></li></ul><h1 id="清空psql-buffer-pool-重启psql"><a href="#清空psql-buffer-pool-重启psql" class="headerlink" title="清空psql buffer pool - 重启psql"></a>清空psql buffer pool - 重启psql</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service postgresql restart</span><br></pre></td></tr></tbody></table></figure><p>在重启PostgreSQL服务后，buffer pool会被清空。</p><h1 id="实验-查看-page-hit-page-fault"><a href="#实验-查看-page-hit-page-fault" class="headerlink" title="实验 - 查看 page hit, page fault"></a>实验 - 查看 page hit, page fault</h1><p>在这时候我们已经做过了前面两步：</p><ul><li>操作系统没有我们需要的的page cache</li><li>PostgreSQL的buffer pool是空的</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">testdb=# \timing</span><br><span class="line">Timing is on.</span><br><span class="line">testdb=# <span class="built_in">set</span> max_parallel_workers_per_gather = <span class="number">0</span>;</span><br><span class="line">SET</span><br><span class="line">Time: <span class="number">7.740</span> ms</span><br><span class="line">testdb=# explain (analyze, buffers) select sum(a + b) from testreals;</span><br><span class="line">                                                         QUERY PLAN                                                          </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">194247.66</span>.<span class="number">.194247</span><span class="number">.67</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">4</span>) (actual time=<span class="number">1817.296</span>.<span class="number">.1817</span><span class="number">.296</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">   Buffers: shared <span class="built_in">read</span>=<span class="number">44248</span></span><br><span class="line">   -&gt;  Seq Scan on testreals  (cost=<span class="number">0.00</span>.<span class="number">.144247</span><span class="number">.77</span> rows=<span class="number">9999977</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">0.401</span>.<span class="number">.814</span><span class="number">.209</span> rows=<span class="number">10000000</span> loops=<span class="number">1</span>)</span><br><span class="line">         Buffers: shared <span class="built_in">read</span>=<span class="number">44248</span></span><br><span class="line"> Planning time: <span class="number">0.225</span> ms</span><br><span class="line"> Execution time: <span class="number">1817.316</span> ms</span><br><span class="line">(<span class="number">6</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">1824.317</span> ms (<span class="number">00</span>:<span class="number">01.824</span>)</span><br><span class="line">testdb=# explain (analyze, buffers) select sum(a + b) from testreals;</span><br><span class="line">                                                         QUERY PLAN                                                          </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">194247.66</span>.<span class="number">.194247</span><span class="number">.67</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">4</span>) (actual time=<span class="number">1772.469</span>.<span class="number">.1772</span><span class="number">.469</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">   Buffers: shared hit=<span class="number">32</span> <span class="built_in">read</span>=<span class="number">44216</span></span><br><span class="line">   -&gt;  Seq Scan on testreals  (cost=<span class="number">0.00</span>.<span class="number">.144247</span><span class="number">.77</span> rows=<span class="number">9999977</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">0.032</span>.<span class="number">.765</span><span class="number">.356</span> rows=<span class="number">10000000</span> loops=<span class="number">1</span>)</span><br><span class="line">         Buffers: shared hit=<span class="number">32</span> <span class="built_in">read</span>=<span class="number">44216</span></span><br><span class="line"> Planning time: <span class="number">0.025</span> ms</span><br><span class="line"> Execution time: <span class="number">1772.488</span> ms</span><br><span class="line">(<span class="number">6</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">1772.799</span> ms (<span class="number">00</span>:<span class="number">01.773</span>)</span><br><span class="line">testdb=# explain (analyze, buffers) select sum(a + b) from testreals;</span><br><span class="line">                                                         QUERY PLAN                                                          </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">194247.66</span>.<span class="number">.194247</span><span class="number">.67</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">4</span>) (actual time=<span class="number">1673.223</span>.<span class="number">.1673</span><span class="number">.223</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">   Buffers: shared hit=<span class="number">64</span> <span class="built_in">read</span>=<span class="number">44184</span></span><br><span class="line">   -&gt;  Seq Scan on testreals  (cost=<span class="number">0.00</span>.<span class="number">.144247</span><span class="number">.77</span> rows=<span class="number">9999977</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">0.030</span>.<span class="number">.719</span><span class="number">.406</span> rows=<span class="number">10000000</span> loops=<span class="number">1</span>)</span><br><span class="line">         Buffers: shared hit=<span class="number">64</span> <span class="built_in">read</span>=<span class="number">44184</span></span><br><span class="line"> Planning time: <span class="number">0.025</span> ms</span><br><span class="line"> Execution time: <span class="number">1673.243</span> ms</span><br><span class="line">(<span class="number">6</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">1673.562</span> ms (<span class="number">00</span>:<span class="number">01.674</span>)</span><br><span class="line">testdb=# explain (analyze, buffers) select sum(a + b) from testreals;</span><br><span class="line">                                                         QUERY PLAN                                                          </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">194247.66</span>.<span class="number">.194247</span><span class="number">.67</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">4</span>) (actual time=<span class="number">1657.359</span>.<span class="number">.1657</span><span class="number">.359</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">   Buffers: shared hit=<span class="number">96</span> <span class="built_in">read</span>=<span class="number">44152</span></span><br><span class="line">   -&gt;  Seq Scan on testreals  (cost=<span class="number">0.00</span>.<span class="number">.144247</span><span class="number">.77</span> rows=<span class="number">9999977</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">0.034</span>.<span class="number">.711</span><span class="number">.246</span> rows=<span class="number">10000000</span> loops=<span class="number">1</span>)</span><br><span class="line">         Buffers: shared hit=<span class="number">96</span> <span class="built_in">read</span>=<span class="number">44152</span></span><br><span class="line"> Planning time: <span class="number">0.025</span> ms</span><br><span class="line"> Execution time: <span class="number">1657.378</span> ms</span><br><span class="line">(<span class="number">6</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">1657.683</span> ms (<span class="number">00</span>:<span class="number">01.658</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li><code>explain (analyze, buffers) select sum(a + b) from testreals;</code>中<ul><li><code>explain</code>: 给出query plan</li><li><code>analyze</code>: 执行query</li><li><code>buffers</code>: 给出buffer pool信息</li></ul></li><li>然后我前后执行4次同一个query:<ul><li>PostgreSQL有一个共用的share buffer pool, 然后每一个query也有一个自己的buffer pool。query的专属buffer pool的大小，会随着执行次数而增加，默认是每次增加32个位置。</li><li>第一次: <code>Buffers: shared read=44248</code> 因为buffer pool是空的，每一次都是page fault。同时操作系统file page cache也是空的，所有page都需要从硬盘先加载到操作系统file page cache, 在从这里复制进数据库buffer pool。<code>shared read</code>指的就是page fault, 是那些不在buffer pool中，需要从硬盘或从操作系统file cache中读取的page。</li><li><strong>我们也可以发现这个表格一共对应<code>44248</code>个page。</strong></li><li>第二次: <code>Buffers: shared hit=32 read=44216</code> Query的buffer pool是大小是32， 已增加32个位置。</li><li>第三次: <code>Buffers: shared hit=64 read=44184</code> Query的buffer pool是大小是64， 已增加32个位置。</li><li>第四次: <code>Buffers: shared hit=96 read=44152</code> Query的buffer pool是大小是94， 已增加32个位置。</li></ul></li></ul><h1 id="实验-扩大buffer-pool-size"><a href="#实验-扩大buffer-pool-size" class="headerlink" title="实验 - 扩大buffer pool size"></a>实验 - 扩大buffer pool size</h1><p>下面我们发现最大的buffer pool size是<code>128MB</code>：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">testdb=# show shared_buffers;</span><br><span class="line"> shared_buffers </span><br><span class="line">----------------</span><br><span class="line"> <span class="number">128</span>MB</span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.196</span> ms</span><br></pre></td></tr></tbody></table></figure><p>但是我们对应的表格的所有page大概是<code>345MB</code>, 每一个page是<code>8KiB</code>:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">testdb=# select (<span class="number">44248</span> * <span class="number">8</span>) / <span class="number">1024</span>;</span><br><span class="line"> ?column? </span><br><span class="line">----------</span><br><span class="line">      <span class="number">345</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.381</span> ms</span><br></pre></td></tr></tbody></table></figure><p>因此这个默认的buffer pool size不足以容纳我们这个表格。正因为这个原因，我们的query需要的page数总大于buffer size一次性所能容纳的数量，一定会出现page fault。</p><h2 id="更改PostgresSQL配置文件中的shared-buffers"><a href="#更改PostgresSQL配置文件中的shared-buffers" class="headerlink" title="更改PostgresSQL配置文件中的shared_buffers"></a>更改PostgresSQL配置文件中的<code>shared_buffers</code></h2><p>我们用自己喜欢的文本编辑器去打开<code>/etc/postgresql/10/main/postgresql.conf</code>文件:</p><ul><li>注意我postgresql的版本是<code>10</code></li><li>具体的配置文件位置和postgresql安装位置和安装版本有关</li></ul><p>找到下面对应的<code>shared_buffers</code>, 更改数值为<code>360MB</code>:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------                                                                                          </span></span><br><span class="line"><span class="comment"># RESOURCE USAGE (except WAL)                                                                                                                                            </span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------                                                                                          </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Memory -                                                                                                                                                             </span></span><br><span class="line"></span><br><span class="line">shared_buffers = 128MB                  <span class="comment"># min 128kB  </span></span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>保存完以后我们打开<code>psql</code>看看是否更改成功。如果像下面例子中，看见<code>360MB</code>，而不是之前的<code>128MB</code>,即更改成功：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">testdb=# show shared_buffers;</span><br><span class="line"> shared_buffers </span><br><span class="line">----------------</span><br><span class="line"> <span class="number">360</span>MB</span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure><h2 id="重新之前实验-冷启动"><a href="#重新之前实验-冷启动" class="headerlink" title="重新之前实验 - 冷启动"></a>重新之前实验 - 冷启动</h2><p>我们依然执行下面两个命令， 去清空操作系统file page cache和数据库的buffer pool:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sync; <span class="built_in">echo</span> 3 | sudo tee /proc/sys/vm/drop_caches</span><br><span class="line">$ sudo service postgresql restart</span><br></pre></td></tr></tbody></table></figure><p>这样操作以后我们的数据库buffer pool被清空，操作系统page cache里面也没也对应的page, 所以我们称之为<strong>冷启动</strong>。</p><p><br></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">testdb=# \timing</span><br><span class="line">Timing is on.</span><br><span class="line"></span><br><span class="line">testdb=# <span class="built_in">set</span> max_parallel_workers_per_gather = <span class="number">0</span>;</span><br><span class="line">SET</span><br><span class="line">Time: <span class="number">9.680</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# CREATE EXTENSION pg_prewarm;</span><br><span class="line">CREATE EXTENSION</span><br><span class="line">Time: <span class="number">12.151</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# select * from pg_prewarm('testreals');</span><br><span class="line"> pg_prewarm </span><br><span class="line">------------</span><br><span class="line">      <span class="number">44248</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">473.944</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# explain (analyze, buffers) select sum(a + b) from testreals;</span><br><span class="line">                                                         QUERY PLAN                                                          </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">194247.66</span>.<span class="number">.194247</span><span class="number">.67</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">4</span>) (actual time=<span class="number">1628.475</span>.<span class="number">.1628</span><span class="number">.475</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">   Buffers: shared hit=<span class="number">44248</span></span><br><span class="line">   -&gt;  Seq Scan on testreals  (cost=<span class="number">0.00</span>.<span class="number">.144247</span><span class="number">.77</span> rows=<span class="number">9999977</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">0.008</span>.<span class="number">.664</span><span class="number">.942</span> rows=<span class="number">10000000</span> loops=<span class="number">1</span>)</span><br><span class="line">         Buffers: shared hit=<span class="number">44248</span></span><br><span class="line"> Planning time: <span class="number">6.139</span> ms</span><br><span class="line"> Execution time: <span class="number">1628.495</span> ms</span><br><span class="line">(<span class="number">6</span> rows)</span><br></pre></td></tr></tbody></table></figure><ul><li><code>select * from pg_prewarm('testreals');</code>或<code>select pg_prewarm('testreals');</code>是将这个表格的所有page都预加载进buffer pool。因为我们调整过shared buffer pool size, 现在我们的shared buffer pool足够容纳这个表格对应的所有page了。<strong>注意这个执行的返回值<code>44248</code>, 它就是这个表格所有对应page的数值。</strong></li><li><code>CREATE EXTENSION pg_prewarm;</code>这个指令是运行上一条指令的前提。</li><li>然后我们又见到这个query： <code>explain (analyze, buffers) select sum(a + b) from testreals;</code><ul><li><code>Buffers: shared hit=44248</code> <strong>我们又发现<code>44248</code>这个数值，说明所有的page都是page hit，而不是page fault。</strong></li></ul></li></ul><p><br></p><p>热启动好像无法在psql中直接展示，这里略过。 <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span></p><p><br></p><p>推荐的阅读：</p><p>PREWARMING POSTGRESQL I/O CACHES - Hans-Jürgen Schönig： <span class="exturl" data-url="aHR0cHM6Ly93d3cuY3liZXJ0ZWMtcG9zdGdyZXNxbC5jb20vZW4vcHJld2FybWluZy1wb3N0Z3Jlc3FsLWktby1jYWNoZXMv" title="https://www.cybertec-postgresql.com/en/prewarming-postgresql-i-o-caches/">https://www.cybertec-postgresql.com/en/prewarming-postgresql-i-o-caches/<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章服务于&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/17/CMU-15445-Lec05/&quot;&gt;[CMU-15445]Lec05&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们沿用上一个实验的数据集和数据库:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上一个实验，见&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/16/DBMS-Postgres%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98precision-numbers/&quot;&gt;[DBMS]Postgres浮点数，定点数精度问题 precision_numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;具体数据集，见&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#CMU-15445-%E5%88%86%E6%95%B0%E6%95%B0%E6%8D%AE%E9%9B%86-Mock&quot;&gt;[DBMS] PostgreSQL 导入数据集: CMU-15445 分数数据集 (Mock)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个实验的目的是观察PostgreSQL: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;buffer pool对Query性能的影响,&lt;/li&gt;
&lt;li&gt;操作系统文件缓存区对Query在page fault的影响，因为PostgreSQL不使用direct I/O&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Storage" scheme="https://cakebytheoceanluo.github.io/categories/Storage/"/>
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="Buffer Management" scheme="https://cakebytheoceanluo.github.io/categories/Buffer-Management/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/categories/PostgreSQL/"/>
    
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>[CMU-15445]Lec04 Database Storage Part II - 数据库存储  II</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/16/CMU-15445-Lec04/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/16/CMU-15445-Lec04/</id>
    <published>2020-03-16T13:08:44.000Z</published>
    <updated>2020-03-18T18:43:32.190Z</updated>
    
    <content type="html"><![CDATA[<p>Database Storage Part II - 数据库存储  II</p><p>Slide: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA0LXN0b3JhZ2UyLnBkZg==" title="https://15445.courses.cs.cmu.edu/fall2019/slides/04-storage2.pdf">https://15445.courses.cs.cmu.edu/fall2019/slides/04-storage2.pdf<i class="fa fa-external-link"></i></span><br>Note: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDQtc3RvcmFnZTIucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf<i class="fa fa-external-link"></i></span></p><p>这节两课，我们会学习数据库内部的存储。</p><p>Database Storage 在CMU分成了两部分，在两节课中讲。这是第二部分。</p><p>这部分设涉及基础数据类型的表示, OLAP, OLTP, HTAP, row-store (NSM), column store(DSM) 等等。</p><a id="more"></a><p><img data-src="/images/CMU1544564/Lec04/1.jpg" alt="1.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/12.jpg" alt="12.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/13.jpg" alt="13.jpg"></p><p>a sequence of bytes = byte array</p><h1 id="Data-Representation"><a href="#Data-Representation" class="headerlink" title="Data Representation"></a>Data Representation</h1><p><img data-src="/images/CMU1544564/Lec04/14.jpg" alt="14.jpg"></p><ul><li>我们在<a href="https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part1/#DATE-TIME-OPERATIONS">[CMU-15445]Lec02_part1</a>, 在不同的数据库中已经见过Date Time Operations也不一样，没有唯一的标准。</li></ul><!-- TODO: unix epoch --><h2 id="Variable-Precision-Numbers-浮点数"><a href="#Variable-Precision-Numbers-浮点数" class="headerlink" title="Variable Precision Numbers 浮点数"></a>Variable Precision Numbers 浮点数</h2><p><img data-src="/images/CMU1544564/Lec04/15.jpg" alt="15.jpg"></p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSUVFRV83NTQ=" title="https://en.wikipedia.org/wiki/IEEE_754">https://en.wikipedia.org/wiki/IEEE_754<i class="fa fa-external-link"></i></span>  <!-- TODO --></li><li>对<code>FLOAT</code>, <code>REAL/DOUBLE</code>的操作会比较快，因为CPU有直接对应的指令(instruction)可以使用，但是因为精度有限的原因，使用这几个依然会失去精度。(和编程语言中一样)。因为计算机对数字存储是离散的，有限的，必然会失去一定精度，结果是近似的。</li></ul><h3 id="Demo-失去精度"><a href="#Demo-失去精度" class="headerlink" title="Demo - 失去精度"></a>Demo - 失去精度</h3><p><img data-src="/images/CMU1544564/Lec04/16.jpg" alt="16.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/17.jpg" alt="17.jpg"></p><h2 id="Fixed-Precision-Numbers-定点数"><a href="#Fixed-Precision-Numbers-定点数" class="headerlink" title="Fixed Precision Numbers 定点数"></a>Fixed Precision Numbers 定点数</h2><p>定点数就是小数点是固定的，所以我们用int分别存储小数点前后的数字就可以实现，定点数是可以做到精确计算的。但是局限也很明显，只能表示固定精度。<sup><a href="#fn1">1</a></sup></p><p><img data-src="/images/CMU1544564/Lec04/18.jpg" alt="18.jpg"></p><p>更多关于这个Demo实验，见这个文章<a href="https://cakebytheoceanluo.github.io/2020/03/16/DBMS-Postgres%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98precision-numbers/">[DBMS]Postgres浮点数，定点数精度问题 precision_numbers</a></p><p><img data-src="/images/CMU1544564/Lec04/19.jpg" alt="19.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/20.jpg" alt="20.jpg"></p><ul><li>PostgreSQL Source Code: <span class="exturl" data-url="aHR0cHM6Ly9kb3h5Z2VuLnBvc3RncmVzcWwub3JnL2ludGVyZmFjZXNfMmVjcGdfMnBndHlwZXNsaWJfMm51bWVyaWNfOGNfc291cmNlLmh0bWwjbDAwNzIy" title="https://doxygen.postgresql.org/interfaces_2ecpg_2pgtypeslib_2numeric_8c_source.html#l00722">https://doxygen.postgresql.org/interfaces_2ecpg_2pgtypeslib_2numeric_8c_source.html#l00722<i class="fa fa-external-link"></i></span></li><li>从源代码中可以看出固定精度的数字的操作很复杂，有很多branch，所以会比较慢。</li></ul><h2 id="Large-Values"><a href="#Large-Values" class="headerlink" title="Large Values"></a>Large Values</h2><p><img data-src="/images/CMU1544564/Lec04/21.jpg" alt="21.jpg"></p><ul><li>如果<code>c</code>很大，甚至超过了一个page的大小。比如<code>c</code>是一个tuple中一个很长的<code>VARCHAR</code>字段。String总是数据库中最麻烦的。对于这个超过一个page大小的<code>c</code>，我们可以把它额外存储在一个<em>overflow page</em>上，这时上图中的<code>c</code>实际上是一个指向overflow page的一个指针。</li><li>当然overflow page可以是多个。假如一个overflow page依然不够大，我们可以使用几个overflow page，它们之间继续用<em>指针</em>相连。</li><li>整体上overflow page只是一种实现存储large value的方式。它对使用数据库的应用是<strong>透明的(transparent)</strong>, 使用数据库的应用只获得那个很长的<code>c</code>字符串，而不必知道它是如何被存储，存储在哪儿。</li></ul><h2 id="External-Value-Storage"><a href="#External-Value-Storage" class="headerlink" title="External Value Storage"></a>External Value Storage</h2><p><img data-src="/images/CMU1544564/Lec04/22.jpg" alt="22.jpg"></p><ul><li>External Value Storage是指那些特别大的文件，超过我们前面提到的large value。它比如说是GiB大小的视频。</li><li>BLOB: Binary Large Object data</li><li>这种文件，我们没有必要把它存储在数据库内部，这样会浪费数据库空间。</li><li>我们直接在<code>c</code>的地方存储，该文件在操作系统文件系统中硬盘的位置。这样做不会浪费数据库内部空间。</li><li>如果我们使用的High End的设备去运行高性能数据库，那么该服务器中磁盘容量是很宝贵的，不应该被浪费的。在<code>c</code>存储一个硬盘位置，能降低数据库的成本，特别是这个硬盘可以是HTFS或者network storage。</li><li>这里注意对于存放到外部文件的数据，是不保证transaction等语义的。<sup><a href="#fn1">1</a></sup></li></ul><p><img data-src="/images/CMU1544564/Lec04/23.jpg" alt="23.jpg"></p><p>To BLOB or Not To BLOB: Large Object Storage in a Database or a Filesystem: <span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy9yZXNlYXJjaC9wdWJsaWNhdGlvbi90by1ibG9iLW9yLW5vdC10by1ibG9iLWxhcmdlLW9iamVjdC1zdG9yYWdlLWluLWEtZGF0YWJhc2Utb3ItYS1maWxlc3lzdGVtLw==" title="https://www.microsoft.com/en-us/research/publication/to-blob-or-not-to-blob-large-object-storage-in-a-database-or-a-filesystem/">https://www.microsoft.com/en-us/research/publication/to-blob-or-not-to-blob-large-object-storage-in-a-database-or-a-filesystem/<i class="fa fa-external-link"></i></span></p><p><br></p><h1 id="System-Catalogs-metadata"><a href="#System-Catalogs-metadata" class="headerlink" title="System Catalogs = metadata"></a>System Catalogs = metadata</h1><p><img data-src="/images/CMU1544564/Lec04/24.jpg" alt="24.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/25.jpg" alt="25.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/26.jpg" alt="26.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/27.jpg" alt="27.jpg"></p><!-- TODO: MySQL, SQLIte --><p>PostgreSQL的查看Schema操作，具体见另外一篇博客，里面有很多例子：<a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#%E6%95%B0%E6%8D%AE%E9%9B%86">[DBMS] PostgreSQL 导入数据集 - 数据集</a></p><p><br><br><br></p><h1 id="Storage-Levels"><a href="#Storage-Levels" class="headerlink" title="Storage Levels"></a>Storage Levels</h1><p><img data-src="/images/CMU1544564/Lec04/28.jpg" alt="28.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/29.jpg" alt="29.jpg"></p><h2 id="OLTP"><a href="#OLTP" class="headerlink" title="OLTP"></a>OLTP</h2><p>OLTP := On-line Transaction Processing 通常是对很小一部分tuple的写操作</p><p>OLTP: On-line Transaction Processing</p><ul><li>Fast, short running operations</li><li>Queries operate on single entity at a time</li><li>More writes than reads</li><li>Repetitive operations</li><li>Usually the kind of application that people build first</li><li>Example: User invocations of Amazon. They can add things to their cart, they can make purchases,<br>but the actions only affect their account.<br>— 引用自: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDQtc3RvcmFnZTIucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf<i class="fa fa-external-link"></i></span></li></ul><p><img data-src="/images/CMU1544564/Lec04/30.jpg" alt="30.jpg"></p><h2 id="OLAP"><a href="#OLAP" class="headerlink" title="OLAP"></a>OLAP</h2><p>OLAP := On-line Analytical Processing 通常是对很大一部分是tuple做读操作, 同复杂的分析聚合　(decision-support, big data)</p><p>OLTP: On-line Transaction Processing</p><ul><li>Fast, short running operations</li><li>Queries operate on single entity at a time</li><li>More writes than reads</li><li>Repetitive operations</li><li>Usually the kind of application that people build first</li><li>Example: User invocations of Amazon. They can add things to their cart, they can make purchases,<br>but the actions only affect their account.<br>— 引用自: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDQtc3RvcmFnZTIucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf<i class="fa fa-external-link"></i></span></li></ul><p><img data-src="/images/CMU1544564/Lec04/31.jpg" alt="31.jpg"></p><h2 id="HTAP"><a href="#HTAP" class="headerlink" title="HTAP"></a>HTAP</h2><p><img data-src="/images/CMU1544564/Lec04/32.jpg" alt="32.jpg"></p><p>SOURCE: <span class="exturl" data-url="aHR0cHM6Ly9jYWNtLmFjbS5vcmcvbWFnYXppbmVzLzIwMTEvNi8xMDg2NTEtMTAtcnVsZXMtZm9yLXNjYWxhYmxlLXBlcmZvcm1hbmNlLWluLXNpbXBsZS1vcGVyYXRpb24tZGF0YXN0b3Jlcy9mdWxsdGV4dA==" title="https://cacm.acm.org/magazines/2011/6/108651-10-rules-for-scalable-performance-in-simple-operation-datastores/fulltext">https://cacm.acm.org/magazines/2011/6/108651-10-rules-for-scalable-performance-in-simple-operation-datastores/fulltext<i class="fa fa-external-link"></i></span></p><p><br></p><h1 id="Storage-Models"><a href="#Storage-Models" class="headerlink" title="Storage Models"></a>Storage Models</h1><p><img data-src="/images/CMU1544564/Lec04/33.jpg" alt="33.jpg"></p><h2 id="N-ary-Storage-Model-NSM-row-store"><a href="#N-ary-Storage-Model-NSM-row-store" class="headerlink" title="N-ary Storage Model (NSM): row store"></a>N-ary Storage Model (NSM): row store</h2><p><img data-src="/images/CMU1544564/Lec04/34.jpg" alt="34.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/35.jpg" alt="35.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/36.jpg" alt="36.jpg"></p><h3 id="OLTP-1"><a href="#OLTP-1" class="headerlink" title="OLTP"></a>OLTP</h3><p>OLTP往往有一个index(索引)，它可以快速找到OLTP需要的那一个tuple。</p><p><img data-src="/images/CMU1544564/Lec04/37.jpg" alt="37.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/38.jpg" alt="38.jpg"></p><h3 id="OLAP-1"><a href="#OLAP-1" class="headerlink" title="OLAP"></a>OLAP</h3><p>而OLAP往往需要扫描很大一部分的表格，这种情况index的帮助不会很大。<strong>扫描</strong>具体就是从每一个tuple头到尾，我们之前提过tuple就是一个byte array。即使我们下图中，只需要检查深蓝色和浅蓝色两个字段，但是整个tuple还是需要从内存加载到CPU cache。而且一个page上的大部分数据也都和当前query无关，这实际上很不高效。所以下图红圈中的都是useless data。</p><p><img data-src="/images/CMU1544564/Lec04/43.jpg" alt="43.jpg"></p><h3 id="NSM-Pros-amp-Cons"><a href="#NSM-Pros-amp-Cons" class="headerlink" title="NSM Pros&amp;Cons"></a>NSM Pros&amp;Cons</h3><p><img data-src="/images/CMU1544564/Lec04/44.jpg" alt="44.jpg"></p><ul><li>NSM适合OLTP, 因为对单个tuple的操作很简单。但是不适合OLAP，如果OLAP不需要所有字段的话。</li></ul><p>There are two different ways to organize a NSM database:</p><ul><li><strong>Heap-Organized Tables</strong>: Tuples are stored in blocks called a heap, and the heap does not necessarily<br>define an order.</li><li><strong>Index-Organized Tables</strong>: Tuples are stored in the primary key index itself, but different from a<br>clustered index.</li></ul><p>— 引用自: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDQtc3RvcmFnZTIucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf<i class="fa fa-external-link"></i></span></p><p><br></p><h2 id="Decomposition-Storage-Model-DSM-column-store"><a href="#Decomposition-Storage-Model-DSM-column-store" class="headerlink" title="Decomposition Storage Model (DSM): column store"></a>Decomposition Storage Model (DSM): column store</h2><p>在DSM中，每一个字段(或每一列)都有拥有自己的page, 上面都是当前列的数据。</p><p><img data-src="/images/CMU1544564/Lec04/45.jpg" alt="45.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/46.jpg" alt="46.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/47.jpg" alt="47.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/49.jpg" alt="49.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/50.jpg" alt="50.jpg"></p><ul><li>上图中　Choice1是更好的主意，也更常见。适合每个字段的数据类型是<strong>等长的</strong>。</li></ul><p><img data-src="/images/CMU1544564/Lec04/51.jpg" alt="51.jpg"></p><ul><li>DSM将同一列中的数据存在一起，这些数据自然也属于同一个数据类型。这样处理起来对CPU cache更高效, 同时也带来了很多comrpession(压缩), materialized aggregate(small index for a page), SIMD指令的优化。</li></ul><p><img data-src="/images/CMU1544564/Lec04/52.jpg" alt="52.jpg"></p><ul><li>DSM Proposal - A Query Processing Strategy for the Decomposed Storage Model: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS8xMC41NTU1LzY0NTQ3Mi42NTU1NTU=" title="https://dl.acm.org/doi/10.5555/645472.655555">https://dl.acm.org/doi/10.5555/645472.655555<i class="fa fa-external-link"></i></span></li><li>大部分分析型的数据库都是用column store，它们采用的往往是DSM的现代变种</li><li>一个DSM的变种: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvZG93bmxvYWRzL3B1YmxpY2F0aW9ucy9kYXRhYmxvY2tzLnBkZg==" title="https://db.in.tum.de/downloads/publications/datablocks.pdf">Data Blocks: Hybrid OLTP and OLAP on Compressed Storage using both Vectorization and Compilation<i class="fa fa-external-link"></i></span></li></ul><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Row stores are usually better for OLTP, while column stores ar better for OLAP.</p><p>大部分现代数据库:</p><ul><li>Frontend: OLTP in client, 处理用户的事务</li><li>Backend: OLAP in Server, data warehouse　大数据分析所有用户的资料(比如订单)</li></ul><p>下面三页是来自<span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA1LWJ1ZmZlcnBvb2wucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/slides/05-bufferpool.pdf">Lec05<i class="fa fa-external-link"></i></span>, 在这节课最开始的时候，重新讲了这部分，我将这三页课件移动到这里。</p><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec05/3.jpg" alt="Lec5_3.jpg"></p><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec05/4.jpg" alt="Lec5_4.jpg"></p><ul><li>上图的客户端为传统的OLTP Data Silos，将数据发到Server - Data Warehouse(数据仓库)。Server端运行OLAP, 分析这些用户的信息。</li><li>ETL(Extract-Transform-Load)，将数据从来源端经过抽取extract、转换transform、加载load至目的端的过程。是一个常用在数据仓库的技术。Server短得到这些ETL后的数据，就可以运行OLAP Query或者数据挖掘等机器学习算法。</li></ul><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec05/5.jpg" alt="Lec5_5.jpg"></p><ul><li>上图的客户端有HTAP， 即客户端中运行TP和AP，再将在客户端中处理过的数据ETL至Server - Data Warehouse。</li></ul><p><br></p><p><img data-src="/images/CMU1544564/Lec04/53.jpg" alt="53.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/54.jpg" alt="54.jpg"> </p><p>引用:</p><p><a name="fn1">1</a>: Database Storage - fxjwind: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZnhqd2luZC9wLzEwODE4ODE0Lmh0bWw=" title="https://www.cnblogs.com/fxjwind/p/10818814.html">https://www.cnblogs.com/fxjwind/p/10818814.html<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Database Storage Part II - 数据库存储  II&lt;/p&gt;
&lt;p&gt;Slide: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA0LXN0b3JhZ2UyLnBkZg==&quot; title=&quot;https://15445.courses.cs.cmu.edu/fall2019/slides/04-storage2.pdf&quot;&gt;https://15445.courses.cs.cmu.edu/fall2019/slides/04-storage2.pdf&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Note: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDQtc3RvcmFnZTIucGRm&quot; title=&quot;https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf&quot;&gt;https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这节两课，我们会学习数据库内部的存储。&lt;/p&gt;
&lt;p&gt;Database Storage 在CMU分成了两部分，在两节课中讲。这是第二部分。&lt;/p&gt;
&lt;p&gt;这部分设涉及基础数据类型的表示, OLAP, OLTP, HTAP, row-store (NSM), column store(DSM) 等等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Storage" scheme="https://cakebytheoceanluo.github.io/categories/Storage/"/>
    
      <category term="Disk Management" scheme="https://cakebytheoceanluo.github.io/categories/Disk-Management/"/>
    
    
      <category term="N-ary Storage Model" scheme="https://cakebytheoceanluo.github.io/tags/N-ary-Storage-Model/"/>
    
      <category term="Decomposition Storage Model" scheme="https://cakebytheoceanluo.github.io/tags/Decomposition-Storage-Model/"/>
    
      <category term="OLAP" scheme="https://cakebytheoceanluo.github.io/tags/OLAP/"/>
    
      <category term="OLTP" scheme="https://cakebytheoceanluo.github.io/tags/OLTP/"/>
    
      <category term="HTAP" scheme="https://cakebytheoceanluo.github.io/tags/HTAP/"/>
    
      <category term="Variable Precision Numbers" scheme="https://cakebytheoceanluo.github.io/tags/Variable-Precision-Numbers/"/>
    
      <category term="Fixed Precision Numbers" scheme="https://cakebytheoceanluo.github.io/tags/Fixed-Precision-Numbers/"/>
    
  </entry>
  
  <entry>
    <title>[DBMS]Postgres 浮点数，定点数 精度问题precision_numbers</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/16/DBMS-Postgres%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98precision-numbers/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/16/DBMS-Postgres%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98precision-numbers/</id>
    <published>2020-03-16T13:06:32.000Z</published>
    <updated>2020-03-17T18:48:20.178Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章服务于<a href="https://cakebytheoceanluo.github.io/2020/03/16/CMU-15445-Lec04/">[CMU-15445]Lec04</a></p><p>数据库中给小数(分数)有两种类型</p><ul><li>Variable Precision Numbers: 可变精度数字，可能有会rounding error</li><li>Fixed Precision Numbers: 定精度数字，在给定的精度下没有误差</li></ul><p>我们今天来看一看PostgreSQL中的这两种类型和它们可能产生的误差。</p><p>PostgreSQL中具体对应的数据类型是:</p><ul><li>Variable Precision Numbers: <code>REAL</code></li><li>Fixed Precision Numbers: <code>DECIMAL(precision, scale), NUMERIC(precision, scale)</code></li></ul><hr><p><code>DECIMAL(precision, scale)</code>:</p><ul><li><code>precision</code>: The <code>precision</code> must be positive. The <code>precision</code> of a <em>numeric</em> is the total count of significant digits in the whole number, that is, the number of digits to both sides of the decimal point.</li><li><code>scale</code>: The <code>scale</code> must be zero or positive.   The <code>scale</code> of a <em>numeric</em> is the count of decimal digits in the fractional part, to the right of the decimal point</li></ul><p>So the number 23.5141 has a precision of 6 and a scale of 4. Integers can be considered to have a scale of zero.</p><p>以上引用自: <span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjEvZGF0YXR5cGUtbnVtZXJpYy5odG1s" title="https://www.postgresql.org/docs/9.1/datatype-numeric.html">https://www.postgresql.org/docs/9.1/datatype-numeric.html<i class="fa fa-external-link"></i></span></p><a id="more"></a><hr><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec04/data_csv.png" alt="num_range"></p><p>上图为CMU-15445-Lec04课上的截图，内容是<code>data.csv</code>。实际上这只是一个随机生成的文件:</p><ul><li>一共10000000行</li><li>每行有两个数字，由<code>,</code>分隔开，每个数字是100以内的小数，并有6位小数部分</li></ul><h2 id="数据集faker"><a href="#数据集faker" class="headerlink" title="数据集faker"></a>数据集faker</h2><p>我用python写了一个类似的数据集faker:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000000</span>):</span><br><span class="line">    print(<span class="string">f'<span class="subst">{float(Decimal(random.randrange(<span class="number">0</span>, <span class="number">100000000</span>) / <span class="number">1000000</span>))}</span>,<span class="subst">{float(Decimal(random.randrange(<span class="number">0</span>, <span class="number">100000000</span>) / <span class="number">1000000</span>))}</span>'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载: <a href="https://cakebytheoceanluo.github.io/download/CMU15445/lec04_float_faker.py">lec04_float_faker.py</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./lec04_float_faker.py &gt; data.csv</span><br></pre></td></tr></tbody></table></figure><p>到现在我们获得了<code>data.csv</code>这个文件:</p><h2 id="数据集文件"><a href="#数据集文件" class="headerlink" title="数据集文件"></a>数据集文件</h2><p>我展示一些数据集文件信息：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ file data.csv </span><br><span class="line">data.csv: ASCII text</span><br><span class="line"></span><br><span class="line">$ ll data.csv</span><br><span class="line">-rw-rw-r-- 1 jigao jigao 195777640 Mar 11 19:17 data.csv</span><br><span class="line"></span><br><span class="line">$ shuf -n 5 data.csv </span><br><span class="line">66.798295,30.742821</span><br><span class="line">51.166558,51.72633</span><br><span class="line">87.780032,67.175637</span><br><span class="line">25.172411,70.619547</span><br><span class="line">12.432782,9.736797</span><br><span class="line"></span><br><span class="line">$ shuf -n 5 data.csv </span><br><span class="line">23.496402,68.946932</span><br><span class="line">6.035276,55.565444</span><br><span class="line">80.652459,83.420552</span><br><span class="line">69.633828,75.871921</span><br><span class="line">3.157022,43.588741</span><br></pre></td></tr></tbody></table></figure><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">testdb=# drop table <span class="keyword">if</span> <span class="built_in">exists</span> testreals;</span><br><span class="line">DROP TABLE</span><br><span class="line"></span><br><span class="line">testdb=# drop table <span class="keyword">if</span> <span class="built_in">exists</span> testdecimals;</span><br><span class="line">DROP TABLE</span><br><span class="line"></span><br><span class="line">testdb=# create table testreals (a REAL <span class="keyword">not</span> null, b REAL <span class="keyword">not</span> null);</span><br><span class="line">CREATE TABLE</span><br><span class="line"></span><br><span class="line">testdb=# create table testdecimals (a DECIMAL(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> null, b DECIMAL(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> null);</span><br><span class="line">CREATE TABLE</span><br><span class="line"></span><br><span class="line">testdb=# copy testreals from '/tmp/data.csv' delimiter ',' csv;</span><br><span class="line">COPY <span class="number">10000000</span></span><br><span class="line"></span><br><span class="line">testdb=# copy testdecimals from '/tmp/data.csv' delimiter ',' csv;</span><br><span class="line">COPY <span class="number">10000000</span></span><br><span class="line"></span><br><span class="line">testdb=# \timing</span><br><span class="line">Timing is on.</span><br><span class="line"></span><br><span class="line">testdb=# <span class="built_in">set</span> max_parallel_workers_per_gather = <span class="number">0</span>;</span><br><span class="line">SET</span><br></pre></td></tr></tbody></table></figure><ul><li><code>testreals</code>: Variable Precision Numbers, <code>REAL</code></li><li><code>testdecimals</code>: Fixed Precision Numbers, <code>DECIMAL(10, 6)</code></li><li><code>\timing</code>: 打开计时器</li><li><code>set max_parallel_workers_per_gather = 0;</code>: <span class="exturl" data-url="aHR0cHM6Ly9kYmEuc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzIyNjY1NC9ob3ctY2FuLWktZGlzYWJsZS1wYXJhbGxlbC1xdWVyaWVzLWluLXBvc3RncmVzcWw=" title="https://dba.stackexchange.com/questions/226654/how-can-i-disable-parallel-queries-in-postgresql">取消并行的query执行<i class="fa fa-external-link"></i></span>, 因为我们想看single CPU performance</li></ul><h1 id="REAL表格"><a href="#REAL表格" class="headerlink" title="REAL表格"></a><code>REAL</code>表格</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">testdb=# select sum(a+b) from testreals;</span><br><span class="line">     sum     </span><br><span class="line">-------------</span><br><span class="line"> <span class="number">1.00012e+09</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">384.460</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# select sum(a+b) from testreals;</span><br><span class="line">     sum     </span><br><span class="line">-------------</span><br><span class="line"> <span class="number">1.00013e+09</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">386.714</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# select cast(sum(a+b) as decimal) from testreals;</span><br><span class="line">    sum     </span><br><span class="line">------------</span><br><span class="line"> <span class="number">1000120000</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">535.749</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# select cast(sum(a+b) as decimal) from testreals;</span><br><span class="line">    sum     </span><br><span class="line">------------</span><br><span class="line"> <span class="number">1000110000</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">943.324</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# explain select sum(a+b) from testreals;</span><br><span class="line">                                QUERY PLAN                                </span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">194247.66</span>.<span class="number">.194247</span><span class="number">.67</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">4</span>)</span><br><span class="line">   -&gt;  <span class="function">Seq Scan on <span class="title">testreals</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.144247</span><span class="number">.77</span> rows=<span class="number">9999977</span> <span class="built_in">width</span>=<span class="number">8</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">2</span> rows)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">Time: 2.369 ms</span><br><span class="line"></span><br><span class="line">testdb=# explain analyze select sum(a+b) from testreals;</span><br><span class="line">                                                         QUERY PLAN                                                          </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">194247.66</span>.<span class="number">.194247</span><span class="number">.67</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">4</span>) (actual time=<span class="number">1598.636</span>.<span class="number">.1598</span><span class="number">.636</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">   -&gt;  <span class="function">Seq Scan on <span class="title">testreals</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.144247</span><span class="number">.77</span> rows=<span class="number">9999977</span> <span class="built_in">width</span>=<span class="number">8</span>)</span> <span class="params">(actual time=<span class="number">0.036</span>.<span class="number">.705</span><span class="number">.511</span> rows=<span class="number">10000000</span> loops=<span class="number">1</span>)</span></span></span><br><span class="line"> Planning time: 0.025 ms</span><br><span class="line"> Execution time: <span class="number">1598.656</span> ms</span><br><span class="line">(<span class="number">4</span> rows)</span><br></pre></td></tr></tbody></table></figure><ul><li>我们多次执行同一条指令<code>select sum(a+b) from testreals;</code>，前后有几率出现不一样的数值。这原因就是因为rounding error。同样的情况也出现在<code>select cast(sum(a+b) as decimal) from testreals;</code></li><li><code>explain &lt;sql&gt;</code>: 给出对应的query plan</li><li><code>explain analyze &lt;sql&gt;</code>: : 给出对应的query plan + 执行sql</li></ul><h1 id="DECIMAL表格"><a href="#DECIMAL表格" class="headerlink" title="DECIMAL表格"></a><code>DECIMAL</code>表格</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">testdb=# select sum(a+b) from testdecimals;</span><br><span class="line">        sum        </span><br><span class="line">-------------------</span><br><span class="line"> <span class="number">1000169047.417319</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">1175.335</span> ms (<span class="number">00</span>:<span class="number">01.175</span>)</span><br><span class="line"></span><br><span class="line">testdb=# explain select sum(a+b) from testdecimals;</span><br><span class="line">                                            QUERY PLAN                                             </span><br><span class="line">---------------------------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Finalize <span class="title">Aggregate</span>  <span class="params">(cost=<span class="number">126949.30</span>.<span class="number">.126949</span><span class="number">.31</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">32</span>)</span></span></span><br><span class="line">   -&gt;  Gather  (cost=126949.08..126949.29 rows=2 width=32)</span><br><span class="line">         Workers Planned: <span class="number">2</span></span><br><span class="line">         -&gt;  <span class="function">Partial <span class="title">Aggregate</span>  <span class="params">(cost=<span class="number">125949.08</span>.<span class="number">.125949</span><span class="number">.09</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">32</span>)</span></span></span><br><span class="line">               -&gt;  Parallel Seq Scan on testdecimals  (cost=0.00..105116.05 rows=4166605 width=16)</span><br><span class="line">(<span class="number">5</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.295</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# explain analyze select sum(a+b) from testdecimals;</span><br><span class="line">                                                                     QUERY PLAN                                                                      </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Finalize <span class="title">Aggregate</span>  <span class="params">(cost=<span class="number">126949.30</span>.<span class="number">.126949</span><span class="number">.31</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">32</span>)</span> <span class="params">(actual time=<span class="number">1382.202</span>.<span class="number">.1382</span><span class="number">.202</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span></span></span><br><span class="line">   -&gt;  Gather  (cost=126949.08..126949.29 rows=2 width=32) (actual time=1382.191..1384.527 rows=3 loops=1)</span><br><span class="line">         Workers Planned: <span class="number">2</span></span><br><span class="line">         Workers Launched: <span class="number">2</span></span><br><span class="line">         -&gt;  <span class="function">Partial <span class="title">Aggregate</span>  <span class="params">(cost=<span class="number">125949.08</span>.<span class="number">.125949</span><span class="number">.09</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">32</span>)</span> <span class="params">(actual time=<span class="number">1380.379</span>.<span class="number">.1380</span><span class="number">.379</span> rows=<span class="number">1</span> loops=<span class="number">3</span>)</span></span></span><br><span class="line">               -&gt;  Parallel Seq Scan on testdecimals  (cost=0.00..105116.05 rows=4166605 width=16) (actual time=0.023..310.259 rows=3333333 loops=3)</span><br><span class="line"> Planning time: <span class="number">0.034</span> ms</span><br><span class="line"> Execution time: <span class="number">1384.563</span> ms</span><br><span class="line">(<span class="number">8</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">1384.835</span> ms (<span class="number">00</span>:<span class="number">01.385</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li><code>select sum(a+b) from testdecimals;</code>无论我们执行多少次，出现的结果都是一样的。</li></ul><p>推荐阅读：</p><p>8.1. Numeric Types - Documentation of PostgreSQL 9.1: <span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjEvZGF0YXR5cGUtbnVtZXJpYy5odG1s" title="https://www.postgresql.org/docs/9.1/datatype-numeric.html">https://www.postgresql.org/docs/9.1/datatype-numeric.html<i class="fa fa-external-link"></i></span></p><p>How can I disable parallel queries in PostgreSQL? - Stackoverflow: <span class="exturl" data-url="aHR0cHM6Ly9kYmEuc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzIyNjY1NC9ob3ctY2FuLWktZGlzYWJsZS1wYXJhbGxlbC1xdWVyaWVzLWluLXBvc3RncmVzcWw=" title="https://dba.stackexchange.com/questions/226654/how-can-i-disable-parallel-queries-in-postgresql">https://dba.stackexchange.com/questions/226654/how-can-i-disable-parallel-queries-in-postgresql<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章服务于&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/16/CMU-15445-Lec04/&quot;&gt;[CMU-15445]Lec04&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数据库中给小数(分数)有两种类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variable Precision Numbers: 可变精度数字，可能有会rounding error&lt;/li&gt;
&lt;li&gt;Fixed Precision Numbers: 定精度数字，在给定的精度下没有误差&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们今天来看一看PostgreSQL中的这两种类型和它们可能产生的误差。&lt;/p&gt;
&lt;p&gt;PostgreSQL中具体对应的数据类型是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variable Precision Numbers: &lt;code&gt;REAL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fixed Precision Numbers: &lt;code&gt;DECIMAL(precision, scale), NUMERIC(precision, scale)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;DECIMAL(precision, scale)&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;precision&lt;/code&gt;: The &lt;code&gt;precision&lt;/code&gt; must be positive. The &lt;code&gt;precision&lt;/code&gt; of a &lt;em&gt;numeric&lt;/em&gt; is the total count of significant digits in the whole number, that is, the number of digits to both sides of the decimal point.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale&lt;/code&gt;: The &lt;code&gt;scale&lt;/code&gt; must be zero or positive.   The &lt;code&gt;scale&lt;/code&gt; of a &lt;em&gt;numeric&lt;/em&gt; is the count of decimal digits in the fractional part, to the right of the decimal point&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the number 23.5141 has a precision of 6 and a scale of 4. Integers can be considered to have a scale of zero.&lt;/p&gt;
&lt;p&gt;以上引用自: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjEvZGF0YXR5cGUtbnVtZXJpYy5odG1s&quot; title=&quot;https://www.postgresql.org/docs/9.1/datatype-numeric.html&quot;&gt;https://www.postgresql.org/docs/9.1/datatype-numeric.html&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Storage" scheme="https://cakebytheoceanluo.github.io/categories/Storage/"/>
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="Disk Management" scheme="https://cakebytheoceanluo.github.io/categories/Disk-Management/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/categories/PostgreSQL/"/>
    
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>[DBMS]PostgreSQL导入数据集</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/</id>
    <published>2020-03-15T19:28:22.000Z</published>
    <updated>2020-03-16T16:05:11.141Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了几种数据集，以及导入它们到PostgreSQL的方法，另外也提了一下如何查看数据集信息的命令。这些数据集都会在我的博客中<a href="https://cakebytheoceanluo.github.io/categories/SQL/">SQL 初级/中级/高级部分</a>出现。</p><h1 id="查看数据集信息的命令"><a href="#查看数据集信息的命令" class="headerlink" title="查看数据集信息的命令"></a>查看数据集信息的命令</h1><p>我们可以在psql环境中输入：</p><ul><li><code>\d;</code>, <code>\d+;</code> 可以查看当前数据库中的表格</li><li><code>\d &lt;table_name&gt;;</code>, <code>\d+ &lt;table_name&gt;;</code>: 可以查看对应表格的schema</li></ul><p><br></p><p>另外我们也可以在<strong>命令行</strong>中输入：</p><ul><li><code>psql -d testdb -c '\d'</code></li><li><code>psql -d testdb -c '\d+'</code></li><li><code>psql -d testdb -c '\d &lt;table_name&gt;'</code></li><li><code>psql -d testdb -c '\d+ &lt;table_name&gt;'</code></li></ul><p>另外有关PostgreSQL的安装和配置见我的另外一篇文章: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/">[DBMS] PostgreSQL 安装与配置</a></p><a id="more"></a><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><h2 id="TUM-Uni数据集"><a href="#TUM-Uni数据集" class="headerlink" title="TUM Uni数据集"></a>TUM Uni数据集</h2><p><img data-src="https://db.in.tum.de/teaching/ws1920/grundlagen/uni.png?lang=de" alt="schema_de"></p><p><img data-src="https://hyper-db.de/uniEngl.png" alt="schema_en"></p><p>Schma来自<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL2tlbXBlci8/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/kemper/?lang=de">Prof. Alfons Kemper, Ph.D.<i class="fa fa-external-link"></i></span>的课件和书。是一个很小的数据集， 关于学生教授大学课程考试等等表格。这个数据集很适合用来学习，练习SQL。我对这个数据集写了很多文章，提供SQL的练习，大家可以去<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMTYxODQ2MQ==" title="https://segmentfault.com/a/1190000021618461">我的专栏目录<i class="fa fa-external-link"></i></span>去寻找。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql</span><br><span class="line">$ psql testdb &lt; uni_mysql.sql</span><br><span class="line">$ psql testdb <span class="comment"># 然后我们就进入这个testdb，可以对这些表格进行操作了。</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                        List of relations</span><br><span class="line"> Schema |     Name     | Type  | Owner |    Size    | Description </span><br><span class="line">--------+--------------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | assistenten  | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | hoeren       | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | professoren  | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | pruefen      | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | studenten    | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | voraussetzen | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | vorlesungen  | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line">(<span class="number">7</span> rows)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ studenten;</span><br><span class="line">                                         Table <span class="string">"public.studenten"</span></span><br><span class="line">  Column  |         Type          | Collation | Nullable | Default | Storage  | Stats target | Description </span><br><span class="line">----------+-----------------------+-----------+----------+---------+----------+--------------+-------------</span><br><span class="line"> matrnr   | integer               |           | <span class="keyword">not</span> null |         | plain    |              | </span><br><span class="line"> name     | character varying(30) |           | not null |         | extended |              | </span><br><span class="line"> semester | integer               |           |          |         | plain    |              | </span><br><span class="line">Indexes:</span><br><span class="line">    <span class="string">"studenten_pkey"</span> PRIMARY KEY, btree (matrnr)</span><br><span class="line">Referenced by:</span><br><span class="line">    TABLE <span class="string">"hoeren"</span> CONSTRAINT <span class="string">"hoeren_matrnr_fkey"</span> <span class="function">FOREIGN <span class="title">KEY</span> <span class="params">(matrnr)</span> REFERENCES <span class="title">studenten</span><span class="params">(matrnr)</span> ON DELETE CASCADE</span></span><br><span class="line">    TABLE "pruefen" CONSTRAINT "pruefen_matrnr_fkey" FOREIGN KEY (matrnr) REFERENCES studenten(matrnr) ON DELETE CASCADE</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="TUM-十项全能比赛数据集"><a href="#TUM-十项全能比赛数据集" class="headerlink" title="TUM 十项全能比赛数据集"></a>TUM 十项全能比赛数据集</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vc3FsX3plaG5rYW1wZl9kaXN6aXBsaW4uc3FsP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/grundlagen/sql_zehnkampf_disziplin.sql?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/sql_zehnkampf_disziplin.sql?lang=de<i class="fa fa-external-link"></i></span></p><p>这里我把schema改写成英文：<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ZehnkampfD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ZehnkampfD (</span><br><span class="line">    <span class="keyword">Name</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    Discipline <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    points <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ZehnkampfD <span class="keyword">values</span></span><br><span class="line">    (<span class="string">'Bolt'</span>,        <span class="string">'100m'</span>,         <span class="number">50</span>),</span><br><span class="line">    (<span class="string">'Bolt'</span>,        <span class="string">'Weitsprung'</span>,   <span class="number">50</span>),</span><br><span class="line">    (<span class="string">'Eaton'</span>,       <span class="string">'100m'</span>,         <span class="number">40</span>),</span><br><span class="line">    (<span class="string">'Eaton'</span>,       <span class="string">'Weitsprung'</span>,   <span class="number">60</span>),</span><br><span class="line">    (<span class="string">'Suarez'</span>,      <span class="string">'100m'</span>,         <span class="number">60</span>),</span><br><span class="line">    (<span class="string">'Suarez'</span>,      <span class="string">'Weitsprung'</span>,   <span class="number">60</span>),</span><br><span class="line">    (<span class="string">'Behrenbruch'</span>, <span class="string">'100m'</span>,         <span class="number">30</span>),</span><br><span class="line">    (<span class="string">'Behrenbruch'</span>, <span class="string">'Weitsprung'</span>,   <span class="number">50</span>)</span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure><p></p><p>再把这几行写入文件<code>ZehnkampfD.sql</code>，载入数据库<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里testdb应该是另外一个新建的 没有载入数据的数据库</span></span><br><span class="line">$ psql testdb &lt; ZehnkampfD.sql</span><br><span class="line">$ psql testdb <span class="comment"># 然后我们就进入这个testdb，可以对这些表格进行操作了。</span></span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                       List of relations</span><br><span class="line"> Schema |    Name    | Type  | Owner |    Size    | Description </span><br><span class="line">--------+------------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | zehnkampfd | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ zehnkampfd;</span><br><span class="line">                                          Table <span class="string">"public.zehnkampfd"</span></span><br><span class="line">  Column   |          Type          | Collation | Nullable | Default | Storage  | Stats target | Description </span><br><span class="line">-----------+------------------------+-----------+----------+---------+----------+--------------+-------------</span><br><span class="line"> name      | character varying(100) |           | not null |         | extended |              | </span><br><span class="line"> disziplin | character varying(100) |           | not null |         | extended |              | </span><br><span class="line"> punkte    | integer                |           | <span class="keyword">not</span> null |         | plain    |              |</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="TUM-公共交通数据集"><a href="#TUM-公共交通数据集" class="headerlink" title="TUM 公共交通数据集"></a>TUM 公共交通数据集</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vc3FsX2ZhaHJwbGFuLnNxbD9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/sql_fahrplan.sql?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/sql_fahrplan.sql?lang=de<i class="fa fa-external-link"></i></span></p><p>这里我把schema改写成英文：<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> Fahrplan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Fahrplan (</span><br><span class="line">    From_ <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    To_ <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    Line_ <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    depart <span class="built_in">TIME</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    arrival <span class="built_in">TIME</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Fahrplan <span class="keyword">values</span></span><br><span class="line">    (<span class="string">'Garching, Forschungszentrum'</span>,     <span class="string">'Garching'</span>,                     <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:06:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:09:00'</span>),</span><br><span class="line">    (<span class="string">'Garching'</span>,                        <span class="string">'Garching-Hochbrück'</span>,           <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:09:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:11:00'</span>),</span><br><span class="line">    (<span class="string">'Garching-Hochbrück'</span>,              <span class="string">'Fröttmaning'</span>,                  <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:11:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:15:00'</span>),</span><br><span class="line">    (<span class="string">'Garching'</span>,                        <span class="string">'Garching, Forschungszentrum'</span>,  <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:06:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:09:00'</span>),</span><br><span class="line">    (<span class="string">'Garching-Hochbrück'</span>,              <span class="string">'Garching'</span>,                     <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:04:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:06:00'</span>),</span><br><span class="line">    (<span class="string">'Fröttmaning'</span>,                     <span class="string">'Garching-Hochbrück'</span>,           <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:00:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:04:00'</span>),</span><br><span class="line">    (<span class="string">'Garching, Forschungszentrum'</span>,     <span class="string">'Technische Universität'</span>,       <span class="string">'690'</span>, <span class="built_in">TIME</span> <span class="string">'17:56:00'</span>, <span class="built_in">TIME</span> <span class="string">'17:57:00'</span>)</span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure><p></p><p>再把这几行写入文件<code>Fahrplan.sql</code>，载入数据库<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里testdb应该是另外一个新建的 没有载入数据的数据库</span></span><br><span class="line">$ psql testdb &lt; Fahrplan.sql</span><br><span class="line">$ psql testdb <span class="comment"># 然后我们就进入这个testdb，可以对这些表格进行操作了。</span></span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">testdb=# \d+;</span><br><span class="line">                      List of relations</span><br><span class="line"> Schema |   Name   | Type  | Owner |    Size    | Description </span><br><span class="line">--------+----------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | fahrplan | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ fahrplan;</span><br><span class="line">                                          Table <span class="string">"public.fahrplan"</span></span><br><span class="line"> Column  |          Type          | Collation | Nullable | Default | Storage  | Stats target | Description </span><br><span class="line">---------+------------------------+-----------+----------+---------+----------+--------------+-------------</span><br><span class="line"> von     | character varying(100) |           | not null |         | extended |              | </span><br><span class="line"> nach    | character varying(100) |           | not null |         | extended |              | </span><br><span class="line"> linie   | character varying(10)  |           | not null |         | extended |              | </span><br><span class="line"> abfahrt | time without time zone |           | <span class="keyword">not</span> null |         | plain    |              | </span><br><span class="line"> ankunft | time without time zone |           | <span class="keyword">not</span> null |         | plain    |              |</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="TPC-H"><a href="#TPC-H" class="headerlink" title="TPC-H"></a>TPC-H</h2><p>我单独写了一篇文章，见我的博客: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5TPC-H%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS]PostgreSQL导入TPC-H数据集</a></p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                        List of relations</span><br><span class="line"> Schema |     Name     | Type  | Owner |    Size    | Description </span><br><span class="line">--------+--------------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | customer     | table | jigao | <span class="number">28</span> MB      | </span><br><span class="line"> <span class="keyword">public</span> | lineitem     | table | jigao | <span class="number">879</span> MB     | </span><br><span class="line"> <span class="keyword">public</span> | nation       | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | orders       | table | jigao | <span class="number">204</span> MB     | </span><br><span class="line"> <span class="keyword">public</span> | part         | table | jigao | <span class="number">32</span> MB      | </span><br><span class="line"> <span class="keyword">public</span> | partsupp     | table | jigao | <span class="number">136</span> MB     | </span><br><span class="line"> <span class="keyword">public</span> | region       | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | supplier     | table | jigao | <span class="number">1800</span> kB    | </span><br><span class="line">(<span class="number">8</span> rows)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ customer;</span><br><span class="line">                                            Table <span class="string">"public.customer"</span></span><br><span class="line">    Column    |          Type          | Collation | Nullable | Default | Storage  | Stats target | Description </span><br><span class="line">--------------+------------------------+-----------+----------+---------+----------+--------------+-------------</span><br><span class="line"> c_custkey    | integer                |           | <span class="keyword">not</span> null |         | plain    |              | </span><br><span class="line"> c_name       | character varying(25)  |           | not null |         | extended |              | </span><br><span class="line"> c_address    | character varying(40)  |           | not null |         | extended |              | </span><br><span class="line"> c_nationkey  | integer                |           | <span class="keyword">not</span> null |         | plain    |              | </span><br><span class="line"> c_phone      | character(<span class="number">15</span>)          |           | <span class="keyword">not</span> null |         | extended |              | </span><br><span class="line"> c_acctbal    | numeric(<span class="number">15</span>,<span class="number">2</span>)          |           | <span class="keyword">not</span> null |         | main     |              | </span><br><span class="line"> c_mktsegment | character(<span class="number">10</span>)          |           | <span class="keyword">not</span> null |         | extended |              | </span><br><span class="line"> c_comment    | character varying(117) |           | not null |         | extended |              |</span><br></pre></td></tr></tbody></table></figure><h2 id="IMDb-数据集"><a href="#IMDb-数据集" class="headerlink" title="IMDb 数据集"></a>IMDb 数据集</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iconv -f latin1 -t utf-8 actorsTrimmed.list &gt; actorsUtf8.list </span><br><span class="line"></span><br><span class="line">sed -r -e <span class="string">'s/\t+/|/g'</span> -e <span class="string">'s/((\s*)|(\{.*\})|(\[.*\])|(&lt;.*&gt;)|\(.*[a-zA-Z].*\))*$//g'</span> actorsUtf8.list | awk -F <span class="string">'|'</span>  <span class="string">'{if($1 != "") { actor = $1 }; if ($2) print actor "|" $2 }'</span> &gt; actors.csv</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 这里testdb应该是另外一个新建的 没有载入数据的数据库</span><br><span class="line">$ psql testdb # 然后我们就进入这个testdb，可以对这些表格进行操作了。</span><br><span class="line"></span><br><span class="line">testdb=# create table playedin_text (actor_name <span class="built_in">text</span> <span class="keyword">not</span> null, movie_name <span class="built_in">text</span> <span class="keyword">not</span> null);</span><br><span class="line"></span><br><span class="line">testdb=# \copy playedin_text from actors.csv delimiter <span class="string">'|'</span>;</span><br><span class="line"></span><br><span class="line">testdb=# create index on playedin (actor); </span><br><span class="line"></span><br><span class="line">testdb=# create index on playedin (movie);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                          List of relations</span><br><span class="line"> Schema |     Name      |   Type   | Owner |    Size    | Description </span><br><span class="line">--------+---------------+----------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | actors        | table    | jigao | <span class="number">98</span> MB      | </span><br><span class="line"> <span class="keyword">public</span> | actors_id_seq | sequence | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | movies        | table    | jigao | <span class="number">66</span> MB      | </span><br><span class="line"> <span class="keyword">public</span> | movies_id_seq | sequence | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | playedin      | table    | jigao | <span class="number">599</span> MB     | </span><br><span class="line"> <span class="keyword">public</span> | playedin_text | table    | jigao | <span class="number">1183</span> MB    | </span><br><span class="line">(<span class="number">6</span> rows)</span><br><span class="line"></span><br><span class="line">testdb=# \d actors</span><br><span class="line">                            Table <span class="string">"public.actors"</span></span><br><span class="line"> Column |  Type   | Collation | Nullable |              Default               </span><br><span class="line">--------+---------+-----------+----------+------------------------------------</span><br><span class="line"> id     | integer |           | not null | nextval('actors_id_seq'::regclass)</span><br><span class="line"> name   | <span class="built_in">text</span>    |           | <span class="keyword">not</span> null | </span><br><span class="line">Indexes:</span><br><span class="line">    <span class="string">"actors_pkey"</span> PRIMARY KEY, btree (id)</span><br><span class="line">Referenced by:</span><br><span class="line">    TABLE <span class="string">"playedin"</span> CONSTRAINT <span class="string">"playedin_actor_fkey"</span> <span class="function">FOREIGN <span class="title">KEY</span> <span class="params">(actor)</span> REFERENCES <span class="title">actors</span><span class="params">(id)</span></span></span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="CMU-15445-歌手数据集"><a href="#CMU-15445-歌手数据集" class="headerlink" title="CMU-15445 歌手数据集"></a>CMU-15445 歌手数据集</h2><p>这个数据集在CMU-15445 Lec2 Advanced SQL中使用，见我的两篇博客笔记:</p><ul><li><a href="https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part1/">[CMU-15445]Lec02_part1</a></li><li><a href="https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part2/">[CMU-15445]Lec02_part2</a></li></ul><p><img data-src="/images/CMU1544564/Lec02/7.jpg" alt="7.jpg"></p><p>对应的SQL语句　<a href="https://cakebytheoceanluo.github.io/download/CMU15445/lec02_schema.sql">下载</a>：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> student <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> course <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> enrolled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student </span><br><span class="line">   (<span class="keyword">sid</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">16</span>), </span><br><span class="line">    login <span class="built_in">varchar</span>(<span class="number">32</span>), </span><br><span class="line">    age <span class="built_in">smallint</span>, </span><br><span class="line">    gpa <span class="built_in">numeric</span>(<span class="number">2</span>, <span class="number">1</span>) <span class="keyword">check</span> (gpa <span class="keyword">between</span> <span class="number">0.0</span> <span class="keyword">and</span> <span class="number">4.0</span>)</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course </span><br><span class="line">   (cid <span class="built_in">varchar</span>(<span class="number">32</span>) primary <span class="keyword">key</span>, </span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> enrolled </span><br><span class="line">   (<span class="keyword">sid</span> <span class="built_in">int</span> <span class="keyword">references</span> student (<span class="keyword">sid</span>) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>, </span><br><span class="line">    cid <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">references</span> course (cid) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>, </span><br><span class="line">    grade <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">check</span> (grade <span class="keyword">in</span> (<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>)),</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="keyword">sid</span>, cid)</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (<span class="keyword">sid</span>, <span class="keyword">name</span>, login, age, gpa) <span class="keyword">values</span> (<span class="number">53666</span>, <span class="string">'Kanye'</span>, <span class="string">'kanye@cs'</span>, <span class="number">39</span>, <span class="number">4.0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (<span class="keyword">sid</span>, <span class="keyword">name</span>, login, age, gpa) <span class="keyword">values</span> (<span class="number">53688</span>, <span class="string">'Bieber'</span>, <span class="string">'jbieber@cs'</span>, <span class="number">22</span>, <span class="number">3.9</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (<span class="keyword">sid</span>, <span class="keyword">name</span>, login, age, gpa) <span class="keyword">values</span> (<span class="number">53655</span>, <span class="string">'Tupac'</span>, <span class="string">'shakur@cs'</span>, <span class="number">26</span>, <span class="number">3.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course (cid, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'15-445'</span>, <span class="string">'Database Systems'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course (cid, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'15-721'</span>, <span class="string">'Advanced Database Systems'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course (cid, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'15-826'</span>, <span class="string">'Data Mining'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course (cid, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'15-823'</span>, <span class="string">'Advanced Topics in Databases'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53666</span>, <span class="string">'15-445'</span>, <span class="string">'C'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53688</span>, <span class="string">'15-721'</span>, <span class="string">'A'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53666</span>, <span class="string">'15-826'</span>, <span class="string">'B'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53655</span>, <span class="string">'15-445'</span>, <span class="string">'B'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53666</span>, <span class="string">'15-721'</span>, <span class="string">'C'</span>);</span><br></pre></td></tr></tbody></table></figure><ul><li>可以在PostgreSQL, MySQL, SQLite中使用</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://cakebytheoceanluo.github.io/download/CMU15445/lec02_schema.sql</span><br><span class="line">$ psql testdb &lt; uni_mysql.sql</span><br><span class="line">$ psql testdb <span class="comment"># 然后我们就进入这个testdb，可以对这些表格进行操作了。</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                        List of relations</span><br><span class="line"> Schema |     Name     | Type  | Owner |    Size    | Description </span><br><span class="line">--------+--------------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | course       | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | enrolled     | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | student      | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line">(<span class="number">3</span> rows)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ enrolled</span><br><span class="line">                                         Table <span class="string">"public.enrolled"</span></span><br><span class="line"> Column |         Type          | Collation | Nullable | Default | Storage  | Stats target | Description </span><br><span class="line">--------+-----------------------+-----------+----------+---------+----------+--------------+-------------</span><br><span class="line"> sid    | integer               |           | <span class="keyword">not</span> null |         | plain    |              | </span><br><span class="line"> cid    | character varying(<span class="number">32</span>) |           | <span class="keyword">not</span> null |         | extended |              | </span><br><span class="line"> grade  | character(<span class="number">1</span>)          |           |          |         | extended |              | </span><br><span class="line">Indexes:</span><br><span class="line">    <span class="string">"enrolled_pkey"</span> PRIMARY KEY, btree (sid, cid)</span><br><span class="line">Check constraints:</span><br><span class="line">    <span class="string">"enrolled_grade_check"</span> CHECK (grade = ANY (ARRAY[<span class="string">'A'</span>::bpchar, <span class="string">'B'</span>::bpchar, <span class="string">'C'</span>::bpchar]))</span><br><span class="line">Foreign-key constraints:</span><br><span class="line">    <span class="string">"enrolled_cid_fkey"</span> FOREIGN KEY (cid) REFERENCES course(cid) ON DELETE CASCADE</span><br><span class="line">    <span class="string">"enrolled_sid_fkey"</span> FOREIGN KEY (sid) REFERENCES student(sid) ON DELETE CASCADE</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="CMU-15445-分数数据集-Mock"><a href="#CMU-15445-分数数据集-Mock" class="headerlink" title="CMU-15445 分数数据集 (Mock)"></a>CMU-15445 分数数据集 (Mock)</h2><p>更多关于这个数据集，见这个实验<a href="https://cakebytheoceanluo.github.io/2020/03/16/DBMS-Postgres%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98precision-numbers/">[DBMS] Postgres 精度问题 precision_numbers</a></p><p>这个实验服务于<a href="https://cakebytheoceanluo.github.io/2020/03/16/CMU-15445-Lec04/">[CMU-15445]Lec04</a></p><h3 id="数据集faker"><a href="#数据集faker" class="headerlink" title="数据集faker"></a>数据集faker</h3><p>我用python写了一个类似的数据集faker:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000000</span>):</span><br><span class="line">    print(<span class="string">f'<span class="subst">{float(Decimal(random.randrange(<span class="number">0</span>, <span class="number">100000000</span>) / <span class="number">1000000</span>))}</span>,<span class="subst">{float(Decimal(random.randrange(<span class="number">0</span>, <span class="number">100000000</span>) / <span class="number">1000000</span>))}</span>'</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>下载: <a href="https://cakebytheoceanluo.github.io/download/CMU15445/lec04_float_faker.py">lec04_float_faker.py</a></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>使用:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./lec04_float_faker.py &gt; data.csv</span><br></pre></td></tr></tbody></table></figure><p>到现在我们获得了<code>data.csv</code>这个文件:</p><h3 id="导入数据集"><a href="#导入数据集" class="headerlink" title="导入数据集"></a>导入数据集</h3><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> testreals;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> testdecimals;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> testreals (a <span class="built_in">REAL</span> <span class="keyword">not</span> <span class="literal">null</span>, b <span class="built_in">REAL</span> <span class="keyword">not</span> <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> testdecimals (a <span class="built_in">DECIMAL</span>(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> <span class="literal">null</span>, b <span class="built_in">DECIMAL</span>(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> <span class="literal">null</span>);</span><br><span class="line">copy testreals from '/tmp/data.csv' delimiter ',' csv;</span><br><span class="line">copy testdecimals from '/tmp/data.csv' delimiter ',' csv;</span><br></pre></td></tr></tbody></table></figure><h4 id="输出例子"><a href="#输出例子" class="headerlink" title="输出例子"></a>输出例子</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">testdb=# drop table <span class="keyword">if</span> <span class="built_in">exists</span> testreals;</span><br><span class="line">DROP TABLE</span><br><span class="line"></span><br><span class="line">testdb=# drop table <span class="keyword">if</span> <span class="built_in">exists</span> testdecimals;</span><br><span class="line">DROP TABLE</span><br><span class="line"></span><br><span class="line">testdb=# create table testreals (a REAL <span class="keyword">not</span> null, b REAL <span class="keyword">not</span> null);</span><br><span class="line">CREATE TABLE</span><br><span class="line"></span><br><span class="line">testdb=# create table testdecimals (a DECIMAL(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> null, b DECIMAL(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> null);</span><br><span class="line">CREATE TABLE</span><br><span class="line"></span><br><span class="line">testdb=# copy testreals from '/tmp/data.csv' delimiter ',' csv;</span><br><span class="line">COPY <span class="number">10000000</span></span><br><span class="line"></span><br><span class="line">testdb=# copy testdecimals from '/tmp/data.csv' delimiter ',' csv;</span><br><span class="line">COPY <span class="number">10000000</span></span><br></pre></td></tr></tbody></table></figure><p><br></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                        List of relations</span><br><span class="line"> Schema |     Name     | Type  | Owner |    Size    | Description </span><br><span class="line">--------+--------------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | testdecimals | table | jigao | <span class="number">496</span> MB     | </span><br><span class="line"> <span class="keyword">public</span> | testreals    | table | jigao | <span class="number">346</span> MB     | </span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ testreals </span><br><span class="line">                               Table <span class="string">"public.testreals"</span></span><br><span class="line"> Column | Type | Collation | Nullable | Default | Storage | Stats target | Description </span><br><span class="line">--------+------+-----------+----------+---------+---------+--------------+-------------</span><br><span class="line"> a      | real |           | <span class="keyword">not</span> null |         | plain   |              | </span><br><span class="line"> b      | real |           | <span class="keyword">not</span> null |         | plain   |              | </span><br><span class="line"></span><br><span class="line">testdb=# \d+ testdecimals </span><br><span class="line">                                  Table <span class="string">"public.testdecimals"</span></span><br><span class="line"> Column |     Type      | Collation | Nullable | Default | Storage | Stats target | Description </span><br><span class="line">--------+---------------+-----------+----------+---------+---------+--------------+-------------</span><br><span class="line"> a      | numeric(<span class="number">10</span>,<span class="number">6</span>) |           | <span class="keyword">not</span> null |         | main    |              | </span><br><span class="line"> b      | numeric(<span class="number">10</span>,<span class="number">6</span>) |           | <span class="keyword">not</span> null |         | main    |              |</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了几种数据集，以及导入它们到PostgreSQL的方法，另外也提了一下如何查看数据集信息的命令。这些数据集都会在我的博客中&lt;a href=&quot;https://cakebytheoceanluo.github.io/categories/SQL/&quot;&gt;SQL 初级/中级/高级部分&lt;/a&gt;出现。&lt;/p&gt;
&lt;h1 id=&quot;查看数据集信息的命令&quot;&gt;&lt;a href=&quot;#查看数据集信息的命令&quot; class=&quot;headerlink&quot; title=&quot;查看数据集信息的命令&quot;&gt;&lt;/a&gt;查看数据集信息的命令&lt;/h1&gt;&lt;p&gt;我们可以在psql环境中输入：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\d;&lt;/code&gt;, &lt;code&gt;\d+;&lt;/code&gt; 可以查看当前数据库中的表格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\d &amp;lt;table_name&amp;gt;;&lt;/code&gt;, &lt;code&gt;\d+ &amp;lt;table_name&amp;gt;;&lt;/code&gt;: 可以查看对应表格的schema&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;另外我们也可以在&lt;strong&gt;命令行&lt;/strong&gt;中输入：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;psql -d testdb -c &#39;\d&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;psql -d testdb -c &#39;\d+&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;psql -d testdb -c &#39;\d &amp;lt;table_name&amp;gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;psql -d testdb -c &#39;\d+ &amp;lt;table_name&amp;gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外有关PostgreSQL的安装和配置见我的另外一篇文章: &lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/&quot;&gt;[DBMS] PostgreSQL 安装与配置&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/categories/PostgreSQL/"/>
    
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>[DBMS]PostgreSQL导入TPC-H数据集</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5TPC-H%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5TPC-H%E6%95%B0%E6%8D%AE%E9%9B%86/</id>
    <published>2020-03-15T17:51:21.000Z</published>
    <updated>2020-03-15T19:36:38.354Z</updated>
    
    <content type="html"><![CDATA[<p>本文关注如何将TPC-H数据集导入至PostgreSQL, 同时简单提一下如何生成TPC-H数据。</p><h1 id="TPC-H介绍"><a href="#TPC-H介绍" class="headerlink" title="TPC-H介绍"></a>TPC-H介绍</h1><blockquote><p>TPC-H is a Decision Support Benchmark. The TPC Benchmark™H (TPC-H) is a decision support benchmark. It consists of a suite of business oriented ad-hoc queries and concurrent data modifications. <sup><a href="#fn1">1</a></sup></p></blockquote><p>TPC-H是TPC协会提供的一个benchmark，用来模拟一个现实中的商业应用，且自带22个SQL Query。这22个Query均关注于OLAP分析型查询。<br>这些Query可以在如下的地方找到:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzJuZFF1YWRyYW50L3BnLXRwY2gvdHJlZS9tYXN0ZXIvcXVlcmllcw==" title="https://github.com/2ndQuadrant/pg-tpch/tree/master/queries">https://github.com/2ndQuadrant/pg-tpch/tree/master/queries<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbCM=" title="https://hyper-db.de/interface.html#">https://hyper-db.de/interface.html#<i class="fa fa-external-link"></i></span> 点击右下角Insert TPC-H Query</li><li><span class="exturl" data-url="aHR0cHM6Ly91bWJyYS5kYi5pbi50dW0uZGUvaW50ZXJmYWNlLw==" title="https://umbra.db.in.tum.de/interface/">https://umbra.db.in.tum.de/interface/<i class="fa fa-external-link"></i></span>　点击Load Query</li></ul><p>有一篇论文具体讲每一个TPC-H的Query，实际上和本文无关，我链接在这里：　<span class="exturl" data-url="aHR0cHM6Ly9ob21lcGFnZXMuY3dpLm5sL35ib25jei9zbmItY2hhbGxlbmdlL2Nob2tlcG9pbnRzLXRwY3RjLnBkZg==" title="https://homepages.cwi.nl/~boncz/snb-challenge/chokepoints-tpctc.pdf">TPC-H Analyzed: Hidden Messages and Lessons Learned from an Influential Benchmark<i class="fa fa-external-link"></i></span></p><a id="more"></a><h1 id="TPC-H数据集"><a href="#TPC-H数据集" class="headerlink" title="TPC-H数据集"></a>TPC-H数据集</h1><p>我们可以手动生成TPC-H是数据集，常常成为<strong>synthetic dataset</strong>, 人工生成的数据集。</p><p>我们使用这个工具：　<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cnVtL3RwY2gtZGJnZW4=" title="https://github.com/electrum/tpch-dbgen">https://github.com/electrum/tpch-dbgen<i class="fa fa-external-link"></i></span></p><p>使用方法是：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:electrum/tpch-dbgen.git</span><br><span class="line">Cloning into <span class="string">'tpch-dbgen'</span>...</span><br><span class="line">remote: Enumerating objects: 149, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 149 (delta 0), reused 0 (delta 0), pack-reused 149</span><br><span class="line">Receiving objects: 100% (149/149), 214.31 KiB | 637.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (34/34), <span class="keyword">done</span>.</span><br><span class="line">$ <span class="built_in">cd</span> tpch-dbgen/</span><br><span class="line">$ make</span><br><span class="line"><span class="comment">## make 的输出我全部删去了</span></span><br><span class="line">$ ./dbgen</span><br><span class="line">TPC-H Population Generator (Version 2.14.0)</span><br><span class="line">Copyright Transaction Processing Performance Council 1994 - 2010</span><br><span class="line">$ ls | grep <span class="string">'.*.tbl'</span></span><br><span class="line">customer.tbl</span><br><span class="line">lineitem.tbl</span><br><span class="line">nation.tbl</span><br><span class="line">orders.tbl</span><br><span class="line">partsupp.tbl</span><br><span class="line">part.tbl</span><br><span class="line">region.tbl</span><br><span class="line">supplier.tbl</span><br></pre></td></tr></tbody></table></figure><p>我们看到最后生成了8个<code>.tbl</code>文件，它们就是TPC-H的8个表格(a.k.a关系)。另外我这里生成的是TPC-H scale factor=1的数据集，即它的伸缩系数是１，生成的数据大概是1GiB左右。我们还可以在生成数据的时候调整这这scale factor(sf)，比如当它为10的时候，生成的数据大概是10GiB左右。另外我们也可以在生成的时候去特定生成一张表格。这些情况都可以在，　<code>dbgen</code>这个程序中通过参数确定，这里也不再详细说了。</p><h2 id="dbgen的各种参数-可略读浏览"><a href="#dbgen的各种参数-可略读浏览" class="headerlink" title="dbgen的各种参数 (可略读浏览)"></a><code>dbgen</code>的各种参数 (可略读浏览)</h2><p>详见：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ ./dbgen --<span class="built_in">help</span></span><br><span class="line">./dbgen: invalid option -- <span class="string">'-'</span></span><br><span class="line">ERROR: option <span class="string">'-'</span> unknown.</span><br><span class="line">TPC-H Population Generator (Version 2.14.0 build 0)</span><br><span class="line">Copyright Transaction Processing Performance Council 1994 - 2010</span><br><span class="line">USAGE:</span><br><span class="line">dbgen [-{vf}][-T {pcsoPSOL}]</span><br><span class="line">[-s &lt;scale&gt;][-C &lt;procs&gt;][-S &lt;step&gt;]</span><br><span class="line">dbgen [-v] [-O m] [-s &lt;scale&gt;] [-U &lt;updates&gt;]</span><br><span class="line"></span><br><span class="line">Basic Options</span><br><span class="line">===========================</span><br><span class="line">-C &lt;n&gt; -- separate data <span class="built_in">set</span> into &lt;n&gt; chunks (requires -S, default: 1)</span><br><span class="line">-f     -- force. Overwrite existing files</span><br><span class="line">-h     -- display this message</span><br><span class="line">-q     -- <span class="built_in">enable</span> QUIET mode</span><br><span class="line">-s &lt;n&gt; -- <span class="built_in">set</span> Scale Factor (SF) to  &lt;n&gt; (default: 1) </span><br><span class="line">-S &lt;n&gt; -- build the &lt;n&gt;th step of the data/update <span class="built_in">set</span> (used with -C or -U)</span><br><span class="line">-U &lt;n&gt; -- generate &lt;n&gt; update sets</span><br><span class="line">-v     -- <span class="built_in">enable</span> VERBOSE mode</span><br><span class="line"></span><br><span class="line">Advanced Options</span><br><span class="line">===========================</span><br><span class="line">-b &lt;s&gt; -- load distributions <span class="keyword">for</span> &lt;s&gt; (default: dists.dss)</span><br><span class="line">-d &lt;n&gt; -- split deletes between &lt;n&gt; files (requires -U)</span><br><span class="line">-i &lt;n&gt; -- split inserts between &lt;n&gt; files (requires -U)</span><br><span class="line">-T c   -- generate cutomers ONLY</span><br><span class="line">-T l   -- generate nation/region ONLY</span><br><span class="line">-T L   -- generate lineitem ONLY</span><br><span class="line">-T n   -- generate nation ONLY</span><br><span class="line">-T o   -- generate orders/lineitem ONLY</span><br><span class="line">-T O   -- generate orders ONLY</span><br><span class="line">-T p   -- generate parts/partsupp ONLY</span><br><span class="line">-T P   -- generate parts ONLY</span><br><span class="line">-T r   -- generate region ONLY</span><br><span class="line">-T s   -- generate suppliers ONLY</span><br><span class="line">-T S   -- generate partsupp ONLY</span><br><span class="line"></span><br><span class="line">To generate the SF=1 (1GB), validation database population, use:</span><br><span class="line">dbgen -vf -s 1</span><br><span class="line"></span><br><span class="line">To generate updates <span class="keyword">for</span> a SF=1 (1GB), use:</span><br><span class="line">dbgen -v -U 1 -s 1</span><br></pre></td></tr></tbody></table></figure><h2 id="另外可替代生成的工具"><a href="#另外可替代生成的工具" class="headerlink" title="另外可替代生成的工具"></a>另外可替代生成的工具</h2><p>当然也有其他工具可以生成这个数据集，　比如: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dyZWdyYWhuL3RwY2gta2l0" title="https://github.com/gregrahn/tpch-kit">https://github.com/gregrahn/tpch-kit<i class="fa fa-external-link"></i></span>　。但是我们不在这篇文章中赘述。</p><p><br><br><br></p><h1 id="PostgreSQL准备"><a href="#PostgreSQL准备" class="headerlink" title="PostgreSQL准备"></a>PostgreSQL准备</h1><h2 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h2><p>PostgreSQL具体操作详见我的另一篇文章: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/#%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E5%BA%93">[DBMS] PostgreSQL 安装与配置 - 新建一个用户数据库</a></p><p>这里我就展示我的命令和输出例子，在你的环境也大同小异。</p><h3 id="新建数据库命令"><a href="#新建数据库命令" class="headerlink" title="新建数据库命令"></a>新建数据库命令</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u postgres psql</span><br><span class="line">postgres=# CREATE DATABASE tpch;</span><br><span class="line">postgres=# GRANT ALL ON DATABASE tpch to &lt;我们之前创建的用户名 不带尖角括号&gt;;</span><br></pre></td></tr></tbody></table></figure><h3 id="输出例子"><a href="#输出例子" class="headerlink" title="输出例子"></a>输出例子</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u postgres psql</span><br><span class="line">[sudo] password <span class="keyword">for</span> jigao: </span><br><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">postgres=# CREATE DATABASE tpch_sf1;</span><br><span class="line">CREATE DATABASE</span><br><span class="line">postgres=#  GRANT ALL ON DATABASE tpch_sf1 to jigao;</span><br><span class="line">GRANT</span><br><span class="line">postgres=# \q</span><br></pre></td></tr></tbody></table></figure><h2 id="新建表格"><a href="#新建表格" class="headerlink" title="新建表格"></a>新建表格</h2><p>这里需要用到<code>tpch-dbgen/dss.ddl</code>这个文件，它就在和我们刚刚<code>dbgen</code>程序同一个文件，也可以在repo中找到：　<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cnVtL3RwY2gtZGJnZW4vYmxvYi9tYXN0ZXIvZHNzLmRkbA==" title="https://github.com/electrum/tpch-dbgen/blob/master/dss.ddl">https://github.com/electrum/tpch-dbgen/blob/master/dss.ddl<i class="fa fa-external-link"></i></span></p><h3 id="新建表格命令"><a href="#新建表格命令" class="headerlink" title="新建表格命令"></a>新建表格命令</h3><p><code>$ psql -d tpch_sf1 &lt; dss.ddl</code></p><h3 id="输出例子-1"><a href="#输出例子-1" class="headerlink" title="输出例子"></a>输出例子</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ file dss.ddl</span><br><span class="line">dss.ddl: ASCII text</span><br><span class="line">$ psql tpch_sf1 &lt; dss.ddl </span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br></pre></td></tr></tbody></table></figure><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ psql -d tpch_sf1 -c <span class="string">'\dt+'</span></span><br><span class="line">                      List of relations</span><br><span class="line"> Schema |   Name   | Type  | Owner |  Size   | Description </span><br><span class="line">--------+----------+-------+-------+---------+-------------</span><br><span class="line"> public | customer | table | jigao | 0 bytes | </span><br><span class="line"> public | lineitem | table | jigao | 0 bytes | </span><br><span class="line"> public | nation   | table | jigao | 0 bytes | </span><br><span class="line"> public | orders   | table | jigao | 0 bytes | </span><br><span class="line"> public | part     | table | jigao | 0 bytes | </span><br><span class="line"> public | partsupp | table | jigao | 0 bytes | </span><br><span class="line"> public | region   | table | jigao | 0 bytes | </span><br><span class="line"> public | supplier | table | jigao | 0 bytes | </span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><ul><li>如果能看到上面的输出，那么这些表格已经被新建了。</li></ul><p><br></p><p><code>$man psql</code>:</p><blockquote><pre><code>   -d dbname   -c command</code></pre></blockquote><h2 id="TPC-H-Schema"><a href="#TPC-H-Schema" class="headerlink" title="TPC-H Schema"></a>TPC-H Schema</h2><p>ddl即Data Definition Language 数据定义语言, 也是就是TPC-H中表格的架构和相互关系。</p><p><img data-src="https://hyper-db.de/tpch.png" alt="TPC-H Schema, Source: https://hyper-db.de/tpch.png"></p><p><br><br><br></p><h1 id="导入PostgreSQL-2"><a href="#导入PostgreSQL-2" class="headerlink" title="导入PostgreSQL 2"></a>导入PostgreSQL <sup><a href="#fn2">2</a></sup></h1><h2 id="导入命令"><a href="#导入命令" class="headerlink" title="导入命令"></a>导入命令</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ </span><br><span class="line">for i in `ls *.tbl`; do</span><br><span class="line">    echo $i;</span><br><span class="line">    sed -i 's/|$//' *.tbl;</span><br><span class="line">    name=`echo $i| cut -d'.' -f1`;</span><br><span class="line">    psql -d tpch_sf1 -c "COPY $name FROM '`pwd`/$i' DELIMITER '|' ENCODING 'LATIN1';";</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure><ul><li><code>sed -i 's/|$//' *.tbl;</code>: 对于每一个<code>.tbl</code>文件，将每一行最后的<code>|</code>去掉</li><li>因为psql会认为分隔符<code>|</code>后面还依然有数据。</li></ul><h2 id="输出例子-2"><a href="#输出例子-2" class="headerlink" title="输出例子"></a>输出例子</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> `ls *.tbl`; <span class="keyword">do</span></span><br><span class="line">&gt;     <span class="built_in">echo</span> <span class="variable">$i</span>;</span><br><span class="line">&gt;     sed -i <span class="string">'s/|$//'</span> *.tbl;</span><br><span class="line">&gt;     name=`<span class="built_in">echo</span> <span class="variable">$i</span>| cut -d<span class="string">'.'</span> -f1`;</span><br><span class="line">&gt;     psql -d tpch_sf1 -c <span class="string">"COPY <span class="variable">$name</span> FROM '`pwd`/<span class="variable">$i</span>' DELIMITER '|' ENCODING 'LATIN1';"</span>;</span><br><span class="line">&gt; <span class="keyword">done</span></span><br><span class="line">customer.tbl</span><br><span class="line">COPY 150000</span><br><span class="line">lineitem.tbl</span><br><span class="line">COPY 6001215</span><br><span class="line">nation.tbl</span><br><span class="line">COPY 25</span><br><span class="line">orders.tbl</span><br><span class="line">COPY 1500000</span><br><span class="line">partsupp.tbl</span><br><span class="line">COPY 800000</span><br><span class="line">part.tbl</span><br><span class="line">COPY 200000</span><br><span class="line">region.tbl</span><br><span class="line">COPY 5</span><br><span class="line">supplier.tbl</span><br><span class="line">COPY 1000</span><br></pre></td></tr></tbody></table></figure><h2 id="检查-1"><a href="#检查-1" class="headerlink" title="检查"></a>检查</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ psql -d tpch_sf1 -c <span class="string">'\dt+'</span></span><br><span class="line">                      List of relations</span><br><span class="line"> Schema |   Name   | Type  | Owner |    Size    | Description </span><br><span class="line">--------+----------+-------+-------+------------+-------------</span><br><span class="line"> public | customer | table | jigao | 28 MB      | </span><br><span class="line"> public | lineitem | table | jigao | 879 MB     | </span><br><span class="line"> public | nation   | table | jigao | 8192 bytes | </span><br><span class="line"> public | orders   | table | jigao | 204 MB     | </span><br><span class="line"> public | part     | table | jigao | 32 MB      | </span><br><span class="line"> public | partsupp | table | jigao | 136 MB     | </span><br><span class="line"> public | region   | table | jigao | 8192 bytes | </span><br><span class="line"> public | supplier | table | jigao | 1800 kB    | </span><br><span class="line">(8 rows)</span><br><span class="line"></span><br><span class="line">$ psql -d tpch_sf1  -c <span class="string">"select count(*) from lineitem"</span>;</span><br><span class="line">  count  </span><br><span class="line">---------</span><br><span class="line"> 6001215</span><br><span class="line">(1 row)r | table | jigao | 1800 kB    | </span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><ul><li>如果能看到上面的输出，那么这些表格已经被载入了。</li></ul><h2 id="替代方式-Bash-Script"><a href="#替代方式-Bash-Script" class="headerlink" title="替代方式: Bash Script"></a>替代方式: Bash Script</h2><p>我将<a href="#导入命令">上面的导入数据命令</a>写成了一个bash script脚本: <a href="https://cakebytheoceanluo.github.io/download/dbms/psql_tpch_import.sh">下载</a></p><p><strong>注意我更改了带psql那行，这个脚本需要一个变量，即数据库的名字，在本文例子中是<code>tpch_sf1</code>，你当然可以在新建数据库的时候自行选择。</strong></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x psql_tpch_import.sh </span><br><span class="line">$ ./psql_tpch_import.sh tpch_sf1</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><p>引用：</p><p><a name="fn1">1</a>: <span class="exturl" data-url="aHR0cDovL3d3dy50cGMub3JnL3RwY2gv" title="http://www.tpc.org/tpch/">http://www.tpc.org/tpch/<i class="fa fa-external-link"></i></span></p><p><a name="fn2">2</a>: TPCH on PostgreSQL - Xi Liang: <span class="exturl" data-url="aHR0cDovL3h0ci5haS9ibG9nLzIwMTktMDMtMTItdHBjaC8=" title="http://xtr.ai/blog/2019-03-12-tpch/">http://xtr.ai/blog/2019-03-12-tpch/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cnVtL3RwY2gtZGJnZW4=" title="https://github.com/electrum/tpch-dbgen">https://github.com/electrum/tpch-dbgen<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文关注如何将TPC-H数据集导入至PostgreSQL, 同时简单提一下如何生成TPC-H数据。&lt;/p&gt;
&lt;h1 id=&quot;TPC-H介绍&quot;&gt;&lt;a href=&quot;#TPC-H介绍&quot; class=&quot;headerlink&quot; title=&quot;TPC-H介绍&quot;&gt;&lt;/a&gt;TPC-H介绍&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;TPC-H is a Decision Support Benchmark. The TPC Benchmark™H (TPC-H) is a decision support benchmark. It consists of a suite of business oriented ad-hoc queries and concurrent data modifications. &lt;sup&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TPC-H是TPC协会提供的一个benchmark，用来模拟一个现实中的商业应用，且自带22个SQL Query。这22个Query均关注于OLAP分析型查询。&lt;br&gt;这些Query可以在如下的地方找到:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tLzJuZFF1YWRyYW50L3BnLXRwY2gvdHJlZS9tYXN0ZXIvcXVlcmllcw==&quot; title=&quot;https://github.com/2ndQuadrant/pg-tpch/tree/master/queries&quot;&gt;https://github.com/2ndQuadrant/pg-tpch/tree/master/queries&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbCM=&quot; title=&quot;https://hyper-db.de/interface.html#&quot;&gt;https://hyper-db.de/interface.html#&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt; 点击右下角Insert TPC-H Query&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly91bWJyYS5kYi5pbi50dW0uZGUvaW50ZXJmYWNlLw==&quot; title=&quot;https://umbra.db.in.tum.de/interface/&quot;&gt;https://umbra.db.in.tum.de/interface/&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;　点击Load Query&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有一篇论文具体讲每一个TPC-H的Query，实际上和本文无关，我链接在这里：　&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9ob21lcGFnZXMuY3dpLm5sL35ib25jei9zbmItY2hhbGxlbmdlL2Nob2tlcG9pbnRzLXRwY3RjLnBkZg==&quot; title=&quot;https://homepages.cwi.nl/~boncz/snb-challenge/chokepoints-tpctc.pdf&quot;&gt;TPC-H Analyzed: Hidden Messages and Lessons Learned from an Influential Benchmark&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/categories/PostgreSQL/"/>
    
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
      <category term="TPC-H" scheme="https://cakebytheoceanluo.github.io/tags/TPC-H/"/>
    
  </entry>
  
  <entry>
    <title>[DBMS]PostgreSQL安装与配置</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</id>
    <published>2020-03-15T17:44:02.000Z</published>
    <updated>2020-03-15T19:32:38.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PostgreSQL介绍"><a href="#PostgreSQL介绍" class="headerlink" title="PostgreSQL介绍"></a>PostgreSQL介绍</h1><p>PostgreSQL是一个开源的对象-关系数据库数据库管理系统。它最初开始于在加利福尼亚大学伯克利分校(UCB)的Ingres计划。这个计划的领导者Michael Stonebraker在1982年离开加利福尼亚大学伯克利分校去推进Ingres的商业化，但最后还是返回了学术界。在1985年返回伯克利之后，Michael Stonebraker开始了post-Ingres计划，致力于解决在1980年代早期所出现一些数据库系统存在的问题。Postgres和Ingres的代码库开始(并保持)完全分离。<sup><a href="#myfootnote1">1</a></sup></p><p>Michael Stonebraker于2014年获得图灵奖。另外PostgreSQL也常称为psql。</p><p>本文主要记录PostgreSQL的安装和基本配置。</p><a id="more"></a><h1 id="PostgreSQL-安装"><a href="#PostgreSQL-安装" class="headerlink" title="PostgreSQL 安装"></a>PostgreSQL 安装</h1><p>本文基于deb Linux系统。</p><p>安装PostgreSQL:<br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install postgresql postgresql-contrib</span><br></pre></td></tr></tbody></table></figure><p></p><p>上面这条指令包括了PostgreSQL的客户端和服务器端，另外还有一些其他插件。　</p><p>例如<code>apt-get install postgresql-11</code>会安装上如下软件　<sup><a href="#fn">2</a></sup>：</p><div class="table-container"><table><thead><tr><th>software</th><th>functionality</th></tr></thead><tbody><tr><td>postgresql-client-11</td><td>client libraries and client binaries</td></tr><tr><td>postgresql-11</td><td>core database server</td></tr><tr><td>postgresql-contrib-9.x</td><td>additional supplied modules (part of the postgresql-xx package in version 10 and later)</td></tr><tr><td>libpq-dev</td><td>libraries and headers for C language frontend development</td></tr><tr><td>postgresql-server-dev-11</td><td>libraries and headers for C language backend development</td></tr><tr><td>pgadmin4</td><td>pgAdmin 4 graphical administration utility</td></tr></tbody></table></div><p>其他的系统可以在官方下载网页中找到：　<span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG93bmxvYWQv" title="https://www.postgresql.org/download/">https://www.postgresql.org/download/<i class="fa fa-external-link"></i></span></p><p><br></p><p>另外PostgreSQL和MySQL一样属于”<strong>正式的数据库</strong>“: 客户端和服务器通过端口通信。不像SQLite这种嵌入式的数据库，不区分客户端和服务器端。</p><p>当我们运行psql的时候(我们后面会讲如何运行):</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">psql (12.2 (Ubuntu 12.2-2.pgdg18.04+1), server 10.12 (Ubuntu 10.12-2.pgdg18.04+1))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br></pre></td></tr></tbody></table></figure><ul><li><code>12.2</code>: 是客户端的版本</li><li><code>10.12</code>: 是服务器端的版本</li></ul><p>同时查看版本，也可以在PostgreSQL通过如下命令：<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ psql -c <span class="string">'select version();'</span></span><br><span class="line">                                                               version                                                               </span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> PostgreSQL 10.12 (Ubuntu 10.12-2.pgdg18.04+1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0, 64-bit</span><br><span class="line">(1 row)</span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="管理PostgreSQL"><a href="#管理PostgreSQL" class="headerlink" title="管理PostgreSQL"></a>管理PostgreSQL</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl (start|stop|restart|reload|status) postgresql</span><br></pre></td></tr></tbody></table></figure><p>比如：</p><ul><li>启动PostgreSQL: <code>sudo systemctl start postgresql</code></li><li>停止PostgreSQL: <code>sudo systemctl stop postgresql</code></li><li>重启PostgreSQL: <code>sudo systemctl restart postgresql</code></li><li>查看PostgreSQL状态: <code>systemctl status postgresql</code></li><li>reload (我从来没用过这个): : <code>sudo systemctl reload postgresql</code></li></ul><h2 id="开机自动启动"><a href="#开机自动启动" class="headerlink" title="开机自动启动"></a>开机自动启动</h2><p>通过如下命令可以使postgreSQL自动随着系统启动：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> postgresql</span><br></pre></td></tr></tbody></table></figure><h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef | grep postgres</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><h1 id="用户user和角色role"><a href="#用户user和角色role" class="headerlink" title="用户user和角色role"></a>用户user和角色role</h1><h2 id="postgres本地访问"><a href="#postgres本地访问" class="headerlink" title="postgres本地访问"></a><code>postgres</code>本地访问</h2><p>在UNIX平台中安装PostgreSQL之后，PostgreSQL会在UNIX系统中创建一个名为<code>postgres</code>的<strong>linux登录用户</strong>(属于最高权限 Superuser)。</p><p>PostgreSQL的默认用户名和数据库也是<code>postgres</code>， 不过没有默认密码。我们通过如下几个命令去进行该用户的本地访问:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo su postgres</span><br><span class="line">$ psql postgres</span><br></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -i -u postgres psql</span><br></pre></td></tr></tbody></table></figure><h3 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h3><p>最开始的时候<code>postgres</code>用户不支持远程登录(报错：psql: fe_sendauth: no password supplied)，必须设置密码后才行(普通用户也适应这个规则)。<sup><a href="#fn2">3</a></sup></p><p>如果需要改密码的话，我们可以用<code>passwd postgres</code>进行进行密码修改。</p><p>在当前用户下，我们可以监听psql的默认端口号<code>5432</code>，使用<code>lsof</code>或者<code>netstat</code>:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">postgres:/$ lsof -i:5432</span><br><span class="line">COMMAND   PID     USER   FD   TYPE    DEVICE SIZE/OFF NODE NAME</span><br><span class="line">postgres 7877 postgres    5u  IPv4 700026722      0t0  TCP localhost:postgresql (LISTEN)</span><br><span class="line">postgres:/$ netstat -an | grep 5432</span><br><span class="line">tcp        0      0 127.0.0.1:5432          0.0.0.0:*               LISTEN     </span><br><span class="line">unix  2      [ ACC ]     STREAM     LISTENING     700026723 /var/run/postgresql/.s.PGSQL.5432</span><br><span class="line">unix  3      [ ]         STREAM     CONNECTED     3941554326 </span><br><span class="line">unix  3      [ ]         STREAM     CONNECTED     3941554325</span><br></pre></td></tr></tbody></table></figure><h2 id="创建用户-createuser"><a href="#创建用户-createuser" class="headerlink" title="创建用户 - createuser"></a>创建用户 - createuser</h2><p>PostgreSQL 每创建一个新用户，都会生成一个<strong>新的对应的linux同名用户</strong>。默认的用户是<code>postgres</code>，登录此用户的shell，去执行psql无需密码 (本质上是因为 pg_hba.conf 的配置) 。PostgreSQL这种通过将Linux用户与PostgreSQL帐户相关联来处理身份验证的方式，被称为“对等”身份验证。</p><p>创建用户往往是我们使用PostgreSQL的第一步。因为我们如果新建了一个用户(user)， 我们以后就可以通过<code>psql</code>登陆我们的PostgeSQL。个人建议这个用户名可以设置成和我们Linux系统用户名一致。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u postgres createuser --interactive -P &lt;我们的用户名 不带尖角括号&gt;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p><code>$ man createuser</code>:</p><blockquote><pre><code>   createuser - define a new PostgreSQL user account </code></pre></blockquote><h2 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h2><p><code>select current_user;</code>:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jigao=# select current_user;</span><br><span class="line"> current_user </span><br><span class="line">--------------</span><br><span class="line"> jigao</span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure><h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><p><code>\c &lt;user_name&gt;</code> 可以让我们切换不同的用户名</p><p><br></p><p>远程登陆的部分见: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGpub3R4ai9wLzExMTk4MjU1Lmh0bWwjMzU5NDY3MzQwOA==" title="https://www.cnblogs.com/xjnotxj/p/11198255.html#3594673408">https://www.cnblogs.com/xjnotxj/p/11198255.html#3594673408<i class="fa fa-external-link"></i></span></p><p><br></p><h1 id="新建一个用户数据库"><a href="#新建一个用户数据库" class="headerlink" title="新建一个用户数据库"></a>新建一个用户数据库</h1><p>在bash中输入(不是在psql中)：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ createdb &lt;我们之前创建的用户名 不带尖角括号&gt;</span><br></pre></td></tr></tbody></table></figure><p>这个数据库从属于我们当前的用户，新建完成之后，我们(当前用户)可以用<code>psql</code>命令进入该数据库, 这就是我们刚刚提到的<em>对等身份验证</em>。比如我是这么操作的：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ createdb jigao</span><br><span class="line">$ psql</span><br><span class="line">psql (12.2 (Ubuntu 12.2-2.pgdg18.04+1), server 10.12 (Ubuntu 10.12-2.pgdg18.04+1))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">jigao=<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure><p><br></p><p><code>$ man createdb</code>:</p><blockquote><pre><code>   createdb - create a new PostgreSQL database</code></pre></blockquote><h1 id="新建一个数据库-create-database"><a href="#新建一个数据库-create-database" class="headerlink" title="新建一个数据库 - create database"></a>新建一个数据库 - create database</h1><p>有了用户名之后，我们需要新建一个数据库，这个数据库有一些表格。我们才可以运行SQL语句。有两种方式，一种我们在<a href="#新建一个用户数据库">上一块内容: 新建一个用户数据库</a>已经见过，不过我们需要在<code>postgres</code>用户下新建：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u postgres createdb testdb</span><br></pre></td></tr></tbody></table></figure><p>或用下面指令：</p><p>对于PostgreSQL每一个数据库database是带有权限的，我们还需要把这个新建的数据库<code>GRANT</code>(授权)给我们上一步的用户名。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u postgres psql</span><br><span class="line">postgres=# CREATE DATABASE testdb;</span><br><span class="line">postgres=# GRANT ALL ON DATABASE testdb to &lt;我们之前创建的用户名 不带尖角括号&gt;;</span><br></pre></td></tr></tbody></table></figure><p><code>sudo -u postgres psql</code>可以让我们进入<code>postgres</code>这个数据库，它是default administrative connection database。</p><p>如果成功， 我们可以从这个<code>psql</code>界面用：<code>\q</code>退出到shell。</p><h2 id="新建表格-—-create-table"><a href="#新建表格-—-create-table" class="headerlink" title="新建表格 — create table"></a>新建表格 — create table</h2><p>这时候我们可以向刚刚新建的数据库里面加入我们的表格了。PostgreSQL是一种关系数据库(relational Database system)，我们需要提供<code>create table...</code>语句去新建表格，定义每一个表格字段(field)的数据类型(data type)以及其他信息(如能不能是<code>null value</code>)。</p><p>这里我们可以采用一些别人提供好的表格。</p><p>具体导入数据集可以看这一篇文章： <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS]PostgreSQL导入数据集</a></p><h2 id="查看当前数据库"><a href="#查看当前数据库" class="headerlink" title="查看当前数据库"></a>查看当前数据库</h2><p><code>select current_database();</code>:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">testdb=# select current_database();</span><br><span class="line"> current_database </span><br><span class="line">------------------</span><br><span class="line"> testdb</span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure><h2 id="查看所有数据库"><a href="#查看所有数据库" class="headerlink" title="查看所有数据库"></a>查看所有数据库</h2><p>在任何一个psql数据库中, 我们可以通过<code>\l</code>或<code>\l+</code>命令来，查看psql下总共有哪些数据库。我可以从我的用户数据库<code>jigao</code>查看：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">jigao=# \l</span><br><span class="line">                                     List of databases</span><br><span class="line">     Name     |    Owner    | Encoding |   Collate   |    Ctype    |   Access privileges   </span><br><span class="line">--------------+-------------+----------+-------------+-------------+-----------------------</span><br><span class="line"> dbname       | owning_user | UTF8     | en_US.UTF-8 | en_US.UTF-8 | </span><br><span class="line"> jigao        | jigao       | UTF8     | en_US.UTF-8 | en_US.UTF-8 | </span><br><span class="line"> postgres     | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | </span><br><span class="line"> template0    | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +</span><br><span class="line">              |             |          |             |             | postgres=CTc/postgres</span><br><span class="line"> template1    | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +</span><br><span class="line">              |             |          |             |             | postgres=CTc/postgres</span><br><span class="line"> testdb       | testuser    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | </span><br><span class="line">(6 rows)</span><br><span class="line"></span><br><span class="line">jigao=# \l+</span><br><span class="line">                                                                       List of databases</span><br><span class="line">     Name     |    Owner    | Encoding |   Collate   |    Ctype    |   Access privileges   |  Size   | Tablespace |                Description                 </span><br><span class="line">--------------+-------------+----------+-------------+-------------+-----------------------+---------+------------+--------------------------------------------</span><br><span class="line"> dbname       | owning_user | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 7497 kB | pg_default | </span><br><span class="line"> jigao        | jigao       | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 7631 kB | pg_default | </span><br><span class="line"> postgres     | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 7631 kB | pg_default | default administrative connection database</span><br><span class="line"> template0    | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +| 7497 kB | pg_default | unmodifiable empty database</span><br><span class="line">              |             |          |             |             | postgres=CTc/postgres |         |            | </span><br><span class="line"> template1    | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +| 7631 kB | pg_default | default template for new databases</span><br><span class="line">              |             |          |             |             | postgres=CTc/postgres |         |            | </span><br><span class="line"> testdb       | testuser    | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 848 MB  | pg_default | </span><br><span class="line">(6 rows)</span><br></pre></td></tr></tbody></table></figure><h2 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h2><p><code>\c &lt;database_name&gt;</code> 可以让我们在不同数据库中切换</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">jigao=# \c jigao</span><br><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">You are now <span class="built_in">connected</span> to database <span class="string">"jigao"</span> as user <span class="string">"jigao"</span>.</span><br><span class="line">jigao=# \c testdb</span><br><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">You are now <span class="built_in">connected</span> to database <span class="string">"testdb"</span> as user <span class="string">"jigao"</span>.</span><br><span class="line">testdb-# \c postgres</span><br><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">You are now <span class="built_in">connected</span> to database <span class="string">"postgres"</span> as user <span class="string">"jigao"</span>.</span><br><span class="line">postgres=#</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="查看SQL函数"><a href="#查看SQL函数" class="headerlink" title="查看SQL函数"></a>查看SQL函数</h1><blockquote><p>  \df[anptw][S+] [PATRN] list [only agg/normal/procedures/trigger/window] functions</p></blockquote><h2 id="查看所有函数"><a href="#查看所有函数" class="headerlink" title="查看所有函数　"></a>查看所有函数　</h2><p>postgreSQL中所有的函数都会被列出(输出会非常多！)：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jigao=# \df *</span><br></pre></td></tr></tbody></table></figure><h2 id="匹配查看函数"><a href="#匹配查看函数" class="headerlink" title="匹配查看函数"></a>匹配查看函数</h2><h3 id="substring例子"><a href="#substring例子" class="headerlink" title="substring例子"></a><code>substring</code>例子</h3><p>比如我们忘记了<code>substring</code>这个函数，只记得<code>sub</code>:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">jigao=# \df sub*</span><br><span class="line">                             List of functions</span><br><span class="line">   Schema   |   Name    | Result data type |   Argument data types   | Type </span><br><span class="line">------------+-----------+------------------+-------------------------+------</span><br><span class="line"> pg_catalog | substr    | bytea            | bytea, integer          | func</span><br><span class="line"> pg_catalog | substr    | bytea            | bytea, integer, integer | func</span><br><span class="line"> pg_catalog | substr    | <span class="built_in">text</span>             | <span class="built_in">text</span>, integer           | func</span><br><span class="line"> pg_catalog | substr    | <span class="built_in">text</span>             | <span class="built_in">text</span>, integer, integer  | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">bit</span>              | <span class="built_in">bit</span>, integer            | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">bit</span>              | <span class="built_in">bit</span>, integer, integer   | func</span><br><span class="line"> pg_catalog | substring | bytea            | bytea, integer          | func</span><br><span class="line"> pg_catalog | substring | bytea            | bytea, integer, integer | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">text</span>             | <span class="built_in">text</span>, integer           | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">text</span>             | <span class="built_in">text</span>, integer, integer  | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">text</span>             | <span class="built_in">text</span>, <span class="built_in">text</span>              | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">text</span>             | <span class="built_in">text</span>, <span class="built_in">text</span>, <span class="built_in">text</span>        | func</span><br><span class="line">(<span class="number">12</span> rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="sum例子"><a href="#sum例子" class="headerlink" title="sum例子"></a><code>sum</code>例子</h3><p>比如我们忘记了<code>sum</code>这个函数，只记得<code>su</code>。另外我们还知道它还是一个聚合函数(aggregation) - agg - <strong>a</strong>:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">jigao=# \dfa su*</span><br><span class="line">                         List of functions</span><br><span class="line">   Schema   | Name | Result data type | Argument data types | Type </span><br><span class="line">------------+------+------------------+---------------------+------</span><br><span class="line"> pg_catalog | sum  | numeric          | bigint              | agg</span><br><span class="line"> pg_catalog | sum  | <span class="keyword">double</span> precision | <span class="keyword">double</span> precision    | agg</span><br><span class="line"> pg_catalog | sum  | bigint           | integer             | agg</span><br><span class="line"> pg_catalog | sum  | interval         | interval            | agg</span><br><span class="line"> pg_catalog | sum  | money            | money               | agg</span><br><span class="line"> pg_catalog | sum  | numeric          | numeric             | agg</span><br><span class="line"> pg_catalog | sum  | real             | real                | agg</span><br><span class="line"> pg_catalog | sum  | bigint           | smallint            | agg</span><br><span class="line">(<span class="number">8</span> rows)</span><br></pre></td></tr></tbody></table></figure><p>引用:</p><p><a name="myfootnote1">1</a>:　PostgreSQL 维基百科. <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvUG9zdGdyZVNRTA==" title="https://zh.wikipedia.org/wiki/PostgreSQL">https://zh.wikipedia.org/wiki/PostgreSQL<i class="fa fa-external-link"></i></span></p><p><a name="fn">2</a>: Linux downloads (Ubuntu): <span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG93bmxvYWQvbGludXgvdWJ1bnR1Lw==" title="https://www.postgresql.org/download/linux/ubuntu/">https://www.postgresql.org/download/linux/ubuntu/<i class="fa fa-external-link"></i></span></p><p><a name="fn2">3</a>: PostgreSQL 安装 &amp; 用户配置 - 小蒋不素小蒋: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGpub3R4ai9wLzExMTk4MjU1Lmh0bWw=" title="https://www.cnblogs.com/xjnotxj/p/11198255.html">https://www.cnblogs.com/xjnotxj/p/11198255.html<i class="fa fa-external-link"></i></span></p><p><br></p><p>推荐的阅读:</p><p>PostgreSQL 安装最新的版本 - DaozyIT: <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbmN1cG9ma2Fpd2F0ZXIvYXJ0aWNsZS9kZXRhaWxzLzgxNDgyMzQw" title="https://blog.csdn.net/tencupofkaiwater/article/details/81482340">https://blog.csdn.net/tencupofkaiwater/article/details/81482340<i class="fa fa-external-link"></i></span></p><p>How To Install and Use PostgreSQL on Ubuntu 18.04 -  Justin Ellingwood and Mark Drake: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlnaXRhbG9jZWFuLmNvbS9jb21tdW5pdHkvdHV0b3JpYWxzL2hvdy10by1pbnN0YWxsLWFuZC11c2UtcG9zdGdyZXNxbC1vbi11YnVudHUtMTgtMDQ=" title="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-18-04">https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-18-04<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PostgreSQL介绍&quot;&gt;&lt;a href=&quot;#PostgreSQL介绍&quot; class=&quot;headerlink&quot; title=&quot;PostgreSQL介绍&quot;&gt;&lt;/a&gt;PostgreSQL介绍&lt;/h1&gt;&lt;p&gt;PostgreSQL是一个开源的对象-关系数据库数据库管理系统。它最初开始于在加利福尼亚大学伯克利分校(UCB)的Ingres计划。这个计划的领导者Michael Stonebraker在1982年离开加利福尼亚大学伯克利分校去推进Ingres的商业化，但最后还是返回了学术界。在1985年返回伯克利之后，Michael Stonebraker开始了post-Ingres计划，致力于解决在1980年代早期所出现一些数据库系统存在的问题。Postgres和Ingres的代码库开始(并保持)完全分离。&lt;sup&gt;&lt;a href=&quot;#myfootnote1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Michael Stonebraker于2014年获得图灵奖。另外PostgreSQL也常称为psql。&lt;/p&gt;
&lt;p&gt;本文主要记录PostgreSQL的安装和基本配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/categories/PostgreSQL/"/>
    
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 1179.reformat-department-table</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-1179-reformat-department-table/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-1179-reformat-department-table/</id>
    <published>2020-03-13T18:53:22.000Z</published>
    <updated>2020-03-13T18:54:37.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>1179.Reformat Department Table</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Department (<span class="keyword">id</span> <span class="built_in">int</span>, revenue <span class="built_in">int</span>, <span class="keyword">month</span> <span class="built_in">varchar</span>(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Department</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'8000'</span>, <span class="string">'Jan'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'9000'</span>, <span class="string">'Jan'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'10000'</span>, <span class="string">'Feb'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'7000'</span>, <span class="string">'Feb'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'6000'</span>, <span class="string">'Mar'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--PostgreSQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Department (<span class="keyword">id</span> <span class="built_in">int</span>, revenue <span class="built_in">int</span>, <span class="keyword">month</span> <span class="built_in">varchar</span>(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Department</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'8000'</span>, <span class="string">'Jan'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'9000'</span>, <span class="string">'Jan'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'10000'</span>, <span class="string">'Feb'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'7000'</span>, <span class="string">'Feb'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'6000'</span>, <span class="string">'Mar'</span>)</span><br></pre></td></tr></tbody></table></figure><p>Table: <code>Department</code><br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------------+---------+</span></span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+<span class="comment">---------------+---------+</span></span><br><span class="line">| id            | int     |</span><br><span class="line">| revenue       | int     |</span><br><span class="line">| month         | varchar |</span><br><span class="line">+<span class="comment">---------------+---------+</span></span><br><span class="line">(id, month) is the primary key of this table.</span><br><span class="line">The table has information about the revenue of each department per month.</span><br><span class="line">The month has <span class="keyword">values</span> <span class="keyword">in</span> [<span class="string">"Jan"</span>,<span class="string">"Feb"</span>,<span class="string">"Mar"</span>,<span class="string">"Apr"</span>,<span class="string">"May"</span>,<span class="string">"Jun"</span>,<span class="string">"Jul"</span>,<span class="string">"Aug"</span>,<span class="string">"Sep"</span>,<span class="string">"Oct"</span>,<span class="string">"Nov"</span>,<span class="string">"Dec"</span>].</span><br></pre></td></tr></tbody></table></figure><p></p><p>Write an SQL query to reformat the table such that there is a department id column and a revenue column <strong>for each month</strong>.</p><p>The query result format is in the following example:<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Department table:</span><br><span class="line">+<span class="comment">------+---------+-------+</span></span><br><span class="line">| id   | revenue | month |</span><br><span class="line">+<span class="comment">------+---------+-------+</span></span><br><span class="line">| 1    | 8000    | Jan   |</span><br><span class="line">| 2    | 9000    | Jan   |</span><br><span class="line">| 3    | 10000   | Feb   |</span><br><span class="line">| 1    | 7000    | Feb   |</span><br><span class="line">| 1    | 6000    | Mar   |</span><br><span class="line">+<span class="comment">------+---------+-------+</span></span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+<span class="comment">------+-------------+-------------+-------------+-----+-------------+</span></span><br><span class="line">| id   | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |</span><br><span class="line">+<span class="comment">------+-------------+-------------+-------------+-----+-------------+</span></span><br><span class="line">| 1    | 8000        | 7000        | 6000        | ... | null        |</span><br><span class="line">| 2    | 9000        | null        | null        | ... | null        |</span><br><span class="line">| 3    | null        | 10000       | null        | ... | null        |</span><br><span class="line">+<span class="comment">------+-------------+-------------+-------------+-----+-------------+</span></span><br><span class="line"></span><br><span class="line">Note that the result table has 13 columns (1 for the department id + 12 for the months).</span><br></pre></td></tr></tbody></table></figure><p></p><a id="more"></a><hr><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'jan'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Jan_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'feb'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Feb_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'mar'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Mar_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'apr'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Apr_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'may'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> May_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'jun'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Jun_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'jul'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Jul_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'aug'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Aug_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'sep'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Sep_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'oct'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Oct_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'nov'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Nov_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'dec'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Dec_Revenue</span><br><span class="line"><span class="keyword">from</span> department</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">asc</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Jan'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Jan_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Feb'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Feb_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Mar'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Mar_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Apr'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Apr_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'May'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> May_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Jun'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Jun_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Jul'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Jul_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Aug'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Aug_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Sep'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Sep_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Oct'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Oct_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Nov'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Nov_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Dec'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Dec_Revenue</span><br><span class="line"><span class="keyword">FROM</span> Department</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span></span><br></pre></td></tr></tbody></table></figure><h1 id="解法２：-Pivot-table"><a href="#解法２：-Pivot-table" class="headerlink" title="解法２：　Pivot table"></a>解法２：　Pivot table</h1><p>这个解法只能在SQL Server中使用，我也头一回看见。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    Jan <span class="keyword">AS</span> Jan_Revenue,</span><br><span class="line">    Feb <span class="keyword">AS</span> Feb_Revenue, </span><br><span class="line">    Mar <span class="keyword">AS</span> Mar_Revenue, </span><br><span class="line">    Apr <span class="keyword">AS</span> Apr_Revenue,</span><br><span class="line">    May <span class="keyword">AS</span> May_Revenue,</span><br><span class="line">    Jun <span class="keyword">AS</span> Jun_Revenue,</span><br><span class="line">    Jul <span class="keyword">AS</span> Jul_Revenue,</span><br><span class="line">    Aug <span class="keyword">AS</span> Aug_Revenue,</span><br><span class="line">    Sep <span class="keyword">AS</span> Sep_Revenue,</span><br><span class="line">    <span class="keyword">Oct</span> <span class="keyword">AS</span> Oct_Revenue,</span><br><span class="line">    Nov <span class="keyword">AS</span> Nov_Revenue,</span><br><span class="line">    <span class="built_in">Dec</span> <span class="keyword">AS</span> Dec_Revenue</span><br><span class="line"><span class="keyword">FROM</span> Department</span><br><span class="line"><span class="keyword">PIVOT</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">MAX</span>(revenue)</span><br><span class="line">    <span class="keyword">FOR</span> <span class="keyword">month</span> <span class="keyword">IN</span> (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, <span class="keyword">Oct</span>, Nov, <span class="built_in">Dec</span>)        </span><br><span class="line">) <span class="keyword">AS</span> MonthsRevenue</span><br></pre></td></tr></tbody></table></figure><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVmb3JtYXQtZGVwYXJ0bWVudC10YWJsZS8=" title="https://leetcode.com/problems/reformat-department-table/">https://leetcode.com/problems/reformat-department-table/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVmb3JtYXQtZGVwYXJ0bWVudC10YWJsZS9kaXNjdXNzLzQyMjM4My9teXNxbC1lYXN5LXNvbHV0aW9u" title="https://leetcode.com/problems/reformat-department-table/discuss/422383/mysql-easy-solution">https://leetcode.com/problems/reformat-department-table/discuss/422383/mysql-easy-solution<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVmb3JtYXQtZGVwYXJ0bWVudC10YWJsZS9kaXNjdXNzLzM3NjI0MS9NeVNRTC1Tb2x1dGlvbi13aXRoLTM4MS1tcy1mYXN0ZXItdGhhbi0xMDAuMDA=" title="https://leetcode.com/problems/reformat-department-table/discuss/376241/MySQL-Solution-with-381-ms-faster-than-100.00">https://leetcode.com/problems/reformat-department-table/discuss/376241/MySQL-Solution-with-381-ms-faster-than-100.00<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjEvdGFibGVmdW5jLmh0bWw=" title="https://www.postgresql.org/docs/9.1/tablefunc.html">https://www.postgresql.org/docs/9.1/tablefunc.html<i class="fa fa-external-link"></i></span> : pivot table in PostgreSQL</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc3Fsc2VydmVydHV0b3JpYWwubmV0L3NxbC1zZXJ2ZXItYmFzaWNzL3NxbC1zZXJ2ZXItcGl2b3Qv" title="https://www.sqlservertutorial.net/sql-server-basics/sql-server-pivot/">https://www.sqlservertutorial.net/sql-server-basics/sql-server-pivot/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDgzODYyNjMvcGl2b3QtdGFibGUtaW4tc3FsLWNvbHVtbi1yZXN1bHRzLXRvLXJvd3M=" title="https://stackoverflow.com/questions/48386263/pivot-table-in-sql-column-results-to-rows">https://stackoverflow.com/questions/48386263/pivot-table-in-sql-column-results-to-rows<i class="fa fa-external-link"></i></span><br><!-- 该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 --></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;1179.Reformat Department Table&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, revenue &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Department&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Jan&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Jan&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Feb&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;7000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Feb&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Mar&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, revenue &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Department&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Jan&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Jan&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Feb&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;7000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Feb&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Mar&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Table: &lt;code&gt;Department&lt;/code&gt;&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Column Name   | Type    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| id            | int     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| revenue       | int     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| month         | varchar |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(id, month) is the primary key of this table.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The table has information about the revenue of each department per month.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The month has &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;Jan&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Feb&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Mar&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Apr&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;May&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Jun&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Jul&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Aug&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Sep&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Oct&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Nov&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Dec&quot;&lt;/span&gt;].&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Write an SQL query to reformat the table such that there is a department id column and a revenue column &lt;strong&gt;for each month&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The query result format is in the following example:&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Department table:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+---------+-------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| id   | revenue | month |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+---------+-------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1    | 8000    | Jan   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2    | 9000    | Jan   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 3    | 10000   | Feb   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1    | 7000    | Feb   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1    | 6000    | Mar   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+---------+-------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Result table:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+-------------+-------------+-------------+-----+-------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| id   | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+-------------+-------------+-------------+-----+-------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1    | 8000        | 7000        | 6000        | ... | null        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2    | 9000        | null        | null        | ... | null        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 3    | null        | 10000       | null        | ... | null        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+-------------+-------------+-------------+-----+-------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note that the result table has 13 columns (1 for the department id + 12 for the months).&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 627.swap.salary</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-627-swap-salary/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-627-swap-salary/</id>
    <published>2020-03-13T18:49:11.000Z</published>
    <updated>2020-03-13T18:54:04.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>627.Swap Salary</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--MySQL</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> salary(<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>), sex <span class="built_in">char</span>(<span class="number">1</span>), salary <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> salary</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'A'</span>, <span class="string">'m'</span>, <span class="string">'2500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'B'</span>, <span class="string">'f'</span>, <span class="string">'1500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'C'</span>, <span class="string">'m'</span>, <span class="string">'5500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'D'</span>, <span class="string">'f'</span>, <span class="string">'500'</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> salary;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> salary(<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>), sex <span class="built_in">char</span>(<span class="number">1</span>), salary <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> salary</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'A'</span>, <span class="string">'m'</span>, <span class="string">'2500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'B'</span>, <span class="string">'f'</span>, <span class="string">'1500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'C'</span>, <span class="string">'m'</span>, <span class="string">'5500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'D'</span>, <span class="string">'f'</span>, <span class="string">'500'</span>);</span><br></pre></td></tr></tbody></table></figure><p>Given a table <code>salary</code>, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update statement and no intermediate temp table.</p><p>Note that you must write a single update statement, DO NOT write any select statement for this problem.</p><p>Example:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| id | name | sex | salary |</span><br><span class="line">|<span class="comment">----|------|-----|--------|</span></span><br><span class="line">| 1  | A    | m   | 2500   |</span><br><span class="line">| 2  | B    | f   | 1500   |</span><br><span class="line">| 3  | C    | m   | 5500   |</span><br><span class="line">| 4  | D    | f   | 500    |</span><br></pre></td></tr></tbody></table></figure><p>After running your update statement, the above salary table should have the following rows:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| id | name | sex | salary |</span><br><span class="line">|<span class="comment">----|------|-----|--------|</span></span><br><span class="line">| 1  | A    | f   | 2500   |</span><br><span class="line">| 2  | B    | m   | 1500   |</span><br><span class="line">| 3  | C    | f   | 5500   |</span><br><span class="line">| 4  | D    | m   | 500    |</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><hr><p><br></p><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> salary s</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">id</span> = s.id, <span class="keyword">name</span> = s.name, salary = s.salary, sex = (<span class="keyword">case</span> <span class="keyword">when</span> s.sex = <span class="string">'f'</span> <span class="keyword">then</span> <span class="string">'m'</span> <span class="keyword">else</span> <span class="string">'f'</span> <span class="keyword">end</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> salary s</span><br><span class="line"><span class="keyword">set</span> sex = (<span class="keyword">case</span> <span class="keyword">when</span> s.sex = <span class="string">'f'</span> <span class="keyword">then</span> <span class="string">'m'</span> <span class="keyword">else</span> <span class="string">'f'</span> <span class="keyword">end</span>);</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><p><strong>不适用于PostgreSQL</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> salary <span class="keyword">SET</span> sex = <span class="keyword">IF</span>(sex = <span class="string">'m'</span>, <span class="string">'f'</span>, <span class="string">'m'</span>)</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法３"><a href="#解法３" class="headerlink" title="解法３"></a>解法３</h1><p><strong>适用于PostgreSQL</strong>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex = <span class="keyword">CHR</span>(<span class="keyword">ASCII</span>(<span class="string">'f'</span>) + <span class="keyword">ASCII</span>(<span class="string">'m'</span>) - <span class="keyword">ASCII</span>(sex));</span><br></pre></td></tr></tbody></table></figure><ul><li><code>ascii</code>: char -&gt; ascii</li><li><code>chr</code>: ascii -&gt; char</li></ul><p><strong>不适用于PostgreSQL</strong>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex = <span class="built_in">CHAR</span>(<span class="keyword">ASCII</span>(<span class="string">'f'</span>) ^ <span class="keyword">ASCII</span>(<span class="string">'m'</span>) ^ <span class="keyword">ASCII</span>(sex));</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex= <span class="built_in">CHAR</span>(<span class="keyword">ASCII</span>(<span class="string">'f'</span>) + <span class="keyword">ASCII</span>(<span class="string">'m'</span>) - <span class="keyword">ASCII</span>(sex));</span><br></pre></td></tr></tbody></table></figure><p>其实在很多解法中，有很多看起来很fancy的SQL解法，其实我觉得只是看起比较厉害罢了。<br>但是这个<strong>解法3</strong>说不定真的可以带来更短的运行时间，因为它看起来branch-free，回避了<code>case</code>或者<code>if</code>。</p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3dhcC1zYWxhcnkv" title="https://leetcode.com/problems/swap-salary/">https://leetcode.com/problems/swap-salary/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3dhcC1zYWxhcnkvZGlzY3Vzcy8xMDQ3MTMvQWNjZXB0LXNvbHV0aW9uLXdpdGgteG9y" title="https://leetcode.com/problems/swap-salary/discuss/104713/Accept-solution-with-xor">https://leetcode.com/problems/swap-salary/discuss/104713/Accept-solution-with-xor<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjEvZnVuY3Rpb25zLWNvbmRpdGlvbmFsLmh0bWw=" title="https://www.postgresql.org/docs/9.1/functions-conditional.html">https://www.postgresql.org/docs/9.1/functions-conditional.html<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTEyOTkwMzcvcG9zdGdyZXNxbC1pZi1zdGF0ZW1lbnQ=" title="https://stackoverflow.com/questions/11299037/postgresql-if-statement">https://stackoverflow.com/questions/11299037/postgresql-if-statement<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;627.Swap Salary&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; salary(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;), sex &lt;span class=&quot;built_in&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), salary &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; salary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; salary (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, sex, salary) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;m&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; salary (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, sex, salary) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; salary (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, sex, salary) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;m&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;5500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; salary (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, sex, salary) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; salary;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; salary(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;), sex &lt;span class=&quot;built_in&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), salary &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; salary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; salary (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, sex, salary) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;m&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; salary (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, sex, salary) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; salary (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, sex, salary) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;m&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;5500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; salary (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, sex, salary) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Given a table &lt;code&gt;salary&lt;/code&gt;, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update statement and no intermediate temp table.&lt;/p&gt;
&lt;p&gt;Note that you must write a single update statement, DO NOT write any select statement for this problem.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;| id | name | sex | salary |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|&lt;span class=&quot;comment&quot;&gt;----|------|-----|--------|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1  | A    | m   | 2500   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2  | B    | f   | 1500   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 3  | C    | m   | 5500   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 4  | D    | f   | 500    |&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;After running your update statement, the above salary table should have the following rows:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;| id | name | sex | salary |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|&lt;span class=&quot;comment&quot;&gt;----|------|-----|--------|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1  | A    | f   | 2500   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2  | B    | m   | 1500   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 3  | C    | f   | 5500   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 4  | D    | m   | 500    |&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 626.exchange.seats</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-626-exchange-seats/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-626-exchange-seats/</id>
    <published>2020-03-13T18:46:59.000Z</published>
    <updated>2020-03-13T18:53:47.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>626.Exchange Seats</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> seat(<span class="keyword">id</span> <span class="built_in">int</span>, student <span class="built_in">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> seat</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Abbot'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Doris'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Emerson'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Green'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'Jeames'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> seat;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> seat(<span class="keyword">id</span> <span class="built_in">int</span>, student <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Abbot'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Doris'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Emerson'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Green'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'Jeames'</span>);</span><br></pre></td></tr></tbody></table></figure><p>Mary is a teacher in a middle school and she has a table <code>seat</code> storing students’ names and their corresponding <code>seat</code> ids.</p><p>The column id is continuous increment.</p><p>Mary wants to change seats for the adjacent students.</p><p>Can you write a SQL query to output the result for Mary?</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">|    id   | student |</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">|    1    | Abbot   |</span><br><span class="line">|    2    | Doris   |</span><br><span class="line">|    3    | Emerson |</span><br><span class="line">|    4    | Green   |</span><br><span class="line">|    5    | Jeames  |</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br></pre></td></tr></tbody></table></figure><p>For the sample input, the output is:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">|    id   | student |</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">|    1    | Doris   |</span><br><span class="line">|    2    | Abbot   |</span><br><span class="line">|    3    | Green   |</span><br><span class="line">|    4    | Emerson |</span><br><span class="line">|    5    | Jeames  |</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br></pre></td></tr></tbody></table></figure><p>Note:<br>If the number of students is odd, there is no need to change the last one’s seat.</p><a id="more"></a><hr><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p><strong>适用于PostgreSQL</strong>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,</span><br><span class="line">        (<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">id</span> % <span class="number">2</span> = <span class="number">1</span> <span class="keyword">then</span> <span class="keyword">lead</span>(student, <span class="number">1</span>, student) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>)</span><br><span class="line">                              <span class="keyword">else</span> lag(student, <span class="number">1</span>, <span class="literal">null</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>) <span class="keyword">end</span>) <span class="keyword">as</span> student</span><br><span class="line"><span class="keyword">from</span> seat;</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    (<span class="keyword">CASE</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="keyword">MOD</span>(<span class="keyword">id</span>, <span class="number">2</span>) != <span class="number">0</span> <span class="keyword">AND</span> counts != <span class="keyword">id</span> <span class="keyword">THEN</span> <span class="keyword">id</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="keyword">MOD</span>(<span class="keyword">id</span>, <span class="number">2</span>) != <span class="number">0</span> <span class="keyword">AND</span> counts = <span class="keyword">id</span> <span class="keyword">THEN</span> <span class="keyword">id</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="keyword">id</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="keyword">id</span>,</span><br><span class="line">    student</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    seat,</span><br><span class="line">    (<span class="keyword">SELECT</span></span><br><span class="line">        <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> counts</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        seat) <span class="keyword">AS</span> seat_counts</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span>;</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法３"><a href="#解法３" class="headerlink" title="解法３"></a>解法３</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s1.id, <span class="keyword">COALESCE</span>(s2.student, s1.student) <span class="keyword">AS</span> student</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    seat s1</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    seat s2 <span class="keyword">ON</span> ((s1.id + <span class="number">1</span>) ^ <span class="number">1</span>) - <span class="number">1</span> = s2.id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> s1.id;</span><br></pre></td></tr></tbody></table></figure><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>Bit manipulation expression <code>(id+1)^1-1</code> can calculate the new id after switch.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, (<span class="keyword">id</span>+<span class="number">1</span>)^<span class="number">1</span><span class="number">-1</span>, student <span class="keyword">FROM</span> seat;</span><br><span class="line"></span><br><span class="line">| id | (id+1)^1-1 | student |</span><br><span class="line">|<span class="comment">----|------------|---------|</span></span><br><span class="line">| 1  | 2          | Abbot   |</span><br><span class="line">| 2  | 1          | Doris   |</span><br><span class="line">| 3  | 4          | Emerson |</span><br><span class="line">| 4  | 3          | Green   |</span><br><span class="line">| 5  | 6          | Jeames  |</span><br></pre></td></tr></tbody></table></figure><p>Then, we can make a temp table and join seat with this table like below.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    seat s1</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    seat s2 <span class="keyword">ON</span> (s1.id+<span class="number">1</span>)^<span class="number">1</span><span class="number">-1</span> = s2.id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> s1.id;</span><br><span class="line"></span><br><span class="line">| id | student | id | student |</span><br><span class="line">|<span class="comment">----|---------|----|---------|</span></span><br><span class="line">| 1  | Abbot   | 2  | Doris   |</span><br><span class="line">| 2  | Doris   | 1  | Abbot   |</span><br><span class="line">| 3  | Emerson | 4  | Green   |</span><br><span class="line">| 4  | Green   | 3  | Emerson |</span><br><span class="line">| 5  | Jeames  |    |         |</span><br></pre></td></tr></tbody></table></figure><p>Note:The first two columns are from s1 and the last two are from s2.</p><p>At last, we can output s1.id and s2.student. However, the s2.student is NULL for seat id ‘5’ but s1.student is right. Thus, we we can use function <code>COALESCE()</code> to generate the correct output for the last record.</p><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZXhjaGFuZ2Utc2VhdHMv" title="https://leetcode.com/problems/exchange-seats/">https://leetcode.com/problems/exchange-seats/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZXhjaGFuZ2Utc2VhdHMvZGlzY3Vzcy81MjQ1MzkvNC1saW5lLXNvbHV0aW9uLXVzaW5nLXdpbmRvdy1mdW5jdGlvbi1Ub3AtUnVudGltZQ==" title="https://leetcode.com/problems/exchange-seats/discuss/524539/4-line-solution-using-window-function-Top-Runtime">https://leetcode.com/problems/exchange-seats/discuss/524539/4-line-solution-using-window-function-Top-Runtime<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZXhjaGFuZ2Utc2VhdHMvc29sdXRpb24v" title="https://leetcode.com/problems/exchange-seats/solution/">https://leetcode.com/problems/exchange-seats/solution/<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;626.Exchange Seats&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; seat(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, student &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; seat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Abbot&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Doris&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Emerson&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Green&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Jeames&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; seat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; seat(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, student &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Abbot&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Doris&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Emerson&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Green&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Jeames&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Mary is a teacher in a middle school and she has a table &lt;code&gt;seat&lt;/code&gt; storing students’ names and their corresponding &lt;code&gt;seat&lt;/code&gt; ids.&lt;/p&gt;
&lt;p&gt;The column id is continuous increment.&lt;/p&gt;
&lt;p&gt;Mary wants to change seats for the adjacent students.&lt;/p&gt;
&lt;p&gt;Can you write a SQL query to output the result for Mary?&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    id   | student |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    1    | Abbot   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    2    | Doris   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    3    | Emerson |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    4    | Green   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    5    | Jeames  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For the sample input, the output is:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    id   | student |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    1    | Doris   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    2    | Abbot   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    3    | Green   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    4    | Emerson |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    5    | Jeames  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note:&lt;br&gt;If the number of students is odd, there is no need to change the last one’s seat.&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 620.not.boring.movies</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-620-not-boring-movies/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-620-not-boring-movies/</id>
    <published>2020-03-13T18:44:03.000Z</published>
    <updated>2020-03-13T18:49:54.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>627.Swap Salary</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> cinema (<span class="keyword">id</span> <span class="built_in">int</span>, movie <span class="built_in">varchar</span>(<span class="number">255</span>), description <span class="built_in">varchar</span>(<span class="number">255</span>), rating <span class="built_in">float</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> cinema</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'War'</span>, <span class="string">'great 3D'</span>, <span class="string">'8.9'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Science'</span>, <span class="string">'fiction'</span>, <span class="string">'8.5'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'irish'</span>, <span class="string">'boring'</span>, <span class="string">'6.2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Ice song'</span>, <span class="string">'Fantacy'</span>, <span class="string">'8.6'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'House card'</span>, <span class="string">'Interesting'</span>, <span class="string">'9.1'</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> cinema;</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> cinema (<span class="keyword">id</span> <span class="built_in">int</span>, movie <span class="built_in">varchar</span>(<span class="number">255</span>), description <span class="built_in">varchar</span>(<span class="number">255</span>), rating <span class="built_in">decimal</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'War'</span>, <span class="string">'great 3D'</span>, <span class="string">'8.9'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Science'</span>, <span class="string">'fiction'</span>, <span class="string">'8.5'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'irish'</span>, <span class="string">'boring'</span>, <span class="string">'6.2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Ice song'</span>, <span class="string">'Fantacy'</span>, <span class="string">'8.6'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'House card'</span>, <span class="string">'Interesting'</span>, <span class="string">'9.1'</span>);</span><br></pre></td></tr></tbody></table></figure><p>X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.<br>Please write a SQL query to output movies with an odd numbered ID and a description that is not ‘boring’. Order the result by rating.</p><p>For example, table <code>cinema</code>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br><span class="line">|   id    | movie     |  description |  rating   |</span><br><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br><span class="line">|   1     | War       |   great 3D   |   8.9     |</span><br><span class="line">|   2     | Science   |   fiction    |   8.5     |</span><br><span class="line">|   3     | irish     |   boring     |   6.2     |</span><br><span class="line">|   4     | Ice song  |   Fantacy    |   8.6     |</span><br><span class="line">|   5     | House card|   Interesting|   9.1     |</span><br><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br></pre></td></tr></tbody></table></figure><p>For the example above, the output should be:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br><span class="line">|   id    | movie     |  description |  rating   |</span><br><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br><span class="line">|   5     | House card|   Interesting|   9.1     |</span><br><span class="line">|   1     | War       |   great 3D   |   8.9     |</span><br><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><hr><p><br></p><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> cinema c</span><br><span class="line"><span class="keyword">where</span> c.id % <span class="number">2</span> = <span class="number">1</span> <span class="keyword">and</span> c.description != <span class="string">'boring'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c.rating <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> cinema c</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">mod</span>(c.id, <span class="number">2</span>) = <span class="number">1</span> <span class="keyword">and</span> c.description != <span class="string">'boring'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c.rating <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbm90LWJvcmluZy1tb3ZpZXMv" title="https://leetcode.com/problems/not-boring-movies/">https://leetcode.com/problems/not-boring-movies/<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;627.Swap Salary&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, movie &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), description &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), rating &lt;span class=&quot;built_in&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; cinema&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;War&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;great 3D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8.9&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Science&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;fiction&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8.5&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;irish&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;boring&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6.2&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Ice song&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Fantacy&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8.6&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;House card&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Interesting&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9.1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; cinema;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, movie &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), description &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), rating &lt;span class=&quot;built_in&quot;&gt;decimal&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;War&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;great 3D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8.9&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Science&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;fiction&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8.5&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;irish&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;boring&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6.2&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Ice song&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Fantacy&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8.6&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;House card&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Interesting&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9.1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.&lt;br&gt;Please write a SQL query to output movies with an odd numbered ID and a description that is not ‘boring’. Order the result by rating.&lt;/p&gt;
&lt;p&gt;For example, table &lt;code&gt;cinema&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+-----------+--------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   id    | movie     |  description |  rating   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+-----------+--------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   1     | War       |   great 3D   |   8.9     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   2     | Science   |   fiction    |   8.5     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   3     | irish     |   boring     |   6.2     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   4     | Ice song  |   Fantacy    |   8.6     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   5     | House card|   Interesting|   9.1     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+-----------+--------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For the example above, the output should be:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+-----------+--------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   id    | movie     |  description |  rating   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+-----------+--------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   5     | House card|   Interesting|   9.1     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   1     | War       |   great 3D   |   8.9     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+-----------+--------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 601.human.traffic.of.stadium</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-601-human-traffic-of-stadium/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-601-human-traffic-of-stadium/</id>
    <published>2020-03-13T18:42:03.000Z</published>
    <updated>2020-03-13T18:50:26.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>601.Human Traffic of Stadium</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> stadium (<span class="keyword">id</span> <span class="built_in">int</span>, visit_date <span class="built_in">DATE</span> <span class="literal">NULL</span>, people <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> stadium</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'2017-01-01'</span>, <span class="string">'10'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2017-01-02'</span>, <span class="string">'109'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'2017-01-03'</span>, <span class="string">'150'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'2017-01-04'</span>, <span class="string">'99'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'2017-01-05'</span>, <span class="string">'145'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'2017-01-06'</span>, <span class="string">'1455'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'2017-01-07'</span>, <span class="string">'199'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'8'</span>, <span class="string">'2017-01-08'</span>, <span class="string">'188'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> stadium;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stadium (<span class="keyword">id</span> <span class="built_in">int</span>, visit_date <span class="built_in">DATE</span> <span class="literal">NULL</span>, people <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'2017-01-01'</span>, <span class="string">'10'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2017-01-02'</span>, <span class="string">'109'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'2017-01-03'</span>, <span class="string">'150'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'2017-01-04'</span>, <span class="string">'99'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'2017-01-05'</span>, <span class="string">'145'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'2017-01-06'</span>, <span class="string">'1455'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'2017-01-07'</span>, <span class="string">'199'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'8'</span>, <span class="string">'2017-01-08'</span>, <span class="string">'188'</span>);</span><br></pre></td></tr></tbody></table></figure><p>X city built a new stadium, each day many people visit it and the stats are saved as these columns: id, visit_date, people</p><p>Please write a query to display the records which have 3 or more consecutive rows and the amount of people more than 100(inclusive).</p><p>For example, the table <code>stadium</code>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">------+------------+-----------+</span></span><br><span class="line">| id   | visit_date | people    |</span><br><span class="line">+<span class="comment">------+------------+-----------+</span></span><br><span class="line">| 1    | 2017-01-01 | 10        |</span><br><span class="line">| 2    | 2017-01-02 | 109       |</span><br><span class="line">| 3    | 2017-01-03 | 150       |</span><br><span class="line">| 4    | 2017-01-04 | 99        |</span><br><span class="line">| 5    | 2017-01-05 | 145       |</span><br><span class="line">| 6    | 2017-01-06 | 1455      |</span><br><span class="line">| 7    | 2017-01-07 | 199       |</span><br><span class="line">| 8    | 2017-01-08 | 188       |</span><br><span class="line">+<span class="comment">------+------------+-----------+</span></span><br></pre></td></tr></tbody></table></figure><p>For the sample data above, the output is:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">------+------------+-----------+</span></span><br><span class="line">| id   | visit_date | people    |</span><br><span class="line">+<span class="comment">------+------------+-----------+</span></span><br><span class="line">| 5    | 2017-01-05 | 145       |</span><br><span class="line">| 6    | 2017-01-06 | 1455      |</span><br><span class="line">| 7    | 2017-01-07 | 199       |</span><br><span class="line">| 8    | 2017-01-08 | 188       |</span><br><span class="line">+<span class="comment">------+------------+-----------+</span></span><br></pre></td></tr></tbody></table></figure><p>Note:<br>Each day only have one row record, and the dates are increasing with id increasing.</p><a id="more"></a><hr><p>这里我需要实名diss一下<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvaHVtYW4tdHJhZmZpYy1vZi1zdGFkaXVtL3NvbHV0aW9uLw==" title="https://leetcode.com/problems/human-traffic-of-stadium/solution/">Leetcode所选出的答案<i class="fa fa-external-link"></i></span>。笛卡儿积形式的算法在大型数据集下的SQL基本上都不能终止。</p><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> three_day <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *, </span><br><span class="line">           <span class="keyword">lead</span>(people, <span class="number">1</span>, <span class="literal">NULL</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>) <span class="keyword">as</span> next1, </span><br><span class="line">           <span class="keyword">lead</span>(people, <span class="number">2</span>, <span class="literal">NULl</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>) <span class="keyword">as</span> next2 </span><br><span class="line">    <span class="keyword">from</span> stadium</span><br><span class="line">), ids <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span> </span><br><span class="line">    <span class="keyword">from</span> three_day</span><br><span class="line">    <span class="keyword">where</span> people &gt;= <span class="number">100</span> <span class="keyword">and</span> next1 &gt;= <span class="number">100</span> <span class="keyword">and</span> next2 &gt;= <span class="number">100</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> three_day</span><br><span class="line">    <span class="keyword">where</span> people &gt;= <span class="number">100</span> <span class="keyword">and</span> next1 &gt;= <span class="number">100</span> <span class="keyword">and</span> next2 &gt;= <span class="number">100</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span> + <span class="number">2</span></span><br><span class="line">    <span class="keyword">from</span> three_day</span><br><span class="line">    <span class="keyword">where</span> people &gt;= <span class="number">100</span> <span class="keyword">and</span> next1 &gt;= <span class="number">100</span> <span class="keyword">and</span> next2 &gt;= <span class="number">100</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> stadium s </span><br><span class="line"><span class="keyword">where</span> s.id <span class="keyword">in</span> (<span class="keyword">select</span> * <span class="keyword">from</span> ids);</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s1.id, s1.visit_date, s1.people</span><br><span class="line"><span class="keyword">FROM</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">    s.id, </span><br><span class="line">    s.visit_date, </span><br><span class="line">    s.people, </span><br><span class="line">    <span class="keyword">lead</span>(people) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span>) <span class="keyword">as</span> next1,</span><br><span class="line">    <span class="keyword">lead</span>(people,<span class="number">2</span>) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span> ) <span class="keyword">as</span> next2,</span><br><span class="line">    lag(people) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span>) <span class="keyword">as</span> prev1,</span><br><span class="line">    lag(people,<span class="number">2</span>) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span> ) <span class="keyword">as</span> prev2</span><br><span class="line">    <span class="keyword">FROM</span> stadium <span class="keyword">as</span> s</span><br><span class="line">    ) <span class="keyword">AS</span> s1</span><br><span class="line"><span class="keyword">WHERE</span> (people&gt;=<span class="number">100</span> <span class="keyword">and</span> </span><br><span class="line">       ((next1&gt;=<span class="number">100</span> <span class="keyword">and</span> next2&gt;=<span class="number">100</span>)</span><br><span class="line">        <span class="keyword">or</span> (prev1&gt;=<span class="number">100</span> <span class="keyword">and</span> prev2&gt;=<span class="number">100</span>)</span><br><span class="line">        <span class="keyword">or</span> (prev1&gt;=<span class="number">100</span> <span class="keyword">and</span> next1&gt;=<span class="number">100</span>) <span class="comment">-- &lt;-this one is missing</span></span><br><span class="line">       ));</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvaHVtYW4tdHJhZmZpYy1vZi1zdGFkaXVtLw==" title="https://leetcode.com/problems/human-traffic-of-stadium/">https://leetcode.com/problems/human-traffic-of-stadium/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvaHVtYW4tdHJhZmZpYy1vZi1zdGFkaXVtL2Rpc2N1c3MvMjM3Mjk1L01TLVNRTC1TaW1wbGUtTGVhZC1hbmQtTGFn" title="https://leetcode.com/problems/human-traffic-of-stadium/discuss/237295/MS-SQL-Simple-Lead-and-Lag">https://leetcode.com/problems/human-traffic-of-stadium/discuss/237295/MS-SQL-Simple-Lead-and-Lag<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;601.Human Traffic of Stadium&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, visit_date &lt;span class=&quot;built_in&quot;&gt;DATE&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, people &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; stadium&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-01&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-02&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;109&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-03&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;150&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-04&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;99&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-05&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;145&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-06&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1455&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-07&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;199&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-08&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;188&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; stadium;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, visit_date &lt;span class=&quot;built_in&quot;&gt;DATE&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, people &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-01&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-02&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;109&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-03&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;150&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-04&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;99&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-05&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;145&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-06&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1455&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-07&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;199&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-08&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;188&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;X city built a new stadium, each day many people visit it and the stats are saved as these columns: id, visit_date, people&lt;/p&gt;
&lt;p&gt;Please write a query to display the records which have 3 or more consecutive rows and the amount of people more than 100(inclusive).&lt;/p&gt;
&lt;p&gt;For example, the table &lt;code&gt;stadium&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| id   | visit_date | people    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1    | 2017-01-01 | 10        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2    | 2017-01-02 | 109       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 3    | 2017-01-03 | 150       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 4    | 2017-01-04 | 99        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 5    | 2017-01-05 | 145       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 6    | 2017-01-06 | 1455      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 7    | 2017-01-07 | 199       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 8    | 2017-01-08 | 188       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For the sample data above, the output is:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| id   | visit_date | people    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 5    | 2017-01-05 | 145       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 6    | 2017-01-06 | 1455      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 7    | 2017-01-07 | 199       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 8    | 2017-01-08 | 188       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note:&lt;br&gt;Each day only have one row record, and the dates are increasing with id increasing.&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 596.classes.more.than.5.students</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-596-classes-more-than-5-students/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-596-classes-more-than-5-students/</id>
    <published>2020-03-12T21:24:12.000Z</published>
    <updated>2020-03-12T21:26:07.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>596.Classes More Than 5 Students</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> courses (student <span class="built_in">varchar</span>(<span class="number">255</span>), <span class="keyword">class</span> <span class="built_in">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> courses</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'A'</span>, <span class="string">'Math'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'B'</span>, <span class="string">'English'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'C'</span>, <span class="string">'Math'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'D'</span>, <span class="string">'Biology'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'E'</span>, <span class="string">'Math'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'F'</span>, <span class="string">'Computer'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'G'</span>, <span class="string">'Math'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'H'</span>, <span class="string">'Math'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'I'</span>, <span class="string">'Math'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> courses;</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> courses (student <span class="built_in">varchar</span>(<span class="number">255</span>), <span class="keyword">class</span> <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'A'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'B'</span>, <span class="string">'English'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'C'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'D'</span>, <span class="string">'Biology'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'E'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'F'</span>, <span class="string">'Computer'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'G'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'H'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'I'</span>, <span class="string">'Math'</span>);</span><br></pre></td></tr></tbody></table></figure><p>There is a table <code>courses</code> with columns: student and class</p><p>Please list out all classes which have more than or equal to 5 students.</p><p>For example, the table:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------+------------+</span></span><br><span class="line">| student | class      |</span><br><span class="line">+<span class="comment">---------+------------+</span></span><br><span class="line">| A       | Math       |</span><br><span class="line">| B       | English    |</span><br><span class="line">| C       | Math       |</span><br><span class="line">| D       | Biology    |</span><br><span class="line">| E       | Math       |</span><br><span class="line">| F       | Computer   |</span><br><span class="line">| G       | Math       |</span><br><span class="line">| H       | Math       |</span><br><span class="line">| I       | Math       |</span><br><span class="line">+<span class="comment">---------+------------+</span></span><br></pre></td></tr></tbody></table></figure><p>Should output:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------+</span></span><br><span class="line">| class   |</span><br><span class="line">+<span class="comment">---------+</span></span><br><span class="line">| Math    |</span><br><span class="line">+<span class="comment">---------+</span></span><br></pre></td></tr></tbody></table></figure><p>Note:<br>The students should not be counted duplicate in each course.</p><a id="more"></a><hr><p><br></p><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> c.class </span><br><span class="line"><span class="keyword">from</span> courses c </span><br><span class="line"><span class="keyword">where</span> <span class="number">5</span> &lt;= (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> s.student) </span><br><span class="line">    <span class="keyword">from</span> courses s </span><br><span class="line">    <span class="keyword">where</span> s.class = c.class</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c.class </span><br><span class="line"><span class="keyword">from</span> courses c </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c.class </span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> c.student) &gt;= <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY2xhc3Nlcy1tb3JlLXRoYW4tNS1zdHVkZW50cy8=" title="https://leetcode.com/problems/classes-more-than-5-students/">https://leetcode.com/problems/classes-more-than-5-students/<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;596.Classes More Than 5 Students&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; courses (student &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; courses&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;English&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Biology&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Computer&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;G&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;H&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;I&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; courses;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; courses (student &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;English&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Biology&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Computer&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;G&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;H&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;I&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;There is a table &lt;code&gt;courses&lt;/code&gt; with columns: student and class&lt;/p&gt;
&lt;p&gt;Please list out all classes which have more than or equal to 5 students.&lt;/p&gt;
&lt;p&gt;For example, the table:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| student | class      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| A       | Math       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| B       | English    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| C       | Math       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| D       | Biology    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| E       | Math       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| F       | Computer   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| G       | Math       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| H       | Math       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| I       | Math       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Should output:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| class   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Math    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note:&lt;br&gt;The students should not be counted duplicate in each course.&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 595.big.countries</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-595-big-countries/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-595-big-countries/</id>
    <published>2020-03-12T21:22:53.000Z</published>
    <updated>2020-03-12T21:26:21.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>595.Big Countries</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> World (<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), continent <span class="built_in">varchar</span>(<span class="number">255</span>), area <span class="built_in">int</span>, population <span class="built_in">int</span>, gdp <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> World</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Afghanistan'</span>, <span class="string">'Asia'</span>, <span class="string">'652230'</span>, <span class="string">'25500100'</span>, <span class="string">'20343000000'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Albania'</span>, <span class="string">'Europe'</span>, <span class="string">'28748'</span>, <span class="string">'2831741'</span>, <span class="string">'12960000000'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Algeria'</span>, <span class="string">'Africa'</span>, <span class="string">'2381741'</span>, <span class="string">'37100000'</span>, <span class="string">'188681000000'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Andorra'</span>, <span class="string">'Europe'</span>, <span class="string">'468'</span>, <span class="string">'78115'</span>, <span class="string">'3712000000'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Angola'</span>, <span class="string">'Africa'</span>, <span class="string">'1246700'</span>, <span class="string">'20609294'</span>, <span class="string">'100990000000'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> World;</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> World (<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), continent <span class="built_in">varchar</span>(<span class="number">255</span>), area <span class="built_in">int</span>, population <span class="built_in">int</span>, gdp <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Afghanistan'</span>, <span class="string">'Asia'</span>, <span class="string">'652230'</span>, <span class="string">'25500100'</span>, <span class="string">'20343000000'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Albania'</span>, <span class="string">'Europe'</span>, <span class="string">'28748'</span>, <span class="string">'2831741'</span>, <span class="string">'12960000000'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Algeria'</span>, <span class="string">'Africa'</span>, <span class="string">'2381741'</span>, <span class="string">'37100000'</span>, <span class="string">'188681000000'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Andorra'</span>, <span class="string">'Europe'</span>, <span class="string">'468'</span>, <span class="string">'78115'</span>, <span class="string">'3712000000'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Angola'</span>, <span class="string">'Africa'</span>, <span class="string">'1246700'</span>, <span class="string">'20609294'</span>, <span class="string">'100990000000'</span>);</span><br></pre></td></tr></tbody></table></figure><p>There is a table <code>World</code></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------------+------------+------------+--------------+---------------+</span></span><br><span class="line">| name            | continent  | area       | population   | gdp           |</span><br><span class="line">+<span class="comment">-----------------+------------+------------+--------------+---------------+</span></span><br><span class="line">| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |</span><br><span class="line">| Albania         | Europe     | 28748      | 2831741      | 12960000      |</span><br><span class="line">| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |</span><br><span class="line">| Andorra         | Europe     | 468        | 78115        | 3712000       |</span><br><span class="line">| Angola          | Africa     | 1246700    | 20609294     | 100990000     |</span><br><span class="line">+<span class="comment">-----------------+------------+------------+--------------+---------------+</span></span><br></pre></td></tr></tbody></table></figure><p>A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.</p><p>Write a SQL solution to output big countries’ name, population and area.</p><p>For example, according to the above table, we should output:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">--------------+-------------+--------------+</span></span><br><span class="line">| name         | population  | area         |</span><br><span class="line">+<span class="comment">--------------+-------------+--------------+</span></span><br><span class="line">| Afghanistan  | 25500100    | 652230       |</span><br><span class="line">| Algeria      | 37100000    | 2381741      |</span><br><span class="line">+<span class="comment">--------------+-------------+--------------+</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><hr><p><br></p><h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> w.name, w.population, w.area</span><br><span class="line"><span class="keyword">from</span> world w</span><br><span class="line"><span class="keyword">where</span> w.area &gt; <span class="number">3000000</span> <span class="keyword">or</span> w.population &gt; <span class="number">25000000</span></span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">name</span>, population, area</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    world</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    area &gt; <span class="number">3000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">name</span>, population, area</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    world</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    population &gt; <span class="number">25000000</span>;</span><br></pre></td></tr></tbody></table></figure><p>这题非常简单，但是有另外一点引起我的注意：<br><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy9zb2x1dGlvbi8=" title="https://leetcode.com/problems/big-countries/solution/">https://leetcode.com/problems/big-countries/solution/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTM3NTA0NzUvc3FsLXBlcmZvcm1hbmNlLXVuaW9uLXZzLW9y" title="https://stackoverflow.com/questions/13750475/sql-performance-union-vs-or">https://stackoverflow.com/questions/13750475/sql-performance-union-vs-or<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy9kaXNjdXNzLzEwMzU2MS9Vbmlvbi1hbmQtT1ItYW5kLXRoZS1FeHBsYW5hdGlvbg==" title="https://leetcode.com/problems/big-countries/discuss/103561/Union-and-OR-and-the-Explanation">https://leetcode.com/problems/big-countries/discuss/103561/Union-and-OR-and-the-Explanation<i class="fa fa-external-link"></i></span></p><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy8=" title="https://leetcode.com/problems/big-countries/">https://leetcode.com/problems/big-countries/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy9zb2x1dGlvbi8=" title="https://leetcode.com/problems/big-countries/solution/">https://leetcode.com/problems/big-countries/solution/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTM3NTA0NzUvc3FsLXBlcmZvcm1hbmNlLXVuaW9uLXZzLW9y" title="https://stackoverflow.com/questions/13750475/sql-performance-union-vs-or">https://stackoverflow.com/questions/13750475/sql-performance-union-vs-or<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy9kaXNjdXNzLzEwMzU2MS9Vbmlvbi1hbmQtT1ItYW5kLXRoZS1FeHBsYW5hdGlvbg==" title="https://leetcode.com/problems/big-countries/discuss/103561/Union-and-OR-and-the-Explanation">https://leetcode.com/problems/big-countries/discuss/103561/Union-and-OR-and-the-Explanation<i class="fa fa-external-link"></i></span></p><p>该文章遵循<span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLzQuMC9kZWVkLnpo" title="https://creativecommons.org/licenses/by-nc/4.0/deed.zh">创作共用版权协议 CC BY-NC 4.0<i class="fa fa-external-link"></i></span>，要求署名、非商业 、保持一致。在满足<span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLzQuMC9kZWVkLnpo" title="https://creativecommons.org/licenses/by-nc/4.0/deed.zh">创作共用版权协议 CC BY-NC 4.0<i class="fa fa-external-link"></i></span> 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;595.Big Countries&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), continent &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), area &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, population &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, gdp &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; World&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Afghanistan&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Asia&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;652230&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;25500100&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;20343000000&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Albania&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Europe&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;28748&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2831741&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12960000000&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Algeria&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Africa&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2381741&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;37100000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;188681000000&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Andorra&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Europe&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;468&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;78115&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3712000000&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Angola&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Africa&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1246700&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;20609294&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;100990000000&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; World;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), continent &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), area &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, population &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, gdp &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Afghanistan&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Asia&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;652230&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;25500100&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;20343000000&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Albania&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Europe&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;28748&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2831741&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12960000000&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Algeria&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Africa&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2381741&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;37100000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;188681000000&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Andorra&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Europe&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;468&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;78115&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3712000000&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Angola&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Africa&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1246700&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;20609294&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;100990000000&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;There is a table &lt;code&gt;World&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;-----------------+------------+------------+--------------+---------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| name            | continent  | area       | population   | gdp           |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;-----------------+------------+------------+--------------+---------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Albania         | Europe     | 28748      | 2831741      | 12960000      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Andorra         | Europe     | 468        | 78115        | 3712000       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Angola          | Africa     | 1246700    | 20609294     | 100990000     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;-----------------+------------+------------+--------------+---------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.&lt;/p&gt;
&lt;p&gt;Write a SQL solution to output big countries’ name, population and area.&lt;/p&gt;
&lt;p&gt;For example, according to the above table, we should output:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;--------------+-------------+--------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| name         | population  | area         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;--------------+-------------+--------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Afghanistan  | 25500100    | 652230       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Algeria      | 37100000    | 2381741      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;--------------+-------------+--------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 262.trips.and.users</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-262-trips-and-users/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-262-trips-and-users/</id>
    <published>2020-03-12T19:13:14.000Z</published>
    <updated>2020-03-12T21:26:46.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>262.Trips and Users</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Trips (<span class="keyword">Id</span> <span class="built_in">int</span>, Client_Id <span class="built_in">int</span>, Driver_Id <span class="built_in">int</span>, City_Id <span class="built_in">int</span>, <span class="keyword">Status</span> ENUM(<span class="string">'completed'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'cancelled_by_client'</span>), Request_at <span class="built_in">varchar</span>(<span class="number">50</span>))</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> <span class="keyword">Users</span> (Users_Id <span class="built_in">int</span>, Banned <span class="built_in">varchar</span>(<span class="number">50</span>), <span class="keyword">Role</span> ENUM(<span class="string">'client'</span>, <span class="string">'driver'</span>, <span class="string">'partner'</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Trips</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'10'</span>, <span class="string">'1'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-01'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'11'</span>, <span class="string">'1'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'2013-10-01'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'12'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-01'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'13'</span>, <span class="string">'6'</span>, <span class="string">'cancelled_by_client'</span>, <span class="string">'2013-10-01'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'1'</span>, <span class="string">'10'</span>, <span class="string">'1'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'2'</span>, <span class="string">'11'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'3'</span>, <span class="string">'12'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'8'</span>, <span class="string">'2'</span>, <span class="string">'12'</span>, <span class="string">'12'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-03'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'9'</span>, <span class="string">'3'</span>, <span class="string">'10'</span>, <span class="string">'12'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-03'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'10'</span>, <span class="string">'4'</span>, <span class="string">'13'</span>, <span class="string">'12'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'2013-10-03'</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> <span class="keyword">Users</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Yes'</span>, <span class="string">'client'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'10'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'11'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'12'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'13'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> Trips;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">Users</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> <span class="keyword">status</span> <span class="keyword">AS</span> ENUM(<span class="string">'completed'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'cancelled_by_client'</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> <span class="keyword">role</span> <span class="keyword">AS</span> ENUM(<span class="string">'client'</span>, <span class="string">'driver'</span>, <span class="string">'partner'</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Trips (<span class="keyword">Id</span> <span class="built_in">int</span>, Client_Id <span class="built_in">int</span>, Driver_Id <span class="built_in">int</span>, City_Id <span class="built_in">int</span>, <span class="keyword">Status</span> <span class="keyword">status</span>, Request_at <span class="built_in">varchar</span>(<span class="number">50</span>));</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">Users</span> (Users_Id <span class="built_in">int</span>, Banned <span class="built_in">varchar</span>(<span class="number">50</span>), <span class="keyword">Role</span> <span class="keyword">role</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'10'</span>, <span class="string">'1'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'11'</span>, <span class="string">'1'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'2013-10-01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'12'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'13'</span>, <span class="string">'6'</span>, <span class="string">'cancelled_by_client'</span>, <span class="string">'2013-10-01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'1'</span>, <span class="string">'10'</span>, <span class="string">'1'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'2'</span>, <span class="string">'11'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'3'</span>, <span class="string">'12'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'8'</span>, <span class="string">'2'</span>, <span class="string">'12'</span>, <span class="string">'12'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-03'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'9'</span>, <span class="string">'3'</span>, <span class="string">'10'</span>, <span class="string">'12'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-03'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'10'</span>, <span class="string">'4'</span>, <span class="string">'13'</span>, <span class="string">'12'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'2013-10-03'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Yes'</span>, <span class="string">'client'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'10'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'11'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'12'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'13'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>);</span><br></pre></td></tr></tbody></table></figure><p>The <code>Trips</code> table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are both foreign keys to the Users_Id at the Users table. Status is an ENUM type of (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’).</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+-----------+-----------+---------+--------------------+----------+</span></span><br><span class="line">| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|</span><br><span class="line">+<span class="comment">----+-----------+-----------+---------+--------------------+----------+</span></span><br><span class="line">| 1  |     1     |    10     |    1    |     completed      |2013-10-01|</span><br><span class="line">| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|</span><br><span class="line">| 3  |     3     |    12     |    6    |     completed      |2013-10-01|</span><br><span class="line">| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|</span><br><span class="line">| 5  |     1     |    10     |    1    |     completed      |2013-10-02|</span><br><span class="line">| 6  |     2     |    11     |    6    |     completed      |2013-10-02|</span><br><span class="line">| 7  |     3     |    12     |    6    |     completed      |2013-10-02|</span><br><span class="line">| 8  |     2     |    12     |    12   |     completed      |2013-10-03|</span><br><span class="line">| 9  |     3     |    10     |    12   |     completed      |2013-10-03| </span><br><span class="line">| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|</span><br><span class="line">+<span class="comment">----+-----------+-----------+---------+--------------------+----------+</span></span><br></pre></td></tr></tbody></table></figure><p>The Users table holds all users. Each user has an unique Users_Id, and Role is an ENUM type of (‘client’, ‘driver’, ‘partner’).</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----------+--------+--------+</span></span><br><span class="line">| Users_Id | Banned |  Role  |</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br><span class="line">|    1     |   No   | client |</span><br><span class="line">|    2     |   Yes  | client |</span><br><span class="line">|    3     |   No   | client |</span><br><span class="line">|    4     |   No   | client |</span><br><span class="line">|    10    |   No   | driver |</span><br><span class="line">|    11    |   No   | driver |</span><br><span class="line">|    12    |   No   | driver |</span><br><span class="line">|    13    |   No   | driver |</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br></pre></td></tr></tbody></table></figure><p>Write a SQL query to find the cancellation rate of requests made by unbanned users (both client and driver must be unbanned) between Oct 1, 2013 and Oct 3, 2013. The cancellation rate is computed by dividing the number of canceled (by client or driver) requests made by unbanned users by the total number of requests made by unbanned users.</p><p>For the above tables, your SQL query should return the following rows with the cancellation rate being rounded to two decimal places.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">------------+-------------------+</span></span><br><span class="line">|     Day    | Cancellation Rate |</span><br><span class="line">+<span class="comment">------------+-------------------+</span></span><br><span class="line">| 2013-10-01 |       0.33        |</span><br><span class="line">| 2013-10-02 |       0.00        |</span><br><span class="line">| 2013-10-03 |       0.50        |</span><br><span class="line">+<span class="comment">------------+-------------------+</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><hr><p><br></p><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p><strong>适用于PostgreSQL</strong>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> temp.request_at <span class="keyword">as</span> <span class="string">"Day"</span>, </span><br><span class="line">       <span class="keyword">round</span>(<span class="keyword">cast</span>(<span class="keyword">count</span>(*) filter (<span class="keyword">where</span> temp.status != <span class="string">'completed'</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> temp.request_at) <span class="keyword">as</span> <span class="built_in">decimal</span>) / <span class="keyword">count</span>(*) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> temp.request_at), <span class="number">2</span>) <span class="keyword">as</span> <span class="string">"Cancellation Rate"</span> </span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> request_at, <span class="keyword">status</span> </span><br><span class="line">    <span class="keyword">from</span> trips t, <span class="keyword">users</span> <span class="keyword">client</span>, <span class="keyword">users</span> driver </span><br><span class="line">    <span class="keyword">where</span> t.client_id = client.users_id <span class="keyword">and</span> t.driver_id = driver.users_id <span class="keyword">and</span> client.banned = <span class="string">'No'</span> <span class="keyword">and</span> driver.banned = <span class="string">'No'</span>) <span class="keyword">as</span> temp;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p><strong>适用于MSSQL和PostgreSQL</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> temp.request_at <span class="keyword">as</span> <span class="string">"Day"</span>, </span><br><span class="line">       <span class="keyword">round</span>(<span class="keyword">cast</span>(<span class="keyword">count</span>(<span class="keyword">case</span> <span class="keyword">when</span> temp.status != <span class="string">'completed'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> temp.request_at) <span class="keyword">as</span> <span class="built_in">decimal</span>) / <span class="keyword">count</span>(*) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> temp.request_at), <span class="number">2</span>) <span class="keyword">as</span> <span class="string">"Cancellation Rate"</span> </span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> request_at, <span class="keyword">status</span> </span><br><span class="line">    <span class="keyword">from</span> trips t, <span class="keyword">users</span> <span class="keyword">client</span>, <span class="keyword">users</span> driver </span><br><span class="line">    <span class="keyword">where</span> t.client_id = client.users_id <span class="keyword">and</span> t.driver_id = driver.users_id <span class="keyword">and</span> client.banned = <span class="string">'No'</span> <span class="keyword">and</span> driver.banned = <span class="string">'No'</span>) <span class="keyword">as</span> temp;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdHJpcHMtYW5kLXVzZXJzLw==" title="https://leetcode.com/problems/trips-and-users/">https://leetcode.com/problems/trips-and-users/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzkzNzg1NTAvc3FsLXdpbmRvdy1mdW5jdGlvbi13aXRoLWEtd2hlcmUtY2xhdXNl" title="https://stackoverflow.com/questions/39378550/sql-window-function-with-a-where-clause">https://stackoverflow.com/questions/39378550/sql-window-function-with-a-where-clause<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9tb2Rlcm4tc3FsLmNvbS9kZS9mZWF0dXJlL2ZpbHRlcg==" title="https://modern-sql.com/de/feature/filter">https://modern-sql.com/de/feature/filter<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;262.Trips and Users&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, Client_Id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, Driver_Id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, City_Id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt; ENUM(&lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_driver&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_client&#39;&lt;/span&gt;), Request_at &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, Banned &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt; ENUM(&lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;partner&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Trips&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-01&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;11&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_driver&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-01&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-01&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;13&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_client&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-01&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-02&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;11&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-02&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-02&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-03&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-03&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;13&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_driver&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-03&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Yes&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;11&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;13&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Trips;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TYPE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; ENUM(&lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_driver&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_client&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TYPE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; ENUM(&lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;partner&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, Client_Id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, Driver_Id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, City_Id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;status&lt;/span&gt;, Request_at &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, Banned &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;role&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-01&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;11&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_driver&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-01&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-01&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;13&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_client&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-01&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-02&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;11&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-02&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-02&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-03&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-03&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;13&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_driver&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-03&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Yes&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;11&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;13&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;Trips&lt;/code&gt; table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are both foreign keys to the Users_Id at the Users table. Status is an ENUM type of (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’).&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+-----------+-----------+---------+--------------------+----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+-----------+-----------+---------+--------------------+----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1  |     1     |    10     |    1    |     completed      |2013-10-01|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 3  |     3     |    12     |    6    |     completed      |2013-10-01|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 5  |     1     |    10     |    1    |     completed      |2013-10-02|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 6  |     2     |    11     |    6    |     completed      |2013-10-02|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 7  |     3     |    12     |    6    |     completed      |2013-10-02|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 8  |     2     |    12     |    12   |     completed      |2013-10-03|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 9  |     3     |    10     |    12   |     completed      |2013-10-03| &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+-----------+-----------+---------+--------------------+----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The Users table holds all users. Each user has an unique Users_Id, and Role is an ENUM type of (‘client’, ‘driver’, ‘partner’).&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----------+--------+--------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Users_Id | Banned |  Role  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----------+--------+--------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    1     |   No   | client |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    2     |   Yes  | client |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    3     |   No   | client |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    4     |   No   | client |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    10    |   No   | driver |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    11    |   No   | driver |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    12    |   No   | driver |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    13    |   No   | driver |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----------+--------+--------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Write a SQL query to find the cancellation rate of requests made by unbanned users (both client and driver must be unbanned) between Oct 1, 2013 and Oct 3, 2013. The cancellation rate is computed by dividing the number of canceled (by client or driver) requests made by unbanned users by the total number of requests made by unbanned users.&lt;/p&gt;
&lt;p&gt;For the above tables, your SQL query should return the following rows with the cancellation rate being rounded to two decimal places.&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------------+-------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|     Day    | Cancellation Rate |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------------+-------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2013-10-01 |       0.33        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2013-10-02 |       0.00        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2013-10-03 |       0.50        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------------+-------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 197.rising.temperature</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-197-rising-temperature/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-197-rising-temperature/</id>
    <published>2020-03-12T19:09:58.000Z</published>
    <updated>2020-03-12T21:26:59.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>197.Rising Temperature</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Weather (<span class="keyword">Id</span> <span class="built_in">int</span>, RecordDate <span class="built_in">date</span>, Temperature <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Weather;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'2015-01-01'</span>, <span class="string">'10'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2015-01-02'</span>, <span class="string">'25'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'2015-01-03'</span>, <span class="string">'20'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'2015-01-04'</span>, <span class="string">'30'</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Weather;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Weather (<span class="keyword">Id</span> <span class="built_in">int</span>, RecordDate <span class="built_in">date</span>, Temperature <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'2015-01-01'</span>, <span class="string">'10'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2015-01-02'</span>, <span class="string">'25'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'2015-01-03'</span>, <span class="string">'20'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'2015-01-04'</span>, <span class="string">'30'</span>);</span><br></pre></td></tr></tbody></table></figure><p>Given a <code>Weather</code> table, write a SQL query to find all dates’ Ids with higher temperature compared to its previous (yesterday’s) dates.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------+------------------+------------------+</span></span><br><span class="line">| Id(INT) | RecordDate(DATE) | Temperature(INT) |</span><br><span class="line">+<span class="comment">---------+------------------+------------------+</span></span><br><span class="line">|       1 |       2015-01-01 |               10 |</span><br><span class="line">|       2 |       2015-01-02 |               25 |</span><br><span class="line">|       3 |       2015-01-03 |               20 |</span><br><span class="line">|       4 |       2015-01-04 |               30 |</span><br><span class="line">+<span class="comment">---------+------------------+------------------+</span></span><br></pre></td></tr></tbody></table></figure><p>For example, return the following Ids for the above <code>Weather</code> table:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+</span></span><br><span class="line">| Id |</span><br><span class="line">+<span class="comment">----+</span></span><br><span class="line">|  2 |</span><br><span class="line">|  4 |</span><br><span class="line">+<span class="comment">----+</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><hr><p>我第一次审题，误看成和前一个tuple(当然不一定是前一天)比较温度的大小，然后写了如下的带window function的版本：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> w.id <span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> *, lag(Temperature, <span class="number">1</span>, <span class="literal">NULL</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> RecordDate) <span class="keyword">as</span> last_temp </span><br><span class="line">    <span class="keyword">from</span> weather) <span class="keyword">as</span> w </span><br><span class="line"><span class="keyword">where</span> w.temperature &gt; w.last_temp;</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p><strong>适用于PostgreSQL</strong>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> temp.id <span class="keyword">as</span> <span class="keyword">Id</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> w1.id <span class="keyword">as</span> <span class="keyword">id</span>, w1.temperature <span class="keyword">as</span> temp, w2.temperature <span class="keyword">as</span> last_temp </span><br><span class="line">    <span class="keyword">from</span> weather w1, weather w2 </span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">EXTRACT</span> (<span class="keyword">DAY</span> <span class="keyword">FROM</span> w1.recorddate) - <span class="keyword">EXTRACT</span> (<span class="keyword">DAY</span> <span class="keyword">FROM</span> w2.recorddate) = <span class="number">1</span>) <span class="keyword">as</span> temp </span><br><span class="line"><span class="keyword">where</span> temp.temp &gt; temp.last_temp;</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><p><strong>适用于MySQL</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> temp.id <span class="keyword">as</span> <span class="keyword">Id</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> w1.id <span class="keyword">as</span> <span class="keyword">id</span>, w1.temperature <span class="keyword">as</span> temp, w2.temperature <span class="keyword">as</span> last_temp </span><br><span class="line">    <span class="keyword">from</span> weather w1, weather w2 </span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">DATEDIFF</span>(w1.recorddate, w2.recorddate) = <span class="number">1</span>) <span class="keyword">as</span> temp </span><br><span class="line"><span class="keyword">where</span> temp.temp &gt; temp.last_temp;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t1.Id</span><br><span class="line"><span class="keyword">From</span> </span><br><span class="line">    Weather t1, Weather t2</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    t1.Temperature &gt; t2.Temperature</span><br><span class="line"><span class="keyword">AND</span></span><br><span class="line">    <span class="keyword">subdate</span>(t1.Date, <span class="number">1</span>) = t2.Date</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmlzaW5nLXRlbXBlcmF0dXJlLw==" title="https://leetcode.com/problems/rising-temperature/">https://leetcode.com/problems/rising-temperature/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmlzaW5nLXRlbXBlcmF0dXJlL2Rpc2N1c3MvNTU2NDkvU29sdXRpb24td2l0aC1teXNxbC1idWlsdC1pbi1mdW5jdGlvbg==" title="https://leetcode.com/problems/rising-temperature/discuss/55649/Solution-with-mysql-built-in-function">https://leetcode.com/problems/rising-temperature/discuss/55649/Solution-with-mysql-built-in-function<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjMvZnVuY3Rpb25zLWRhdGV0aW1lLmh0bWwjRlVOQ1RJT05TLURBVEVUSU1FLUVYVFJBQ1Q=" title="https://www.postgresql.org/docs/9.3/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT">https://www.postgresql.org/docs/9.3/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;197.Rising Temperature&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, RecordDate &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt;, Temperature &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Weather;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, RecordDate, Temperature) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2015-01-01&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, RecordDate, Temperature) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2015-01-02&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;25&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, RecordDate, Temperature) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2015-01-03&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;20&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, RecordDate, Temperature) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2015-01-04&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;30&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; Weather;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, RecordDate &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt;, Temperature &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, RecordDate, Temperature) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2015-01-01&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, RecordDate, Temperature) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2015-01-02&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;25&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, RecordDate, Temperature) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2015-01-03&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;20&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, RecordDate, Temperature) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2015-01-04&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;30&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Given a &lt;code&gt;Weather&lt;/code&gt; table, write a SQL query to find all dates’ Ids with higher temperature compared to its previous (yesterday’s) dates.&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+------------------+------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Id(INT) | RecordDate(DATE) | Temperature(INT) |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+------------------+------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|       1 |       2015-01-01 |               10 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|       2 |       2015-01-02 |               25 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|       3 |       2015-01-03 |               20 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|       4 |       2015-01-04 |               30 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+------------------+------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For example, return the following Ids for the above &lt;code&gt;Weather&lt;/code&gt; table:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Id |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  2 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  4 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
</feed>
