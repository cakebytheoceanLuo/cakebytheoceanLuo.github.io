<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>关于数据库的一切</title>
  <icon>https://www.gravatar.com/avatar/60437615b712b01d1a7c334c61fc1a4f</icon>
  <subtitle>罗济高的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cakebytheoceanluo.github.io/"/>
  <updated>2020-03-17T15:59:43.636Z</updated>
  <id>https://cakebytheoceanluo.github.io/</id>
  
  <author>
    <name>罗济高</name>
    <email>luojigao@outlook.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[CMU-15445]Lec04</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/16/CMU-15445-Lec04/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/16/CMU-15445-Lec04/</id>
    <published>2020-03-16T13:08:44.000Z</published>
    <updated>2020-03-17T15:59:43.636Z</updated>
    
    <content type="html"><![CDATA[<p>Database Storage Part II - 数据库存储  II</p><p>Slide: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA0LXN0b3JhZ2UyLnBkZg==" title="https://15445.courses.cs.cmu.edu/fall2019/slides/04-storage2.pdf">https://15445.courses.cs.cmu.edu/fall2019/slides/04-storage2.pdf<i class="fa fa-external-link"></i></span><br>Note: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDQtc3RvcmFnZTIucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf<i class="fa fa-external-link"></i></span></p><p>这节两课，我们会学习数据库内部的存储。</p><p>Database Storage 在CMU分成了两部分，在两节课中讲。这是第二部分。</p><p>这部分设涉及基础数据类型的表示, OLAP, OLTP, HTAP, row-store (NSM), column store(DSM) 等等。</p><a id="more"></a><p><img data-src="/images/CMU1544564/Lec04/1.jpg" alt="1.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/12.jpg" alt="12.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/13.jpg" alt="13.jpg"></p><p>a sequence of bytes = byte array</p><h1 id="Data-Representation"><a href="#Data-Representation" class="headerlink" title="Data Representation"></a>Data Representation</h1><p><img data-src="/images/CMU1544564/Lec04/14.jpg" alt="14.jpg"></p><ul><li>我们在<a href="https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part1/#DATE-TIME-OPERATIONS">[CMU-15445]Lec02_part1</a>, 在不同的数据库中已经见过Date Time Operations也不一样，没有唯一的标准。</li></ul><!-- TODO: unix epoch --><h2 id="Variable-Precision-Numbers-浮点数"><a href="#Variable-Precision-Numbers-浮点数" class="headerlink" title="Variable Precision Numbers 浮点数"></a>Variable Precision Numbers 浮点数</h2><p><img data-src="/images/CMU1544564/Lec04/15.jpg" alt="15.jpg"></p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSUVFRV83NTQ=" title="https://en.wikipedia.org/wiki/IEEE_754">https://en.wikipedia.org/wiki/IEEE_754<i class="fa fa-external-link"></i></span>  <!-- TODO --></li><li>对<code>FLOAT</code>, <code>REAL/DOUBLE</code>的操作会比较快，因为CPU有直接对应的指令(instruction)可以使用，但是因为精度有限的原因，使用这几个依然会失去精度。(和编程语言中一样)。因为计算机对数字存储是离散的，有限的，必然会失去一定精度，结果是近似的。</li></ul><h3 id="Demo-失去精度"><a href="#Demo-失去精度" class="headerlink" title="Demo - 失去精度"></a>Demo - 失去精度</h3><p><img data-src="/images/CMU1544564/Lec04/16.jpg" alt="16.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/17.jpg" alt="17.jpg"></p><h2 id="Fixed-Precision-Numbers-定点数"><a href="#Fixed-Precision-Numbers-定点数" class="headerlink" title="Fixed Precision Numbers 定点数"></a>Fixed Precision Numbers 定点数</h2><p>定点数就是小数点是固定的，所以我们用int分别存储小数点前后的数字就可以实现，定点数是可以做到精确计算的。但是局限也很明显，只能表示固定精度。<sup><a href="#fn1">1</a></sup></p><p><img data-src="/images/CMU1544564/Lec04/18.jpg" alt="18.jpg"></p><p>更多关于这个Demo实验，见这个文章<a href="https://cakebytheoceanluo.github.io/2020/03/16/DBMS-Postgres%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98precision-numbers/">[DBMS] Postgres 精度问题 precision_numbers</a></p><p><img data-src="/images/CMU1544564/Lec04/19.jpg" alt="19.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/20.jpg" alt="20.jpg"></p><ul><li>PostgreSQL Source Code: <span class="exturl" data-url="aHR0cHM6Ly9kb3h5Z2VuLnBvc3RncmVzcWwub3JnL2ludGVyZmFjZXNfMmVjcGdfMnBndHlwZXNsaWJfMm51bWVyaWNfOGNfc291cmNlLmh0bWwjbDAwNzIy" title="https://doxygen.postgresql.org/interfaces_2ecpg_2pgtypeslib_2numeric_8c_source.html#l00722">https://doxygen.postgresql.org/interfaces_2ecpg_2pgtypeslib_2numeric_8c_source.html#l00722<i class="fa fa-external-link"></i></span></li><li>从源代码中可以看出固定精度的数字的操作很复杂，有很多branch，所以会比较慢。</li></ul><h2 id="Large-Values"><a href="#Large-Values" class="headerlink" title="Large Values"></a>Large Values</h2><p><img data-src="/images/CMU1544564/Lec04/21.jpg" alt="21.jpg"></p><ul><li>如果<code>c</code>很大，甚至超过了一个page的大小。比如<code>c</code>是一个tuple中一个很长的<code>VARCHAR</code>字段。String总是数据库中最麻烦的。对于这个超过一个page大小的<code>c</code>，我们可以把它额外存储在一个<em>overflow page</em>上，这时上图中的<code>c</code>实际上是一个指向overflow page的一个指针。</li><li>当然overflow page可以是多个。假如一个overflow page依然不够大，我们可以使用几个overflow page，它们之间继续用<em>指针</em>相连。</li><li>整体上overflow page只是一种实现存储large value的方式。它对使用数据库的应用是<strong>透明的(transparent)</strong>, 使用数据库的应用只获得那个很长的<code>c</code>字符串，而不必知道它是如何被存储，存储在哪儿。</li></ul><h2 id="External-Value-Storage"><a href="#External-Value-Storage" class="headerlink" title="External Value Storage"></a>External Value Storage</h2><p><img data-src="/images/CMU1544564/Lec04/22.jpg" alt="22.jpg"></p><ul><li>External Value Storage是指那些特别大的文件，超过我们前面提到的large value。它比如说是GiB大小的视频。</li><li>BLOB: Binary Large Object data</li><li>这种文件，我们没有必要把它存储在数据库内部，这样会浪费数据库空间。</li><li>我们直接在<code>c</code>的地方存储，该文件在操作系统文件系统中硬盘的位置。这样做不会浪费数据库内部空间。</li><li>如果我们使用的High End的设备去运行高性能数据库，那么该服务器中磁盘容量是很宝贵的，不应该被浪费的。在<code>c</code>存储一个硬盘位置，能降低数据库的成本，特别是这个硬盘可以是HTFS或者network storage。</li><li>这里注意对于存放到外部文件的数据，是不保证transaction等语义的。<sup><a href="#fn1">1</a></sup></li></ul><p><img data-src="/images/CMU1544564/Lec04/23.jpg" alt="23.jpg"></p><p>To BLOB or Not To BLOB: Large Object Storage in a Database or a Filesystem: <span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy9yZXNlYXJjaC9wdWJsaWNhdGlvbi90by1ibG9iLW9yLW5vdC10by1ibG9iLWxhcmdlLW9iamVjdC1zdG9yYWdlLWluLWEtZGF0YWJhc2Utb3ItYS1maWxlc3lzdGVtLw==" title="https://www.microsoft.com/en-us/research/publication/to-blob-or-not-to-blob-large-object-storage-in-a-database-or-a-filesystem/">https://www.microsoft.com/en-us/research/publication/to-blob-or-not-to-blob-large-object-storage-in-a-database-or-a-filesystem/<i class="fa fa-external-link"></i></span></p><p><br></p><h1 id="System-Catalogs-metadata"><a href="#System-Catalogs-metadata" class="headerlink" title="System Catalogs = metadata"></a>System Catalogs = metadata</h1><p><img data-src="/images/CMU1544564/Lec04/24.jpg" alt="24.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/25.jpg" alt="25.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/26.jpg" alt="26.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/27.jpg" alt="27.jpg"></p><!-- TODO: MySQL, SQLIte --><p>PostgreSQL的查看Schema操作，具体见另外一篇博客，里面有很多例子：<a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#%E6%95%B0%E6%8D%AE%E9%9B%86">[DBMS] PostgreSQL 导入数据集 - 数据集</a></p><p><br><br><br></p><h1 id="Storage-Levels"><a href="#Storage-Levels" class="headerlink" title="Storage Levels"></a>Storage Levels</h1><p><img data-src="/images/CMU1544564/Lec04/28.jpg" alt="28.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/29.jpg" alt="29.jpg"></p><h2 id="OLTP"><a href="#OLTP" class="headerlink" title="OLTP"></a>OLTP</h2><p>OLTP := On-line Transaction Processing 通常是对很小一部分tuple的写操作</p><p>OLTP: On-line Transaction Processing</p><ul><li>Fast, short running operations</li><li>Queries operate on single entity at a time</li><li>More writes than reads</li><li>Repetitive operations</li><li>Usually the kind of application that people build first</li><li>Example: User invocations of Amazon. They can add things to their cart, they can make purchases,<br>but the actions only affect their account.<br>— 引用自: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDQtc3RvcmFnZTIucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf<i class="fa fa-external-link"></i></span></li></ul><p><img data-src="/images/CMU1544564/Lec04/30.jpg" alt="30.jpg"></p><h2 id="OLAP"><a href="#OLAP" class="headerlink" title="OLAP"></a>OLAP</h2><p>OLAP := On-line Analytical Processing 通常是对很大一部分是tuple做读操作, 同复杂的分析聚合　(decision-support, big data)</p><p>OLTP: On-line Transaction Processing</p><ul><li>Fast, short running operations</li><li>Queries operate on single entity at a time</li><li>More writes than reads</li><li>Repetitive operations</li><li>Usually the kind of application that people build first</li><li>Example: User invocations of Amazon. They can add things to their cart, they can make purchases,<br>but the actions only affect their account.<br>— 引用自: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDQtc3RvcmFnZTIucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf<i class="fa fa-external-link"></i></span></li></ul><p><img data-src="/images/CMU1544564/Lec04/31.jpg" alt="31.jpg"></p><h2 id="HTAP"><a href="#HTAP" class="headerlink" title="HTAP"></a>HTAP</h2><p><img data-src="/images/CMU1544564/Lec04/32.jpg" alt="32.jpg"></p><p>SOURCE: <span class="exturl" data-url="aHR0cHM6Ly9jYWNtLmFjbS5vcmcvbWFnYXppbmVzLzIwMTEvNi8xMDg2NTEtMTAtcnVsZXMtZm9yLXNjYWxhYmxlLXBlcmZvcm1hbmNlLWluLXNpbXBsZS1vcGVyYXRpb24tZGF0YXN0b3Jlcy9mdWxsdGV4dA==" title="https://cacm.acm.org/magazines/2011/6/108651-10-rules-for-scalable-performance-in-simple-operation-datastores/fulltext">https://cacm.acm.org/magazines/2011/6/108651-10-rules-for-scalable-performance-in-simple-operation-datastores/fulltext<i class="fa fa-external-link"></i></span></p><p><br></p><h1 id="Storage-Models"><a href="#Storage-Models" class="headerlink" title="Storage Models"></a>Storage Models</h1><p><img data-src="/images/CMU1544564/Lec04/33.jpg" alt="33.jpg"></p><h2 id="N-ary-Storage-Model-NSM-row-store"><a href="#N-ary-Storage-Model-NSM-row-store" class="headerlink" title="N-ary Storage Model (NSM): row store"></a>N-ary Storage Model (NSM): row store</h2><p><img data-src="/images/CMU1544564/Lec04/34.jpg" alt="34.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/35.jpg" alt="35.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/36.jpg" alt="36.jpg"></p><h3 id="OLTP-1"><a href="#OLTP-1" class="headerlink" title="OLTP"></a>OLTP</h3><p>OLTP往往有一个index(索引)，它可以快速找到OLTP需要的那一个tuple。</p><p><img data-src="/images/CMU1544564/Lec04/37.jpg" alt="37.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/38.jpg" alt="38.jpg"></p><h3 id="OLAP-1"><a href="#OLAP-1" class="headerlink" title="OLAP"></a>OLAP</h3><p>而OLAP往往需要扫描很大一部分的表格，这种情况index的帮助不会很大。<strong>扫描</strong>具体就是从每一个tuple头到尾，我们之前提过tuple就是一个byte array。即使我们下图中，只需要检查深蓝色和浅蓝色两个字段，但是整个tuple还是需要从内存加载到CPU cache。而且一个page上的大部分数据也都和当前query无关，这实际上很不高效。所以下图红圈中的都是useless data。</p><p><img data-src="/images/CMU1544564/Lec04/43.jpg" alt="43.jpg"></p><h3 id="NSM-Pros-amp-Cons"><a href="#NSM-Pros-amp-Cons" class="headerlink" title="NSM Pros&amp;Cons"></a>NSM Pros&amp;Cons</h3><p><img data-src="/images/CMU1544564/Lec04/44.jpg" alt="44.jpg"></p><ul><li>NSM适合OLTP, 因为对单个tuple的操作很简单。但是不适合OLAP，如果OLAP不需要所有字段的话。</li></ul><p>There are two different ways to organize a NSM database:</p><ul><li><strong>Heap-Organized Tables</strong>: Tuples are stored in blocks called a heap, and the heap does not necessarily<br>define an order.</li><li><strong>Index-Organized Tables</strong>: Tuples are stored in the primary key index itself, but different from a<br>clustered index.</li></ul><p>— 引用自: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDQtc3RvcmFnZTIucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf<i class="fa fa-external-link"></i></span></p><p><br></p><h2 id="Decomposition-Storage-Model-DSM-column-store"><a href="#Decomposition-Storage-Model-DSM-column-store" class="headerlink" title="Decomposition Storage Model (DSM): column store"></a>Decomposition Storage Model (DSM): column store</h2><p>在DSM中，每一个字段(或每一列)都有拥有自己的page, 上面都是当前列的数据。</p><p><img data-src="/images/CMU1544564/Lec04/45.jpg" alt="45.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/46.jpg" alt="46.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/47.jpg" alt="47.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/49.jpg" alt="49.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/50.jpg" alt="50.jpg"></p><ul><li>上图中　Choice1是更好的主意，也更常见。适合每个字段的数据类型是<strong>等长的</strong>。</li></ul><p><img data-src="/images/CMU1544564/Lec04/51.jpg" alt="51.jpg"></p><ul><li>DSM将同一列中的数据存在一起，这些数据自然也属于同一个数据类型。这样处理起来对CPU cache更高效, 同时也带来了很多comrpession(压缩), materialized aggregate(small index for a page), SIMD指令的优化。</li></ul><p><img data-src="/images/CMU1544564/Lec04/52.jpg" alt="52.jpg"></p><ul><li>DSM Proposal - A Query Processing Strategy for the Decomposed Storage Model: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS8xMC41NTU1LzY0NTQ3Mi42NTU1NTU=" title="https://dl.acm.org/doi/10.5555/645472.655555">https://dl.acm.org/doi/10.5555/645472.655555<i class="fa fa-external-link"></i></span></li><li>大部分分析型的数据库都是用column store，它们采用的往往是DSM的现代变种</li><li>一个DSM的变种: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvZG93bmxvYWRzL3B1YmxpY2F0aW9ucy9kYXRhYmxvY2tzLnBkZg==" title="https://db.in.tum.de/downloads/publications/datablocks.pdf">Data Blocks: Hybrid OLTP and OLAP on Compressed Storage using both Vectorization and Compilation<i class="fa fa-external-link"></i></span></li></ul><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Row stores are usually better for OLTP, while column stores ar better for OLAP.</p><p>大部分现代数据库:</p><ul><li>Frontend: OLTP in client, 处理用户的事务</li><li>Backend: OLAP in Server, data warehouse　大数据分析所有用户的资料(比如订单)</li></ul><p>下面三页是来自<span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA1LWJ1ZmZlcnBvb2wucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/slides/05-bufferpool.pdf">Lec05<i class="fa fa-external-link"></i></span>, 在这节课最开始的时候，重新讲了这部分，我将这三页课件移动到这里。</p><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec05/3.jpg" alt="Lec5_3.jpg"></p><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec05/4.jpg" alt="Lec5_4.jpg"></p><ul><li>上图的客户端为传统的OLTP Data Silos，将数据发到Server - Data Warehouse(数据仓库)。Server端运行OLAP, 分析这些用户的信息。</li><li>ETL(Extract-Transform-Load)，将数据从来源端经过抽取extract、转换transform、加载load至目的端的过程。是一个常用在数据仓库的技术。Server短得到这些ETL后的数据，就可以运行OLAP Query或者数据挖掘等机器学习算法。</li></ul><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec05/5.jpg" alt="Lec5_5.jpg"></p><ul><li>上图的客户端有HTAP， 即客户端中运行TP和AP，再将在客户端中处理过的数据ETL至Server - Data Warehouse。</li></ul><p><br></p><p><img data-src="/images/CMU1544564/Lec04/53.jpg" alt="53.jpg"></p><p><img data-src="/images/CMU1544564/Lec04/54.jpg" alt="54.jpg"> </p><p>引用:</p><p><a name="fn1">1</a>: Database Storage - fxjwind: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZnhqd2luZC9wLzEwODE4ODE0Lmh0bWw=" title="https://www.cnblogs.com/fxjwind/p/10818814.html">https://www.cnblogs.com/fxjwind/p/10818814.html<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Database Storage Part II - 数据库存储  II&lt;/p&gt;
&lt;p&gt;Slide: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA0LXN0b3JhZ2UyLnBkZg==&quot; title=&quot;https://15445.courses.cs.cmu.edu/fall2019/slides/04-storage2.pdf&quot;&gt;https://15445.courses.cs.cmu.edu/fall2019/slides/04-storage2.pdf&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Note: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDQtc3RvcmFnZTIucGRm&quot; title=&quot;https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf&quot;&gt;https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这节两课，我们会学习数据库内部的存储。&lt;/p&gt;
&lt;p&gt;Database Storage 在CMU分成了两部分，在两节课中讲。这是第二部分。&lt;/p&gt;
&lt;p&gt;这部分设涉及基础数据类型的表示, OLAP, OLTP, HTAP, row-store (NSM), column store(DSM) 等等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Storage" scheme="https://cakebytheoceanluo.github.io/categories/Storage/"/>
    
      <category term="Disk Management" scheme="https://cakebytheoceanluo.github.io/categories/Disk-Management/"/>
    
    
      <category term="N-ary Storage Model" scheme="https://cakebytheoceanluo.github.io/tags/N-ary-Storage-Model/"/>
    
      <category term="Decomposition Storage Model" scheme="https://cakebytheoceanluo.github.io/tags/Decomposition-Storage-Model/"/>
    
      <category term="OLAP" scheme="https://cakebytheoceanluo.github.io/tags/OLAP/"/>
    
      <category term="OLTP" scheme="https://cakebytheoceanluo.github.io/tags/OLTP/"/>
    
      <category term="HTAP" scheme="https://cakebytheoceanluo.github.io/tags/HTAP/"/>
    
      <category term="Variable Precision Numbers" scheme="https://cakebytheoceanluo.github.io/tags/Variable-Precision-Numbers/"/>
    
      <category term="Fixed Precision Numbers" scheme="https://cakebytheoceanluo.github.io/tags/Fixed-Precision-Numbers/"/>
    
  </entry>
  
  <entry>
    <title>[DBMS]Postgres 浮点数，定点数 精度问题precision_numbers</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/16/DBMS-Postgres%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98precision-numbers/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/16/DBMS-Postgres%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98precision-numbers/</id>
    <published>2020-03-16T13:06:32.000Z</published>
    <updated>2020-03-17T16:03:25.529Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章服务于<a href="https://cakebytheoceanluo.github.io/2020/03/16/CMU-15445-Lec04/">[CMU-15445]Lec04</a></p><p>数据库中给小数(分数)有两种类型</p><ul><li>Variable Precision Numbers: 可变精度数字，可能有会rounding error</li><li>Fixed Precision Numbers: 定精度数字，在给定的精度下没有误差</li></ul><p>我们今天来看一看PostgreSQL中的这两种类型和它们可能产生的误差。</p><p>PostgreSQL中具体对应的数据类型是:</p><ul><li>Variable Precision Numbers: <code>REAL</code></li><li>Fixed Precision Numbers: <code>DECIMAL(precision, scale), NUMERIC(precision, scale)</code></li></ul><hr><p><code>DECIMAL(precision, scale)</code>:</p><ul><li><code>precision</code>: The <code>precision</code> must be positive. The <code>precision</code> of a <em>numeric</em> is the total count of significant digits in the whole number, that is, the number of digits to both sides of the decimal point.</li><li><code>scale</code>: The <code>scale</code> must be zero or positive.   The <code>scale</code> of a <em>numeric</em> is the count of decimal digits in the fractional part, to the right of the decimal point</li></ul><p>So the number 23.5141 has a precision of 6 and a scale of 4. Integers can be considered to have a scale of zero.</p><p>以上引用自: <span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjEvZGF0YXR5cGUtbnVtZXJpYy5odG1s" title="https://www.postgresql.org/docs/9.1/datatype-numeric.html">https://www.postgresql.org/docs/9.1/datatype-numeric.html<i class="fa fa-external-link"></i></span></p><a id="more"></a><hr><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec04/data_csv.png" alt="num_range"></p><p>上图为CMU-15445-Lec04课上的截图，内容是<code>data.csv</code>。实际上这只是一个随机生成的文件:</p><ul><li>一共10000000行</li><li>每行有两个数字，由<code>,</code>分隔开，每个数字是100以内的小数，并有6位小数部分</li></ul><h2 id="数据集faker"><a href="#数据集faker" class="headerlink" title="数据集faker"></a>数据集faker</h2><p>我用python写了一个类似的数据集faker:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000000</span>):</span><br><span class="line">    print(<span class="string">f'<span class="subst">{float(Decimal(random.randrange(<span class="number">0</span>, <span class="number">100000000</span>) / <span class="number">1000000</span>))}</span>,<span class="subst">{float(Decimal(random.randrange(<span class="number">0</span>, <span class="number">100000000</span>) / <span class="number">1000000</span>))}</span>'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载: <a href="https://cakebytheoceanluo.github.io/download/CMU15445/lec04_float_faker.py">lec04_float_faker.py</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./lec04_float_faker.py &gt; data.csv</span><br></pre></td></tr></tbody></table></figure><p>到现在我们获得了<code>data.csv</code>这个文件:</p><h2 id="数据集文件"><a href="#数据集文件" class="headerlink" title="数据集文件"></a>数据集文件</h2><p>我展示一些数据集文件信息：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ file data.csv </span><br><span class="line">data.csv: ASCII text</span><br><span class="line"></span><br><span class="line">$ ll data.csv</span><br><span class="line">-rw-rw-r-- 1 jigao jigao 195777640 Mar 11 19:17 data.csv</span><br><span class="line"></span><br><span class="line">$ shuf -n 5 data.csv </span><br><span class="line">66.798295,30.742821</span><br><span class="line">51.166558,51.72633</span><br><span class="line">87.780032,67.175637</span><br><span class="line">25.172411,70.619547</span><br><span class="line">12.432782,9.736797</span><br><span class="line"></span><br><span class="line">$ shuf -n 5 data.csv </span><br><span class="line">23.496402,68.946932</span><br><span class="line">6.035276,55.565444</span><br><span class="line">80.652459,83.420552</span><br><span class="line">69.633828,75.871921</span><br><span class="line">3.157022,43.588741</span><br></pre></td></tr></tbody></table></figure><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">testdb=# drop table <span class="keyword">if</span> <span class="built_in">exists</span> testreals;</span><br><span class="line">DROP TABLE</span><br><span class="line"></span><br><span class="line">testdb=# drop table <span class="keyword">if</span> <span class="built_in">exists</span> testdecimals;</span><br><span class="line">DROP TABLE</span><br><span class="line"></span><br><span class="line">testdb=# create table testreals (a REAL <span class="keyword">not</span> null, b REAL <span class="keyword">not</span> null);</span><br><span class="line">CREATE TABLE</span><br><span class="line"></span><br><span class="line">testdb=# create table testdecimals (a DECIMAL(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> null, b DECIMAL(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> null);</span><br><span class="line">CREATE TABLE</span><br><span class="line"></span><br><span class="line">testdb=# copy testreals from '/tmp/data.csv' delimiter ',' csv;</span><br><span class="line">COPY <span class="number">10000000</span></span><br><span class="line"></span><br><span class="line">testdb=# copy testdecimals from '/tmp/data.csv' delimiter ',' csv;</span><br><span class="line">COPY <span class="number">10000000</span></span><br><span class="line"></span><br><span class="line">testdb=# \timing</span><br><span class="line">Timing is on.</span><br><span class="line"></span><br><span class="line">testdb=# <span class="built_in">set</span> max_parallel_workers_per_gather = <span class="number">0</span>;</span><br><span class="line">SET</span><br></pre></td></tr></tbody></table></figure><ul><li><code>testreals</code>: Variable Precision Numbers, <code>REAL</code></li><li><code>testdecimals</code>: Fixed Precision Numbers, <code>DECIMAL(10, 6)</code></li><li><code>\timing</code>: 打开计时器</li><li><code>set max_parallel_workers_per_gather = 0;</code>: <span class="exturl" data-url="aHR0cHM6Ly9kYmEuc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzIyNjY1NC9ob3ctY2FuLWktZGlzYWJsZS1wYXJhbGxlbC1xdWVyaWVzLWluLXBvc3RncmVzcWw=" title="https://dba.stackexchange.com/questions/226654/how-can-i-disable-parallel-queries-in-postgresql">取消并行的query执行<i class="fa fa-external-link"></i></span>, 因为我们想看single CPU performance</li></ul><h1 id="REAL表格"><a href="#REAL表格" class="headerlink" title="REAL表格"></a><code>REAL</code>表格</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">testdb=# select sum(a+b) from testreals;</span><br><span class="line">     sum     </span><br><span class="line">-------------</span><br><span class="line"> <span class="number">1.00012e+09</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">384.460</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# select sum(a+b) from testreals;</span><br><span class="line">     sum     </span><br><span class="line">-------------</span><br><span class="line"> <span class="number">1.00013e+09</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">386.714</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# select cast(sum(a+b) as decimal) from testreals;</span><br><span class="line">    sum     </span><br><span class="line">------------</span><br><span class="line"> <span class="number">1000120000</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">535.749</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# select cast(sum(a+b) as decimal) from testreals;</span><br><span class="line">    sum     </span><br><span class="line">------------</span><br><span class="line"> <span class="number">1000110000</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">943.324</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# explain select sum(a+b) from testreals;</span><br><span class="line">                                QUERY PLAN                                </span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">194247.66</span>.<span class="number">.194247</span><span class="number">.67</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">4</span>)</span><br><span class="line">   -&gt;  <span class="function">Seq Scan on <span class="title">testreals</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.144247</span><span class="number">.77</span> rows=<span class="number">9999977</span> <span class="built_in">width</span>=<span class="number">8</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">2</span> rows)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">Time: 2.369 ms</span><br><span class="line"></span><br><span class="line">testdb=# explain analyze select sum(a+b) from testreals;</span><br><span class="line">                                                         QUERY PLAN                                                          </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">194247.66</span>.<span class="number">.194247</span><span class="number">.67</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">4</span>) (actual time=<span class="number">1598.636</span>.<span class="number">.1598</span><span class="number">.636</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">   -&gt;  <span class="function">Seq Scan on <span class="title">testreals</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.144247</span><span class="number">.77</span> rows=<span class="number">9999977</span> <span class="built_in">width</span>=<span class="number">8</span>)</span> <span class="params">(actual time=<span class="number">0.036</span>.<span class="number">.705</span><span class="number">.511</span> rows=<span class="number">10000000</span> loops=<span class="number">1</span>)</span></span></span><br><span class="line"> Planning time: 0.025 ms</span><br><span class="line"> Execution time: <span class="number">1598.656</span> ms</span><br><span class="line">(<span class="number">4</span> rows)</span><br></pre></td></tr></tbody></table></figure><ul><li>我们多次执行同一条指令<code>select sum(a+b) from testreals;</code>，前后有几率出现不一样的数值。这原因就是因为rounding error。同样的情况也出现在<code>select cast(sum(a+b) as decimal) from testreals;</code></li><li><code>explain &lt;sql&gt;</code>: 给出对应的query plan</li><li><code>explain analyze &lt;sql&gt;</code>: : 给出对应的query plan + 执行sql</li></ul><h1 id="DECIMAL表格"><a href="#DECIMAL表格" class="headerlink" title="DECIMAL表格"></a><code>DECIMAL</code>表格</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">testdb=# select sum(a+b) from testdecimals;</span><br><span class="line">        sum        </span><br><span class="line">-------------------</span><br><span class="line"> <span class="number">1000169047.417319</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">1175.335</span> ms (<span class="number">00</span>:<span class="number">01.175</span>)</span><br><span class="line"></span><br><span class="line">testdb=# explain select sum(a+b) from testdecimals;</span><br><span class="line">                                            QUERY PLAN                                             </span><br><span class="line">---------------------------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Finalize <span class="title">Aggregate</span>  <span class="params">(cost=<span class="number">126949.30</span>.<span class="number">.126949</span><span class="number">.31</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">32</span>)</span></span></span><br><span class="line">   -&gt;  Gather  (cost=126949.08..126949.29 rows=2 width=32)</span><br><span class="line">         Workers Planned: <span class="number">2</span></span><br><span class="line">         -&gt;  <span class="function">Partial <span class="title">Aggregate</span>  <span class="params">(cost=<span class="number">125949.08</span>.<span class="number">.125949</span><span class="number">.09</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">32</span>)</span></span></span><br><span class="line">               -&gt;  Parallel Seq Scan on testdecimals  (cost=0.00..105116.05 rows=4166605 width=16)</span><br><span class="line">(<span class="number">5</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.295</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# explain analyze select sum(a+b) from testdecimals;</span><br><span class="line">                                                                     QUERY PLAN                                                                      </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Finalize <span class="title">Aggregate</span>  <span class="params">(cost=<span class="number">126949.30</span>.<span class="number">.126949</span><span class="number">.31</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">32</span>)</span> <span class="params">(actual time=<span class="number">1382.202</span>.<span class="number">.1382</span><span class="number">.202</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span></span></span><br><span class="line">   -&gt;  Gather  (cost=126949.08..126949.29 rows=2 width=32) (actual time=1382.191..1384.527 rows=3 loops=1)</span><br><span class="line">         Workers Planned: <span class="number">2</span></span><br><span class="line">         Workers Launched: <span class="number">2</span></span><br><span class="line">         -&gt;  <span class="function">Partial <span class="title">Aggregate</span>  <span class="params">(cost=<span class="number">125949.08</span>.<span class="number">.125949</span><span class="number">.09</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">32</span>)</span> <span class="params">(actual time=<span class="number">1380.379</span>.<span class="number">.1380</span><span class="number">.379</span> rows=<span class="number">1</span> loops=<span class="number">3</span>)</span></span></span><br><span class="line">               -&gt;  Parallel Seq Scan on testdecimals  (cost=0.00..105116.05 rows=4166605 width=16) (actual time=0.023..310.259 rows=3333333 loops=3)</span><br><span class="line"> Planning time: <span class="number">0.034</span> ms</span><br><span class="line"> Execution time: <span class="number">1384.563</span> ms</span><br><span class="line">(<span class="number">8</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">1384.835</span> ms (<span class="number">00</span>:<span class="number">01.385</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li><code>select sum(a+b) from testdecimals;</code>无论我们执行多少次，出现的结果都是一样的。</li></ul><p>推荐阅读：</p><p>8.1. Numeric Types - Documentation of PostgreSQL 9.1: <span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjEvZGF0YXR5cGUtbnVtZXJpYy5odG1s" title="https://www.postgresql.org/docs/9.1/datatype-numeric.html">https://www.postgresql.org/docs/9.1/datatype-numeric.html<i class="fa fa-external-link"></i></span></p><p>How can I disable parallel queries in PostgreSQL? - Stackoverflow: <span class="exturl" data-url="aHR0cHM6Ly9kYmEuc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzIyNjY1NC9ob3ctY2FuLWktZGlzYWJsZS1wYXJhbGxlbC1xdWVyaWVzLWluLXBvc3RncmVzcWw=" title="https://dba.stackexchange.com/questions/226654/how-can-i-disable-parallel-queries-in-postgresql">https://dba.stackexchange.com/questions/226654/how-can-i-disable-parallel-queries-in-postgresql<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章服务于&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/16/CMU-15445-Lec04/&quot;&gt;[CMU-15445]Lec04&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数据库中给小数(分数)有两种类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variable Precision Numbers: 可变精度数字，可能有会rounding error&lt;/li&gt;
&lt;li&gt;Fixed Precision Numbers: 定精度数字，在给定的精度下没有误差&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们今天来看一看PostgreSQL中的这两种类型和它们可能产生的误差。&lt;/p&gt;
&lt;p&gt;PostgreSQL中具体对应的数据类型是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variable Precision Numbers: &lt;code&gt;REAL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fixed Precision Numbers: &lt;code&gt;DECIMAL(precision, scale), NUMERIC(precision, scale)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;DECIMAL(precision, scale)&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;precision&lt;/code&gt;: The &lt;code&gt;precision&lt;/code&gt; must be positive. The &lt;code&gt;precision&lt;/code&gt; of a &lt;em&gt;numeric&lt;/em&gt; is the total count of significant digits in the whole number, that is, the number of digits to both sides of the decimal point.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale&lt;/code&gt;: The &lt;code&gt;scale&lt;/code&gt; must be zero or positive.   The &lt;code&gt;scale&lt;/code&gt; of a &lt;em&gt;numeric&lt;/em&gt; is the count of decimal digits in the fractional part, to the right of the decimal point&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the number 23.5141 has a precision of 6 and a scale of 4. Integers can be considered to have a scale of zero.&lt;/p&gt;
&lt;p&gt;以上引用自: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjEvZGF0YXR5cGUtbnVtZXJpYy5odG1s&quot; title=&quot;https://www.postgresql.org/docs/9.1/datatype-numeric.html&quot;&gt;https://www.postgresql.org/docs/9.1/datatype-numeric.html&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="Disk Management" scheme="https://cakebytheoceanluo.github.io/categories/Disk-Management/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/categories/PostgreSQL/"/>
    
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>[DBMS]PostgreSQL导入数据集</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/</id>
    <published>2020-03-15T19:28:22.000Z</published>
    <updated>2020-03-16T16:05:11.141Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了几种数据集，以及导入它们到PostgreSQL的方法，另外也提了一下如何查看数据集信息的命令。这些数据集都会在我的博客中<a href="https://cakebytheoceanluo.github.io/categories/SQL/">SQL 初级/中级/高级部分</a>出现。</p><h1 id="查看数据集信息的命令"><a href="#查看数据集信息的命令" class="headerlink" title="查看数据集信息的命令"></a>查看数据集信息的命令</h1><p>我们可以在psql环境中输入：</p><ul><li><code>\d;</code>, <code>\d+;</code> 可以查看当前数据库中的表格</li><li><code>\d &lt;table_name&gt;;</code>, <code>\d+ &lt;table_name&gt;;</code>: 可以查看对应表格的schema</li></ul><p><br></p><p>另外我们也可以在<strong>命令行</strong>中输入：</p><ul><li><code>psql -d testdb -c '\d'</code></li><li><code>psql -d testdb -c '\d+'</code></li><li><code>psql -d testdb -c '\d &lt;table_name&gt;'</code></li><li><code>psql -d testdb -c '\d+ &lt;table_name&gt;'</code></li></ul><p>另外有关PostgreSQL的安装和配置见我的另外一篇文章: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/">[DBMS] PostgreSQL 安装与配置</a></p><a id="more"></a><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><h2 id="TUM-Uni数据集"><a href="#TUM-Uni数据集" class="headerlink" title="TUM Uni数据集"></a>TUM Uni数据集</h2><p><img data-src="https://db.in.tum.de/teaching/ws1920/grundlagen/uni.png?lang=de" alt="schema_de"></p><p><img data-src="https://hyper-db.de/uniEngl.png" alt="schema_en"></p><p>Schma来自<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL2tlbXBlci8/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/kemper/?lang=de">Prof. Alfons Kemper, Ph.D.<i class="fa fa-external-link"></i></span>的课件和书。是一个很小的数据集， 关于学生教授大学课程考试等等表格。这个数据集很适合用来学习，练习SQL。我对这个数据集写了很多文章，提供SQL的练习，大家可以去<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMTYxODQ2MQ==" title="https://segmentfault.com/a/1190000021618461">我的专栏目录<i class="fa fa-external-link"></i></span>去寻找。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql</span><br><span class="line">$ psql testdb &lt; uni_mysql.sql</span><br><span class="line">$ psql testdb <span class="comment"># 然后我们就进入这个testdb，可以对这些表格进行操作了。</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                        List of relations</span><br><span class="line"> Schema |     Name     | Type  | Owner |    Size    | Description </span><br><span class="line">--------+--------------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | assistenten  | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | hoeren       | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | professoren  | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | pruefen      | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | studenten    | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | voraussetzen | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | vorlesungen  | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line">(<span class="number">7</span> rows)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ studenten;</span><br><span class="line">                                         Table <span class="string">"public.studenten"</span></span><br><span class="line">  Column  |         Type          | Collation | Nullable | Default | Storage  | Stats target | Description </span><br><span class="line">----------+-----------------------+-----------+----------+---------+----------+--------------+-------------</span><br><span class="line"> matrnr   | integer               |           | <span class="keyword">not</span> null |         | plain    |              | </span><br><span class="line"> name     | character varying(30) |           | not null |         | extended |              | </span><br><span class="line"> semester | integer               |           |          |         | plain    |              | </span><br><span class="line">Indexes:</span><br><span class="line">    <span class="string">"studenten_pkey"</span> PRIMARY KEY, btree (matrnr)</span><br><span class="line">Referenced by:</span><br><span class="line">    TABLE <span class="string">"hoeren"</span> CONSTRAINT <span class="string">"hoeren_matrnr_fkey"</span> <span class="function">FOREIGN <span class="title">KEY</span> <span class="params">(matrnr)</span> REFERENCES <span class="title">studenten</span><span class="params">(matrnr)</span> ON DELETE CASCADE</span></span><br><span class="line">    TABLE "pruefen" CONSTRAINT "pruefen_matrnr_fkey" FOREIGN KEY (matrnr) REFERENCES studenten(matrnr) ON DELETE CASCADE</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="TUM-十项全能比赛数据集"><a href="#TUM-十项全能比赛数据集" class="headerlink" title="TUM 十项全能比赛数据集"></a>TUM 十项全能比赛数据集</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vc3FsX3plaG5rYW1wZl9kaXN6aXBsaW4uc3FsP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/grundlagen/sql_zehnkampf_disziplin.sql?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/sql_zehnkampf_disziplin.sql?lang=de<i class="fa fa-external-link"></i></span></p><p>这里我把schema改写成英文：<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ZehnkampfD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ZehnkampfD (</span><br><span class="line">    <span class="keyword">Name</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    Discipline <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    points <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ZehnkampfD <span class="keyword">values</span></span><br><span class="line">    (<span class="string">'Bolt'</span>,        <span class="string">'100m'</span>,         <span class="number">50</span>),</span><br><span class="line">    (<span class="string">'Bolt'</span>,        <span class="string">'Weitsprung'</span>,   <span class="number">50</span>),</span><br><span class="line">    (<span class="string">'Eaton'</span>,       <span class="string">'100m'</span>,         <span class="number">40</span>),</span><br><span class="line">    (<span class="string">'Eaton'</span>,       <span class="string">'Weitsprung'</span>,   <span class="number">60</span>),</span><br><span class="line">    (<span class="string">'Suarez'</span>,      <span class="string">'100m'</span>,         <span class="number">60</span>),</span><br><span class="line">    (<span class="string">'Suarez'</span>,      <span class="string">'Weitsprung'</span>,   <span class="number">60</span>),</span><br><span class="line">    (<span class="string">'Behrenbruch'</span>, <span class="string">'100m'</span>,         <span class="number">30</span>),</span><br><span class="line">    (<span class="string">'Behrenbruch'</span>, <span class="string">'Weitsprung'</span>,   <span class="number">50</span>)</span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure><p></p><p>再把这几行写入文件<code>ZehnkampfD.sql</code>，载入数据库<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里testdb应该是另外一个新建的 没有载入数据的数据库</span></span><br><span class="line">$ psql testdb &lt; ZehnkampfD.sql</span><br><span class="line">$ psql testdb <span class="comment"># 然后我们就进入这个testdb，可以对这些表格进行操作了。</span></span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                       List of relations</span><br><span class="line"> Schema |    Name    | Type  | Owner |    Size    | Description </span><br><span class="line">--------+------------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | zehnkampfd | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ zehnkampfd;</span><br><span class="line">                                          Table <span class="string">"public.zehnkampfd"</span></span><br><span class="line">  Column   |          Type          | Collation | Nullable | Default | Storage  | Stats target | Description </span><br><span class="line">-----------+------------------------+-----------+----------+---------+----------+--------------+-------------</span><br><span class="line"> name      | character varying(100) |           | not null |         | extended |              | </span><br><span class="line"> disziplin | character varying(100) |           | not null |         | extended |              | </span><br><span class="line"> punkte    | integer                |           | <span class="keyword">not</span> null |         | plain    |              |</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="TUM-公共交通数据集"><a href="#TUM-公共交通数据集" class="headerlink" title="TUM 公共交通数据集"></a>TUM 公共交通数据集</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vc3FsX2ZhaHJwbGFuLnNxbD9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/sql_fahrplan.sql?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/sql_fahrplan.sql?lang=de<i class="fa fa-external-link"></i></span></p><p>这里我把schema改写成英文：<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> Fahrplan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Fahrplan (</span><br><span class="line">    From_ <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    To_ <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    Line_ <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    depart <span class="built_in">TIME</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    arrival <span class="built_in">TIME</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Fahrplan <span class="keyword">values</span></span><br><span class="line">    (<span class="string">'Garching, Forschungszentrum'</span>,     <span class="string">'Garching'</span>,                     <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:06:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:09:00'</span>),</span><br><span class="line">    (<span class="string">'Garching'</span>,                        <span class="string">'Garching-Hochbrück'</span>,           <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:09:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:11:00'</span>),</span><br><span class="line">    (<span class="string">'Garching-Hochbrück'</span>,              <span class="string">'Fröttmaning'</span>,                  <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:11:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:15:00'</span>),</span><br><span class="line">    (<span class="string">'Garching'</span>,                        <span class="string">'Garching, Forschungszentrum'</span>,  <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:06:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:09:00'</span>),</span><br><span class="line">    (<span class="string">'Garching-Hochbrück'</span>,              <span class="string">'Garching'</span>,                     <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:04:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:06:00'</span>),</span><br><span class="line">    (<span class="string">'Fröttmaning'</span>,                     <span class="string">'Garching-Hochbrück'</span>,           <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:00:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:04:00'</span>),</span><br><span class="line">    (<span class="string">'Garching, Forschungszentrum'</span>,     <span class="string">'Technische Universität'</span>,       <span class="string">'690'</span>, <span class="built_in">TIME</span> <span class="string">'17:56:00'</span>, <span class="built_in">TIME</span> <span class="string">'17:57:00'</span>)</span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure><p></p><p>再把这几行写入文件<code>Fahrplan.sql</code>，载入数据库<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里testdb应该是另外一个新建的 没有载入数据的数据库</span></span><br><span class="line">$ psql testdb &lt; Fahrplan.sql</span><br><span class="line">$ psql testdb <span class="comment"># 然后我们就进入这个testdb，可以对这些表格进行操作了。</span></span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">testdb=# \d+;</span><br><span class="line">                      List of relations</span><br><span class="line"> Schema |   Name   | Type  | Owner |    Size    | Description </span><br><span class="line">--------+----------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | fahrplan | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ fahrplan;</span><br><span class="line">                                          Table <span class="string">"public.fahrplan"</span></span><br><span class="line"> Column  |          Type          | Collation | Nullable | Default | Storage  | Stats target | Description </span><br><span class="line">---------+------------------------+-----------+----------+---------+----------+--------------+-------------</span><br><span class="line"> von     | character varying(100) |           | not null |         | extended |              | </span><br><span class="line"> nach    | character varying(100) |           | not null |         | extended |              | </span><br><span class="line"> linie   | character varying(10)  |           | not null |         | extended |              | </span><br><span class="line"> abfahrt | time without time zone |           | <span class="keyword">not</span> null |         | plain    |              | </span><br><span class="line"> ankunft | time without time zone |           | <span class="keyword">not</span> null |         | plain    |              |</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="TPC-H"><a href="#TPC-H" class="headerlink" title="TPC-H"></a>TPC-H</h2><p>我单独写了一篇文章，见我的博客: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5TPC-H%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS]PostgreSQL导入TPC-H数据集</a></p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                        List of relations</span><br><span class="line"> Schema |     Name     | Type  | Owner |    Size    | Description </span><br><span class="line">--------+--------------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | customer     | table | jigao | <span class="number">28</span> MB      | </span><br><span class="line"> <span class="keyword">public</span> | lineitem     | table | jigao | <span class="number">879</span> MB     | </span><br><span class="line"> <span class="keyword">public</span> | nation       | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | orders       | table | jigao | <span class="number">204</span> MB     | </span><br><span class="line"> <span class="keyword">public</span> | part         | table | jigao | <span class="number">32</span> MB      | </span><br><span class="line"> <span class="keyword">public</span> | partsupp     | table | jigao | <span class="number">136</span> MB     | </span><br><span class="line"> <span class="keyword">public</span> | region       | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | supplier     | table | jigao | <span class="number">1800</span> kB    | </span><br><span class="line">(<span class="number">8</span> rows)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ customer;</span><br><span class="line">                                            Table <span class="string">"public.customer"</span></span><br><span class="line">    Column    |          Type          | Collation | Nullable | Default | Storage  | Stats target | Description </span><br><span class="line">--------------+------------------------+-----------+----------+---------+----------+--------------+-------------</span><br><span class="line"> c_custkey    | integer                |           | <span class="keyword">not</span> null |         | plain    |              | </span><br><span class="line"> c_name       | character varying(25)  |           | not null |         | extended |              | </span><br><span class="line"> c_address    | character varying(40)  |           | not null |         | extended |              | </span><br><span class="line"> c_nationkey  | integer                |           | <span class="keyword">not</span> null |         | plain    |              | </span><br><span class="line"> c_phone      | character(<span class="number">15</span>)          |           | <span class="keyword">not</span> null |         | extended |              | </span><br><span class="line"> c_acctbal    | numeric(<span class="number">15</span>,<span class="number">2</span>)          |           | <span class="keyword">not</span> null |         | main     |              | </span><br><span class="line"> c_mktsegment | character(<span class="number">10</span>)          |           | <span class="keyword">not</span> null |         | extended |              | </span><br><span class="line"> c_comment    | character varying(117) |           | not null |         | extended |              |</span><br></pre></td></tr></tbody></table></figure><h2 id="IMDb-数据集"><a href="#IMDb-数据集" class="headerlink" title="IMDb 数据集"></a>IMDb 数据集</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iconv -f latin1 -t utf-8 actorsTrimmed.list &gt; actorsUtf8.list </span><br><span class="line"></span><br><span class="line">sed -r -e <span class="string">'s/\t+/|/g'</span> -e <span class="string">'s/((\s*)|(\{.*\})|(\[.*\])|(&lt;.*&gt;)|\(.*[a-zA-Z].*\))*$//g'</span> actorsUtf8.list | awk -F <span class="string">'|'</span>  <span class="string">'{if($1 != "") { actor = $1 }; if ($2) print actor "|" $2 }'</span> &gt; actors.csv</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 这里testdb应该是另外一个新建的 没有载入数据的数据库</span><br><span class="line">$ psql testdb # 然后我们就进入这个testdb，可以对这些表格进行操作了。</span><br><span class="line"></span><br><span class="line">testdb=# create table playedin_text (actor_name <span class="built_in">text</span> <span class="keyword">not</span> null, movie_name <span class="built_in">text</span> <span class="keyword">not</span> null);</span><br><span class="line"></span><br><span class="line">testdb=# \copy playedin_text from actors.csv delimiter <span class="string">'|'</span>;</span><br><span class="line"></span><br><span class="line">testdb=# create index on playedin (actor); </span><br><span class="line"></span><br><span class="line">testdb=# create index on playedin (movie);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                          List of relations</span><br><span class="line"> Schema |     Name      |   Type   | Owner |    Size    | Description </span><br><span class="line">--------+---------------+----------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | actors        | table    | jigao | <span class="number">98</span> MB      | </span><br><span class="line"> <span class="keyword">public</span> | actors_id_seq | sequence | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | movies        | table    | jigao | <span class="number">66</span> MB      | </span><br><span class="line"> <span class="keyword">public</span> | movies_id_seq | sequence | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | playedin      | table    | jigao | <span class="number">599</span> MB     | </span><br><span class="line"> <span class="keyword">public</span> | playedin_text | table    | jigao | <span class="number">1183</span> MB    | </span><br><span class="line">(<span class="number">6</span> rows)</span><br><span class="line"></span><br><span class="line">testdb=# \d actors</span><br><span class="line">                            Table <span class="string">"public.actors"</span></span><br><span class="line"> Column |  Type   | Collation | Nullable |              Default               </span><br><span class="line">--------+---------+-----------+----------+------------------------------------</span><br><span class="line"> id     | integer |           | not null | nextval('actors_id_seq'::regclass)</span><br><span class="line"> name   | <span class="built_in">text</span>    |           | <span class="keyword">not</span> null | </span><br><span class="line">Indexes:</span><br><span class="line">    <span class="string">"actors_pkey"</span> PRIMARY KEY, btree (id)</span><br><span class="line">Referenced by:</span><br><span class="line">    TABLE <span class="string">"playedin"</span> CONSTRAINT <span class="string">"playedin_actor_fkey"</span> <span class="function">FOREIGN <span class="title">KEY</span> <span class="params">(actor)</span> REFERENCES <span class="title">actors</span><span class="params">(id)</span></span></span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="CMU-15445-歌手数据集"><a href="#CMU-15445-歌手数据集" class="headerlink" title="CMU-15445 歌手数据集"></a>CMU-15445 歌手数据集</h2><p>这个数据集在CMU-15445 Lec2 Advanced SQL中使用，见我的两篇博客笔记:</p><ul><li><a href="https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part1/">[CMU-15445]Lec02_part1</a></li><li><a href="https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part2/">[CMU-15445]Lec02_part2</a></li></ul><p><img data-src="/images/CMU1544564/Lec02/7.jpg" alt="7.jpg"></p><p>对应的SQL语句　<a href="https://cakebytheoceanluo.github.io/download/CMU15445/lec02_schema.sql">下载</a>：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> student <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> course <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> enrolled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student </span><br><span class="line">   (<span class="keyword">sid</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">16</span>), </span><br><span class="line">    login <span class="built_in">varchar</span>(<span class="number">32</span>), </span><br><span class="line">    age <span class="built_in">smallint</span>, </span><br><span class="line">    gpa <span class="built_in">numeric</span>(<span class="number">2</span>, <span class="number">1</span>) <span class="keyword">check</span> (gpa <span class="keyword">between</span> <span class="number">0.0</span> <span class="keyword">and</span> <span class="number">4.0</span>)</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course </span><br><span class="line">   (cid <span class="built_in">varchar</span>(<span class="number">32</span>) primary <span class="keyword">key</span>, </span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> enrolled </span><br><span class="line">   (<span class="keyword">sid</span> <span class="built_in">int</span> <span class="keyword">references</span> student (<span class="keyword">sid</span>) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>, </span><br><span class="line">    cid <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">references</span> course (cid) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>, </span><br><span class="line">    grade <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">check</span> (grade <span class="keyword">in</span> (<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>)),</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="keyword">sid</span>, cid)</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (<span class="keyword">sid</span>, <span class="keyword">name</span>, login, age, gpa) <span class="keyword">values</span> (<span class="number">53666</span>, <span class="string">'Kanye'</span>, <span class="string">'kanye@cs'</span>, <span class="number">39</span>, <span class="number">4.0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (<span class="keyword">sid</span>, <span class="keyword">name</span>, login, age, gpa) <span class="keyword">values</span> (<span class="number">53688</span>, <span class="string">'Bieber'</span>, <span class="string">'jbieber@cs'</span>, <span class="number">22</span>, <span class="number">3.9</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (<span class="keyword">sid</span>, <span class="keyword">name</span>, login, age, gpa) <span class="keyword">values</span> (<span class="number">53655</span>, <span class="string">'Tupac'</span>, <span class="string">'shakur@cs'</span>, <span class="number">26</span>, <span class="number">3.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course (cid, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'15-445'</span>, <span class="string">'Database Systems'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course (cid, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'15-721'</span>, <span class="string">'Advanced Database Systems'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course (cid, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'15-826'</span>, <span class="string">'Data Mining'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course (cid, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'15-823'</span>, <span class="string">'Advanced Topics in Databases'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53666</span>, <span class="string">'15-445'</span>, <span class="string">'C'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53688</span>, <span class="string">'15-721'</span>, <span class="string">'A'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53666</span>, <span class="string">'15-826'</span>, <span class="string">'B'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53655</span>, <span class="string">'15-445'</span>, <span class="string">'B'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53666</span>, <span class="string">'15-721'</span>, <span class="string">'C'</span>);</span><br></pre></td></tr></tbody></table></figure><ul><li>可以在PostgreSQL, MySQL, SQLite中使用</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://cakebytheoceanluo.github.io/download/CMU15445/lec02_schema.sql</span><br><span class="line">$ psql testdb &lt; uni_mysql.sql</span><br><span class="line">$ psql testdb <span class="comment"># 然后我们就进入这个testdb，可以对这些表格进行操作了。</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                        List of relations</span><br><span class="line"> Schema |     Name     | Type  | Owner |    Size    | Description </span><br><span class="line">--------+--------------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | course       | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | enrolled     | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | student      | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line">(<span class="number">3</span> rows)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ enrolled</span><br><span class="line">                                         Table <span class="string">"public.enrolled"</span></span><br><span class="line"> Column |         Type          | Collation | Nullable | Default | Storage  | Stats target | Description </span><br><span class="line">--------+-----------------------+-----------+----------+---------+----------+--------------+-------------</span><br><span class="line"> sid    | integer               |           | <span class="keyword">not</span> null |         | plain    |              | </span><br><span class="line"> cid    | character varying(<span class="number">32</span>) |           | <span class="keyword">not</span> null |         | extended |              | </span><br><span class="line"> grade  | character(<span class="number">1</span>)          |           |          |         | extended |              | </span><br><span class="line">Indexes:</span><br><span class="line">    <span class="string">"enrolled_pkey"</span> PRIMARY KEY, btree (sid, cid)</span><br><span class="line">Check constraints:</span><br><span class="line">    <span class="string">"enrolled_grade_check"</span> CHECK (grade = ANY (ARRAY[<span class="string">'A'</span>::bpchar, <span class="string">'B'</span>::bpchar, <span class="string">'C'</span>::bpchar]))</span><br><span class="line">Foreign-key constraints:</span><br><span class="line">    <span class="string">"enrolled_cid_fkey"</span> FOREIGN KEY (cid) REFERENCES course(cid) ON DELETE CASCADE</span><br><span class="line">    <span class="string">"enrolled_sid_fkey"</span> FOREIGN KEY (sid) REFERENCES student(sid) ON DELETE CASCADE</span><br></pre></td></tr></tbody></table></figure><p><br></p><h2 id="CMU-15445-分数数据集-Mock"><a href="#CMU-15445-分数数据集-Mock" class="headerlink" title="CMU-15445 分数数据集 (Mock)"></a>CMU-15445 分数数据集 (Mock)</h2><p>更多关于这个数据集，见这个实验<a href="https://cakebytheoceanluo.github.io/2020/03/16/DBMS-Postgres%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98precision-numbers/">[DBMS] Postgres 精度问题 precision_numbers</a></p><p>这个实验服务于<a href="https://cakebytheoceanluo.github.io/2020/03/16/CMU-15445-Lec04/">[CMU-15445]Lec04</a></p><h3 id="数据集faker"><a href="#数据集faker" class="headerlink" title="数据集faker"></a>数据集faker</h3><p>我用python写了一个类似的数据集faker:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000000</span>):</span><br><span class="line">    print(<span class="string">f'<span class="subst">{float(Decimal(random.randrange(<span class="number">0</span>, <span class="number">100000000</span>) / <span class="number">1000000</span>))}</span>,<span class="subst">{float(Decimal(random.randrange(<span class="number">0</span>, <span class="number">100000000</span>) / <span class="number">1000000</span>))}</span>'</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>下载: <a href="https://cakebytheoceanluo.github.io/download/CMU15445/lec04_float_faker.py">lec04_float_faker.py</a></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>使用:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./lec04_float_faker.py &gt; data.csv</span><br></pre></td></tr></tbody></table></figure><p>到现在我们获得了<code>data.csv</code>这个文件:</p><h3 id="导入数据集"><a href="#导入数据集" class="headerlink" title="导入数据集"></a>导入数据集</h3><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> testreals;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> testdecimals;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> testreals (a <span class="built_in">REAL</span> <span class="keyword">not</span> <span class="literal">null</span>, b <span class="built_in">REAL</span> <span class="keyword">not</span> <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> testdecimals (a <span class="built_in">DECIMAL</span>(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> <span class="literal">null</span>, b <span class="built_in">DECIMAL</span>(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> <span class="literal">null</span>);</span><br><span class="line">copy testreals from '/tmp/data.csv' delimiter ',' csv;</span><br><span class="line">copy testdecimals from '/tmp/data.csv' delimiter ',' csv;</span><br></pre></td></tr></tbody></table></figure><h4 id="输出例子"><a href="#输出例子" class="headerlink" title="输出例子"></a>输出例子</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">testdb=# drop table <span class="keyword">if</span> <span class="built_in">exists</span> testreals;</span><br><span class="line">DROP TABLE</span><br><span class="line"></span><br><span class="line">testdb=# drop table <span class="keyword">if</span> <span class="built_in">exists</span> testdecimals;</span><br><span class="line">DROP TABLE</span><br><span class="line"></span><br><span class="line">testdb=# create table testreals (a REAL <span class="keyword">not</span> null, b REAL <span class="keyword">not</span> null);</span><br><span class="line">CREATE TABLE</span><br><span class="line"></span><br><span class="line">testdb=# create table testdecimals (a DECIMAL(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> null, b DECIMAL(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> null);</span><br><span class="line">CREATE TABLE</span><br><span class="line"></span><br><span class="line">testdb=# copy testreals from '/tmp/data.csv' delimiter ',' csv;</span><br><span class="line">COPY <span class="number">10000000</span></span><br><span class="line"></span><br><span class="line">testdb=# copy testdecimals from '/tmp/data.csv' delimiter ',' csv;</span><br><span class="line">COPY <span class="number">10000000</span></span><br></pre></td></tr></tbody></table></figure><p><br></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                        List of relations</span><br><span class="line"> Schema |     Name     | Type  | Owner |    Size    | Description </span><br><span class="line">--------+--------------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | testdecimals | table | jigao | <span class="number">496</span> MB     | </span><br><span class="line"> <span class="keyword">public</span> | testreals    | table | jigao | <span class="number">346</span> MB     | </span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ testreals </span><br><span class="line">                               Table <span class="string">"public.testreals"</span></span><br><span class="line"> Column | Type | Collation | Nullable | Default | Storage | Stats target | Description </span><br><span class="line">--------+------+-----------+----------+---------+---------+--------------+-------------</span><br><span class="line"> a      | real |           | <span class="keyword">not</span> null |         | plain   |              | </span><br><span class="line"> b      | real |           | <span class="keyword">not</span> null |         | plain   |              | </span><br><span class="line"></span><br><span class="line">testdb=# \d+ testdecimals </span><br><span class="line">                                  Table <span class="string">"public.testdecimals"</span></span><br><span class="line"> Column |     Type      | Collation | Nullable | Default | Storage | Stats target | Description </span><br><span class="line">--------+---------------+-----------+----------+---------+---------+--------------+-------------</span><br><span class="line"> a      | numeric(<span class="number">10</span>,<span class="number">6</span>) |           | <span class="keyword">not</span> null |         | main    |              | </span><br><span class="line"> b      | numeric(<span class="number">10</span>,<span class="number">6</span>) |           | <span class="keyword">not</span> null |         | main    |              |</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了几种数据集，以及导入它们到PostgreSQL的方法，另外也提了一下如何查看数据集信息的命令。这些数据集都会在我的博客中&lt;a href=&quot;https://cakebytheoceanluo.github.io/categories/SQL/&quot;&gt;SQL 初级/中级/高级部分&lt;/a&gt;出现。&lt;/p&gt;
&lt;h1 id=&quot;查看数据集信息的命令&quot;&gt;&lt;a href=&quot;#查看数据集信息的命令&quot; class=&quot;headerlink&quot; title=&quot;查看数据集信息的命令&quot;&gt;&lt;/a&gt;查看数据集信息的命令&lt;/h1&gt;&lt;p&gt;我们可以在psql环境中输入：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\d;&lt;/code&gt;, &lt;code&gt;\d+;&lt;/code&gt; 可以查看当前数据库中的表格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\d &amp;lt;table_name&amp;gt;;&lt;/code&gt;, &lt;code&gt;\d+ &amp;lt;table_name&amp;gt;;&lt;/code&gt;: 可以查看对应表格的schema&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;另外我们也可以在&lt;strong&gt;命令行&lt;/strong&gt;中输入：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;psql -d testdb -c &#39;\d&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;psql -d testdb -c &#39;\d+&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;psql -d testdb -c &#39;\d &amp;lt;table_name&amp;gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;psql -d testdb -c &#39;\d+ &amp;lt;table_name&amp;gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外有关PostgreSQL的安装和配置见我的另外一篇文章: &lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/&quot;&gt;[DBMS] PostgreSQL 安装与配置&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/categories/PostgreSQL/"/>
    
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>[DBMS]PostgreSQL导入TPC-H数据集</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5TPC-H%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5TPC-H%E6%95%B0%E6%8D%AE%E9%9B%86/</id>
    <published>2020-03-15T17:51:21.000Z</published>
    <updated>2020-03-15T19:36:38.354Z</updated>
    
    <content type="html"><![CDATA[<p>本文关注如何将TPC-H数据集导入至PostgreSQL, 同时简单提一下如何生成TPC-H数据。</p><h1 id="TPC-H介绍"><a href="#TPC-H介绍" class="headerlink" title="TPC-H介绍"></a>TPC-H介绍</h1><blockquote><p>TPC-H is a Decision Support Benchmark. The TPC Benchmark™H (TPC-H) is a decision support benchmark. It consists of a suite of business oriented ad-hoc queries and concurrent data modifications. <sup><a href="#fn1">1</a></sup></p></blockquote><p>TPC-H是TPC协会提供的一个benchmark，用来模拟一个现实中的商业应用，且自带22个SQL Query。这22个Query均关注于OLAP分析型查询。<br>这些Query可以在如下的地方找到:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzJuZFF1YWRyYW50L3BnLXRwY2gvdHJlZS9tYXN0ZXIvcXVlcmllcw==" title="https://github.com/2ndQuadrant/pg-tpch/tree/master/queries">https://github.com/2ndQuadrant/pg-tpch/tree/master/queries<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbCM=" title="https://hyper-db.de/interface.html#">https://hyper-db.de/interface.html#<i class="fa fa-external-link"></i></span> 点击右下角Insert TPC-H Query</li><li><span class="exturl" data-url="aHR0cHM6Ly91bWJyYS5kYi5pbi50dW0uZGUvaW50ZXJmYWNlLw==" title="https://umbra.db.in.tum.de/interface/">https://umbra.db.in.tum.de/interface/<i class="fa fa-external-link"></i></span>　点击Load Query</li></ul><p>有一篇论文具体讲每一个TPC-H的Query，实际上和本文无关，我链接在这里：　<span class="exturl" data-url="aHR0cHM6Ly9ob21lcGFnZXMuY3dpLm5sL35ib25jei9zbmItY2hhbGxlbmdlL2Nob2tlcG9pbnRzLXRwY3RjLnBkZg==" title="https://homepages.cwi.nl/~boncz/snb-challenge/chokepoints-tpctc.pdf">TPC-H Analyzed: Hidden Messages and Lessons Learned from an Influential Benchmark<i class="fa fa-external-link"></i></span></p><a id="more"></a><h1 id="TPC-H数据集"><a href="#TPC-H数据集" class="headerlink" title="TPC-H数据集"></a>TPC-H数据集</h1><p>我们可以手动生成TPC-H是数据集，常常成为<strong>synthetic dataset</strong>, 人工生成的数据集。</p><p>我们使用这个工具：　<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cnVtL3RwY2gtZGJnZW4=" title="https://github.com/electrum/tpch-dbgen">https://github.com/electrum/tpch-dbgen<i class="fa fa-external-link"></i></span></p><p>使用方法是：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:electrum/tpch-dbgen.git</span><br><span class="line">Cloning into <span class="string">'tpch-dbgen'</span>...</span><br><span class="line">remote: Enumerating objects: 149, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 149 (delta 0), reused 0 (delta 0), pack-reused 149</span><br><span class="line">Receiving objects: 100% (149/149), 214.31 KiB | 637.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (34/34), <span class="keyword">done</span>.</span><br><span class="line">$ <span class="built_in">cd</span> tpch-dbgen/</span><br><span class="line">$ make</span><br><span class="line"><span class="comment">## make 的输出我全部删去了</span></span><br><span class="line">$ ./dbgen</span><br><span class="line">TPC-H Population Generator (Version 2.14.0)</span><br><span class="line">Copyright Transaction Processing Performance Council 1994 - 2010</span><br><span class="line">$ ls | grep <span class="string">'.*.tbl'</span></span><br><span class="line">customer.tbl</span><br><span class="line">lineitem.tbl</span><br><span class="line">nation.tbl</span><br><span class="line">orders.tbl</span><br><span class="line">partsupp.tbl</span><br><span class="line">part.tbl</span><br><span class="line">region.tbl</span><br><span class="line">supplier.tbl</span><br></pre></td></tr></tbody></table></figure><p>我们看到最后生成了8个<code>.tbl</code>文件，它们就是TPC-H的8个表格(a.k.a关系)。另外我这里生成的是TPC-H scale factor=1的数据集，即它的伸缩系数是１，生成的数据大概是1GiB左右。我们还可以在生成数据的时候调整这这scale factor(sf)，比如当它为10的时候，生成的数据大概是10GiB左右。另外我们也可以在生成的时候去特定生成一张表格。这些情况都可以在，　<code>dbgen</code>这个程序中通过参数确定，这里也不再详细说了。</p><h2 id="dbgen的各种参数-可略读浏览"><a href="#dbgen的各种参数-可略读浏览" class="headerlink" title="dbgen的各种参数 (可略读浏览)"></a><code>dbgen</code>的各种参数 (可略读浏览)</h2><p>详见：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ ./dbgen --<span class="built_in">help</span></span><br><span class="line">./dbgen: invalid option -- <span class="string">'-'</span></span><br><span class="line">ERROR: option <span class="string">'-'</span> unknown.</span><br><span class="line">TPC-H Population Generator (Version 2.14.0 build 0)</span><br><span class="line">Copyright Transaction Processing Performance Council 1994 - 2010</span><br><span class="line">USAGE:</span><br><span class="line">dbgen [-{vf}][-T {pcsoPSOL}]</span><br><span class="line">[-s &lt;scale&gt;][-C &lt;procs&gt;][-S &lt;step&gt;]</span><br><span class="line">dbgen [-v] [-O m] [-s &lt;scale&gt;] [-U &lt;updates&gt;]</span><br><span class="line"></span><br><span class="line">Basic Options</span><br><span class="line">===========================</span><br><span class="line">-C &lt;n&gt; -- separate data <span class="built_in">set</span> into &lt;n&gt; chunks (requires -S, default: 1)</span><br><span class="line">-f     -- force. Overwrite existing files</span><br><span class="line">-h     -- display this message</span><br><span class="line">-q     -- <span class="built_in">enable</span> QUIET mode</span><br><span class="line">-s &lt;n&gt; -- <span class="built_in">set</span> Scale Factor (SF) to  &lt;n&gt; (default: 1) </span><br><span class="line">-S &lt;n&gt; -- build the &lt;n&gt;th step of the data/update <span class="built_in">set</span> (used with -C or -U)</span><br><span class="line">-U &lt;n&gt; -- generate &lt;n&gt; update sets</span><br><span class="line">-v     -- <span class="built_in">enable</span> VERBOSE mode</span><br><span class="line"></span><br><span class="line">Advanced Options</span><br><span class="line">===========================</span><br><span class="line">-b &lt;s&gt; -- load distributions <span class="keyword">for</span> &lt;s&gt; (default: dists.dss)</span><br><span class="line">-d &lt;n&gt; -- split deletes between &lt;n&gt; files (requires -U)</span><br><span class="line">-i &lt;n&gt; -- split inserts between &lt;n&gt; files (requires -U)</span><br><span class="line">-T c   -- generate cutomers ONLY</span><br><span class="line">-T l   -- generate nation/region ONLY</span><br><span class="line">-T L   -- generate lineitem ONLY</span><br><span class="line">-T n   -- generate nation ONLY</span><br><span class="line">-T o   -- generate orders/lineitem ONLY</span><br><span class="line">-T O   -- generate orders ONLY</span><br><span class="line">-T p   -- generate parts/partsupp ONLY</span><br><span class="line">-T P   -- generate parts ONLY</span><br><span class="line">-T r   -- generate region ONLY</span><br><span class="line">-T s   -- generate suppliers ONLY</span><br><span class="line">-T S   -- generate partsupp ONLY</span><br><span class="line"></span><br><span class="line">To generate the SF=1 (1GB), validation database population, use:</span><br><span class="line">dbgen -vf -s 1</span><br><span class="line"></span><br><span class="line">To generate updates <span class="keyword">for</span> a SF=1 (1GB), use:</span><br><span class="line">dbgen -v -U 1 -s 1</span><br></pre></td></tr></tbody></table></figure><h2 id="另外可替代生成的工具"><a href="#另外可替代生成的工具" class="headerlink" title="另外可替代生成的工具"></a>另外可替代生成的工具</h2><p>当然也有其他工具可以生成这个数据集，　比如: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dyZWdyYWhuL3RwY2gta2l0" title="https://github.com/gregrahn/tpch-kit">https://github.com/gregrahn/tpch-kit<i class="fa fa-external-link"></i></span>　。但是我们不在这篇文章中赘述。</p><p><br><br><br></p><h1 id="PostgreSQL准备"><a href="#PostgreSQL准备" class="headerlink" title="PostgreSQL准备"></a>PostgreSQL准备</h1><h2 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h2><p>PostgreSQL具体操作详见我的另一篇文章: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/#%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E5%BA%93">[DBMS] PostgreSQL 安装与配置 - 新建一个用户数据库</a></p><p>这里我就展示我的命令和输出例子，在你的环境也大同小异。</p><h3 id="新建数据库命令"><a href="#新建数据库命令" class="headerlink" title="新建数据库命令"></a>新建数据库命令</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u postgres psql</span><br><span class="line">postgres=# CREATE DATABASE tpch;</span><br><span class="line">postgres=# GRANT ALL ON DATABASE tpch to &lt;我们之前创建的用户名 不带尖角括号&gt;;</span><br></pre></td></tr></tbody></table></figure><h3 id="输出例子"><a href="#输出例子" class="headerlink" title="输出例子"></a>输出例子</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u postgres psql</span><br><span class="line">[sudo] password <span class="keyword">for</span> jigao: </span><br><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">postgres=# CREATE DATABASE tpch_sf1;</span><br><span class="line">CREATE DATABASE</span><br><span class="line">postgres=#  GRANT ALL ON DATABASE tpch_sf1 to jigao;</span><br><span class="line">GRANT</span><br><span class="line">postgres=# \q</span><br></pre></td></tr></tbody></table></figure><h2 id="新建表格"><a href="#新建表格" class="headerlink" title="新建表格"></a>新建表格</h2><p>这里需要用到<code>tpch-dbgen/dss.ddl</code>这个文件，它就在和我们刚刚<code>dbgen</code>程序同一个文件，也可以在repo中找到：　<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cnVtL3RwY2gtZGJnZW4vYmxvYi9tYXN0ZXIvZHNzLmRkbA==" title="https://github.com/electrum/tpch-dbgen/blob/master/dss.ddl">https://github.com/electrum/tpch-dbgen/blob/master/dss.ddl<i class="fa fa-external-link"></i></span></p><h3 id="新建表格命令"><a href="#新建表格命令" class="headerlink" title="新建表格命令"></a>新建表格命令</h3><p><code>$ psql -d tpch_sf1 &lt; dss.ddl</code></p><h3 id="输出例子-1"><a href="#输出例子-1" class="headerlink" title="输出例子"></a>输出例子</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ file dss.ddl</span><br><span class="line">dss.ddl: ASCII text</span><br><span class="line">$ psql tpch_sf1 &lt; dss.ddl </span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br></pre></td></tr></tbody></table></figure><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ psql -d tpch_sf1 -c <span class="string">'\dt+'</span></span><br><span class="line">                      List of relations</span><br><span class="line"> Schema |   Name   | Type  | Owner |  Size   | Description </span><br><span class="line">--------+----------+-------+-------+---------+-------------</span><br><span class="line"> public | customer | table | jigao | 0 bytes | </span><br><span class="line"> public | lineitem | table | jigao | 0 bytes | </span><br><span class="line"> public | nation   | table | jigao | 0 bytes | </span><br><span class="line"> public | orders   | table | jigao | 0 bytes | </span><br><span class="line"> public | part     | table | jigao | 0 bytes | </span><br><span class="line"> public | partsupp | table | jigao | 0 bytes | </span><br><span class="line"> public | region   | table | jigao | 0 bytes | </span><br><span class="line"> public | supplier | table | jigao | 0 bytes | </span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><ul><li>如果能看到上面的输出，那么这些表格已经被新建了。</li></ul><p><br></p><p><code>$man psql</code>:</p><blockquote><pre><code>   -d dbname   -c command</code></pre></blockquote><h2 id="TPC-H-Schema"><a href="#TPC-H-Schema" class="headerlink" title="TPC-H Schema"></a>TPC-H Schema</h2><p>ddl即Data Definition Language 数据定义语言, 也是就是TPC-H中表格的架构和相互关系。</p><p><img data-src="https://hyper-db.de/tpch.png" alt="TPC-H Schema, Source: https://hyper-db.de/tpch.png"></p><p><br><br><br></p><h1 id="导入PostgreSQL-2"><a href="#导入PostgreSQL-2" class="headerlink" title="导入PostgreSQL 2"></a>导入PostgreSQL <sup><a href="#fn2">2</a></sup></h1><h2 id="导入命令"><a href="#导入命令" class="headerlink" title="导入命令"></a>导入命令</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ </span><br><span class="line">for i in `ls *.tbl`; do</span><br><span class="line">    echo $i;</span><br><span class="line">    sed -i 's/|$//' *.tbl;</span><br><span class="line">    name=`echo $i| cut -d'.' -f1`;</span><br><span class="line">    psql -d tpch_sf1 -c "COPY $name FROM '`pwd`/$i' DELIMITER '|' ENCODING 'LATIN1';";</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure><ul><li><code>sed -i 's/|$//' *.tbl;</code>: 对于每一个<code>.tbl</code>文件，将每一行最后的<code>|</code>去掉</li><li>因为psql会认为分隔符<code>|</code>后面还依然有数据。</li></ul><h2 id="输出例子-2"><a href="#输出例子-2" class="headerlink" title="输出例子"></a>输出例子</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> `ls *.tbl`; <span class="keyword">do</span></span><br><span class="line">&gt;     <span class="built_in">echo</span> <span class="variable">$i</span>;</span><br><span class="line">&gt;     sed -i <span class="string">'s/|$//'</span> *.tbl;</span><br><span class="line">&gt;     name=`<span class="built_in">echo</span> <span class="variable">$i</span>| cut -d<span class="string">'.'</span> -f1`;</span><br><span class="line">&gt;     psql -d tpch_sf1 -c <span class="string">"COPY <span class="variable">$name</span> FROM '`pwd`/<span class="variable">$i</span>' DELIMITER '|' ENCODING 'LATIN1';"</span>;</span><br><span class="line">&gt; <span class="keyword">done</span></span><br><span class="line">customer.tbl</span><br><span class="line">COPY 150000</span><br><span class="line">lineitem.tbl</span><br><span class="line">COPY 6001215</span><br><span class="line">nation.tbl</span><br><span class="line">COPY 25</span><br><span class="line">orders.tbl</span><br><span class="line">COPY 1500000</span><br><span class="line">partsupp.tbl</span><br><span class="line">COPY 800000</span><br><span class="line">part.tbl</span><br><span class="line">COPY 200000</span><br><span class="line">region.tbl</span><br><span class="line">COPY 5</span><br><span class="line">supplier.tbl</span><br><span class="line">COPY 1000</span><br></pre></td></tr></tbody></table></figure><h2 id="检查-1"><a href="#检查-1" class="headerlink" title="检查"></a>检查</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ psql -d tpch_sf1 -c <span class="string">'\dt+'</span></span><br><span class="line">                      List of relations</span><br><span class="line"> Schema |   Name   | Type  | Owner |    Size    | Description </span><br><span class="line">--------+----------+-------+-------+------------+-------------</span><br><span class="line"> public | customer | table | jigao | 28 MB      | </span><br><span class="line"> public | lineitem | table | jigao | 879 MB     | </span><br><span class="line"> public | nation   | table | jigao | 8192 bytes | </span><br><span class="line"> public | orders   | table | jigao | 204 MB     | </span><br><span class="line"> public | part     | table | jigao | 32 MB      | </span><br><span class="line"> public | partsupp | table | jigao | 136 MB     | </span><br><span class="line"> public | region   | table | jigao | 8192 bytes | </span><br><span class="line"> public | supplier | table | jigao | 1800 kB    | </span><br><span class="line">(8 rows)</span><br><span class="line"></span><br><span class="line">$ psql -d tpch_sf1  -c <span class="string">"select count(*) from lineitem"</span>;</span><br><span class="line">  count  </span><br><span class="line">---------</span><br><span class="line"> 6001215</span><br><span class="line">(1 row)r | table | jigao | 1800 kB    | </span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure><ul><li>如果能看到上面的输出，那么这些表格已经被载入了。</li></ul><h2 id="替代方式-Bash-Script"><a href="#替代方式-Bash-Script" class="headerlink" title="替代方式: Bash Script"></a>替代方式: Bash Script</h2><p>我将<a href="#导入命令">上面的导入数据命令</a>写成了一个bash script脚本: <a href="https://cakebytheoceanluo.github.io/download/dbms/psql_tpch_import.sh">下载</a></p><p><strong>注意我更改了带psql那行，这个脚本需要一个变量，即数据库的名字，在本文例子中是<code>tpch_sf1</code>，你当然可以在新建数据库的时候自行选择。</strong></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x psql_tpch_import.sh </span><br><span class="line">$ ./psql_tpch_import.sh tpch_sf1</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><p>引用：</p><p><a name="fn1">1</a>: <span class="exturl" data-url="aHR0cDovL3d3dy50cGMub3JnL3RwY2gv" title="http://www.tpc.org/tpch/">http://www.tpc.org/tpch/<i class="fa fa-external-link"></i></span></p><p><a name="fn2">2</a>: TPCH on PostgreSQL - Xi Liang: <span class="exturl" data-url="aHR0cDovL3h0ci5haS9ibG9nLzIwMTktMDMtMTItdHBjaC8=" title="http://xtr.ai/blog/2019-03-12-tpch/">http://xtr.ai/blog/2019-03-12-tpch/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cnVtL3RwY2gtZGJnZW4=" title="https://github.com/electrum/tpch-dbgen">https://github.com/electrum/tpch-dbgen<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文关注如何将TPC-H数据集导入至PostgreSQL, 同时简单提一下如何生成TPC-H数据。&lt;/p&gt;
&lt;h1 id=&quot;TPC-H介绍&quot;&gt;&lt;a href=&quot;#TPC-H介绍&quot; class=&quot;headerlink&quot; title=&quot;TPC-H介绍&quot;&gt;&lt;/a&gt;TPC-H介绍&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;TPC-H is a Decision Support Benchmark. The TPC Benchmark™H (TPC-H) is a decision support benchmark. It consists of a suite of business oriented ad-hoc queries and concurrent data modifications. &lt;sup&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TPC-H是TPC协会提供的一个benchmark，用来模拟一个现实中的商业应用，且自带22个SQL Query。这22个Query均关注于OLAP分析型查询。&lt;br&gt;这些Query可以在如下的地方找到:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tLzJuZFF1YWRyYW50L3BnLXRwY2gvdHJlZS9tYXN0ZXIvcXVlcmllcw==&quot; title=&quot;https://github.com/2ndQuadrant/pg-tpch/tree/master/queries&quot;&gt;https://github.com/2ndQuadrant/pg-tpch/tree/master/queries&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbCM=&quot; title=&quot;https://hyper-db.de/interface.html#&quot;&gt;https://hyper-db.de/interface.html#&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt; 点击右下角Insert TPC-H Query&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly91bWJyYS5kYi5pbi50dW0uZGUvaW50ZXJmYWNlLw==&quot; title=&quot;https://umbra.db.in.tum.de/interface/&quot;&gt;https://umbra.db.in.tum.de/interface/&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;　点击Load Query&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有一篇论文具体讲每一个TPC-H的Query，实际上和本文无关，我链接在这里：　&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9ob21lcGFnZXMuY3dpLm5sL35ib25jei9zbmItY2hhbGxlbmdlL2Nob2tlcG9pbnRzLXRwY3RjLnBkZg==&quot; title=&quot;https://homepages.cwi.nl/~boncz/snb-challenge/chokepoints-tpctc.pdf&quot;&gt;TPC-H Analyzed: Hidden Messages and Lessons Learned from an Influential Benchmark&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/categories/PostgreSQL/"/>
    
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
      <category term="TPC-H" scheme="https://cakebytheoceanluo.github.io/tags/TPC-H/"/>
    
  </entry>
  
  <entry>
    <title>[DBMS]PostgreSQL安装与配置</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</id>
    <published>2020-03-15T17:44:02.000Z</published>
    <updated>2020-03-15T19:32:38.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PostgreSQL介绍"><a href="#PostgreSQL介绍" class="headerlink" title="PostgreSQL介绍"></a>PostgreSQL介绍</h1><p>PostgreSQL是一个开源的对象-关系数据库数据库管理系统。它最初开始于在加利福尼亚大学伯克利分校(UCB)的Ingres计划。这个计划的领导者Michael Stonebraker在1982年离开加利福尼亚大学伯克利分校去推进Ingres的商业化，但最后还是返回了学术界。在1985年返回伯克利之后，Michael Stonebraker开始了post-Ingres计划，致力于解决在1980年代早期所出现一些数据库系统存在的问题。Postgres和Ingres的代码库开始(并保持)完全分离。<sup><a href="#myfootnote1">1</a></sup></p><p>Michael Stonebraker于2014年获得图灵奖。另外PostgreSQL也常称为psql。</p><p>本文主要记录PostgreSQL的安装和基本配置。</p><a id="more"></a><h1 id="PostgreSQL-安装"><a href="#PostgreSQL-安装" class="headerlink" title="PostgreSQL 安装"></a>PostgreSQL 安装</h1><p>本文基于deb Linux系统。</p><p>安装PostgreSQL:<br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install postgresql postgresql-contrib</span><br></pre></td></tr></tbody></table></figure><p></p><p>上面这条指令包括了PostgreSQL的客户端和服务器端，另外还有一些其他插件。　</p><p>例如<code>apt-get install postgresql-11</code>会安装上如下软件　<sup><a href="#fn">2</a></sup>：</p><div class="table-container"><table><thead><tr><th>software</th><th>functionality</th></tr></thead><tbody><tr><td>postgresql-client-11</td><td>client libraries and client binaries</td></tr><tr><td>postgresql-11</td><td>core database server</td></tr><tr><td>postgresql-contrib-9.x</td><td>additional supplied modules (part of the postgresql-xx package in version 10 and later)</td></tr><tr><td>libpq-dev</td><td>libraries and headers for C language frontend development</td></tr><tr><td>postgresql-server-dev-11</td><td>libraries and headers for C language backend development</td></tr><tr><td>pgadmin4</td><td>pgAdmin 4 graphical administration utility</td></tr></tbody></table></div><p>其他的系统可以在官方下载网页中找到：　<span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG93bmxvYWQv" title="https://www.postgresql.org/download/">https://www.postgresql.org/download/<i class="fa fa-external-link"></i></span></p><p><br></p><p>另外PostgreSQL和MySQL一样属于”<strong>正式的数据库</strong>“: 客户端和服务器通过端口通信。不像SQLite这种嵌入式的数据库，不区分客户端和服务器端。</p><p>当我们运行psql的时候(我们后面会讲如何运行):</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">psql (12.2 (Ubuntu 12.2-2.pgdg18.04+1), server 10.12 (Ubuntu 10.12-2.pgdg18.04+1))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br></pre></td></tr></tbody></table></figure><ul><li><code>12.2</code>: 是客户端的版本</li><li><code>10.12</code>: 是服务器端的版本</li></ul><p>同时查看版本，也可以在PostgreSQL通过如下命令：<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ psql -c <span class="string">'select version();'</span></span><br><span class="line">                                                               version                                                               </span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> PostgreSQL 10.12 (Ubuntu 10.12-2.pgdg18.04+1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0, 64-bit</span><br><span class="line">(1 row)</span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="管理PostgreSQL"><a href="#管理PostgreSQL" class="headerlink" title="管理PostgreSQL"></a>管理PostgreSQL</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl (start|stop|restart|reload|status) postgresql</span><br></pre></td></tr></tbody></table></figure><p>比如：</p><ul><li>启动PostgreSQL: <code>sudo systemctl start postgresql</code></li><li>停止PostgreSQL: <code>sudo systemctl stop postgresql</code></li><li>重启PostgreSQL: <code>sudo systemctl restart postgresql</code></li><li>查看PostgreSQL状态: <code>systemctl status postgresql</code></li><li>reload (我从来没用过这个): : <code>sudo systemctl reload postgresql</code></li></ul><h2 id="开机自动启动"><a href="#开机自动启动" class="headerlink" title="开机自动启动"></a>开机自动启动</h2><p>通过如下命令可以使postgreSQL自动随着系统启动：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> postgresql</span><br></pre></td></tr></tbody></table></figure><h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef | grep postgres</span><br></pre></td></tr></tbody></table></figure><p><br><br><br></p><h1 id="用户user和角色role"><a href="#用户user和角色role" class="headerlink" title="用户user和角色role"></a>用户user和角色role</h1><h2 id="postgres本地访问"><a href="#postgres本地访问" class="headerlink" title="postgres本地访问"></a><code>postgres</code>本地访问</h2><p>在UNIX平台中安装PostgreSQL之后，PostgreSQL会在UNIX系统中创建一个名为<code>postgres</code>的<strong>linux登录用户</strong>(属于最高权限 Superuser)。</p><p>PostgreSQL的默认用户名和数据库也是<code>postgres</code>， 不过没有默认密码。我们通过如下几个命令去进行该用户的本地访问:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo su postgres</span><br><span class="line">$ psql postgres</span><br></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -i -u postgres psql</span><br></pre></td></tr></tbody></table></figure><h3 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h3><p>最开始的时候<code>postgres</code>用户不支持远程登录(报错：psql: fe_sendauth: no password supplied)，必须设置密码后才行(普通用户也适应这个规则)。<sup><a href="#fn2">3</a></sup></p><p>如果需要改密码的话，我们可以用<code>passwd postgres</code>进行进行密码修改。</p><p>在当前用户下，我们可以监听psql的默认端口号<code>5432</code>，使用<code>lsof</code>或者<code>netstat</code>:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">postgres:/$ lsof -i:5432</span><br><span class="line">COMMAND   PID     USER   FD   TYPE    DEVICE SIZE/OFF NODE NAME</span><br><span class="line">postgres 7877 postgres    5u  IPv4 700026722      0t0  TCP localhost:postgresql (LISTEN)</span><br><span class="line">postgres:/$ netstat -an | grep 5432</span><br><span class="line">tcp        0      0 127.0.0.1:5432          0.0.0.0:*               LISTEN     </span><br><span class="line">unix  2      [ ACC ]     STREAM     LISTENING     700026723 /var/run/postgresql/.s.PGSQL.5432</span><br><span class="line">unix  3      [ ]         STREAM     CONNECTED     3941554326 </span><br><span class="line">unix  3      [ ]         STREAM     CONNECTED     3941554325</span><br></pre></td></tr></tbody></table></figure><h2 id="创建用户-createuser"><a href="#创建用户-createuser" class="headerlink" title="创建用户 - createuser"></a>创建用户 - createuser</h2><p>PostgreSQL 每创建一个新用户，都会生成一个<strong>新的对应的linux同名用户</strong>。默认的用户是<code>postgres</code>，登录此用户的shell，去执行psql无需密码 (本质上是因为 pg_hba.conf 的配置) 。PostgreSQL这种通过将Linux用户与PostgreSQL帐户相关联来处理身份验证的方式，被称为“对等”身份验证。</p><p>创建用户往往是我们使用PostgreSQL的第一步。因为我们如果新建了一个用户(user)， 我们以后就可以通过<code>psql</code>登陆我们的PostgeSQL。个人建议这个用户名可以设置成和我们Linux系统用户名一致。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u postgres createuser --interactive -P &lt;我们的用户名 不带尖角括号&gt;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p><code>$ man createuser</code>:</p><blockquote><pre><code>   createuser - define a new PostgreSQL user account </code></pre></blockquote><h2 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h2><p><code>select current_user;</code>:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jigao=# select current_user;</span><br><span class="line"> current_user </span><br><span class="line">--------------</span><br><span class="line"> jigao</span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure><h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><p><code>\c &lt;user_name&gt;</code> 可以让我们切换不同的用户名</p><p><br></p><p>远程登陆的部分见: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGpub3R4ai9wLzExMTk4MjU1Lmh0bWwjMzU5NDY3MzQwOA==" title="https://www.cnblogs.com/xjnotxj/p/11198255.html#3594673408">https://www.cnblogs.com/xjnotxj/p/11198255.html#3594673408<i class="fa fa-external-link"></i></span></p><p><br></p><h1 id="新建一个用户数据库"><a href="#新建一个用户数据库" class="headerlink" title="新建一个用户数据库"></a>新建一个用户数据库</h1><p>在bash中输入(不是在psql中)：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ createdb &lt;我们之前创建的用户名 不带尖角括号&gt;</span><br></pre></td></tr></tbody></table></figure><p>这个数据库从属于我们当前的用户，新建完成之后，我们(当前用户)可以用<code>psql</code>命令进入该数据库, 这就是我们刚刚提到的<em>对等身份验证</em>。比如我是这么操作的：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ createdb jigao</span><br><span class="line">$ psql</span><br><span class="line">psql (12.2 (Ubuntu 12.2-2.pgdg18.04+1), server 10.12 (Ubuntu 10.12-2.pgdg18.04+1))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">jigao=<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure><p><br></p><p><code>$ man createdb</code>:</p><blockquote><pre><code>   createdb - create a new PostgreSQL database</code></pre></blockquote><h1 id="新建一个数据库-create-database"><a href="#新建一个数据库-create-database" class="headerlink" title="新建一个数据库 - create database"></a>新建一个数据库 - create database</h1><p>有了用户名之后，我们需要新建一个数据库，这个数据库有一些表格。我们才可以运行SQL语句。有两种方式，一种我们在<a href="#新建一个用户数据库">上一块内容: 新建一个用户数据库</a>已经见过，不过我们需要在<code>postgres</code>用户下新建：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u postgres createdb testdb</span><br></pre></td></tr></tbody></table></figure><p>或用下面指令：</p><p>对于PostgreSQL每一个数据库database是带有权限的，我们还需要把这个新建的数据库<code>GRANT</code>(授权)给我们上一步的用户名。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u postgres psql</span><br><span class="line">postgres=# CREATE DATABASE testdb;</span><br><span class="line">postgres=# GRANT ALL ON DATABASE testdb to &lt;我们之前创建的用户名 不带尖角括号&gt;;</span><br></pre></td></tr></tbody></table></figure><p><code>sudo -u postgres psql</code>可以让我们进入<code>postgres</code>这个数据库，它是default administrative connection database。</p><p>如果成功， 我们可以从这个<code>psql</code>界面用：<code>\q</code>退出到shell。</p><h2 id="新建表格-—-create-table"><a href="#新建表格-—-create-table" class="headerlink" title="新建表格 — create table"></a>新建表格 — create table</h2><p>这时候我们可以向刚刚新建的数据库里面加入我们的表格了。PostgreSQL是一种关系数据库(relational Database system)，我们需要提供<code>create table...</code>语句去新建表格，定义每一个表格字段(field)的数据类型(data type)以及其他信息(如能不能是<code>null value</code>)。</p><p>这里我们可以采用一些别人提供好的表格。</p><p>具体导入数据集可以看这一篇文章： <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS]PostgreSQL导入数据集</a></p><h2 id="查看当前数据库"><a href="#查看当前数据库" class="headerlink" title="查看当前数据库"></a>查看当前数据库</h2><p><code>select current_database();</code>:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">testdb=# select current_database();</span><br><span class="line"> current_database </span><br><span class="line">------------------</span><br><span class="line"> testdb</span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure><h2 id="查看所有数据库"><a href="#查看所有数据库" class="headerlink" title="查看所有数据库"></a>查看所有数据库</h2><p>在任何一个psql数据库中, 我们可以通过<code>\l</code>或<code>\l+</code>命令来，查看psql下总共有哪些数据库。我可以从我的用户数据库<code>jigao</code>查看：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">jigao=# \l</span><br><span class="line">                                     List of databases</span><br><span class="line">     Name     |    Owner    | Encoding |   Collate   |    Ctype    |   Access privileges   </span><br><span class="line">--------------+-------------+----------+-------------+-------------+-----------------------</span><br><span class="line"> dbname       | owning_user | UTF8     | en_US.UTF-8 | en_US.UTF-8 | </span><br><span class="line"> jigao        | jigao       | UTF8     | en_US.UTF-8 | en_US.UTF-8 | </span><br><span class="line"> postgres     | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | </span><br><span class="line"> template0    | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +</span><br><span class="line">              |             |          |             |             | postgres=CTc/postgres</span><br><span class="line"> template1    | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +</span><br><span class="line">              |             |          |             |             | postgres=CTc/postgres</span><br><span class="line"> testdb       | testuser    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | </span><br><span class="line">(6 rows)</span><br><span class="line"></span><br><span class="line">jigao=# \l+</span><br><span class="line">                                                                       List of databases</span><br><span class="line">     Name     |    Owner    | Encoding |   Collate   |    Ctype    |   Access privileges   |  Size   | Tablespace |                Description                 </span><br><span class="line">--------------+-------------+----------+-------------+-------------+-----------------------+---------+------------+--------------------------------------------</span><br><span class="line"> dbname       | owning_user | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 7497 kB | pg_default | </span><br><span class="line"> jigao        | jigao       | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 7631 kB | pg_default | </span><br><span class="line"> postgres     | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 7631 kB | pg_default | default administrative connection database</span><br><span class="line"> template0    | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +| 7497 kB | pg_default | unmodifiable empty database</span><br><span class="line">              |             |          |             |             | postgres=CTc/postgres |         |            | </span><br><span class="line"> template1    | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +| 7631 kB | pg_default | default template for new databases</span><br><span class="line">              |             |          |             |             | postgres=CTc/postgres |         |            | </span><br><span class="line"> testdb       | testuser    | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 848 MB  | pg_default | </span><br><span class="line">(6 rows)</span><br></pre></td></tr></tbody></table></figure><h2 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h2><p><code>\c &lt;database_name&gt;</code> 可以让我们在不同数据库中切换</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">jigao=# \c jigao</span><br><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">You are now <span class="built_in">connected</span> to database <span class="string">"jigao"</span> as user <span class="string">"jigao"</span>.</span><br><span class="line">jigao=# \c testdb</span><br><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">You are now <span class="built_in">connected</span> to database <span class="string">"testdb"</span> as user <span class="string">"jigao"</span>.</span><br><span class="line">testdb-# \c postgres</span><br><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">You are now <span class="built_in">connected</span> to database <span class="string">"postgres"</span> as user <span class="string">"jigao"</span>.</span><br><span class="line">postgres=#</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="查看SQL函数"><a href="#查看SQL函数" class="headerlink" title="查看SQL函数"></a>查看SQL函数</h1><blockquote><p>  \df[anptw][S+] [PATRN] list [only agg/normal/procedures/trigger/window] functions</p></blockquote><h2 id="查看所有函数"><a href="#查看所有函数" class="headerlink" title="查看所有函数　"></a>查看所有函数　</h2><p>postgreSQL中所有的函数都会被列出(输出会非常多！)：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jigao=# \df *</span><br></pre></td></tr></tbody></table></figure><h2 id="匹配查看函数"><a href="#匹配查看函数" class="headerlink" title="匹配查看函数"></a>匹配查看函数</h2><h3 id="substring例子"><a href="#substring例子" class="headerlink" title="substring例子"></a><code>substring</code>例子</h3><p>比如我们忘记了<code>substring</code>这个函数，只记得<code>sub</code>:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">jigao=# \df sub*</span><br><span class="line">                             List of functions</span><br><span class="line">   Schema   |   Name    | Result data type |   Argument data types   | Type </span><br><span class="line">------------+-----------+------------------+-------------------------+------</span><br><span class="line"> pg_catalog | substr    | bytea            | bytea, integer          | func</span><br><span class="line"> pg_catalog | substr    | bytea            | bytea, integer, integer | func</span><br><span class="line"> pg_catalog | substr    | <span class="built_in">text</span>             | <span class="built_in">text</span>, integer           | func</span><br><span class="line"> pg_catalog | substr    | <span class="built_in">text</span>             | <span class="built_in">text</span>, integer, integer  | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">bit</span>              | <span class="built_in">bit</span>, integer            | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">bit</span>              | <span class="built_in">bit</span>, integer, integer   | func</span><br><span class="line"> pg_catalog | substring | bytea            | bytea, integer          | func</span><br><span class="line"> pg_catalog | substring | bytea            | bytea, integer, integer | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">text</span>             | <span class="built_in">text</span>, integer           | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">text</span>             | <span class="built_in">text</span>, integer, integer  | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">text</span>             | <span class="built_in">text</span>, <span class="built_in">text</span>              | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">text</span>             | <span class="built_in">text</span>, <span class="built_in">text</span>, <span class="built_in">text</span>        | func</span><br><span class="line">(<span class="number">12</span> rows)</span><br></pre></td></tr></tbody></table></figure><h3 id="sum例子"><a href="#sum例子" class="headerlink" title="sum例子"></a><code>sum</code>例子</h3><p>比如我们忘记了<code>sum</code>这个函数，只记得<code>su</code>。另外我们还知道它还是一个聚合函数(aggregation) - agg - <strong>a</strong>:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">jigao=# \dfa su*</span><br><span class="line">                         List of functions</span><br><span class="line">   Schema   | Name | Result data type | Argument data types | Type </span><br><span class="line">------------+------+------------------+---------------------+------</span><br><span class="line"> pg_catalog | sum  | numeric          | bigint              | agg</span><br><span class="line"> pg_catalog | sum  | <span class="keyword">double</span> precision | <span class="keyword">double</span> precision    | agg</span><br><span class="line"> pg_catalog | sum  | bigint           | integer             | agg</span><br><span class="line"> pg_catalog | sum  | interval         | interval            | agg</span><br><span class="line"> pg_catalog | sum  | money            | money               | agg</span><br><span class="line"> pg_catalog | sum  | numeric          | numeric             | agg</span><br><span class="line"> pg_catalog | sum  | real             | real                | agg</span><br><span class="line"> pg_catalog | sum  | bigint           | smallint            | agg</span><br><span class="line">(<span class="number">8</span> rows)</span><br></pre></td></tr></tbody></table></figure><p>引用:</p><p><a name="myfootnote1">1</a>:　PostgreSQL 维基百科. <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvUG9zdGdyZVNRTA==" title="https://zh.wikipedia.org/wiki/PostgreSQL">https://zh.wikipedia.org/wiki/PostgreSQL<i class="fa fa-external-link"></i></span></p><p><a name="fn">2</a>: Linux downloads (Ubuntu): <span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG93bmxvYWQvbGludXgvdWJ1bnR1Lw==" title="https://www.postgresql.org/download/linux/ubuntu/">https://www.postgresql.org/download/linux/ubuntu/<i class="fa fa-external-link"></i></span></p><p><a name="fn2">3</a>: PostgreSQL 安装 &amp; 用户配置 - 小蒋不素小蒋: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGpub3R4ai9wLzExMTk4MjU1Lmh0bWw=" title="https://www.cnblogs.com/xjnotxj/p/11198255.html">https://www.cnblogs.com/xjnotxj/p/11198255.html<i class="fa fa-external-link"></i></span></p><p><br></p><p>推荐的阅读:</p><p>PostgreSQL 安装最新的版本 - DaozyIT: <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbmN1cG9ma2Fpd2F0ZXIvYXJ0aWNsZS9kZXRhaWxzLzgxNDgyMzQw" title="https://blog.csdn.net/tencupofkaiwater/article/details/81482340">https://blog.csdn.net/tencupofkaiwater/article/details/81482340<i class="fa fa-external-link"></i></span></p><p>How To Install and Use PostgreSQL on Ubuntu 18.04 -  Justin Ellingwood and Mark Drake: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlnaXRhbG9jZWFuLmNvbS9jb21tdW5pdHkvdHV0b3JpYWxzL2hvdy10by1pbnN0YWxsLWFuZC11c2UtcG9zdGdyZXNxbC1vbi11YnVudHUtMTgtMDQ=" title="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-18-04">https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-18-04<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PostgreSQL介绍&quot;&gt;&lt;a href=&quot;#PostgreSQL介绍&quot; class=&quot;headerlink&quot; title=&quot;PostgreSQL介绍&quot;&gt;&lt;/a&gt;PostgreSQL介绍&lt;/h1&gt;&lt;p&gt;PostgreSQL是一个开源的对象-关系数据库数据库管理系统。它最初开始于在加利福尼亚大学伯克利分校(UCB)的Ingres计划。这个计划的领导者Michael Stonebraker在1982年离开加利福尼亚大学伯克利分校去推进Ingres的商业化，但最后还是返回了学术界。在1985年返回伯克利之后，Michael Stonebraker开始了post-Ingres计划，致力于解决在1980年代早期所出现一些数据库系统存在的问题。Postgres和Ingres的代码库开始(并保持)完全分离。&lt;sup&gt;&lt;a href=&quot;#myfootnote1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Michael Stonebraker于2014年获得图灵奖。另外PostgreSQL也常称为psql。&lt;/p&gt;
&lt;p&gt;本文主要记录PostgreSQL的安装和基本配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/categories/PostgreSQL/"/>
    
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 1179.reformat-department-table</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-1179-reformat-department-table/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-1179-reformat-department-table/</id>
    <published>2020-03-13T18:53:22.000Z</published>
    <updated>2020-03-13T18:54:37.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>1179.Reformat Department Table</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Department (<span class="keyword">id</span> <span class="built_in">int</span>, revenue <span class="built_in">int</span>, <span class="keyword">month</span> <span class="built_in">varchar</span>(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Department</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'8000'</span>, <span class="string">'Jan'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'9000'</span>, <span class="string">'Jan'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'10000'</span>, <span class="string">'Feb'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'7000'</span>, <span class="string">'Feb'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'6000'</span>, <span class="string">'Mar'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--PostgreSQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Department (<span class="keyword">id</span> <span class="built_in">int</span>, revenue <span class="built_in">int</span>, <span class="keyword">month</span> <span class="built_in">varchar</span>(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Department</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'8000'</span>, <span class="string">'Jan'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'9000'</span>, <span class="string">'Jan'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'10000'</span>, <span class="string">'Feb'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'7000'</span>, <span class="string">'Feb'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'6000'</span>, <span class="string">'Mar'</span>)</span><br></pre></td></tr></tbody></table></figure><p>Table: <code>Department</code><br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------------+---------+</span></span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+<span class="comment">---------------+---------+</span></span><br><span class="line">| id            | int     |</span><br><span class="line">| revenue       | int     |</span><br><span class="line">| month         | varchar |</span><br><span class="line">+<span class="comment">---------------+---------+</span></span><br><span class="line">(id, month) is the primary key of this table.</span><br><span class="line">The table has information about the revenue of each department per month.</span><br><span class="line">The month has <span class="keyword">values</span> <span class="keyword">in</span> [<span class="string">"Jan"</span>,<span class="string">"Feb"</span>,<span class="string">"Mar"</span>,<span class="string">"Apr"</span>,<span class="string">"May"</span>,<span class="string">"Jun"</span>,<span class="string">"Jul"</span>,<span class="string">"Aug"</span>,<span class="string">"Sep"</span>,<span class="string">"Oct"</span>,<span class="string">"Nov"</span>,<span class="string">"Dec"</span>].</span><br></pre></td></tr></tbody></table></figure><p></p><p>Write an SQL query to reformat the table such that there is a department id column and a revenue column <strong>for each month</strong>.</p><p>The query result format is in the following example:<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Department table:</span><br><span class="line">+<span class="comment">------+---------+-------+</span></span><br><span class="line">| id   | revenue | month |</span><br><span class="line">+<span class="comment">------+---------+-------+</span></span><br><span class="line">| 1    | 8000    | Jan   |</span><br><span class="line">| 2    | 9000    | Jan   |</span><br><span class="line">| 3    | 10000   | Feb   |</span><br><span class="line">| 1    | 7000    | Feb   |</span><br><span class="line">| 1    | 6000    | Mar   |</span><br><span class="line">+<span class="comment">------+---------+-------+</span></span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+<span class="comment">------+-------------+-------------+-------------+-----+-------------+</span></span><br><span class="line">| id   | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |</span><br><span class="line">+<span class="comment">------+-------------+-------------+-------------+-----+-------------+</span></span><br><span class="line">| 1    | 8000        | 7000        | 6000        | ... | null        |</span><br><span class="line">| 2    | 9000        | null        | null        | ... | null        |</span><br><span class="line">| 3    | null        | 10000       | null        | ... | null        |</span><br><span class="line">+<span class="comment">------+-------------+-------------+-------------+-----+-------------+</span></span><br><span class="line"></span><br><span class="line">Note that the result table has 13 columns (1 for the department id + 12 for the months).</span><br></pre></td></tr></tbody></table></figure><p></p><a id="more"></a><hr><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'jan'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Jan_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'feb'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Feb_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'mar'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Mar_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'apr'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Apr_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'may'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> May_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'jun'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Jun_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'jul'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Jul_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'aug'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Aug_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'sep'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Sep_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'oct'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Oct_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'nov'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Nov_Revenue,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'dec'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Dec_Revenue</span><br><span class="line"><span class="keyword">from</span> department</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">asc</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Jan'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Jan_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Feb'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Feb_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Mar'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Mar_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Apr'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Apr_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'May'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> May_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Jun'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Jun_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Jul'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Jul_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Aug'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Aug_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Sep'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Sep_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Oct'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Oct_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Nov'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Nov_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Dec'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Dec_Revenue</span><br><span class="line"><span class="keyword">FROM</span> Department</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span></span><br></pre></td></tr></tbody></table></figure><h1 id="解法２：-Pivot-table"><a href="#解法２：-Pivot-table" class="headerlink" title="解法２：　Pivot table"></a>解法２：　Pivot table</h1><p>这个解法只能在SQL Server中使用，我也头一回看见。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    Jan <span class="keyword">AS</span> Jan_Revenue,</span><br><span class="line">    Feb <span class="keyword">AS</span> Feb_Revenue, </span><br><span class="line">    Mar <span class="keyword">AS</span> Mar_Revenue, </span><br><span class="line">    Apr <span class="keyword">AS</span> Apr_Revenue,</span><br><span class="line">    May <span class="keyword">AS</span> May_Revenue,</span><br><span class="line">    Jun <span class="keyword">AS</span> Jun_Revenue,</span><br><span class="line">    Jul <span class="keyword">AS</span> Jul_Revenue,</span><br><span class="line">    Aug <span class="keyword">AS</span> Aug_Revenue,</span><br><span class="line">    Sep <span class="keyword">AS</span> Sep_Revenue,</span><br><span class="line">    <span class="keyword">Oct</span> <span class="keyword">AS</span> Oct_Revenue,</span><br><span class="line">    Nov <span class="keyword">AS</span> Nov_Revenue,</span><br><span class="line">    <span class="built_in">Dec</span> <span class="keyword">AS</span> Dec_Revenue</span><br><span class="line"><span class="keyword">FROM</span> Department</span><br><span class="line"><span class="keyword">PIVOT</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">MAX</span>(revenue)</span><br><span class="line">    <span class="keyword">FOR</span> <span class="keyword">month</span> <span class="keyword">IN</span> (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, <span class="keyword">Oct</span>, Nov, <span class="built_in">Dec</span>)        </span><br><span class="line">) <span class="keyword">AS</span> MonthsRevenue</span><br></pre></td></tr></tbody></table></figure><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVmb3JtYXQtZGVwYXJ0bWVudC10YWJsZS8=" title="https://leetcode.com/problems/reformat-department-table/">https://leetcode.com/problems/reformat-department-table/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVmb3JtYXQtZGVwYXJ0bWVudC10YWJsZS9kaXNjdXNzLzQyMjM4My9teXNxbC1lYXN5LXNvbHV0aW9u" title="https://leetcode.com/problems/reformat-department-table/discuss/422383/mysql-easy-solution">https://leetcode.com/problems/reformat-department-table/discuss/422383/mysql-easy-solution<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVmb3JtYXQtZGVwYXJ0bWVudC10YWJsZS9kaXNjdXNzLzM3NjI0MS9NeVNRTC1Tb2x1dGlvbi13aXRoLTM4MS1tcy1mYXN0ZXItdGhhbi0xMDAuMDA=" title="https://leetcode.com/problems/reformat-department-table/discuss/376241/MySQL-Solution-with-381-ms-faster-than-100.00">https://leetcode.com/problems/reformat-department-table/discuss/376241/MySQL-Solution-with-381-ms-faster-than-100.00<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjEvdGFibGVmdW5jLmh0bWw=" title="https://www.postgresql.org/docs/9.1/tablefunc.html">https://www.postgresql.org/docs/9.1/tablefunc.html<i class="fa fa-external-link"></i></span> : pivot table in PostgreSQL</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc3Fsc2VydmVydHV0b3JpYWwubmV0L3NxbC1zZXJ2ZXItYmFzaWNzL3NxbC1zZXJ2ZXItcGl2b3Qv" title="https://www.sqlservertutorial.net/sql-server-basics/sql-server-pivot/">https://www.sqlservertutorial.net/sql-server-basics/sql-server-pivot/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDgzODYyNjMvcGl2b3QtdGFibGUtaW4tc3FsLWNvbHVtbi1yZXN1bHRzLXRvLXJvd3M=" title="https://stackoverflow.com/questions/48386263/pivot-table-in-sql-column-results-to-rows">https://stackoverflow.com/questions/48386263/pivot-table-in-sql-column-results-to-rows<i class="fa fa-external-link"></i></span><br><!-- 该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 --></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;1179.Reformat Department Table&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, revenue &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Department&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Jan&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Jan&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Feb&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;7000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Feb&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Mar&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, revenue &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Department&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Jan&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Jan&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Feb&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;7000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Feb&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, revenue, &lt;span class=&quot;keyword&quot;&gt;month&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Mar&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Table: &lt;code&gt;Department&lt;/code&gt;&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Column Name   | Type    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| id            | int     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| revenue       | int     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| month         | varchar |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(id, month) is the primary key of this table.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The table has information about the revenue of each department per month.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The month has &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;Jan&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Feb&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Mar&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Apr&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;May&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Jun&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Jul&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Aug&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Sep&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Oct&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Nov&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Dec&quot;&lt;/span&gt;].&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Write an SQL query to reformat the table such that there is a department id column and a revenue column &lt;strong&gt;for each month&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The query result format is in the following example:&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Department table:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+---------+-------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| id   | revenue | month |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+---------+-------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1    | 8000    | Jan   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2    | 9000    | Jan   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 3    | 10000   | Feb   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1    | 7000    | Feb   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1    | 6000    | Mar   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+---------+-------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Result table:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+-------------+-------------+-------------+-----+-------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| id   | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+-------------+-------------+-------------+-----+-------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1    | 8000        | 7000        | 6000        | ... | null        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2    | 9000        | null        | null        | ... | null        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 3    | null        | 10000       | null        | ... | null        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+-------------+-------------+-------------+-----+-------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note that the result table has 13 columns (1 for the department id + 12 for the months).&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 627.swap.salary</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-627-swap-salary/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-627-swap-salary/</id>
    <published>2020-03-13T18:49:11.000Z</published>
    <updated>2020-03-13T18:54:04.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>627.Swap Salary</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--MySQL</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> salary(<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>), sex <span class="built_in">char</span>(<span class="number">1</span>), salary <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> salary</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'A'</span>, <span class="string">'m'</span>, <span class="string">'2500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'B'</span>, <span class="string">'f'</span>, <span class="string">'1500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'C'</span>, <span class="string">'m'</span>, <span class="string">'5500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'D'</span>, <span class="string">'f'</span>, <span class="string">'500'</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> salary;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> salary(<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>), sex <span class="built_in">char</span>(<span class="number">1</span>), salary <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> salary</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'A'</span>, <span class="string">'m'</span>, <span class="string">'2500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'B'</span>, <span class="string">'f'</span>, <span class="string">'1500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'C'</span>, <span class="string">'m'</span>, <span class="string">'5500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'D'</span>, <span class="string">'f'</span>, <span class="string">'500'</span>);</span><br></pre></td></tr></tbody></table></figure><p>Given a table <code>salary</code>, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update statement and no intermediate temp table.</p><p>Note that you must write a single update statement, DO NOT write any select statement for this problem.</p><p>Example:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| id | name | sex | salary |</span><br><span class="line">|<span class="comment">----|------|-----|--------|</span></span><br><span class="line">| 1  | A    | m   | 2500   |</span><br><span class="line">| 2  | B    | f   | 1500   |</span><br><span class="line">| 3  | C    | m   | 5500   |</span><br><span class="line">| 4  | D    | f   | 500    |</span><br></pre></td></tr></tbody></table></figure><p>After running your update statement, the above salary table should have the following rows:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| id | name | sex | salary |</span><br><span class="line">|<span class="comment">----|------|-----|--------|</span></span><br><span class="line">| 1  | A    | f   | 2500   |</span><br><span class="line">| 2  | B    | m   | 1500   |</span><br><span class="line">| 3  | C    | f   | 5500   |</span><br><span class="line">| 4  | D    | m   | 500    |</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><hr><p><br></p><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> salary s</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">id</span> = s.id, <span class="keyword">name</span> = s.name, salary = s.salary, sex = (<span class="keyword">case</span> <span class="keyword">when</span> s.sex = <span class="string">'f'</span> <span class="keyword">then</span> <span class="string">'m'</span> <span class="keyword">else</span> <span class="string">'f'</span> <span class="keyword">end</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> salary s</span><br><span class="line"><span class="keyword">set</span> sex = (<span class="keyword">case</span> <span class="keyword">when</span> s.sex = <span class="string">'f'</span> <span class="keyword">then</span> <span class="string">'m'</span> <span class="keyword">else</span> <span class="string">'f'</span> <span class="keyword">end</span>);</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><p><strong>不适用于PostgreSQL</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> salary <span class="keyword">SET</span> sex = <span class="keyword">IF</span>(sex = <span class="string">'m'</span>, <span class="string">'f'</span>, <span class="string">'m'</span>)</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法３"><a href="#解法３" class="headerlink" title="解法３"></a>解法３</h1><p><strong>适用于PostgreSQL</strong>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex = <span class="keyword">CHR</span>(<span class="keyword">ASCII</span>(<span class="string">'f'</span>) + <span class="keyword">ASCII</span>(<span class="string">'m'</span>) - <span class="keyword">ASCII</span>(sex));</span><br></pre></td></tr></tbody></table></figure><ul><li><code>ascii</code>: char -&gt; ascii</li><li><code>chr</code>: ascii -&gt; char</li></ul><p><strong>不适用于PostgreSQL</strong>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex = <span class="built_in">CHAR</span>(<span class="keyword">ASCII</span>(<span class="string">'f'</span>) ^ <span class="keyword">ASCII</span>(<span class="string">'m'</span>) ^ <span class="keyword">ASCII</span>(sex));</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex= <span class="built_in">CHAR</span>(<span class="keyword">ASCII</span>(<span class="string">'f'</span>) + <span class="keyword">ASCII</span>(<span class="string">'m'</span>) - <span class="keyword">ASCII</span>(sex));</span><br></pre></td></tr></tbody></table></figure><p>其实在很多解法中，有很多看起来很fancy的SQL解法，其实我觉得只是看起比较厉害罢了。<br>但是这个<strong>解法3</strong>说不定真的可以带来更短的运行时间，因为它看起来branch-free，回避了<code>case</code>或者<code>if</code>。</p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3dhcC1zYWxhcnkv" title="https://leetcode.com/problems/swap-salary/">https://leetcode.com/problems/swap-salary/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3dhcC1zYWxhcnkvZGlzY3Vzcy8xMDQ3MTMvQWNjZXB0LXNvbHV0aW9uLXdpdGgteG9y" title="https://leetcode.com/problems/swap-salary/discuss/104713/Accept-solution-with-xor">https://leetcode.com/problems/swap-salary/discuss/104713/Accept-solution-with-xor<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjEvZnVuY3Rpb25zLWNvbmRpdGlvbmFsLmh0bWw=" title="https://www.postgresql.org/docs/9.1/functions-conditional.html">https://www.postgresql.org/docs/9.1/functions-conditional.html<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTEyOTkwMzcvcG9zdGdyZXNxbC1pZi1zdGF0ZW1lbnQ=" title="https://stackoverflow.com/questions/11299037/postgresql-if-statement">https://stackoverflow.com/questions/11299037/postgresql-if-statement<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;627.Swap Salary&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; salary(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;), sex &lt;span class=&quot;built_in&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), salary &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; salary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; salary (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, sex, salary) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;m&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; salary (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, sex, salary) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; salary (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, sex, salary) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;m&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;5500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; salary (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, sex, salary) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; salary;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; salary(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;), sex &lt;span class=&quot;built_in&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), salary &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; salary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; salary (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, sex, salary) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;m&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; salary (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, sex, salary) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; salary (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, sex, salary) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;m&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;5500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; salary (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, sex, salary) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Given a table &lt;code&gt;salary&lt;/code&gt;, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update statement and no intermediate temp table.&lt;/p&gt;
&lt;p&gt;Note that you must write a single update statement, DO NOT write any select statement for this problem.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;| id | name | sex | salary |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|&lt;span class=&quot;comment&quot;&gt;----|------|-----|--------|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1  | A    | m   | 2500   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2  | B    | f   | 1500   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 3  | C    | m   | 5500   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 4  | D    | f   | 500    |&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;After running your update statement, the above salary table should have the following rows:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;| id | name | sex | salary |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|&lt;span class=&quot;comment&quot;&gt;----|------|-----|--------|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1  | A    | f   | 2500   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2  | B    | m   | 1500   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 3  | C    | f   | 5500   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 4  | D    | m   | 500    |&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 626.exchange.seats</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-626-exchange-seats/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-626-exchange-seats/</id>
    <published>2020-03-13T18:46:59.000Z</published>
    <updated>2020-03-13T18:53:47.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>626.Exchange Seats</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> seat(<span class="keyword">id</span> <span class="built_in">int</span>, student <span class="built_in">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> seat</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Abbot'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Doris'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Emerson'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Green'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'Jeames'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> seat;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> seat(<span class="keyword">id</span> <span class="built_in">int</span>, student <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Abbot'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Doris'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Emerson'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Green'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'Jeames'</span>);</span><br></pre></td></tr></tbody></table></figure><p>Mary is a teacher in a middle school and she has a table <code>seat</code> storing students’ names and their corresponding <code>seat</code> ids.</p><p>The column id is continuous increment.</p><p>Mary wants to change seats for the adjacent students.</p><p>Can you write a SQL query to output the result for Mary?</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">|    id   | student |</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">|    1    | Abbot   |</span><br><span class="line">|    2    | Doris   |</span><br><span class="line">|    3    | Emerson |</span><br><span class="line">|    4    | Green   |</span><br><span class="line">|    5    | Jeames  |</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br></pre></td></tr></tbody></table></figure><p>For the sample input, the output is:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">|    id   | student |</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">|    1    | Doris   |</span><br><span class="line">|    2    | Abbot   |</span><br><span class="line">|    3    | Green   |</span><br><span class="line">|    4    | Emerson |</span><br><span class="line">|    5    | Jeames  |</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br></pre></td></tr></tbody></table></figure><p>Note:<br>If the number of students is odd, there is no need to change the last one’s seat.</p><a id="more"></a><hr><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p><strong>适用于PostgreSQL</strong>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,</span><br><span class="line">        (<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">id</span> % <span class="number">2</span> = <span class="number">1</span> <span class="keyword">then</span> <span class="keyword">lead</span>(student, <span class="number">1</span>, student) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>)</span><br><span class="line">                              <span class="keyword">else</span> lag(student, <span class="number">1</span>, <span class="literal">null</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>) <span class="keyword">end</span>) <span class="keyword">as</span> student</span><br><span class="line"><span class="keyword">from</span> seat;</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    (<span class="keyword">CASE</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="keyword">MOD</span>(<span class="keyword">id</span>, <span class="number">2</span>) != <span class="number">0</span> <span class="keyword">AND</span> counts != <span class="keyword">id</span> <span class="keyword">THEN</span> <span class="keyword">id</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="keyword">MOD</span>(<span class="keyword">id</span>, <span class="number">2</span>) != <span class="number">0</span> <span class="keyword">AND</span> counts = <span class="keyword">id</span> <span class="keyword">THEN</span> <span class="keyword">id</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="keyword">id</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="keyword">id</span>,</span><br><span class="line">    student</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    seat,</span><br><span class="line">    (<span class="keyword">SELECT</span></span><br><span class="line">        <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> counts</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        seat) <span class="keyword">AS</span> seat_counts</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span>;</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法３"><a href="#解法３" class="headerlink" title="解法３"></a>解法３</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s1.id, <span class="keyword">COALESCE</span>(s2.student, s1.student) <span class="keyword">AS</span> student</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    seat s1</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    seat s2 <span class="keyword">ON</span> ((s1.id + <span class="number">1</span>) ^ <span class="number">1</span>) - <span class="number">1</span> = s2.id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> s1.id;</span><br></pre></td></tr></tbody></table></figure><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>Bit manipulation expression <code>(id+1)^1-1</code> can calculate the new id after switch.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, (<span class="keyword">id</span>+<span class="number">1</span>)^<span class="number">1</span><span class="number">-1</span>, student <span class="keyword">FROM</span> seat;</span><br><span class="line"></span><br><span class="line">| id | (id+1)^1-1 | student |</span><br><span class="line">|<span class="comment">----|------------|---------|</span></span><br><span class="line">| 1  | 2          | Abbot   |</span><br><span class="line">| 2  | 1          | Doris   |</span><br><span class="line">| 3  | 4          | Emerson |</span><br><span class="line">| 4  | 3          | Green   |</span><br><span class="line">| 5  | 6          | Jeames  |</span><br></pre></td></tr></tbody></table></figure><p>Then, we can make a temp table and join seat with this table like below.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    seat s1</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    seat s2 <span class="keyword">ON</span> (s1.id+<span class="number">1</span>)^<span class="number">1</span><span class="number">-1</span> = s2.id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> s1.id;</span><br><span class="line"></span><br><span class="line">| id | student | id | student |</span><br><span class="line">|<span class="comment">----|---------|----|---------|</span></span><br><span class="line">| 1  | Abbot   | 2  | Doris   |</span><br><span class="line">| 2  | Doris   | 1  | Abbot   |</span><br><span class="line">| 3  | Emerson | 4  | Green   |</span><br><span class="line">| 4  | Green   | 3  | Emerson |</span><br><span class="line">| 5  | Jeames  |    |         |</span><br></pre></td></tr></tbody></table></figure><p>Note:The first two columns are from s1 and the last two are from s2.</p><p>At last, we can output s1.id and s2.student. However, the s2.student is NULL for seat id ‘5’ but s1.student is right. Thus, we we can use function <code>COALESCE()</code> to generate the correct output for the last record.</p><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZXhjaGFuZ2Utc2VhdHMv" title="https://leetcode.com/problems/exchange-seats/">https://leetcode.com/problems/exchange-seats/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZXhjaGFuZ2Utc2VhdHMvZGlzY3Vzcy81MjQ1MzkvNC1saW5lLXNvbHV0aW9uLXVzaW5nLXdpbmRvdy1mdW5jdGlvbi1Ub3AtUnVudGltZQ==" title="https://leetcode.com/problems/exchange-seats/discuss/524539/4-line-solution-using-window-function-Top-Runtime">https://leetcode.com/problems/exchange-seats/discuss/524539/4-line-solution-using-window-function-Top-Runtime<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZXhjaGFuZ2Utc2VhdHMvc29sdXRpb24v" title="https://leetcode.com/problems/exchange-seats/solution/">https://leetcode.com/problems/exchange-seats/solution/<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;626.Exchange Seats&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; seat(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, student &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; seat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Abbot&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Doris&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Emerson&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Green&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Jeames&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; seat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; seat(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, student &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Abbot&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Doris&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Emerson&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Green&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; seat (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, student) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Jeames&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Mary is a teacher in a middle school and she has a table &lt;code&gt;seat&lt;/code&gt; storing students’ names and their corresponding &lt;code&gt;seat&lt;/code&gt; ids.&lt;/p&gt;
&lt;p&gt;The column id is continuous increment.&lt;/p&gt;
&lt;p&gt;Mary wants to change seats for the adjacent students.&lt;/p&gt;
&lt;p&gt;Can you write a SQL query to output the result for Mary?&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    id   | student |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    1    | Abbot   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    2    | Doris   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    3    | Emerson |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    4    | Green   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    5    | Jeames  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For the sample input, the output is:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    id   | student |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    1    | Doris   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    2    | Abbot   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    3    | Green   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    4    | Emerson |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    5    | Jeames  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note:&lt;br&gt;If the number of students is odd, there is no need to change the last one’s seat.&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 620.not.boring.movies</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-620-not-boring-movies/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-620-not-boring-movies/</id>
    <published>2020-03-13T18:44:03.000Z</published>
    <updated>2020-03-13T18:49:54.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>627.Swap Salary</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> cinema (<span class="keyword">id</span> <span class="built_in">int</span>, movie <span class="built_in">varchar</span>(<span class="number">255</span>), description <span class="built_in">varchar</span>(<span class="number">255</span>), rating <span class="built_in">float</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> cinema</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'War'</span>, <span class="string">'great 3D'</span>, <span class="string">'8.9'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Science'</span>, <span class="string">'fiction'</span>, <span class="string">'8.5'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'irish'</span>, <span class="string">'boring'</span>, <span class="string">'6.2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Ice song'</span>, <span class="string">'Fantacy'</span>, <span class="string">'8.6'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'House card'</span>, <span class="string">'Interesting'</span>, <span class="string">'9.1'</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> cinema;</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> cinema (<span class="keyword">id</span> <span class="built_in">int</span>, movie <span class="built_in">varchar</span>(<span class="number">255</span>), description <span class="built_in">varchar</span>(<span class="number">255</span>), rating <span class="built_in">decimal</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'War'</span>, <span class="string">'great 3D'</span>, <span class="string">'8.9'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Science'</span>, <span class="string">'fiction'</span>, <span class="string">'8.5'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'irish'</span>, <span class="string">'boring'</span>, <span class="string">'6.2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Ice song'</span>, <span class="string">'Fantacy'</span>, <span class="string">'8.6'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'House card'</span>, <span class="string">'Interesting'</span>, <span class="string">'9.1'</span>);</span><br></pre></td></tr></tbody></table></figure><p>X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.<br>Please write a SQL query to output movies with an odd numbered ID and a description that is not ‘boring’. Order the result by rating.</p><p>For example, table <code>cinema</code>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br><span class="line">|   id    | movie     |  description |  rating   |</span><br><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br><span class="line">|   1     | War       |   great 3D   |   8.9     |</span><br><span class="line">|   2     | Science   |   fiction    |   8.5     |</span><br><span class="line">|   3     | irish     |   boring     |   6.2     |</span><br><span class="line">|   4     | Ice song  |   Fantacy    |   8.6     |</span><br><span class="line">|   5     | House card|   Interesting|   9.1     |</span><br><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br></pre></td></tr></tbody></table></figure><p>For the example above, the output should be:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br><span class="line">|   id    | movie     |  description |  rating   |</span><br><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br><span class="line">|   5     | House card|   Interesting|   9.1     |</span><br><span class="line">|   1     | War       |   great 3D   |   8.9     |</span><br><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><hr><p><br></p><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> cinema c</span><br><span class="line"><span class="keyword">where</span> c.id % <span class="number">2</span> = <span class="number">1</span> <span class="keyword">and</span> c.description != <span class="string">'boring'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c.rating <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> cinema c</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">mod</span>(c.id, <span class="number">2</span>) = <span class="number">1</span> <span class="keyword">and</span> c.description != <span class="string">'boring'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c.rating <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbm90LWJvcmluZy1tb3ZpZXMv" title="https://leetcode.com/problems/not-boring-movies/">https://leetcode.com/problems/not-boring-movies/<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;627.Swap Salary&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, movie &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), description &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), rating &lt;span class=&quot;built_in&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; cinema&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;War&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;great 3D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8.9&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Science&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;fiction&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8.5&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;irish&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;boring&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6.2&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Ice song&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Fantacy&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8.6&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;House card&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Interesting&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9.1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; cinema;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, movie &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), description &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), rating &lt;span class=&quot;built_in&quot;&gt;decimal&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;War&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;great 3D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8.9&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Science&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;fiction&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8.5&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;irish&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;boring&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6.2&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Ice song&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Fantacy&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8.6&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; cinema (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, movie, description, rating) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;House card&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Interesting&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9.1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.&lt;br&gt;Please write a SQL query to output movies with an odd numbered ID and a description that is not ‘boring’. Order the result by rating.&lt;/p&gt;
&lt;p&gt;For example, table &lt;code&gt;cinema&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+-----------+--------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   id    | movie     |  description |  rating   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+-----------+--------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   1     | War       |   great 3D   |   8.9     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   2     | Science   |   fiction    |   8.5     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   3     | irish     |   boring     |   6.2     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   4     | Ice song  |   Fantacy    |   8.6     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   5     | House card|   Interesting|   9.1     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+-----------+--------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For the example above, the output should be:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+-----------+--------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   id    | movie     |  description |  rating   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+-----------+--------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   5     | House card|   Interesting|   9.1     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   1     | War       |   great 3D   |   8.9     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+-----------+--------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 601.human.traffic.of.stadium</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-601-human-traffic-of-stadium/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/13/SQL-Leetcode-601-human-traffic-of-stadium/</id>
    <published>2020-03-13T18:42:03.000Z</published>
    <updated>2020-03-13T18:50:26.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>601.Human Traffic of Stadium</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> stadium (<span class="keyword">id</span> <span class="built_in">int</span>, visit_date <span class="built_in">DATE</span> <span class="literal">NULL</span>, people <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> stadium</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'2017-01-01'</span>, <span class="string">'10'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2017-01-02'</span>, <span class="string">'109'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'2017-01-03'</span>, <span class="string">'150'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'2017-01-04'</span>, <span class="string">'99'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'2017-01-05'</span>, <span class="string">'145'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'2017-01-06'</span>, <span class="string">'1455'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'2017-01-07'</span>, <span class="string">'199'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'8'</span>, <span class="string">'2017-01-08'</span>, <span class="string">'188'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> stadium;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stadium (<span class="keyword">id</span> <span class="built_in">int</span>, visit_date <span class="built_in">DATE</span> <span class="literal">NULL</span>, people <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'2017-01-01'</span>, <span class="string">'10'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2017-01-02'</span>, <span class="string">'109'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'2017-01-03'</span>, <span class="string">'150'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'2017-01-04'</span>, <span class="string">'99'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'2017-01-05'</span>, <span class="string">'145'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'2017-01-06'</span>, <span class="string">'1455'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'2017-01-07'</span>, <span class="string">'199'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'8'</span>, <span class="string">'2017-01-08'</span>, <span class="string">'188'</span>);</span><br></pre></td></tr></tbody></table></figure><p>X city built a new stadium, each day many people visit it and the stats are saved as these columns: id, visit_date, people</p><p>Please write a query to display the records which have 3 or more consecutive rows and the amount of people more than 100(inclusive).</p><p>For example, the table <code>stadium</code>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">------+------------+-----------+</span></span><br><span class="line">| id   | visit_date | people    |</span><br><span class="line">+<span class="comment">------+------------+-----------+</span></span><br><span class="line">| 1    | 2017-01-01 | 10        |</span><br><span class="line">| 2    | 2017-01-02 | 109       |</span><br><span class="line">| 3    | 2017-01-03 | 150       |</span><br><span class="line">| 4    | 2017-01-04 | 99        |</span><br><span class="line">| 5    | 2017-01-05 | 145       |</span><br><span class="line">| 6    | 2017-01-06 | 1455      |</span><br><span class="line">| 7    | 2017-01-07 | 199       |</span><br><span class="line">| 8    | 2017-01-08 | 188       |</span><br><span class="line">+<span class="comment">------+------------+-----------+</span></span><br></pre></td></tr></tbody></table></figure><p>For the sample data above, the output is:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">------+------------+-----------+</span></span><br><span class="line">| id   | visit_date | people    |</span><br><span class="line">+<span class="comment">------+------------+-----------+</span></span><br><span class="line">| 5    | 2017-01-05 | 145       |</span><br><span class="line">| 6    | 2017-01-06 | 1455      |</span><br><span class="line">| 7    | 2017-01-07 | 199       |</span><br><span class="line">| 8    | 2017-01-08 | 188       |</span><br><span class="line">+<span class="comment">------+------------+-----------+</span></span><br></pre></td></tr></tbody></table></figure><p>Note:<br>Each day only have one row record, and the dates are increasing with id increasing.</p><a id="more"></a><hr><p>这里我需要实名diss一下<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvaHVtYW4tdHJhZmZpYy1vZi1zdGFkaXVtL3NvbHV0aW9uLw==" title="https://leetcode.com/problems/human-traffic-of-stadium/solution/">Leetcode所选出的答案<i class="fa fa-external-link"></i></span>。笛卡儿积形式的算法在大型数据集下的SQL基本上都不能终止。</p><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> three_day <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *, </span><br><span class="line">           <span class="keyword">lead</span>(people, <span class="number">1</span>, <span class="literal">NULL</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>) <span class="keyword">as</span> next1, </span><br><span class="line">           <span class="keyword">lead</span>(people, <span class="number">2</span>, <span class="literal">NULl</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>) <span class="keyword">as</span> next2 </span><br><span class="line">    <span class="keyword">from</span> stadium</span><br><span class="line">), ids <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span> </span><br><span class="line">    <span class="keyword">from</span> three_day</span><br><span class="line">    <span class="keyword">where</span> people &gt;= <span class="number">100</span> <span class="keyword">and</span> next1 &gt;= <span class="number">100</span> <span class="keyword">and</span> next2 &gt;= <span class="number">100</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> three_day</span><br><span class="line">    <span class="keyword">where</span> people &gt;= <span class="number">100</span> <span class="keyword">and</span> next1 &gt;= <span class="number">100</span> <span class="keyword">and</span> next2 &gt;= <span class="number">100</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span> + <span class="number">2</span></span><br><span class="line">    <span class="keyword">from</span> three_day</span><br><span class="line">    <span class="keyword">where</span> people &gt;= <span class="number">100</span> <span class="keyword">and</span> next1 &gt;= <span class="number">100</span> <span class="keyword">and</span> next2 &gt;= <span class="number">100</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> stadium s </span><br><span class="line"><span class="keyword">where</span> s.id <span class="keyword">in</span> (<span class="keyword">select</span> * <span class="keyword">from</span> ids);</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s1.id, s1.visit_date, s1.people</span><br><span class="line"><span class="keyword">FROM</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">    s.id, </span><br><span class="line">    s.visit_date, </span><br><span class="line">    s.people, </span><br><span class="line">    <span class="keyword">lead</span>(people) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span>) <span class="keyword">as</span> next1,</span><br><span class="line">    <span class="keyword">lead</span>(people,<span class="number">2</span>) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span> ) <span class="keyword">as</span> next2,</span><br><span class="line">    lag(people) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span>) <span class="keyword">as</span> prev1,</span><br><span class="line">    lag(people,<span class="number">2</span>) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span> ) <span class="keyword">as</span> prev2</span><br><span class="line">    <span class="keyword">FROM</span> stadium <span class="keyword">as</span> s</span><br><span class="line">    ) <span class="keyword">AS</span> s1</span><br><span class="line"><span class="keyword">WHERE</span> (people&gt;=<span class="number">100</span> <span class="keyword">and</span> </span><br><span class="line">       ((next1&gt;=<span class="number">100</span> <span class="keyword">and</span> next2&gt;=<span class="number">100</span>)</span><br><span class="line">        <span class="keyword">or</span> (prev1&gt;=<span class="number">100</span> <span class="keyword">and</span> prev2&gt;=<span class="number">100</span>)</span><br><span class="line">        <span class="keyword">or</span> (prev1&gt;=<span class="number">100</span> <span class="keyword">and</span> next1&gt;=<span class="number">100</span>) <span class="comment">-- &lt;-this one is missing</span></span><br><span class="line">       ));</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvaHVtYW4tdHJhZmZpYy1vZi1zdGFkaXVtLw==" title="https://leetcode.com/problems/human-traffic-of-stadium/">https://leetcode.com/problems/human-traffic-of-stadium/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvaHVtYW4tdHJhZmZpYy1vZi1zdGFkaXVtL2Rpc2N1c3MvMjM3Mjk1L01TLVNRTC1TaW1wbGUtTGVhZC1hbmQtTGFn" title="https://leetcode.com/problems/human-traffic-of-stadium/discuss/237295/MS-SQL-Simple-Lead-and-Lag">https://leetcode.com/problems/human-traffic-of-stadium/discuss/237295/MS-SQL-Simple-Lead-and-Lag<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;601.Human Traffic of Stadium&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, visit_date &lt;span class=&quot;built_in&quot;&gt;DATE&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, people &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; stadium&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-01&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-02&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;109&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-03&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;150&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-04&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;99&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-05&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;145&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-06&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1455&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-07&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;199&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-08&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;188&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; stadium;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, visit_date &lt;span class=&quot;built_in&quot;&gt;DATE&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, people &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-01&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-02&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;109&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-03&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;150&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-04&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;99&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-05&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;145&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-06&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1455&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-07&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;199&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; stadium (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, visit_date, people) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2017-01-08&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;188&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;X city built a new stadium, each day many people visit it and the stats are saved as these columns: id, visit_date, people&lt;/p&gt;
&lt;p&gt;Please write a query to display the records which have 3 or more consecutive rows and the amount of people more than 100(inclusive).&lt;/p&gt;
&lt;p&gt;For example, the table &lt;code&gt;stadium&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| id   | visit_date | people    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1    | 2017-01-01 | 10        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2    | 2017-01-02 | 109       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 3    | 2017-01-03 | 150       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 4    | 2017-01-04 | 99        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 5    | 2017-01-05 | 145       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 6    | 2017-01-06 | 1455      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 7    | 2017-01-07 | 199       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 8    | 2017-01-08 | 188       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For the sample data above, the output is:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| id   | visit_date | people    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 5    | 2017-01-05 | 145       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 6    | 2017-01-06 | 1455      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 7    | 2017-01-07 | 199       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 8    | 2017-01-08 | 188       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------+------------+-----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note:&lt;br&gt;Each day only have one row record, and the dates are increasing with id increasing.&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 596.classes.more.than.5.students</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-596-classes-more-than-5-students/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-596-classes-more-than-5-students/</id>
    <published>2020-03-12T21:24:12.000Z</published>
    <updated>2020-03-12T21:26:07.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>596.Classes More Than 5 Students</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> courses (student <span class="built_in">varchar</span>(<span class="number">255</span>), <span class="keyword">class</span> <span class="built_in">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> courses</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'A'</span>, <span class="string">'Math'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'B'</span>, <span class="string">'English'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'C'</span>, <span class="string">'Math'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'D'</span>, <span class="string">'Biology'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'E'</span>, <span class="string">'Math'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'F'</span>, <span class="string">'Computer'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'G'</span>, <span class="string">'Math'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'H'</span>, <span class="string">'Math'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'I'</span>, <span class="string">'Math'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> courses;</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> courses (student <span class="built_in">varchar</span>(<span class="number">255</span>), <span class="keyword">class</span> <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'A'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'B'</span>, <span class="string">'English'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'C'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'D'</span>, <span class="string">'Biology'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'E'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'F'</span>, <span class="string">'Computer'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'G'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'H'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'I'</span>, <span class="string">'Math'</span>);</span><br></pre></td></tr></tbody></table></figure><p>There is a table <code>courses</code> with columns: student and class</p><p>Please list out all classes which have more than or equal to 5 students.</p><p>For example, the table:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------+------------+</span></span><br><span class="line">| student | class      |</span><br><span class="line">+<span class="comment">---------+------------+</span></span><br><span class="line">| A       | Math       |</span><br><span class="line">| B       | English    |</span><br><span class="line">| C       | Math       |</span><br><span class="line">| D       | Biology    |</span><br><span class="line">| E       | Math       |</span><br><span class="line">| F       | Computer   |</span><br><span class="line">| G       | Math       |</span><br><span class="line">| H       | Math       |</span><br><span class="line">| I       | Math       |</span><br><span class="line">+<span class="comment">---------+------------+</span></span><br></pre></td></tr></tbody></table></figure><p>Should output:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------+</span></span><br><span class="line">| class   |</span><br><span class="line">+<span class="comment">---------+</span></span><br><span class="line">| Math    |</span><br><span class="line">+<span class="comment">---------+</span></span><br></pre></td></tr></tbody></table></figure><p>Note:<br>The students should not be counted duplicate in each course.</p><a id="more"></a><hr><p><br></p><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> c.class </span><br><span class="line"><span class="keyword">from</span> courses c </span><br><span class="line"><span class="keyword">where</span> <span class="number">5</span> &lt;= (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> s.student) </span><br><span class="line">    <span class="keyword">from</span> courses s </span><br><span class="line">    <span class="keyword">where</span> s.class = c.class</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c.class </span><br><span class="line"><span class="keyword">from</span> courses c </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c.class </span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> c.student) &gt;= <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY2xhc3Nlcy1tb3JlLXRoYW4tNS1zdHVkZW50cy8=" title="https://leetcode.com/problems/classes-more-than-5-students/">https://leetcode.com/problems/classes-more-than-5-students/<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;596.Classes More Than 5 Students&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; courses (student &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; courses&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;English&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Biology&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Computer&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;G&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;H&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;I&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; courses;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; courses (student &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;English&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Biology&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Computer&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;G&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;H&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; courses (student, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;I&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Math&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;There is a table &lt;code&gt;courses&lt;/code&gt; with columns: student and class&lt;/p&gt;
&lt;p&gt;Please list out all classes which have more than or equal to 5 students.&lt;/p&gt;
&lt;p&gt;For example, the table:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| student | class      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| A       | Math       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| B       | English    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| C       | Math       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| D       | Biology    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| E       | Math       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| F       | Computer   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| G       | Math       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| H       | Math       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| I       | Math       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Should output:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| class   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Math    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note:&lt;br&gt;The students should not be counted duplicate in each course.&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 595.big.countries</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-595-big-countries/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-595-big-countries/</id>
    <published>2020-03-12T21:22:53.000Z</published>
    <updated>2020-03-12T21:26:21.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>595.Big Countries</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> World (<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), continent <span class="built_in">varchar</span>(<span class="number">255</span>), area <span class="built_in">int</span>, population <span class="built_in">int</span>, gdp <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> World</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Afghanistan'</span>, <span class="string">'Asia'</span>, <span class="string">'652230'</span>, <span class="string">'25500100'</span>, <span class="string">'20343000000'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Albania'</span>, <span class="string">'Europe'</span>, <span class="string">'28748'</span>, <span class="string">'2831741'</span>, <span class="string">'12960000000'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Algeria'</span>, <span class="string">'Africa'</span>, <span class="string">'2381741'</span>, <span class="string">'37100000'</span>, <span class="string">'188681000000'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Andorra'</span>, <span class="string">'Europe'</span>, <span class="string">'468'</span>, <span class="string">'78115'</span>, <span class="string">'3712000000'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Angola'</span>, <span class="string">'Africa'</span>, <span class="string">'1246700'</span>, <span class="string">'20609294'</span>, <span class="string">'100990000000'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> World;</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> World (<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), continent <span class="built_in">varchar</span>(<span class="number">255</span>), area <span class="built_in">int</span>, population <span class="built_in">int</span>, gdp <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Afghanistan'</span>, <span class="string">'Asia'</span>, <span class="string">'652230'</span>, <span class="string">'25500100'</span>, <span class="string">'20343000000'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Albania'</span>, <span class="string">'Europe'</span>, <span class="string">'28748'</span>, <span class="string">'2831741'</span>, <span class="string">'12960000000'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Algeria'</span>, <span class="string">'Africa'</span>, <span class="string">'2381741'</span>, <span class="string">'37100000'</span>, <span class="string">'188681000000'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Andorra'</span>, <span class="string">'Europe'</span>, <span class="string">'468'</span>, <span class="string">'78115'</span>, <span class="string">'3712000000'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Angola'</span>, <span class="string">'Africa'</span>, <span class="string">'1246700'</span>, <span class="string">'20609294'</span>, <span class="string">'100990000000'</span>);</span><br></pre></td></tr></tbody></table></figure><p>There is a table <code>World</code></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------------+------------+------------+--------------+---------------+</span></span><br><span class="line">| name            | continent  | area       | population   | gdp           |</span><br><span class="line">+<span class="comment">-----------------+------------+------------+--------------+---------------+</span></span><br><span class="line">| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |</span><br><span class="line">| Albania         | Europe     | 28748      | 2831741      | 12960000      |</span><br><span class="line">| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |</span><br><span class="line">| Andorra         | Europe     | 468        | 78115        | 3712000       |</span><br><span class="line">| Angola          | Africa     | 1246700    | 20609294     | 100990000     |</span><br><span class="line">+<span class="comment">-----------------+------------+------------+--------------+---------------+</span></span><br></pre></td></tr></tbody></table></figure><p>A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.</p><p>Write a SQL solution to output big countries’ name, population and area.</p><p>For example, according to the above table, we should output:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">--------------+-------------+--------------+</span></span><br><span class="line">| name         | population  | area         |</span><br><span class="line">+<span class="comment">--------------+-------------+--------------+</span></span><br><span class="line">| Afghanistan  | 25500100    | 652230       |</span><br><span class="line">| Algeria      | 37100000    | 2381741      |</span><br><span class="line">+<span class="comment">--------------+-------------+--------------+</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><hr><p><br></p><h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> w.name, w.population, w.area</span><br><span class="line"><span class="keyword">from</span> world w</span><br><span class="line"><span class="keyword">where</span> w.area &gt; <span class="number">3000000</span> <span class="keyword">or</span> w.population &gt; <span class="number">25000000</span></span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">name</span>, population, area</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    world</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    area &gt; <span class="number">3000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">name</span>, population, area</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    world</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    population &gt; <span class="number">25000000</span>;</span><br></pre></td></tr></tbody></table></figure><p>这题非常简单，但是有另外一点引起我的注意：<br><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy9zb2x1dGlvbi8=" title="https://leetcode.com/problems/big-countries/solution/">https://leetcode.com/problems/big-countries/solution/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTM3NTA0NzUvc3FsLXBlcmZvcm1hbmNlLXVuaW9uLXZzLW9y" title="https://stackoverflow.com/questions/13750475/sql-performance-union-vs-or">https://stackoverflow.com/questions/13750475/sql-performance-union-vs-or<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy9kaXNjdXNzLzEwMzU2MS9Vbmlvbi1hbmQtT1ItYW5kLXRoZS1FeHBsYW5hdGlvbg==" title="https://leetcode.com/problems/big-countries/discuss/103561/Union-and-OR-and-the-Explanation">https://leetcode.com/problems/big-countries/discuss/103561/Union-and-OR-and-the-Explanation<i class="fa fa-external-link"></i></span></p><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy8=" title="https://leetcode.com/problems/big-countries/">https://leetcode.com/problems/big-countries/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy9zb2x1dGlvbi8=" title="https://leetcode.com/problems/big-countries/solution/">https://leetcode.com/problems/big-countries/solution/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTM3NTA0NzUvc3FsLXBlcmZvcm1hbmNlLXVuaW9uLXZzLW9y" title="https://stackoverflow.com/questions/13750475/sql-performance-union-vs-or">https://stackoverflow.com/questions/13750475/sql-performance-union-vs-or<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy9kaXNjdXNzLzEwMzU2MS9Vbmlvbi1hbmQtT1ItYW5kLXRoZS1FeHBsYW5hdGlvbg==" title="https://leetcode.com/problems/big-countries/discuss/103561/Union-and-OR-and-the-Explanation">https://leetcode.com/problems/big-countries/discuss/103561/Union-and-OR-and-the-Explanation<i class="fa fa-external-link"></i></span></p><p>该文章遵循<span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLzQuMC9kZWVkLnpo" title="https://creativecommons.org/licenses/by-nc/4.0/deed.zh">创作共用版权协议 CC BY-NC 4.0<i class="fa fa-external-link"></i></span>，要求署名、非商业 、保持一致。在满足<span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLzQuMC9kZWVkLnpo" title="https://creativecommons.org/licenses/by-nc/4.0/deed.zh">创作共用版权协议 CC BY-NC 4.0<i class="fa fa-external-link"></i></span> 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;595.Big Countries&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), continent &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), area &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, population &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, gdp &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; World&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Afghanistan&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Asia&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;652230&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;25500100&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;20343000000&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Albania&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Europe&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;28748&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2831741&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12960000000&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Algeria&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Africa&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2381741&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;37100000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;188681000000&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Andorra&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Europe&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;468&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;78115&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3712000000&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Angola&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Africa&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1246700&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;20609294&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;100990000000&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; World;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), continent &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), area &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, population &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, gdp &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Afghanistan&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Asia&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;652230&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;25500100&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;20343000000&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Albania&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Europe&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;28748&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2831741&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12960000000&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Algeria&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Africa&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2381741&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;37100000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;188681000000&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Andorra&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Europe&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;468&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;78115&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3712000000&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; World (&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;, continent, area, population, gdp) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Angola&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Africa&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1246700&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;20609294&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;100990000000&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;There is a table &lt;code&gt;World&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;-----------------+------------+------------+--------------+---------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| name            | continent  | area       | population   | gdp           |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;-----------------+------------+------------+--------------+---------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Albania         | Europe     | 28748      | 2831741      | 12960000      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Andorra         | Europe     | 468        | 78115        | 3712000       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Angola          | Africa     | 1246700    | 20609294     | 100990000     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;-----------------+------------+------------+--------------+---------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.&lt;/p&gt;
&lt;p&gt;Write a SQL solution to output big countries’ name, population and area.&lt;/p&gt;
&lt;p&gt;For example, according to the above table, we should output:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;--------------+-------------+--------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| name         | population  | area         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;--------------+-------------+--------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Afghanistan  | 25500100    | 652230       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Algeria      | 37100000    | 2381741      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;--------------+-------------+--------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 262.trips.and.users</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-262-trips-and-users/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-262-trips-and-users/</id>
    <published>2020-03-12T19:13:14.000Z</published>
    <updated>2020-03-12T21:26:46.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>262.Trips and Users</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Trips (<span class="keyword">Id</span> <span class="built_in">int</span>, Client_Id <span class="built_in">int</span>, Driver_Id <span class="built_in">int</span>, City_Id <span class="built_in">int</span>, <span class="keyword">Status</span> ENUM(<span class="string">'completed'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'cancelled_by_client'</span>), Request_at <span class="built_in">varchar</span>(<span class="number">50</span>))</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> <span class="keyword">Users</span> (Users_Id <span class="built_in">int</span>, Banned <span class="built_in">varchar</span>(<span class="number">50</span>), <span class="keyword">Role</span> ENUM(<span class="string">'client'</span>, <span class="string">'driver'</span>, <span class="string">'partner'</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Trips</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'10'</span>, <span class="string">'1'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-01'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'11'</span>, <span class="string">'1'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'2013-10-01'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'12'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-01'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'13'</span>, <span class="string">'6'</span>, <span class="string">'cancelled_by_client'</span>, <span class="string">'2013-10-01'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'1'</span>, <span class="string">'10'</span>, <span class="string">'1'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'2'</span>, <span class="string">'11'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'3'</span>, <span class="string">'12'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'8'</span>, <span class="string">'2'</span>, <span class="string">'12'</span>, <span class="string">'12'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-03'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'9'</span>, <span class="string">'3'</span>, <span class="string">'10'</span>, <span class="string">'12'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-03'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'10'</span>, <span class="string">'4'</span>, <span class="string">'13'</span>, <span class="string">'12'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'2013-10-03'</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> <span class="keyword">Users</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Yes'</span>, <span class="string">'client'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'10'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'11'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'12'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'13'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> Trips;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">Users</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> <span class="keyword">status</span> <span class="keyword">AS</span> ENUM(<span class="string">'completed'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'cancelled_by_client'</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> <span class="keyword">role</span> <span class="keyword">AS</span> ENUM(<span class="string">'client'</span>, <span class="string">'driver'</span>, <span class="string">'partner'</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Trips (<span class="keyword">Id</span> <span class="built_in">int</span>, Client_Id <span class="built_in">int</span>, Driver_Id <span class="built_in">int</span>, City_Id <span class="built_in">int</span>, <span class="keyword">Status</span> <span class="keyword">status</span>, Request_at <span class="built_in">varchar</span>(<span class="number">50</span>));</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">Users</span> (Users_Id <span class="built_in">int</span>, Banned <span class="built_in">varchar</span>(<span class="number">50</span>), <span class="keyword">Role</span> <span class="keyword">role</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'10'</span>, <span class="string">'1'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'11'</span>, <span class="string">'1'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'2013-10-01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'12'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'13'</span>, <span class="string">'6'</span>, <span class="string">'cancelled_by_client'</span>, <span class="string">'2013-10-01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'1'</span>, <span class="string">'10'</span>, <span class="string">'1'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'2'</span>, <span class="string">'11'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'3'</span>, <span class="string">'12'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'8'</span>, <span class="string">'2'</span>, <span class="string">'12'</span>, <span class="string">'12'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-03'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'9'</span>, <span class="string">'3'</span>, <span class="string">'10'</span>, <span class="string">'12'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-03'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'10'</span>, <span class="string">'4'</span>, <span class="string">'13'</span>, <span class="string">'12'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'2013-10-03'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Yes'</span>, <span class="string">'client'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'10'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'11'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'12'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'13'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>);</span><br></pre></td></tr></tbody></table></figure><p>The <code>Trips</code> table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are both foreign keys to the Users_Id at the Users table. Status is an ENUM type of (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’).</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+-----------+-----------+---------+--------------------+----------+</span></span><br><span class="line">| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|</span><br><span class="line">+<span class="comment">----+-----------+-----------+---------+--------------------+----------+</span></span><br><span class="line">| 1  |     1     |    10     |    1    |     completed      |2013-10-01|</span><br><span class="line">| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|</span><br><span class="line">| 3  |     3     |    12     |    6    |     completed      |2013-10-01|</span><br><span class="line">| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|</span><br><span class="line">| 5  |     1     |    10     |    1    |     completed      |2013-10-02|</span><br><span class="line">| 6  |     2     |    11     |    6    |     completed      |2013-10-02|</span><br><span class="line">| 7  |     3     |    12     |    6    |     completed      |2013-10-02|</span><br><span class="line">| 8  |     2     |    12     |    12   |     completed      |2013-10-03|</span><br><span class="line">| 9  |     3     |    10     |    12   |     completed      |2013-10-03| </span><br><span class="line">| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|</span><br><span class="line">+<span class="comment">----+-----------+-----------+---------+--------------------+----------+</span></span><br></pre></td></tr></tbody></table></figure><p>The Users table holds all users. Each user has an unique Users_Id, and Role is an ENUM type of (‘client’, ‘driver’, ‘partner’).</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----------+--------+--------+</span></span><br><span class="line">| Users_Id | Banned |  Role  |</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br><span class="line">|    1     |   No   | client |</span><br><span class="line">|    2     |   Yes  | client |</span><br><span class="line">|    3     |   No   | client |</span><br><span class="line">|    4     |   No   | client |</span><br><span class="line">|    10    |   No   | driver |</span><br><span class="line">|    11    |   No   | driver |</span><br><span class="line">|    12    |   No   | driver |</span><br><span class="line">|    13    |   No   | driver |</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br></pre></td></tr></tbody></table></figure><p>Write a SQL query to find the cancellation rate of requests made by unbanned users (both client and driver must be unbanned) between Oct 1, 2013 and Oct 3, 2013. The cancellation rate is computed by dividing the number of canceled (by client or driver) requests made by unbanned users by the total number of requests made by unbanned users.</p><p>For the above tables, your SQL query should return the following rows with the cancellation rate being rounded to two decimal places.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">------------+-------------------+</span></span><br><span class="line">|     Day    | Cancellation Rate |</span><br><span class="line">+<span class="comment">------------+-------------------+</span></span><br><span class="line">| 2013-10-01 |       0.33        |</span><br><span class="line">| 2013-10-02 |       0.00        |</span><br><span class="line">| 2013-10-03 |       0.50        |</span><br><span class="line">+<span class="comment">------------+-------------------+</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><hr><p><br></p><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p><strong>适用于PostgreSQL</strong>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> temp.request_at <span class="keyword">as</span> <span class="string">"Day"</span>, </span><br><span class="line">       <span class="keyword">round</span>(<span class="keyword">cast</span>(<span class="keyword">count</span>(*) filter (<span class="keyword">where</span> temp.status != <span class="string">'completed'</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> temp.request_at) <span class="keyword">as</span> <span class="built_in">decimal</span>) / <span class="keyword">count</span>(*) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> temp.request_at), <span class="number">2</span>) <span class="keyword">as</span> <span class="string">"Cancellation Rate"</span> </span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> request_at, <span class="keyword">status</span> </span><br><span class="line">    <span class="keyword">from</span> trips t, <span class="keyword">users</span> <span class="keyword">client</span>, <span class="keyword">users</span> driver </span><br><span class="line">    <span class="keyword">where</span> t.client_id = client.users_id <span class="keyword">and</span> t.driver_id = driver.users_id <span class="keyword">and</span> client.banned = <span class="string">'No'</span> <span class="keyword">and</span> driver.banned = <span class="string">'No'</span>) <span class="keyword">as</span> temp;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p><strong>适用于MSSQL和PostgreSQL</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> temp.request_at <span class="keyword">as</span> <span class="string">"Day"</span>, </span><br><span class="line">       <span class="keyword">round</span>(<span class="keyword">cast</span>(<span class="keyword">count</span>(<span class="keyword">case</span> <span class="keyword">when</span> temp.status != <span class="string">'completed'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> temp.request_at) <span class="keyword">as</span> <span class="built_in">decimal</span>) / <span class="keyword">count</span>(*) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> temp.request_at), <span class="number">2</span>) <span class="keyword">as</span> <span class="string">"Cancellation Rate"</span> </span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> request_at, <span class="keyword">status</span> </span><br><span class="line">    <span class="keyword">from</span> trips t, <span class="keyword">users</span> <span class="keyword">client</span>, <span class="keyword">users</span> driver </span><br><span class="line">    <span class="keyword">where</span> t.client_id = client.users_id <span class="keyword">and</span> t.driver_id = driver.users_id <span class="keyword">and</span> client.banned = <span class="string">'No'</span> <span class="keyword">and</span> driver.banned = <span class="string">'No'</span>) <span class="keyword">as</span> temp;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdHJpcHMtYW5kLXVzZXJzLw==" title="https://leetcode.com/problems/trips-and-users/">https://leetcode.com/problems/trips-and-users/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzkzNzg1NTAvc3FsLXdpbmRvdy1mdW5jdGlvbi13aXRoLWEtd2hlcmUtY2xhdXNl" title="https://stackoverflow.com/questions/39378550/sql-window-function-with-a-where-clause">https://stackoverflow.com/questions/39378550/sql-window-function-with-a-where-clause<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9tb2Rlcm4tc3FsLmNvbS9kZS9mZWF0dXJlL2ZpbHRlcg==" title="https://modern-sql.com/de/feature/filter">https://modern-sql.com/de/feature/filter<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;262.Trips and Users&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, Client_Id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, Driver_Id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, City_Id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt; ENUM(&lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_driver&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_client&#39;&lt;/span&gt;), Request_at &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, Banned &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt; ENUM(&lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;partner&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Trips&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-01&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;11&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_driver&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-01&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-01&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;13&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_client&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-01&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-02&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;11&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-02&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-02&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-03&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-03&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;13&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_driver&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-03&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Yes&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;11&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;13&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Trips;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TYPE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; ENUM(&lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_driver&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_client&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TYPE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; ENUM(&lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;partner&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, Client_Id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, Driver_Id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, City_Id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;status&lt;/span&gt;, Request_at &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, Banned &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;role&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-01&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;11&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_driver&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-01&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-01&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;13&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_client&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-01&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-02&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;11&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-02&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-02&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-03&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;completed&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-03&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Trips (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Client_Id, Driver_Id, City_Id, &lt;span class=&quot;keyword&quot;&gt;Status&lt;/span&gt;, Request_at) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;13&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cancelled_by_driver&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2013-10-03&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Yes&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;client&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;11&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Users&lt;/span&gt; (Users_Id, Banned, &lt;span class=&quot;keyword&quot;&gt;Role&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;13&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;No&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;Trips&lt;/code&gt; table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are both foreign keys to the Users_Id at the Users table. Status is an ENUM type of (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’).&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+-----------+-----------+---------+--------------------+----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+-----------+-----------+---------+--------------------+----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1  |     1     |    10     |    1    |     completed      |2013-10-01|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 3  |     3     |    12     |    6    |     completed      |2013-10-01|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 5  |     1     |    10     |    1    |     completed      |2013-10-02|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 6  |     2     |    11     |    6    |     completed      |2013-10-02|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 7  |     3     |    12     |    6    |     completed      |2013-10-02|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 8  |     2     |    12     |    12   |     completed      |2013-10-03|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 9  |     3     |    10     |    12   |     completed      |2013-10-03| &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+-----------+-----------+---------+--------------------+----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The Users table holds all users. Each user has an unique Users_Id, and Role is an ENUM type of (‘client’, ‘driver’, ‘partner’).&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----------+--------+--------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Users_Id | Banned |  Role  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----------+--------+--------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    1     |   No   | client |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    2     |   Yes  | client |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    3     |   No   | client |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    4     |   No   | client |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    10    |   No   | driver |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    11    |   No   | driver |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    12    |   No   | driver |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    13    |   No   | driver |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----------+--------+--------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Write a SQL query to find the cancellation rate of requests made by unbanned users (both client and driver must be unbanned) between Oct 1, 2013 and Oct 3, 2013. The cancellation rate is computed by dividing the number of canceled (by client or driver) requests made by unbanned users by the total number of requests made by unbanned users.&lt;/p&gt;
&lt;p&gt;For the above tables, your SQL query should return the following rows with the cancellation rate being rounded to two decimal places.&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------------+-------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|     Day    | Cancellation Rate |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------------+-------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2013-10-01 |       0.33        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2013-10-02 |       0.00        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2013-10-03 |       0.50        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------------+-------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 197.rising.temperature</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-197-rising-temperature/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-197-rising-temperature/</id>
    <published>2020-03-12T19:09:58.000Z</published>
    <updated>2020-03-12T21:26:59.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>197.Rising Temperature</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Weather (<span class="keyword">Id</span> <span class="built_in">int</span>, RecordDate <span class="built_in">date</span>, Temperature <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Weather;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'2015-01-01'</span>, <span class="string">'10'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2015-01-02'</span>, <span class="string">'25'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'2015-01-03'</span>, <span class="string">'20'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'2015-01-04'</span>, <span class="string">'30'</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Weather;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Weather (<span class="keyword">Id</span> <span class="built_in">int</span>, RecordDate <span class="built_in">date</span>, Temperature <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'2015-01-01'</span>, <span class="string">'10'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2015-01-02'</span>, <span class="string">'25'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'2015-01-03'</span>, <span class="string">'20'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'2015-01-04'</span>, <span class="string">'30'</span>);</span><br></pre></td></tr></tbody></table></figure><p>Given a <code>Weather</code> table, write a SQL query to find all dates’ Ids with higher temperature compared to its previous (yesterday’s) dates.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------+------------------+------------------+</span></span><br><span class="line">| Id(INT) | RecordDate(DATE) | Temperature(INT) |</span><br><span class="line">+<span class="comment">---------+------------------+------------------+</span></span><br><span class="line">|       1 |       2015-01-01 |               10 |</span><br><span class="line">|       2 |       2015-01-02 |               25 |</span><br><span class="line">|       3 |       2015-01-03 |               20 |</span><br><span class="line">|       4 |       2015-01-04 |               30 |</span><br><span class="line">+<span class="comment">---------+------------------+------------------+</span></span><br></pre></td></tr></tbody></table></figure><p>For example, return the following Ids for the above <code>Weather</code> table:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+</span></span><br><span class="line">| Id |</span><br><span class="line">+<span class="comment">----+</span></span><br><span class="line">|  2 |</span><br><span class="line">|  4 |</span><br><span class="line">+<span class="comment">----+</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><hr><p>我第一次审题，误看成和前一个tuple(当然不一定是前一天)比较温度的大小，然后写了如下的带window function的版本：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> w.id <span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> *, lag(Temperature, <span class="number">1</span>, <span class="literal">NULL</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> RecordDate) <span class="keyword">as</span> last_temp </span><br><span class="line">    <span class="keyword">from</span> weather) <span class="keyword">as</span> w </span><br><span class="line"><span class="keyword">where</span> w.temperature &gt; w.last_temp;</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p><strong>适用于PostgreSQL</strong>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> temp.id <span class="keyword">as</span> <span class="keyword">Id</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> w1.id <span class="keyword">as</span> <span class="keyword">id</span>, w1.temperature <span class="keyword">as</span> temp, w2.temperature <span class="keyword">as</span> last_temp </span><br><span class="line">    <span class="keyword">from</span> weather w1, weather w2 </span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">EXTRACT</span> (<span class="keyword">DAY</span> <span class="keyword">FROM</span> w1.recorddate) - <span class="keyword">EXTRACT</span> (<span class="keyword">DAY</span> <span class="keyword">FROM</span> w2.recorddate) = <span class="number">1</span>) <span class="keyword">as</span> temp </span><br><span class="line"><span class="keyword">where</span> temp.temp &gt; temp.last_temp;</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><p><strong>适用于MySQL</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> temp.id <span class="keyword">as</span> <span class="keyword">Id</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> w1.id <span class="keyword">as</span> <span class="keyword">id</span>, w1.temperature <span class="keyword">as</span> temp, w2.temperature <span class="keyword">as</span> last_temp </span><br><span class="line">    <span class="keyword">from</span> weather w1, weather w2 </span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">DATEDIFF</span>(w1.recorddate, w2.recorddate) = <span class="number">1</span>) <span class="keyword">as</span> temp </span><br><span class="line"><span class="keyword">where</span> temp.temp &gt; temp.last_temp;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t1.Id</span><br><span class="line"><span class="keyword">From</span> </span><br><span class="line">    Weather t1, Weather t2</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    t1.Temperature &gt; t2.Temperature</span><br><span class="line"><span class="keyword">AND</span></span><br><span class="line">    <span class="keyword">subdate</span>(t1.Date, <span class="number">1</span>) = t2.Date</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmlzaW5nLXRlbXBlcmF0dXJlLw==" title="https://leetcode.com/problems/rising-temperature/">https://leetcode.com/problems/rising-temperature/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmlzaW5nLXRlbXBlcmF0dXJlL2Rpc2N1c3MvNTU2NDkvU29sdXRpb24td2l0aC1teXNxbC1idWlsdC1pbi1mdW5jdGlvbg==" title="https://leetcode.com/problems/rising-temperature/discuss/55649/Solution-with-mysql-built-in-function">https://leetcode.com/problems/rising-temperature/discuss/55649/Solution-with-mysql-built-in-function<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjMvZnVuY3Rpb25zLWRhdGV0aW1lLmh0bWwjRlVOQ1RJT05TLURBVEVUSU1FLUVYVFJBQ1Q=" title="https://www.postgresql.org/docs/9.3/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT">https://www.postgresql.org/docs/9.3/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;197.Rising Temperature&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, RecordDate &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt;, Temperature &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Weather;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, RecordDate, Temperature) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2015-01-01&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, RecordDate, Temperature) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2015-01-02&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;25&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, RecordDate, Temperature) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2015-01-03&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;20&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, RecordDate, Temperature) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2015-01-04&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;30&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; Weather;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, RecordDate &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt;, Temperature &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, RecordDate, Temperature) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2015-01-01&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, RecordDate, Temperature) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2015-01-02&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;25&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, RecordDate, Temperature) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2015-01-03&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;20&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Weather (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, RecordDate, Temperature) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2015-01-04&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;30&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Given a &lt;code&gt;Weather&lt;/code&gt; table, write a SQL query to find all dates’ Ids with higher temperature compared to its previous (yesterday’s) dates.&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+------------------+------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Id(INT) | RecordDate(DATE) | Temperature(INT) |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+------------------+------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|       1 |       2015-01-01 |               10 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|       2 |       2015-01-02 |               25 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|       3 |       2015-01-03 |               20 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|       4 |       2015-01-04 |               30 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------+------------------+------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For example, return the following Ids for the above &lt;code&gt;Weather&lt;/code&gt; table:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Id |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  2 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  4 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 196.delete.duplicate.emails</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-196-delete-duplicate-emails/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/12/SQL-Leetcode-196-delete-duplicate-emails/</id>
    <published>2020-03-12T18:59:44.000Z</published>
    <updated>2020-03-12T21:25:54.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>196.Delete Duplicate Emails</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Person (<span class="keyword">Id</span> <span class="built_in">int</span>, Email <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Person</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'john@example.com'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'bob@example.com'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'john@example.com'</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Person;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Person (<span class="keyword">Id</span> <span class="built_in">int</span>, Email <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'john@example.com'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'bob@example.com'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'john@example.com'</span>);</span><br></pre></td></tr></tbody></table></figure><p>Write a SQL query to delete all duplicate email entries in a table named <code>Person</code>, keeping only unique emails based on its smallest Id.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+------------------+</span></span><br><span class="line">| Id | Email            |</span><br><span class="line">+<span class="comment">----+------------------+</span></span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">| 3  | john@example.com |</span><br><span class="line">+<span class="comment">----+------------------+</span></span><br></pre></td></tr></tbody></table></figure><p>Id is the primary key column for this table.<br>For example, after running your query, the above <code>Person</code> table should have the following rows:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+------------------+</span></span><br><span class="line">| Id | Email            |</span><br><span class="line">+<span class="comment">----+------------------+</span></span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">+<span class="comment">----+------------------+</span></span><br></pre></td></tr></tbody></table></figure><p>Note:</p><p>Your output is the whole <code>Person</code> table after executing your sql. Use <code>delete</code> statement.</p><a id="more"></a><hr><p><br></p><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p><strong>适用于PostgreSQL</strong>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> </span><br><span class="line"><span class="keyword">from</span> person p1 </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span> (</span><br><span class="line">    <span class="keyword">select</span> * </span><br><span class="line">    <span class="keyword">from</span> person p2 </span><br><span class="line">    <span class="keyword">where</span> p1.id &gt; p2.id <span class="keyword">and</span> p1.email = p2.email</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><p><strong>不适用于PostgreSQL</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> p1 </span><br><span class="line"><span class="keyword">FROM</span> Person p1,</span><br><span class="line">    Person p2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    p1.Email = p2.Email <span class="keyword">AND</span> p1.Id &gt; p2.Id;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZGVsZXRlLWR1cGxpY2F0ZS1lbWFpbHMv" title="https://leetcode.com/problems/delete-duplicate-emails/">https://leetcode.com/problems/delete-duplicate-emails/<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;196.Delete Duplicate Emails&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Person (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, Email &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Person&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Person (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Email) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;john@example.com&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Person (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Email) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;bob@example.com&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Person (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Email) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;john@example.com&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; Person;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Person (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, Email &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Person (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Email) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;john@example.com&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Person (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Email) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;bob@example.com&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Person (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, Email) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;john@example.com&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Write a SQL query to delete all duplicate email entries in a table named &lt;code&gt;Person&lt;/code&gt;, keeping only unique emails based on its smallest Id.&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Id | Email            |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1  | john@example.com |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2  | bob@example.com  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 3  | john@example.com |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Id is the primary key column for this table.&lt;br&gt;For example, after running your query, the above &lt;code&gt;Person&lt;/code&gt; table should have the following rows:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Id | Email            |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1  | john@example.com |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2  | bob@example.com  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;Your output is the whole &lt;code&gt;Person&lt;/code&gt; table after executing your sql. Use &lt;code&gt;delete&lt;/code&gt; statement.&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>[CMU-15445]Lec03</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/11/CMU-15445-Lec03/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/11/CMU-15445-Lec03/</id>
    <published>2020-03-11T09:51:09.000Z</published>
    <updated>2020-03-17T13:45:03.638Z</updated>
    
    <content type="html"><![CDATA[<p>Database Storage Part I - 数据库存储 I</p><p>Slide: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzAzLXN0b3JhZ2UxLnBkZg==" title="https://15445.courses.cs.cmu.edu/fall2019/slides/03-storage1.pdf">https://15445.courses.cs.cmu.edu/fall2019/slides/03-storage1.pdf<i class="fa fa-external-link"></i></span><br>Note: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDMtc3RvcmFnZTEucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/03-storage1.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/03-storage1.pdf<i class="fa fa-external-link"></i></span><br>Reading: Chapter 10.1-10.2, 10.5-10.6</p><p>这节两课，我们会学习数据库内部的存储。</p><p>Database Storage 在CMU分成了两部分，在两节课中讲。这是第一部分。</p><p>这部分涉及存储的硬件, 操作系统提供的syscall, 数据库缓存区(buffer pool)的缓存页(buffer page), Slotted page等等。</p><a id="more"></a><p><img data-src="/images/CMU1544564/Lec03/1.jpg" alt="1.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/3.jpg" alt="3.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/4.jpg" alt="4.jpg"></p><h1 id="Disk-Oriented-Architecture"><a href="#Disk-Oriented-Architecture" class="headerlink" title="Disk-Oriented Architecture"></a>Disk-Oriented Architecture</h1><p><img data-src="/images/CMU1544564/Lec03/5.jpg" alt="5.jpg"></p><p>这个课我们重点在Disk-oriented databases(面向磁盘的数据库), 这是一种比较成熟，诞生很早的数据库类型。在2010s　学术界和工业界中开发了非常多优秀的In-Memory databases(内存数据库)，当然它的数据主要存储(primary storage location)于内存中。内存数据库具体的细节可以在CMU的高级数据库课(CMU 15-721)中学到。</p><p>另外，<strong>年龄比较大</strong>并不意味着Disk-oriented databases没落。相反的是， HDD的可靠性和低廉的价格保障了Disk-oriented databases的市场份额，SSD硬件的读写能力的进步让Disk-oriented databases并不比 In-Memory databases慢很多。近些年，Disk-oriented databases正在努力融合接纳 In-Memory databases 的技术，并拥有相同的performance，见　<span class="exturl" data-url="aHR0cHM6Ly91bWJyYS5kYi5pbi50dW0uZGUv" title="https://umbra.db.in.tum.de/">https://umbra.db.in.tum.de/<i class="fa fa-external-link"></i></span></p><h2 id="Storage-Hierarchy"><a href="#Storage-Hierarchy" class="headerlink" title="Storage Hierarchy"></a>Storage Hierarchy</h2><p><img data-src="/images/CMU1544564/Lec03/6.jpg" alt="6.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/7.jpg" alt="7.jpg"></p><p>我们注意水平的虚线：</p><ul><li>虚线以上：　voltaile devices (易失的存储硬件设备)，数据只能在电力提供的情况下被存储。单位容量价格更贵，随机访问(random access)较快，访问数据粒度(granularity)是Byte, 即每次访问可以获得数据的最小单元是Byte。</li><li>虚线以下：　non-voltaile devices (非易失的存储硬件设备)，数据可以在无电力提供的情况下被存储。单位容量价格更便宜，随机访问(random access)较慢，访问数据粒度(granularity)是Block, 即每次访问可以获得数据的最小单元是Block。一个Block一般为4KiB。</li></ul><p>non-voltaile devices可以被模糊称为<em>disk</em>，当然是在我们不区分SSD, HDD, Network Storage, Tape的时候。另外它们也被称为　block devices，因为是访问粒度是一个block。</p><h3 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h3><p><img data-src="/images/CMU1544564/Lec03/8.jpg" alt="8.jpg"></p><p>Pavlo教授的第一个PhD学生 Joy Arulraj的主要研究方向是一种新的硬件 Non-voltaile Memory，这种硬件会改变我们已知的 Storage Hierarchy。</p><p>非常不严谨的说，它像是内存和硬盘的孩子：</p><ul><li>访问粒度是Byte</li><li>访问速度稍慢于内存</li><li>非易失</li></ul><p><img data-src="https://blobs.gitbook.com/assets%2F-LCeQxrze3Z6fEniTf2v%2F-LLjk64O7_5of1p_CGnO%2F-LLjkCG1sMXBB_QrIqZp%2Fpmem_storage_pyramid.jpg?alt=media&amp;token=7b37e107-1927-43a8-b4c1-6e4289cdb458" alt="NVM -- Source: Persistent Memory Documentation, pmem"></p><p>Non-Volatile Memory Database Management Systems: <span class="exturl" data-url="aHR0cHM6Ly93d3cubW9yZ2FuY2xheXBvb2wuY29tL2RvaS8xMC4yMjAwL1MwMDg5MUVEMVYwMVkyMDE4MTJEVE0wNTU=" title="https://www.morganclaypool.com/doi/10.2200/S00891ED1V01Y201812DTM055">https://www.morganclaypool.com/doi/10.2200/S00891ED1V01Y201812DTM055<i class="fa fa-external-link"></i></span></p><p>另附上两篇NVM有关的论文, 作者是我本科论文的导师 :lol: : </p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL3ZhbnJlbmVuL3BhcGVycy9IeU1lbS5wZGY/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/vanrenen/papers/HyMem.pdf?lang=de">Managing Non-Volatile Memory in Database Systems<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL3ZhbnJlbmVuL3BhcGVycy9udm1fc3RhdHMucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/people/sites/vanrenen/papers/nvm_stats.pdf?lang=de">Persistent Memory I/O Primitives<i class="fa fa-external-link"></i></span></li></ul><p><br></p><h2 id="Acess-Time"><a href="#Acess-Time" class="headerlink" title="Acess Time"></a>Acess Time</h2><p><img data-src="/images/CMU1544564/Lec03/9.jpg" alt="9.jpg"></p><ul><li>1s = 1,000 ms = 1,000,000 ns</li><li>红色箭头右侧的是数字只是一个<strong>类比比喻</strong>，假设<code>1ns = 1s</code>,　来使得各个存储介质的访问时间差距变得更清晰。</li></ul><p>Latency numbers every programmer should know: <span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vaGVsbGVyYmFyZGUvMjg0MzM3NQ==" title="https://gist.github.com/hellerbarde/2843375">https://gist.github.com/hellerbarde/2843375<i class="fa fa-external-link"></i></span></p><!-- TODO: link more access time --><be><h2 id="System-Design-Goals-in-Disk-oriented-databases"><a href="#System-Design-Goals-in-Disk-oriented-databases" class="headerlink" title="System Design Goals (in Disk-oriented databases)"></a>System Design Goals (in Disk-oriented databases)</h2><p>Disk-oriented databases　需要处理比物理内存更大的数据，这意味着数据库需要有缓存区管理器，它<em>提供服务</em>给上层的数据库，让数据库能访问任何一个数据，而这个数据实际上已经由缓存区管理器由硬盘 load 进内存。缓存区管理器的工作就是将数据(实际上是<strong>页</strong>)从硬盘读进内存 或 从内存写入硬盘，目的是让上层的数据库有更高效的缓存机制(caching)，更少的I/O Operation，更高的性能，更短的运行时间。</p><p>几个概念：</p><ul><li>缓存区: Buffer Pool</li><li>缓存区管理器: Buffer Manager / buffer pool manager</li><li>页:　page / Buffer page</li></ul><p><img data-src="/images/CMU1544564/Lec03/10.jpg" alt="10.jpg"></p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>我们演示一下，假设我们刚刚打开数据库，此时数据库的Buffer Pool是空的：</p><p><img data-src="/images/CMU1544564/Lec03/12.jpg" alt="12.jpg"></p><p><br></p><p>Execution Engine调用了buffer pool manager的一个函数: <code>getpage(int : 2)</code>, 为了得到第二个 page。　目前我们只将　Execution Engine视作一个需要 page 的数据库高层的部分，需要 buffer pool manager　提供的服务:</p><p><img data-src="/images/CMU1544564/Lec03/13.jpg" alt="13.jpg"></p><p><br></p><p>这时候数据库需要从硬盘中读<strong>directory page</strong>到内存，directory page是buffer pool的header,　记录了每一个page对应的文件。</p><p>Directory page在这节课后面会被提到，见<a href="#page-directory">Heap File - Page Directory</a></p><p>当directory page进入内存，buffer pool manager从它上面读到了page 2对应的文件位置:</p><p><img data-src="/images/CMU1544564/Lec03/14.jpg" alt="14.jpg"></p><p><br></p><p>接下来page 2被读到内存中，execution engine得到它想要的东西： 一个page2内容在内存的指针。</p><p><img data-src="/images/CMU1544564/Lec03/15.jpg" alt="15.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/16.jpg" alt="16.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/17.jpg" alt="17.jpg"></p><p><br></p><h2 id="Why-not-use-the-OS"><a href="#Why-not-use-the-OS" class="headerlink" title="Why not use the OS?"></a>Why not use the OS?</h2><p>上述整个机制完全和<strong>操作系统中虚拟内存</strong>一致。操作系统给每一个进程(process)提供虚拟内存大小的地址空间(address space)，而虚拟内存的大小往往比机器的物理内存要大，进程被<em>欺骗</em>而使用虚拟内存对应的地址。而操作系统通过MMU映射每一个虚拟内存到物理内存，从而向进程提供对应的物理内存的地址上的数据。而当进程使用超过物理内存大小的地址空间(address space)时，操作系统也是在硬盘和内存中缓存 page，进行swap。</p><p>那既然操作系统和数据库的缓存页机制类似，我们向自己提出一个直击灵魂的问题：<br><strong>为什么数据库不直接用操作系统的页，而浪费时间(?)开发一个buffer pool manager做类似的事情呢？</strong></p><h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a><code>mmap</code></h3><blockquote><p>One way to achieve this virtual memory, is by using mmap to map the contents of a file in a process address space</p></blockquote><p>上面这句话来自于<span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDMtc3RvcmFnZTEucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/03-storage1.pdf">Note<i class="fa fa-external-link"></i></span>, 它实际上不太完整，<code>mmap</code>是一个操作系统提供的<code>syscall</code>:  </p><ul><li>map <strong>the OS file caching area, where the reqeusted file is readed</strong>, in a process address space</li><li>原话中的<code>map the contents of file...</code>会让人误解为，直接从硬盘开始映射，这当然是错的。实际上，操作系统先将文件读进操作系统文件缓存区(file cache)，再将这个缓存区的文件内容映射到对应进程的地址空间。</li></ul><p><br></p><ul><li>或者</li><li>使用direct I/O: <code>O_DIRECT</code> = disable page cache in OS for reading/writing file, 可以避免使用操作系统文件缓存区，直接将文件读取到数据库(比如buffer pool缓存区)的address space。这样性能也会更好。因为省去从操作系统文件缓存区复制进数据库address space这一步。<code>mmap</code>可以产生内存文件，把磁盘文件的内容map到内存的地址空间。</li></ul><!-- TODO: link Lec05 --><p><code>mmap</code>是一个非常重要的进程通信方式(if <code>shared</code>)，同时也是高性能文件操作的方法。我们以后会仔细讲讲。</p><!-- TODO: mmap --><h3 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h3><p><img data-src="/images/CMU1544564/Lec03/18.jpg" alt="18.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/19.jpg" alt="19.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/20.jpg" alt="20.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/21.jpg" alt="21.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/22.jpg" alt="22.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/23.jpg" alt="23.jpg"></p><p>上面的demo的意思是，当我们在物理内存已满的情况下，继续需要page2，这时候会出现一个page fault(页缺失)，我们需要从物理内存中去掉一个page，来给page2提供空间。当然demo最开始的时候，我们需要page1的时候，和我们需要page3的时候，它们都不再物理内存中，这时候我们也遇到了page Fault。</p><p>当<code>mmap</code>遇到一个page fault的时候会被blocked:</p><blockquote><p>Unfortunately, this means that if <code>mmap</code> hits a page fault, this will <strong>block</strong> the process. </p></blockquote><p>上面这句话来自于<span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDMtc3RvcmFnZTEucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/03-storage1.pdf">Note<i class="fa fa-external-link"></i></span></p><blockquote><p>… mmap() can block, because setting up a user visible virtual memory mapping requires a relatively complex data structure setup on the kernel side, which involves kernel allocating memory from its internal allocators …</p></blockquote><p>上面这句话来自于<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIwMDg1NDU2LzgwNDk0MDg=" title="https://stackoverflow.com/a/20085456/8049408">Can sbrk(2) or mmap(2) block? - oakad’s answer<i class="fa fa-external-link"></i></span></p><p>page Fault时具体发生的事情，完全类似<code>syscall</code>发生的事情一样:<br>当前程序会从ser mode TRAP进入 kernel mode，这时进程一直被blocked (CPU stalled), 直到对应新的page被加载进入kernel space而且程序回到user mode为止。</p><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><p>我们已知<code>mmap</code>会被blocked, 这个阻断时间中，数据库上面也做不了，只能等待新的page加载结束。这会带来性能下降问题。另外如果有多个并发写，需要同步机制，系统也提供一些同步指令<code>madvise</code>, <code>mlock</code>, <code>msync</code>。但是操作系统只是一个通用方案，达不到性能最优。</p><p>另外操作系统不能将一个page立即写回硬盘，这一点会在事务Logging中使正确性不能被保证。</p><p>由于<strong>性能问题</strong>和<strong>正确性问题</strong>，<code>mmap</code>比较少在数据库中被采用。</p><p><img data-src="/images/CMU1544564/Lec03/24.jpg" alt="24.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/25.jpg" alt="25.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/26.jpg" alt="26.jpg"></p><p><br><br><br><br><br></p><h1 id="Database-Storage"><a href="#Database-Storage" class="headerlink" title="Database Storage"></a>Database Storage</h1><p><img data-src="/images/CMU1544564/Lec03/27.jpg" alt="27.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/28.jpg" alt="28.jpg"></p><h2 id="File-Storage"><a href="#File-Storage" class="headerlink" title="File Storage"></a>File Storage</h2><p><img data-src="/images/CMU1544564/Lec03/29.jpg" alt="29.jpg"></p><h3 id="Storage-Manager"><a href="#Storage-Manager" class="headerlink" title="Storage Manager"></a>Storage Manager</h3><p>下面一个问题，DBMS如何将数据库的数据放到磁盘文件上？ 这里有个选择，DBMS是否要用操作系统的文件系统，还是拿一块raw storage自己管理。现在一般的选择是还是使用操作系统文件系统，毕竟方便。既然用文件系统，那么DBMS就需要把数据库数据存成一个或多个文件。每个文件有多个page组成。page其实就是固定大小的数据块，那为什么要有这层抽象？这个和我们使用的存储的磁盘有关，它除了慢，还有个特点是对顺序读写比较友好，因为随机读需要磁头不断的机械移动的。所以操作系统的文件系统和磁盘间的I/O，需要<strong>尽量批量读</strong>，读写数据的最小单位称为数据块block，一般是4KiB，因为4KiB比较经济。而数据库的page是基于文件系统的，所以设计成4KiB的倍数会比较合理。<sup><a href="#fn1">1</a></sup></p><p>storage manager能够理解解释interpret对应的数据库文件，将数据库文件represent成一个page的集合。它也记录下page的读与写操作，另外page上剩下的存储空间大小也会被记录下来。</p><p><img data-src="/images/CMU1544564/Lec03/30.jpg" alt="30.jpg"></p><h3 id="Database-Pages"><a href="#Database-Pages" class="headerlink" title="Database Pages"></a>Database Pages</h3><blockquote><p>Self-contained:= all the information needed to read each page is on the page itself.</p></blockquote><p>上面这句话来自于<span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDMtc3RvcmFnZTEucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/03-storage1.pdf">Note<i class="fa fa-external-link"></i></span></p><ul><li>Self-contained指这个page拥有metadata(元数据)，这个metadata用来告诉我们如何interpret该page。</li><li>每一个page有一个唯一的page id:<ul><li>如果数据库只有一个文件，在这种简单的情况下，page id可以是对应数据在该文件的offset</li><li>大多数情况，数据库有多个文件。这是page id可以是对应数据所在的<strong>那一个</strong>文件的路径＋在该文件中的offset</li><li>因此每一个page id可以对应上某些数据，这些数据的大小是一个page的大小</li><li>在数据库的高层组成成分中(比如 execution engine)，都需要将对应的page id当做参数，从buffer pool manager中获得对应的page(和数据)。</li></ul></li><li>另外在学术中page也可以是变长的(variable sized): 见 <span class="exturl" data-url="aHR0cDovL2NpZHJkYi5vcmcvY2lkcjIwMjAvcGFwZXJzL3AyOS1uZXVtYW5uLWNpZHIyMC5wZGY=" title="http://cidrdb.org/cidr2020/papers/p29-neumann-cidr20.pdf">Umbra: A Disk-Based System with In-Memory Performance<i class="fa fa-external-link"></i></span></li></ul><p><img data-src="/images/CMU1544564/Lec03/31.jpg" alt="31.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/32.jpg" alt="32.jpg"></p><h3 id="Database-Heap"><a href="#Database-Heap" class="headerlink" title="Database Heap"></a>Database Heap</h3><p><img data-src="/images/CMU1544564/Lec03/33.jpg" alt="33.jpg"></p><p>上图说，我们有多种途径去对硬盘上的page位置进行管理，heap file是其中的一种途径，我们重点看一下heap file。<strong>heap file就是用来放page的文件，当然我们可以通过文件名+offset，访问某个特定的page。</strong><sup><a href="#fn1">1</a></sup>  heap file也有两种实现方式: linked list, page directory。</p><blockquote><p>A <strong>heap file</strong> is an unordered collection of pages where tuples that are stored in random order.</p></blockquote><p><img data-src="/images/CMU1544564/Lec03/34.jpg" alt="34.jpg"></p><h4 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h4><p>Header page有两个指针：</p><ul><li><code>free page list</code> 指向一个free page的list</li><li><code>data page list</code> 指向一个not free page的list</li></ul><p>如果我们想寻找某一个特定的page (或者一个特定的page id), 我们只能低效地sequential scan。总体上linked list不是一个好主意。</p><p><img data-src="/images/CMU1544564/Lec03/36.jpg" alt="36.jpg"></p><h4 id="Page-Directory"><a href="#Page-Directory" class="headerlink" title="Page Directory"></a>Page Directory</h4><p>page directory:= special pages that tracks <strong>the location and the amount of free space</strong> of data pages in the database files.</p><p>page directory是一种比较常见的方式，　它提供了一种映射：<code>page id -&gt; offset in file</code>, 这样我们可以通过page id找到对应的数据。</p><p>另外我们需要同步(sync)page directory上的信息和实际上的page信息。这需要我们在每次更改page的时候，同时也需要更改page directory上的信息。</p><p><img data-src="/images/CMU1544564/Lec03/37.jpg" alt="37.jpg"></p><p><br><br><br></p><h2 id="Page-Layout"><a href="#Page-Layout" class="headerlink" title="Page Layout"></a>Page Layout</h2><p><img data-src="/images/CMU1544564/Lec03/38.jpg" alt="38.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/39.jpg" alt="39.jpg"></p><h3 id="Tuple-oriented"><a href="#Tuple-oriented" class="headerlink" title="Tuple-oriented"></a>Tuple-oriented</h3><h4 id="Strawman-idea"><a href="#Strawman-idea" class="headerlink" title="Strawman idea"></a>Strawman idea</h4><p>Strawman idea只是一个<strong>反面教材，并不是一种好的实现</strong>。</p><p><img data-src="/images/CMU1544564/Lec03/41.jpg" alt="41.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/42.jpg" alt="42.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/43.jpg" alt="43.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/44.jpg" alt="44.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/45.jpg" alt="45.jpg"></p><p>这个作法的缺点：</p><ul><li>删除tuple时，会出现external fragmentation</li><li>无法存储长度变长的tuple，比如<code>VARCHAR</code>字符串</li></ul><p><br></p><h4 id="Slotted-Pages"><a href="#Slotted-Pages" class="headerlink" title="Slotted Pages"></a>Slotted Pages</h4><p><img data-src="/images/CMU1544564/Lec03/47.jpg" alt="47.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/48.jpg" alt="48.jpg"></p><p>对于slotted pages，如果我们删除tuple3与更改header后,　我们可以有两种选择：</p><ul><li>将原tuple3的位置留空，不改变其他tuple的位置</li><li>或</li><li>将tuple4向右移动，占有原tuple3的空间，也调整tuple4的指针和header (当然在普遍情况下，需要调整<strong>所有</strong>tuple３之后的tuple)</li></ul><p>我们将上面第二种选择成为compaction，它需要在什么时间发生，有如下几种可能：</p><ul><li>每一次delete以后</li><li>累加一定量的delete后</li><li>每一次insert之前</li><li>在一次特定insert的时候，发现没有<strong>足够空间(即slot array和tuple data重合)</strong></li><li>…</li></ul><p>上述的compaction时间点可能性自然会影响性能，这些可能性都是实现相关，也这该数据库中insert和delete的分布和比例有关。</p><p>有关的一个PostgreSQL中的实验：见<a href="https://cakebytheoceanluo.github.io/2020/03/11/DBMS-PostgreSQL-PageLayout/">[DBMS][PostgreSQL] Page Layout 页面布局</a></p><p><br></p><h4 id="Log-Structured-File-Organization"><a href="#Log-Structured-File-Organization" class="headerlink" title="Log-Structured File Organization"></a>Log-Structured File Organization</h4><p><img data-src="/images/CMU1544564/Lec03/49.jpg" alt="49.jpg"></p><ul><li>如上图中，新的操作(insert, delete, update)直接被记录下来，我们就在维护这个log file</li></ul><p><img data-src="/images/CMU1544564/Lec03/50.jpg" alt="50.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/51.jpg" alt="51.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/52.jpg" alt="52.jpg"></p><p>优点：</p><ul><li>速度很快，只需要向文件中写入一行log信息</li><li>自带log, 在recovery很大帮助</li><li>适合append only的存储形式　(大部分的分布式存储是append only)</li></ul><p>缺点:</p><ul><li>数据读写较慢，需要依靠log生成tuple (这个生成过程叫replay)</li><li>数据分散，且难以缓存(data ends up spread out wide and hard to cache.)</li></ul><p><br><br><br></p><h2 id="Tuple-Layout"><a href="#Tuple-Layout" class="headerlink" title="Tuple Layout"></a>Tuple Layout</h2><p><img data-src="/images/CMU1544564/Lec03/54.jpg" alt="54.jpg"></p><h3 id="Tuple-Header"><a href="#Tuple-Header" class="headerlink" title="Tuple Header"></a>Tuple Header</h3><p><img data-src="/images/CMU1544564/Lec03/55.jpg" alt="55.jpg"></p><h3 id="Tuple-Data"><a href="#Tuple-Data" class="headerlink" title="Tuple Data"></a>Tuple Data</h3><p><img data-src="/images/CMU1544564/Lec03/56.jpg" alt="56.jpg"></p><h3 id="Record-ids-—-Unique-identifier"><a href="#Record-ids-—-Unique-identifier" class="headerlink" title="Record ids — Unique identifier"></a>Record ids — Unique identifier</h3><p>(这一页slide被我提前了)</p><p>Record ids缩写成RID, 常见的指是<code>page id + offset / slot</code>，即和这个tuple存储的位置相关。既然它是唯一的，而且可以确定一个tuple，因此RID可以作为index(索引)的key。</p><p><img data-src="/images/CMU1544564/Lec03/61.jpg" alt="61.jpg"></p><h3 id="Denormalized-Tuple-Data"><a href="#Denormalized-Tuple-Data" class="headerlink" title="Denormalized Tuple Data"></a>Denormalized Tuple Data</h3><p>这部分也是实现相关，也和数据库的Normal Form, Functional Dependency有关。</p><p>Denormalized，都知道关系模型有范式，冗余数据一定是会打破范式的，所以是<strong>de</strong>。<sup><a href="#fn1">1</a></sup></p><p><img data-src="/images/CMU1544564/Lec03/57.jpg" alt="57.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/58.jpg" alt="58.jpg"></p><ul><li>注意上图中<code>bar</code>的三个<code>c</code>值不一样，即<code>c1</code>, <code>c2</code>, <code>c3</code></li></ul><p><img data-src="/images/CMU1544564/Lec03/59.jpg" alt="59.jpg"></p><ul><li>注意上图中<code>bar</code>的三个<code>c</code>值不一样，即<code>c1</code>, <code>c2</code>, <code>c3</code></li><li>如上图的prejoin之后:<ul><li>read会更快，因为两个表格已经被存储在一个page上</li><li>update会复杂一些，因为tuple所占空间更大，而且原来的fixed-sized tuple变成variable-sized tuple，处理起来更麻烦。</li></ul></li></ul><p><img data-src="/images/CMU1544564/Lec03/60.jpg" alt="60.jpg"></p><h1 id="Conclusion-结论"><a href="#Conclusion-结论" class="headerlink" title="Conclusion 结论"></a>Conclusion 结论</h1><p><img data-src="/images/CMU1544564/Lec03/62.jpg" alt="62.jpg"></p><p><img data-src="/images/CMU1544564/Lec03/63.jpg" alt="63.jpg"></p><p>引用:</p><p><a name="fn1">1</a>: Database Storage - fxjwind: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZnhqd2luZC9wLzEwODE4ODE0Lmh0bWw=" title="https://www.cnblogs.com/fxjwind/p/10818814.html">https://www.cnblogs.com/fxjwind/p/10818814.html<i class="fa fa-external-link"></i></span></p></be><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Database Storage Part I - 数据库存储 I&lt;/p&gt;
&lt;p&gt;Slide: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzAzLXN0b3JhZ2UxLnBkZg==&quot; title=&quot;https://15445.courses.cs.cmu.edu/fall2019/slides/03-storage1.pdf&quot;&gt;https://15445.courses.cs.cmu.edu/fall2019/slides/03-storage1.pdf&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Note: &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDMtc3RvcmFnZTEucGRm&quot; title=&quot;https://15445.courses.cs.cmu.edu/fall2019/notes/03-storage1.pdf&quot;&gt;https://15445.courses.cs.cmu.edu/fall2019/notes/03-storage1.pdf&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Reading: Chapter 10.1-10.2, 10.5-10.6&lt;/p&gt;
&lt;p&gt;这节两课，我们会学习数据库内部的存储。&lt;/p&gt;
&lt;p&gt;Database Storage 在CMU分成了两部分，在两节课中讲。这是第一部分。&lt;/p&gt;
&lt;p&gt;这部分涉及存储的硬件, 操作系统提供的syscall, 数据库缓存区(buffer pool)的缓存页(buffer page), Slotted page等等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CMU-15445" scheme="https://cakebytheoceanluo.github.io/categories/CMU-15445/"/>
    
      <category term="Storage" scheme="https://cakebytheoceanluo.github.io/categories/Storage/"/>
    
      <category term="Disk Management" scheme="https://cakebytheoceanluo.github.io/categories/Disk-Management/"/>
    
    
      <category term="Slotted Page" scheme="https://cakebytheoceanluo.github.io/tags/Slotted-Page/"/>
    
  </entry>
  
  <entry>
    <title>[DBMS][PostgreSQL]Page Layout 页面布局</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/11/DBMS-PostgreSQL-PageLayout/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/11/DBMS-PostgreSQL-PageLayout/</id>
    <published>2020-03-11T09:46:36.000Z</published>
    <updated>2020-03-17T16:02:23.309Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章服务于<a href="https://cakebytheoceanluo.github.io/2020/03/11/CMU-15445-Lec03/">[CMU-15445]Lec03</a></p><p>绝大部分的关系数据库的page layout采用的都是slotted page, 学术上的创新的主意也往往基于它。我们今天来看一看PostgreSQL中的page layout，以及它在<code>insert</code>, <code>delete</code>等操作下的具体行为。</p><a id="more"></a><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">testdb=# drop table <span class="keyword">if</span> <span class="built_in">exists</span> r;</span><br><span class="line">DROP TABLE</span><br><span class="line">testdb=# create table r (id <span class="keyword">int</span> primary key , val varchar(<span class="number">6</span>));</span><br><span class="line">CREATE TABLE</span><br><span class="line">testdb=# insert into r values (101, 'aaa'), (102, 'bbb'), (103, 'ccc');</span><br><span class="line">INSERT <span class="number">0</span> <span class="number">3</span></span><br><span class="line">testdb=# select * from r;</span><br><span class="line"> id  | val </span><br><span class="line">-----+-----</span><br><span class="line"> <span class="number">101</span> | aaa</span><br><span class="line"> <span class="number">102</span> | bbb</span><br><span class="line"> <span class="number">103</span> | ccc</span><br><span class="line">(<span class="number">3</span> rows)</span><br></pre></td></tr></tbody></table></figure><h1 id="ctid-—-PostgreSQL中的RID"><a href="#ctid-—-PostgreSQL中的RID" class="headerlink" title="ctid — PostgreSQL中的RID"></a><code>ctid</code> — PostgreSQL中的RID</h1><ul><li><code>ctid</code>就是PostgreSQL中的Record ID, 是一个来自page id和offset的pair</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">testdb=# select r.ctid, r.* from r;</span><br><span class="line"> ctid  | id  | val </span><br><span class="line">-------+-----+-----</span><br><span class="line"> (<span class="number">0</span>,<span class="number">1</span>) | <span class="number">101</span> | aaa</span><br><span class="line"> (<span class="number">0</span>,<span class="number">2</span>) | <span class="number">102</span> | bbb</span><br><span class="line"> (<span class="number">0</span>,<span class="number">3</span>) | <span class="number">103</span> | ccc</span><br><span class="line">(<span class="number">3</span> rows)</span><br><span class="line">testdb=# select r.ctid, r.* from r where ctid = '(0, 1)';</span><br><span class="line"> ctid  | id  | val </span><br><span class="line">-------+-----+-----</span><br><span class="line"> (<span class="number">0</span>,<span class="number">1</span>) | <span class="number">101</span> | aaa</span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure><p>我们可以看到: </p><ul><li>page id均为0, 说明所有的tuple都在同一个page上</li><li><code>insert</code>顺序插入tuple到page中，即第一个insert的tuple在page的第一个offset</li></ul><h1 id="delete后的行为"><a href="#delete后的行为" class="headerlink" title="delete后的行为"></a><code>delete</code>后的行为</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">testdb=# <span class="keyword">delete</span> from r where id = <span class="number">102</span>;</span><br><span class="line">DELETE <span class="number">1</span></span><br><span class="line">testdb=# select r.ctid, r.* from r;</span><br><span class="line"> ctid  | id  | val </span><br><span class="line">-------+-----+-----</span><br><span class="line"> (<span class="number">0</span>,<span class="number">1</span>) | <span class="number">101</span> | aaa</span><br><span class="line"> (<span class="number">0</span>,<span class="number">3</span>) | <span class="number">103</span> | ccc</span><br><span class="line">(<span class="number">2</span> rows)</span><br></pre></td></tr></tbody></table></figure><p>我们将中间的<code>102</code>tuple删除:</p><ul><li>可以看到对应的page layout除了了<code>102</code>tuple以外，没有其他区别</li><li>这说明PostgreSQL没有在delete后马上compact page, 删除的位置空着，而不是去移动其他的tuple去占有空出来的位置。</li></ul><h1 id="delete后的insert行为"><a href="#delete后的insert行为" class="headerlink" title="delete后的insert行为"></a><code>delete</code>后的<code>insert</code>行为</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">testdb=# insert into r values (104, 'xxx');</span><br><span class="line">INSERT <span class="number">0</span> <span class="number">1</span></span><br><span class="line">testdb=# select r.ctid, r.* from r;</span><br><span class="line"> ctid  | id  | val </span><br><span class="line">-------+-----+-----</span><br><span class="line"> (<span class="number">0</span>,<span class="number">1</span>) | <span class="number">101</span> | aaa</span><br><span class="line"> (<span class="number">0</span>,<span class="number">3</span>) | <span class="number">103</span> | ccc</span><br><span class="line"> (<span class="number">0</span>,<span class="number">4</span>) | <span class="number">104</span> | xxx</span><br><span class="line">(<span class="number">3</span> rows)</span><br></pre></td></tr></tbody></table></figure><p>我们在删除<code>102</code>后，插入<code>104</code>:</p><ul><li>我们看到<code>104</code>tuple的位置的offset4, 即之前最后一个tuple之后</li><li>说明PostgreSQL在删除后的插入，不会重新利用空出来的空间。</li></ul><p><br></p><ul><li>我们看到了上面<code>delete后的行为</code>和<code>delete后的insert行为</code>, 可以猜测，PostgreSQL为了性能，并没有让<code>delete</code>和<code>insert</code>去干预page layout</li></ul><h1 id="vacuum-full-—-整合空间"><a href="#vacuum-full-—-整合空间" class="headerlink" title="vacuum full; — 整合空间"></a><code>vacuum full;</code> — 整合空间</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">testdb=# vacuum full;</span><br><span class="line">VACUUM</span><br><span class="line">testdb=# select r.ctid, r.* from r;</span><br><span class="line"> ctid  | id  | val </span><br><span class="line">-------+-----+-----</span><br><span class="line"> (<span class="number">0</span>,<span class="number">1</span>) | <span class="number">101</span> | aaa</span><br><span class="line"> (<span class="number">0</span>,<span class="number">2</span>) | <span class="number">103</span> | ccc</span><br><span class="line"> (<span class="number">0</span>,<span class="number">3</span>) | <span class="number">104</span> | xxx</span><br><span class="line">(<span class="number">3</span> rows)</span><br></pre></td></tr></tbody></table></figure><ul><li><code>vacuum full;</code> 可以显式(explicit)去compact page，也就是占有空着的空间</li><li>这个指令之后，后面的tuple向前移动, 占据了原<code>102</code>有的空间</li></ul><h1 id="SQL-Script"><a href="#SQL-Script" class="headerlink" title="SQL Script"></a>SQL Script</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> r (<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> , val <span class="built_in">varchar</span>(<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> r <span class="keyword">values</span> (<span class="number">101</span>, <span class="string">'aaa'</span>), (<span class="number">102</span>, <span class="string">'bbb'</span>), (<span class="number">103</span>, <span class="string">'ccc'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> r;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ctid := a pair of page id and offset</span></span><br><span class="line"><span class="keyword">select</span> r.ctid, r.* <span class="keyword">from</span> r;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- tuple 102 delete, but the page is not compacted after deletion</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> r <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">102</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> r.ctid, r.* <span class="keyword">from</span> r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> r <span class="keyword">values</span> (<span class="number">104</span>, <span class="string">'xxx'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- in PostgreSQL:</span></span><br><span class="line"><span class="comment">-- insert after after the last inserted offset</span></span><br><span class="line"><span class="comment">-- ignore the free space after the previous deletion</span></span><br><span class="line"><span class="keyword">select</span> r.ctid, r.* <span class="keyword">from</span> r;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- like GC (garbegac collection)</span></span><br><span class="line"><span class="comment">-- compact(reorganize) the pages</span></span><br><span class="line"><span class="comment">-- takes time</span></span><br><span class="line">vacuum full;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> r.ctid, r.* <span class="keyword">from</span> r;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章服务于&lt;a href=&quot;https://cakebytheoceanluo.github.io/2020/03/11/CMU-15445-Lec03/&quot;&gt;[CMU-15445]Lec03&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;绝大部分的关系数据库的page layout采用的都是slotted page, 学术上的创新的主意也往往基于它。我们今天来看一看PostgreSQL中的page layout，以及它在&lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;等操作下的具体行为。&lt;/p&gt;
    
    </summary>
    
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
      <category term="Storage" scheme="https://cakebytheoceanluo.github.io/categories/Storage/"/>
    
      <category term="Disk Management" scheme="https://cakebytheoceanluo.github.io/categories/Disk-Management/"/>
    
    
      <category term="PostgreSQL" scheme="https://cakebytheoceanluo.github.io/tags/PostgreSQL/"/>
    
      <category term="Slotted Page" scheme="https://cakebytheoceanluo.github.io/tags/Slotted-Page/"/>
    
  </entry>
  
  <entry>
    <title>[DBMS Books]数据库书籍推荐</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/10/books/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/10/books/</id>
    <published>2020-03-10T22:53:07.000Z</published>
    <updated>2020-03-10T22:54:09.438Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章囊括了数据库领域经典书籍，并附上必要链接，方便搜索。所推荐书籍囊括基础概念，实现原理，数据库理论，分布式数据库，数据库事务。</p><p>本文基于该文章：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">作者：钱卫宁 华东师范大学 数据科学与工程学院 教授/院长</span><br><span class="line">链接：https://www.zhihu.com/question/52498996/answer/142789892</span><br><span class="line">来源：知乎</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><hr><p>0.完整教材：</p><ul><li><p>全书：Hector Garcia-Molina, Jeffrey D. Ullman, Jennifer Widom: <strong>Database systems - the complete book</strong> (2. ed.). Pearson Education 2009, ISBN 978-0-13-187325-4, pp. I-XXVI, 1-1203</p><ul><li>官网：　<span class="exturl" data-url="aHR0cDovL2luZm9sYWIuc3RhbmZvcmQuZWR1L351bGxtYW4vZHNjYi5odG1s" title="http://infolab.stanford.edu/~ullman/dscb.html">http://infolab.stanford.edu/~ullman/dscb.html<i class="fa fa-external-link"></i></span></li><li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xMTM3MjYyLw==" title="https://book.douban.com/subject/1137262/">https://book.douban.com/subject/1137262/<i class="fa fa-external-link"></i></span></li></ul></li><li><p>奶牛书：Raghu Ramakrishnan, Johannes Gehrke: <strong>Database management systems</strong> (3. ed.). McGraw-Hill 2003, ISBN 978-0-07-115110-8, pp. I-XXXII, 1-1065</p><ul><li>官网: <span class="exturl" data-url="aHR0cDovL3BhZ2VzLmNzLndpc2MuZWR1L35kYmJvb2sv" title="http://pages.cs.wisc.edu/~dbbook/">http://pages.cs.wisc.edu/~dbbook/<i class="fa fa-external-link"></i></span></li><li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xMTU1OTM0Lw==" title="https://book.douban.com/subject/1155934/">https://book.douban.com/subject/1155934/<i class="fa fa-external-link"></i></span></li><li>注: 清华大学出版社有出版英文影印版, 豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xMTQ2MjMzLw==" title="https://book.douban.com/subject/1146233/">https://book.douban.com/subject/1146233/<i class="fa fa-external-link"></i></span></li></ul></li></ul><p>1.数据库基础</p><ul><li><p>帆船书：Abraham Silberschatz, Henry F. Korth, S. Sudarshan: <strong>Database System Concepts</strong>, 6th Edition. McGraw-Hill Book Company 2010</p><ul><li>第六版: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L2luZGV4Lmh0bWw=" title="https://www.db-book.com/db6/index.html">https://www.db-book.com/db6/index.html<i class="fa fa-external-link"></i></span></li><li>第七版 2019: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI3L2luZGV4Lmh0bWw=" title="https://www.db-book.com/db7/index.html">https://www.db-book.com/db7/index.html<i class="fa fa-external-link"></i></span></li><li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xMDU0ODM3OS8=" title="https://book.douban.com/subject/10548379/">https://book.douban.com/subject/10548379/<i class="fa fa-external-link"></i></span></li><li>注: 高等教育出版社有出版英文影印版, 豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yNjA0NTkzMS8=" title="https://book.douban.com/subject/26045931/">https://book.douban.com/subject/26045931/<i class="fa fa-external-link"></i></span></li><li>注: 机械工业出版社有出版英文影印版, 豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yMDQ4MDY5My8=" title="https://book.douban.com/subject/20480693/">https://book.douban.com/subject/20480693/<i class="fa fa-external-link"></i></span></li></ul></li><li><p>全书前一半：Hector Garcia-Molina, Jeffrey D. Ullman, Jennifer Widom: <strong>Database systems - the complete book</strong> (2. ed.). Pearson Education 2009, ISBN 978-0-13-187325-4, pp. I-XXVI, 1-1203</p><ul><li>全书前一半对应: Jeff Ullman, Jennifer Widom: <strong>A First Course in Database systems</strong><ul><li>官网: <span class="exturl" data-url="aHR0cDovL2luZm9sYWIuc3RhbmZvcmQuZWR1L351bGxtYW4vZmNkYi5odG1s" title="http://infolab.stanford.edu/~ullman/fcdb.html">http://infolab.stanford.edu/~ullman/fcdb.html<i class="fa fa-external-link"></i></span></li><li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8zOTIzNTc1Lw==" title="https://book.douban.com/subject/3923575/">https://book.douban.com/subject/3923575/<i class="fa fa-external-link"></i></span></li><li>注: 机械工业出版社有出版英文影印版, 豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8zMTgyMTEwLw==" title="https://book.douban.com/subject/3182110/">https://book.douban.com/subject/3182110/<i class="fa fa-external-link"></i></span></li></ul></li></ul></li></ul><p>2.实现</p><ul><li><p>奶牛书：Raghu Ramakrishnan, Johannes Gehrke: <strong>Database management systems</strong> (3. ed.). McGraw-Hill 2003, ISBN 978-0-07-115110-8, pp. I-XXXII, 1-1065</p></li><li><p>全书后一半：Hector Garcia-Molina, Jeffrey D. Ullman, Jennifer Widom: <strong>Database systems - the complete book</strong> (2. ed.). Pearson Education 2009, ISBN 978-0-13-187325-4, pp. I-XXVI, 1-1203</p><ul><li>全书后一半对应: Hector Garcia-Molina, Jeff Ullman, Jennifer Widom: <strong>Database System Implementation</strong><ul><li>: 官网: <span class="exturl" data-url="aHR0cDovL2luZm9sYWIuc3RhbmZvcmQuZWR1L351bGxtYW4vZGJzaS5odG1s" title="http://infolab.stanford.edu/~ullman/dbsi.html">http://infolab.stanford.edu/~ullman/dbsi.html<i class="fa fa-external-link"></i></span></li><li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC80ODM4NDMwLw==" title="https://book.douban.com/subject/4838430/">https://book.douban.com/subject/4838430/<i class="fa fa-external-link"></i></span></li><li>注: 机械工业出版社有出版英文影印版, 豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC80MTY2NTQ2Lw==" title="https://book.douban.com/subject/4166546/">https://book.douban.com/subject/4166546/<i class="fa fa-external-link"></i></span></li></ul></li></ul></li><li><p>M. Tamer Özsu, Patrick Valduriez: <strong>Principles of Distributed Database Systems</strong>, Third Edition. Springer 2011, ISBN 978-1-4419-8833-1, pp. I-XIX, 1-845</p><ul><li>Spinger出版社-书目网站: <span class="exturl" data-url="aHR0cHM6Ly93d3cuc3ByaW5nZXIuY29tL3VzL2Jvb2svOTc4MTQ5Mzk0MTc0Mmh0dHBzOi8vYm9vay5kb3ViYW4uY29tL3N1YmplY3QvMjY4NTE2MDUv" title="https://www.springer.com/us/book/9781493941742https://book.douban.com/subject/26851605/">https://www.springer.com/us/book/9781493941742https://book.douban.com/subject/26851605/<i class="fa fa-external-link"></i></span></li><li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yNjg1MTYwNS8=" title="https://book.douban.com/subject/26851605/">https://book.douban.com/subject/26851605/<i class="fa fa-external-link"></i></span></li></ul></li></ul><p>3.理论</p><ul><li><p>棒球书：J.D. Ullman: <strong>Principles of Database and Knowledge-base Systems</strong>, Vol. I/II. 1988/1989</p><ul><li>ACM-书目链接: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS9ib29rLzEwLjU1NTUvNDI3OTA=" title="https://dl.acm.org/doi/book/10.5555/42790">https://dl.acm.org/doi/book/10.5555/42790<i class="fa fa-external-link"></i></span></li></ul></li><li><p>爱丽丝书：Serge Abiteboul, Richard Hull, Victor Vianu: <strong>Foundations of Databases</strong>. Addison-Wesley 1995, ISBN 0-201-53771-0</p><ul><li>官网：<span class="exturl" data-url="aHR0cDovL3dlYmRhbS5pbnJpYS5mci9BbGljZS8=" title="http://webdam.inria.fr/Alice/">http://webdam.inria.fr/Alice/<i class="fa fa-external-link"></i></span></li><li>与官网即可下载电子版</li></ul></li></ul><p>4.事务</p><ul><li><p>基础：Philip A. Bernstein, Eric Newcomer: <strong>Principles of Transaction Processing for Systems Professionals</strong> (2nd Edition). Morgan Kaufmann. 2009</p><ul><li>ACM－书目链接: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS9ib29rLzEwLjU1NTUvMTIwODkzMA==" title="https://dl.acm.org/doi/book/10.5555/1208930">https://dl.acm.org/doi/book/10.5555/1208930<i class="fa fa-external-link"></i></span></li><li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC81NDEyODM1Lw==" title="https://book.douban.com/subject/5412835/">https://book.douban.com/subject/5412835/<i class="fa fa-external-link"></i></span></li></ul></li><li><p>理论：Gerhard Weikum, Gottfried Vossen: <strong>Transactional Information Systems: Theory, Algorithms, and the Practice of Concurrency Control and Recovery</strong>. Morgan Kaufmann 2002, ISBN 1-55860-508-8</p><ul><li>ACM-书目链接: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS9ib29rLzEwLjU1NTUvMjgyMTU3Mg==" title="https://dl.acm.org/doi/book/10.5555/2821572">https://dl.acm.org/doi/book/10.5555/2821572<i class="fa fa-external-link"></i></span></li><li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xNTAzODEyLw==" title="https://book.douban.com/subject/1503812/">https://book.douban.com/subject/1503812/<i class="fa fa-external-link"></i></span></li></ul></li><li><p>实现：Jim Gray, Andreas Reuter: <strong>Transaction Processing: Concepts and Techniques</strong>. Morgan Kaufmann 1993, ISBN 1-55860-190-2</p><ul><li>ACM-书目链接: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS9ib29rLzEwLjU1NTUvNTczMzA0" title="https://dl.acm.org/doi/book/10.5555/573304">https://dl.acm.org/doi/book/10.5555/573304<i class="fa fa-external-link"></i></span></li><li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xMTQ0NTQzLw==" title="https://book.douban.com/subject/1144543/">https://book.douban.com/subject/1144543/<i class="fa fa-external-link"></i></span></li><li>注: 人民邮电出版社有出版英文影印版, 豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8zNjUxMDE1Lw==" title="https://book.douban.com/subject/3651015/">https://book.douban.com/subject/3651015/<i class="fa fa-external-link"></i></span></li></ul></li></ul><p>5.进阶</p><ul><li><p>红宝书：Peter Bailis, Joseph M. Hellerstein, Michael Stonebraker, editors. <strong>Readings in Database Systems</strong>, 5th Edition (Readings in Database Systems, 5th Edition)</p><ul><li>官网：<span class="exturl" data-url="aHR0cDovL3d3dy5yZWRib29rLmlvLw==" title="http://www.redbook.io/">http://www.redbook.io/<i class="fa fa-external-link"></i></span></li><li>与官网即可下载电子版</li></ul></li><li><p>Joseph M. Hellerstein, Michael Stonebraker, James Hamilton. Architecture of a Database System</p><ul><li>电子版: <span class="exturl" data-url="aHR0cHM6Ly9kc2YuYmVya2VsZXkuZWR1L3BhcGVycy9mbnRkYjA3LWFyY2hpdGVjdHVyZS5wZGY=" title="https://dsf.berkeley.edu/papers/fntdb07-architecture.pdf">https://dsf.berkeley.edu/papers/fntdb07-architecture.pdf<i class="fa fa-external-link"></i></span></li><li>中文翻译(厦门大学数据库实验室 林子雨): <span class="exturl" data-url="aHR0cDovL2RibGFiLnhtdS5lZHUuY24vd3AtY29udGVudC91cGxvYWRzL29sZC9maWxlcy9saW56aXl1LUFyY2hpdGVjdHVyZSUyMG9mJTIwYSUyMERhdGFiYXNlJTIwU3lzdGVtKENoaW5lc2UlMjBWZXJzaW9uKS1BTEwucGRm" title="http://dblab.xmu.edu.cn/wp-content/uploads/old/files/linziyu-Architecture%20of%20a%20Database%20System(Chinese%20Version)-ALL.pdf">http://dblab.xmu.edu.cn/wp-content/uploads/old/files/linziyu-Architecture%20of%20a%20Database%20System(Chinese%20Version)-ALL.pdf<i class="fa fa-external-link"></i></span></li></ul></li></ul><p><br></p><p>推荐阅读：</p><p>hzbooks－姚编辑: <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h6Ym9va3MvYXJ0aWNsZS9kZXRhaWxzLzIxMDU0MjA=" title="https://blog.csdn.net/hzbooks/article/details/2105420">https://blog.csdn.net/hzbooks/article/details/2105420<i class="fa fa-external-link"></i></span></p><p>数据库有没有类似现代操作系统的好书？ - <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzUyNDk4OTk2" title="https://www.zhihu.com/question/52498996">https://www.zhihu.com/question/52498996<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章囊括了数据库领域经典书籍，并附上必要链接，方便搜索。所推荐书籍囊括基础概念，实现原理，数据库理论，分布式数据库，数据库事务。&lt;/p&gt;
&lt;p&gt;本文基于该文章：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;作者：钱卫宁 华东师范大学 数据科学与工程学院 教授/院长&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;链接：https://www.zhihu.com/question/52498996/answer/142789892&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：知乎&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="DBMS" scheme="https://cakebytheoceanluo.github.io/categories/DBMS/"/>
    
    
      <category term="Books" scheme="https://cakebytheoceanluo.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 185.department.top.three.salaries</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/10/SQL-Leetcode-185-department-top-three-salaries/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/10/SQL-Leetcode-185-department-top-three-salaries/</id>
    <published>2020-03-10T14:09:14.000Z</published>
    <updated>2020-03-10T14:13:32.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>185.Department Top Three Salaries</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), Salary <span class="built_in">int</span>, DepartmentId <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Department (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Employee</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>, <span class="string">'85000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Henry'</span>, <span class="string">'80000'</span>, <span class="string">'2'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Sam'</span>, <span class="string">'60000'</span>, <span class="string">'2'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Max'</span>, <span class="string">'90000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'Janet'</span>, <span class="string">'69000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'Randy'</span>, <span class="string">'85000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'Will'</span>, <span class="string">'70000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Department</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'IT'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Sales'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Employee;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Department;</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), Salary <span class="built_in">int</span>, DepartmentId <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Department (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>, <span class="string">'85000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Henry'</span>, <span class="string">'80000'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Sam'</span>, <span class="string">'60000'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Max'</span>, <span class="string">'90000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'Janet'</span>, <span class="string">'69000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'Randy'</span>, <span class="string">'85000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'Will'</span>, <span class="string">'70000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'IT'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Sales'</span>);</span><br></pre></td></tr></tbody></table></figure><p>The <code>Employee</code> table holds all employees. Every employee has an Id, a salary, and there is also a column for the department Id.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+-------+--------+--------------+</span></span><br><span class="line">| Id | Name  | Salary | DepartmentId |</span><br><span class="line">+<span class="comment">----+-------+--------+--------------+</span></span><br><span class="line">| 1  | Joe   | 85000  | 1            |</span><br><span class="line">| 2  | Henry | 80000  | 2            |</span><br><span class="line">| 3  | Sam   | 60000  | 2            |</span><br><span class="line">| 4  | Max   | 90000  | 1            |</span><br><span class="line">| 5  | Janet | 69000  | 1            |</span><br><span class="line">| 6  | Randy | 85000  | 1            |</span><br><span class="line">| 7  | Will  | 70000  | 1            |</span><br><span class="line">+<span class="comment">----+-------+--------+--------------+</span></span><br></pre></td></tr></tbody></table></figure><p>The <code>Department</code> table holds all departments of the company.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| Id | Name     |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| 1  | IT       |</span><br><span class="line">| 2  | Sales    |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br></pre></td></tr></tbody></table></figure><p>Write a SQL query to find employees who earn the top three salaries in each of the department. For the above tables, your SQL query should return the following rows (order of rows does not matter).</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">------------+----------+--------+</span></span><br><span class="line">| Department | Employee | Salary |</span><br><span class="line">+<span class="comment">------------+----------+--------+</span></span><br><span class="line">| IT         | Max      | 90000  |</span><br><span class="line">| IT         | Randy    | 85000  |</span><br><span class="line">| IT         | Joe      | 85000  |</span><br><span class="line">| IT         | Will     | 70000  |</span><br><span class="line">| Sales      | Henry    | 80000  |</span><br><span class="line">| Sales      | Sam      | 60000  |</span><br><span class="line">+<span class="comment">------------+----------+--------+</span></span><br></pre></td></tr></tbody></table></figure><p>Explanation:</p><p>In IT department, Max earns the highest salary, both Randy and Joe earn the second highest salary, and Will earns the third highest salary. There are only two employees in the Sales department, Henry earns the highest salary while Sam earns the second highest salary.</p><a id="more"></a><hr><p><br></p><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p>用Window Function的解法和<a href="https://cakebytheoceanluo.github.io/2020/03/10/SQL-Leetcode-184-department-highest-salary/">Leetcode 184</a>几乎毫无差别。</p><p><strong>适用于PostgreSQL</strong>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> d.name <span class="keyword">as</span> Department, temp.name <span class="keyword">as</span> Employee, temp.salary <span class="keyword">as</span> Salary</span><br><span class="line"><span class="keyword">from</span> department d, (</span><br><span class="line">    <span class="keyword">select</span> e.departmentid <span class="keyword">as</span> did, </span><br><span class="line">    　　　　e.name, </span><br><span class="line">    　　　　e.salary, </span><br><span class="line">    　　　　<span class="keyword">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> departmentid <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="keyword">rank</span> </span><br><span class="line">    <span class="keyword">from</span> employee e) <span class="keyword">as</span> temp </span><br><span class="line"><span class="keyword">where</span> d.id = temp.did <span class="keyword">and</span> temp.rank &lt;= <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    d.Name <span class="keyword">AS</span> Department, e1.Name <span class="keyword">AS</span> Employee, e1.Salary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee e1 <span class="keyword">JOIN</span> Department d </span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">    e1.DepartmentId = d.Id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="number">3</span> &gt; (<span class="keyword">SELECT</span></span><br><span class="line">            <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> e2.Salary)</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            Employee e2</span><br><span class="line">        <span class="keyword">WHERE</span></span><br><span class="line">            e2.Salary &gt; e1.Salary <span class="keyword">AND</span> e1.DepartmentId = e2.DepartmentId</span><br><span class="line">        )</span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZGVwYXJ0bWVudC10b3AtdGhyZWUtc2FsYXJpZXMv" title="https://leetcode.com/problems/department-top-three-salaries/">https://leetcode.com/problems/department-top-three-salaries/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZGVwYXJ0bWVudC10b3AtdGhyZWUtc2FsYXJpZXMvc29sdXRpb24v" title="https://leetcode.com/problems/department-top-three-salaries/solution/">https://leetcode.com/problems/department-top-three-salaries/solution/<i class="fa fa-external-link"></i></span></p><p><a href="https://cakebytheoceanluo.github.io/2020/03/10/SQL-Leetcode-184-department-highest-salary/">https://cakebytheoceanluo.github.io/2020/03/10/SQL-Leetcode-184-department-highest-salary/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;185.Department Top Three Salaries&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), Salary &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, DepartmentId &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Employee&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Joe&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;85000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Henry&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;80000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Sam&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;60000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Max&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;90000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Janet&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;69000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Randy&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;85000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Will&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;70000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Department&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;IT&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Sales&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; Employee;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; Department;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), Salary &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, DepartmentId &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Joe&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;85000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Henry&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;80000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Sam&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;60000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Max&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;90000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Janet&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;69000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Randy&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;85000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Will&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;70000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;IT&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Sales&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;Employee&lt;/code&gt; table holds all employees. Every employee has an Id, a salary, and there is also a column for the department Id.&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+-------+--------+--------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Id | Name  | Salary | DepartmentId |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+-------+--------+--------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1  | Joe   | 85000  | 1            |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2  | Henry | 80000  | 2            |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 3  | Sam   | 60000  | 2            |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 4  | Max   | 90000  | 1            |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 5  | Janet | 69000  | 1            |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 6  | Randy | 85000  | 1            |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 7  | Will  | 70000  | 1            |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+-------+--------+--------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;Department&lt;/code&gt; table holds all departments of the company.&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Id | Name     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1  | IT       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2  | Sales    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Write a SQL query to find employees who earn the top three salaries in each of the department. For the above tables, your SQL query should return the following rows (order of rows does not matter).&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------------+----------+--------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Department | Employee | Salary |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------------+----------+--------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| IT         | Max      | 90000  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| IT         | Randy    | 85000  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| IT         | Joe      | 85000  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| IT         | Will     | 70000  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Sales      | Henry    | 80000  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Sales      | Sam      | 60000  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------------+----------+--------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Explanation:&lt;/p&gt;
&lt;p&gt;In IT department, Max earns the highest salary, both Randy and Joe earn the second highest salary, and Will earns the third highest salary. There are only two employees in the Sales department, Henry earns the highest salary while Sam earns the second highest salary.&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode-SQL] 184.department.highest.salary</title>
    <link href="https://cakebytheoceanluo.github.io/2020/03/10/SQL-Leetcode-184-department-highest-salary/"/>
    <id>https://cakebytheoceanluo.github.io/2020/03/10/SQL-Leetcode-184-department-highest-salary/</id>
    <published>2020-03-10T14:02:16.000Z</published>
    <updated>2020-03-10T14:13:39.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>184.Department Highest Salary</p><p>SQL Schema:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), Salary <span class="built_in">int</span>, DepartmentId <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Department (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Employee</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>, <span class="string">'70000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Jim'</span>, <span class="string">'90000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Henry'</span>, <span class="string">'80000'</span>, <span class="string">'2'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Sam'</span>, <span class="string">'60000'</span>, <span class="string">'2'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'Max'</span>, <span class="string">'90000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Department</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'IT'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Sales'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Employee;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Department;</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), Salary <span class="built_in">int</span>, DepartmentId <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Department (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>, <span class="string">'70000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Jim'</span>, <span class="string">'90000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Henry'</span>, <span class="string">'80000'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Sam'</span>, <span class="string">'60000'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'Max'</span>, <span class="string">'90000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'IT'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Sales'</span>);</span><br></pre></td></tr></tbody></table></figure><p>The <code>Employee</code> table holds all employees. Every employee has an Id, a salary, and there is also a column for the department Id.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+-------+--------+--------------+</span></span><br><span class="line">| Id | Name  | Salary | DepartmentId |</span><br><span class="line">+<span class="comment">----+-------+--------+--------------+</span></span><br><span class="line">| 1  | Joe   | 70000  | 1            |</span><br><span class="line">| 2  | Jim   | 90000  | 1            |</span><br><span class="line">| 3  | Henry | 80000  | 2            |</span><br><span class="line">| 4  | Sam   | 60000  | 2            |</span><br><span class="line">| 5  | Max   | 90000  | 1            |</span><br><span class="line">+<span class="comment">----+-------+--------+--------------+</span></span><br></pre></td></tr></tbody></table></figure><p>The <code>Department</code> table holds all departments of the company.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| Id | Name     |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| 1  | IT       |</span><br><span class="line">| 2  | Sales    |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br></pre></td></tr></tbody></table></figure><p>Write a SQL query to find employees who have the highest salary in each of the departments. For the above tables, your SQL query should return the following rows (order of rows does not matter).</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">------------+----------+--------+</span></span><br><span class="line">| Department | Employee | Salary |</span><br><span class="line">+<span class="comment">------------+----------+--------+</span></span><br><span class="line">| IT         | Max      | 90000  |</span><br><span class="line">| IT         | Jim      | 90000  |</span><br><span class="line">| Sales      | Henry    | 80000  |</span><br><span class="line">+<span class="comment">------------+----------+--------+</span></span><br></pre></td></tr></tbody></table></figure><p>Explanation:</p><p>Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department.</p><a id="more"></a><hr><p><br></p><h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p><strong>适用于PostgreSQL</strong>:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> d.name <span class="keyword">as</span> Department, temp.name <span class="keyword">as</span> Employee, temp.salary <span class="keyword">as</span> Salary</span><br><span class="line"><span class="keyword">from</span> department d, (</span><br><span class="line">    <span class="keyword">select</span> e.departmentid <span class="keyword">as</span> did, </span><br><span class="line">           e.name, </span><br><span class="line">           e.salary, </span><br><span class="line">           <span class="keyword">rank</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> departmentid <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="keyword">rank</span> </span><br><span class="line">    <span class="keyword">from</span> employee e) <span class="keyword">as</span> temp </span><br><span class="line"><span class="keyword">where</span> d.id = temp.did <span class="keyword">and</span> temp.rank = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p><br></p><h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    Department.name <span class="keyword">AS</span> Department,</span><br><span class="line">    Employee.name <span class="keyword">AS</span> Employee,</span><br><span class="line">    Salary</span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">JOIN</span> Department </span><br><span class="line"><span class="keyword">ON</span> Employee.DepartmentId = Department.Id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    (Employee.DepartmentId, Salary) <span class="keyword">IN</span></span><br><span class="line">    (   <span class="keyword">SELECT</span></span><br><span class="line">            DepartmentId, <span class="keyword">MAX</span>(Salary)</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            Employee</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> DepartmentId</span><br><span class="line">)</span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>引用和推荐的阅读：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZGVwYXJ0bWVudC1oaWdoZXN0LXNhbGFyeS8=" title="https://leetcode.com/problems/department-highest-salary/">https://leetcode.com/problems/department-highest-salary/<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZGVwYXJ0bWVudC1oaWdoZXN0LXNhbGFyeS9zb2x1dGlvbi8=" title="https://leetcode.com/problems/department-highest-salary/solution/">https://leetcode.com/problems/department-highest-salary/solution/<i class="fa fa-external-link"></i></span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;184.Department Highest Salary&lt;/p&gt;
&lt;p&gt;SQL Schema:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), Salary &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, DepartmentId &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Exists&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Employee&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Joe&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;70000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Jim&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;90000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Henry&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;80000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Sam&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;60000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Max&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;90000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Department&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;IT&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Sales&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- PostgreSQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; Employee;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; Department;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;), Salary &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, DepartmentId &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Joe&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;70000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Jim&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;90000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Henry&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;80000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Sam&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;60000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Employee (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;, Salary, DepartmentId) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Max&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;90000&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;IT&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Department (&lt;span class=&quot;keyword&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Sales&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;Employee&lt;/code&gt; table holds all employees. Every employee has an Id, a salary, and there is also a column for the department Id.&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+-------+--------+--------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Id | Name  | Salary | DepartmentId |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+-------+--------+--------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1  | Joe   | 70000  | 1            |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2  | Jim   | 90000  | 1            |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 3  | Henry | 80000  | 2            |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 4  | Sam   | 60000  | 2            |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 5  | Max   | 90000  | 1            |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+-------+--------+--------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;Department&lt;/code&gt; table holds all departments of the company.&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Id | Name     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1  | IT       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2  | Sales    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+----------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Write a SQL query to find employees who have the highest salary in each of the departments. For the above tables, your SQL query should return the following rows (order of rows does not matter).&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------------+----------+--------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Department | Employee | Salary |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------------+----------+--------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| IT         | Max      | 90000  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| IT         | Jim      | 90000  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Sales      | Henry    | 80000  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;------------+----------+--------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Explanation:&lt;/p&gt;
&lt;p&gt;Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department.&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/categories/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/categories/Leetcode/"/>
    
    
      <category term="SQL" scheme="https://cakebytheoceanluo.github.io/tags/SQL/"/>
    
      <category term="Leetcode" scheme="https://cakebytheoceanluo.github.io/tags/Leetcode/"/>
    
      <category term="Window Function" scheme="https://cakebytheoceanluo.github.io/tags/Window-Function/"/>
    
  </entry>
  
</feed>
