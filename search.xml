<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[SQL]高级SQL-窗口函数(3)</title>
    <url>/2020/04/04/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-3/</url>
    <content><![CDATA[<p>在前两篇文章中我们基本上认识了window function。这次我们有具体的数据集去进行大量练习(绝大部分是排名)。</p>
<a id="more"></a>
<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注<code>select...from...where</code>这种读操作，分析query　(analytical query)。<br>数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p>
<p>架构 Schema:<br><img data-src="https://db.in.tum.de/teaching/ws1920/grundlagen/uni.png?lang=de" alt="schema_de"></p>
<p><img data-src="https://hyper-db.de/uniEngl.png" alt="schema_en"></p>
<p>下载:<br><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vdW5pX215c3FsLnNxbD9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de<i class="fa fa-external-link"></i></span></p>
<p>Schma和大部分SQL语句来自<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL2tlbXBlci8/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/kemper/?lang=de">Prof. Alfons Kemper, Ph.D.<i class="fa fa-external-link"></i></span>的课件和书。</p>
<p>课件：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></li>
</ul>
<p>书：　<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p>
<p><br><br><br></p>
<h1 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h1><h2 id="成绩例子"><a href="#成绩例子" class="headerlink" title="成绩例子"></a>成绩例子</h2><p>我们采用一个更大的表格，基于原数据集表格<code>pruefen</code>：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> examination (MatrNr, CourseNr, PersNr, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="number">29120</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.3</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> examination;</span><br><span class="line"></span><br><span class="line"> matrnr | coursenr | persnr | grade </span><br><span class="line"><span class="comment">--------+----------+--------+-------</span></span><br><span class="line">  28106 |     5001 |   2126 |   1.0</span><br><span class="line">  27550 |     4630 |   2137 |   2.0</span><br><span class="line">  29555 |        0 |      0 |   1.3</span><br><span class="line">  29120 |        0 |      0 |   3.0</span><br><span class="line">  25403 |     5041 |   2125 |   2.0</span><br><span class="line">  29555 |        0 |      0 |   2.0</span><br><span class="line">  29555 |        0 |      0 |   1.0</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="基于学生的平均成绩-确定同年级中的排名"><a href="#基于学生的平均成绩-确定同年级中的排名" class="headerlink" title="基于学生的平均成绩 确定同年级中的排名:"></a>基于学生的平均成绩 确定同年级中的排名:</h3><p>基于学生的平均成绩 确定同年级中的排名(和同一个学期的同学比较)</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> examination (MatrNr, CourseNr, PersNr, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="number">29120</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.3</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">), grades (MatrNr, Semester, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.matrnr, semester, <span class="keyword">avg</span>(Grade) <span class="comment">-- 计算平均成绩</span></span><br><span class="line">    <span class="keyword">from</span> studenten s, examination p</span><br><span class="line">    <span class="keyword">where</span> s.matrnr = p.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, semester</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * , </span><br><span class="line">       <span class="keyword">rank</span> () <span class="keyword">over</span> (</span><br><span class="line">           <span class="keyword">partition</span> <span class="keyword">by</span> Semester <span class="comment">-- 和同一学期的同学比较</span></span><br><span class="line">           <span class="keyword">order</span> <span class="keyword">by</span> Grade <span class="keyword">asc</span>    <span class="comment">-- 数字小是高分　排名也靠前</span></span><br><span class="line">           ) <span class="keyword">as</span> Rang</span><br><span class="line"><span class="keyword">from</span> grades</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> semester, rang;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>不使用窗口函数的版本：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> examination (MatrNr, CourseNr, PersNr, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="number">29120</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.3</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">), grades (MatrNr, Semester, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.matrnr, semester, <span class="keyword">avg</span>(Grade) <span class="comment">-- 计算平均成绩</span></span><br><span class="line">    <span class="keyword">from</span> studenten s, examination p</span><br><span class="line">    <span class="keyword">where</span> s.matrnr = p.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, semester</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * ,</span><br><span class="line">       (<span class="keyword">select</span> <span class="keyword">count</span>(*) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">from</span> Grades x</span><br><span class="line">        <span class="keyword">where</span> x.Semester = n.Semester <span class="keyword">and</span> x.Grade &lt; n.Grade) <span class="keyword">as</span> Rang</span><br><span class="line"><span class="keyword">from</span> grades n</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> semester, rang;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> matrnr | semester |         grade          | rang </span><br><span class="line"><span class="comment">--------+----------+------------------------+------</span></span><br><span class="line">  29555 |        2 |     1.4333333333333333 |    1</span><br><span class="line">  29120 |        2 |     3.0000000000000000 |    2</span><br><span class="line">  28106 |        3 | 1.00000000000000000000 |    1</span><br><span class="line">  27550 |        6 |     2.0000000000000000 |    1</span><br><span class="line">  25403 |       12 |     2.0000000000000000 |    1</span><br><span class="line">(5 rows)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h3 id="在上一步的基础上，增加离平均成绩的差距"><a href="#在上一步的基础上，增加离平均成绩的差距" class="headerlink" title="在上一步的基础上，增加离平均成绩的差距:"></a>在上一步的基础上，增加离平均成绩的差距:</h3><p>在上一步的基础上，增加每个同学离平均成绩的差距，和同年级平均成绩的差距(和同一个学期的同学比较)</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> examination (MatrNr, CourseNr, PersNr, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="number">29120</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.3</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">), grades (MatrNr, Semester, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.matrnr, semester, <span class="keyword">avg</span>(Grade) <span class="comment">-- 计算平均成绩</span></span><br><span class="line">    <span class="keyword">from</span> studenten s, examination p</span><br><span class="line">    <span class="keyword">where</span> s.matrnr = p.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, semester</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * ,</span><br><span class="line">       <span class="keyword">rank</span> () <span class="keyword">over</span> (</span><br><span class="line">           <span class="keyword">partition</span> <span class="keyword">by</span> Semester <span class="comment">-- 和同一学期的同学比较</span></span><br><span class="line">           <span class="keyword">order</span> <span class="keyword">by</span> Grade <span class="keyword">asc</span>    <span class="comment">-- 数字小是高分　排名也靠前</span></span><br><span class="line">           ) <span class="keyword">as</span> Rang,</span><br><span class="line">       <span class="keyword">avg</span> (Grade) <span class="keyword">over</span> (</span><br><span class="line">           <span class="keyword">partition</span> <span class="keyword">by</span> Semester  <span class="comment">-- 和同一学期的同学比较</span></span><br><span class="line">       ) <span class="keyword">as</span> GPA ,                 <span class="comment">-- 同年级的平均成绩</span></span><br><span class="line">       <span class="keyword">avg</span> (Grade) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> Semester) - Grade <span class="keyword">as</span> <span class="keyword">difference</span></span><br><span class="line"><span class="keyword">from</span> grades</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> semester, rang;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>不使用窗口函数的版本：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> examination (MatrNr, CourseNr, PersNr, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="number">29120</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2.0</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.3</span>),</span><br><span class="line">           (<span class="number">29555</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">), grades (MatrNr, Semester, Grade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.matrnr, semester, <span class="keyword">avg</span>(Grade) <span class="comment">-- 计算平均成绩</span></span><br><span class="line">    <span class="keyword">from</span> studenten s, examination p</span><br><span class="line">    <span class="keyword">where</span> s.matrnr = p.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, semester</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * ,</span><br><span class="line">       (<span class="keyword">select</span> <span class="keyword">count</span>(*) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">from</span> Grades x</span><br><span class="line">        <span class="keyword">where</span> x.Semester = n.Semester <span class="keyword">and</span> x.Grade &lt; n.Grade) <span class="keyword">as</span> Rang,</span><br><span class="line">       (<span class="keyword">select</span> <span class="keyword">avg</span>(x.Grade)</span><br><span class="line">       <span class="keyword">from</span> Grades x</span><br><span class="line">       <span class="keyword">where</span> x.Semester = n.Semester) <span class="keyword">as</span> GPA,</span><br><span class="line">       (<span class="keyword">select</span> <span class="keyword">avg</span>(x.Grade)</span><br><span class="line">       <span class="keyword">from</span> Grades x</span><br><span class="line">       <span class="keyword">where</span> x.Semester = n.Semester) - Grade <span class="keyword">as</span> <span class="keyword">difference</span></span><br><span class="line"><span class="keyword">from</span> grades n</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> semester, rang;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> matrnr | semester |         grade          | rang |          gpa           |       difference       </span><br><span class="line"><span class="comment">--------+----------+------------------------+------+------------------------+------------------------</span></span><br><span class="line">  29555 |        2 |     1.4333333333333333 |    1 |     2.2166666666666667 |     0.7833333333333334</span><br><span class="line">  29120 |        2 |     3.0000000000000000 |    2 |     2.2166666666666667 |    -0.7833333333333333</span><br><span class="line">  28106 |        3 | 1.00000000000000000000 |    1 | 1.00000000000000000000 | 0.00000000000000000000</span><br><span class="line">  27550 |        6 |     2.0000000000000000 |    1 |     2.0000000000000000 |     0.0000000000000000</span><br><span class="line">  25403 |       12 |     2.0000000000000000 |    1 |     2.0000000000000000 |     0.0000000000000000</span><br><span class="line">(5 rows)</span><br></pre></td></tr></tbody></table></figure><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Window Function</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQL]高级SQL-窗口函数(2)</title>
    <url>/2020/04/02/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-2/</url>
    <content><![CDATA[<p>我们在<a href="https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part2/">[CMU-15445]Lec02_part2 Advanced SQL - 高级 SQL</a>中非常初步了了解了window function窗口函数。它是在OLAP中非常高效的一种函数，在工业业务中非常常见。另外我在Leetcode中的SQL部分也发现很多题目可以适用window function。CMU课实际上有一些简略。我会使用TUM的<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvP2xhbmc9ZW4=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/?lang=en">Foundations in Data Engineering<i class="fa fa-external-link"></i></span>课件来重点学习练习这块内容。</p>
<p>我们这次练习 使用frame的window function</p>
<a id="more"></a>
<h1 id="使用frame的window-functions"><a href="#使用frame的window-functions" class="headerlink" title="使用frame的window functions"></a>使用frame的window functions</h1><p><img data-src="https://cakebytheoceanluo.github.io/images/FDE/chap3/30.jpg" alt="30.jpg"></p>
<h2 id="rows"><a href="#rows" class="headerlink" title="rows"></a><code>rows</code></h2><h3 id="上一行～下一行"><a href="#上一行～下一行" class="headerlink" title="上一行～下一行"></a>上一行～下一行</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(x) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">following</span>)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  | sum </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 |  20</span><br><span class="line"> 10 |  34</span><br><span class="line"> 14 |  41</span><br><span class="line"> 17 |  48</span><br><span class="line"> 17 |  52</span><br><span class="line"> 18 |  55</span><br><span class="line"> 20 |  38</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="上一行～最后一行"><a href="#上一行～最后一行" class="headerlink" title="上一行～最后一行"></a>上一行～最后一行</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(x) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">unbounded</span> <span class="keyword">following</span>)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  | sum </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 | 106</span><br><span class="line"> 10 | 106</span><br><span class="line"> 14 |  96</span><br><span class="line"> 17 |  86</span><br><span class="line"> 17 |  72</span><br><span class="line"> 18 |  55</span><br><span class="line"> 20 |  38</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="range"><a href="#range" class="headerlink" title="range"></a><code>range</code></h2><p>PostgreSQL不能处理下面的SQL，但是HyPer可以。</p>
<h3 id="forall-x-x-x-1"><a href="#forall-x-x-x-1" class="headerlink" title="$\forall x: [x, x+1]$"></a>$\forall x: [x, x+1]$</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(x) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x <span class="keyword">range</span> <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">following</span>)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  | sum </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 | 20</span><br><span class="line"> 10 | 20</span><br><span class="line"> 14 | 14</span><br><span class="line"> 17 | 52</span><br><span class="line"> 17 | 52</span><br><span class="line"> 18 | 18</span><br><span class="line"> 20 | 20</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="forall-x-x-x-2"><a href="#forall-x-x-x-2" class="headerlink" title="$\forall x: [x, x+2]$"></a>$\forall x: [x, x+2]$</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(x) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x <span class="keyword">range</span> <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">following</span>)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  | sum </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 | 20</span><br><span class="line"> 10 | 20</span><br><span class="line"> 14 | 14</span><br><span class="line"> 17 | 52</span><br><span class="line"> 17 | 52</span><br><span class="line"> 18 | 38</span><br><span class="line"> 20 | 20</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<p>相比较上面两个例子， 结果中从<code>18 | 18</code>变成<code>18 | 38</code>，因为<code>18</code>这个tupel可以涉及的值域范围从$[18, 19]$变成$[18, 20]$</p>
<h3 id="forall-x-mathrm-unbounded-x"><a href="#forall-x-mathrm-unbounded-x" class="headerlink" title="$\forall x: [\mathrm{unbounded}, x]$"></a>$\forall x: [\mathrm{unbounded}, x]$</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(x) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x <span class="keyword">range</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">following</span>)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure>
<p>或</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(x) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  | sum </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 |  20</span><br><span class="line"> 10 |  20</span><br><span class="line"> 14 |  34</span><br><span class="line"> 17 |  68</span><br><span class="line"> 17 |  68</span><br><span class="line"> 18 |  86</span><br><span class="line"> 20 | 106</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="forall-x-y-1-y-1"><a href="#forall-x-y-1-y-1" class="headerlink" title="$\forall x: [y-1, y+1]$"></a>$\forall x: [y-1, y+1]$</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x, y) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                       (<span class="number">10</span>, <span class="number">1</span>),</span><br><span class="line">                       (<span class="number">10</span>, <span class="number">10</span>),</span><br><span class="line">                       (<span class="number">14</span>, <span class="number">2</span>),</span><br><span class="line">                       (<span class="number">17</span>, <span class="number">3</span>),</span><br><span class="line">                       (<span class="number">17</span>, <span class="number">4</span>),</span><br><span class="line">                       (<span class="number">18</span>, <span class="number">15</span>),</span><br><span class="line">                       (<span class="number">20</span>, <span class="number">6</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(x) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> y <span class="keyword">range</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">following</span>)</span><br><span class="line"><span class="keyword">from</span> testdata</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> y;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  | sum </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 | 10</span><br><span class="line"> 14 | 24</span><br><span class="line"> 17 | 41</span><br><span class="line"> 17 | 58</span><br><span class="line"> 20 | 78</span><br><span class="line"> 10 | 88</span><br><span class="line"> 18 | 106</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<p><br><br><br></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x, y) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                       (<span class="number">10</span>, <span class="number">1</span>),</span><br><span class="line">                       (<span class="number">10</span>, <span class="number">10</span>),</span><br><span class="line">                       (<span class="number">14</span>, <span class="number">2</span>),</span><br><span class="line">                       (<span class="number">17</span>, <span class="number">3</span>),</span><br><span class="line">                       (<span class="number">17</span>, <span class="number">4</span>),</span><br><span class="line">                       (<span class="number">18</span>, <span class="number">15</span>),</span><br><span class="line">                       (<span class="number">20</span>, <span class="number">6</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">sum</span>(x) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> y)</span><br><span class="line"><span class="keyword">from</span> testdata</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> y;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  | sum </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 |  10</span><br><span class="line"> 14 |  24</span><br><span class="line"> 17 |  41</span><br><span class="line"> 17 |  58</span><br><span class="line"> 20 |  78</span><br><span class="line"> 10 |  88</span><br><span class="line"> 18 | 106</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<hr>
<p>引用: </p>
<p>课件: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvY2hhcHRlcjMucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>TUM-IN2326</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Window Function</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQL]高级SQL-窗口函数(1)</title>
    <url>/2020/04/01/SQL-%E9%AB%98%E7%BA%A7SQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-1/</url>
    <content><![CDATA[<p>我们在<a href="https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part2/">[CMU-15445]Lec02_part2 Advanced SQL - 高级 SQL</a>中非常初步了了解了window function窗口函数。它是在OLAP中非常高效的一种函数，在工业业务中非常常见。另外我在Leetcode中的SQL部分也发现很多题目可以适用window function。CMU课实际上有一些简略。我会使用TUM的<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvP2xhbmc9ZW4=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/?lang=en">Foundations in Data Engineering<i class="fa fa-external-link"></i></span>课件来重点学习练习这块内容。</p>
<p>我们这次练习 不使用frame的window function</p>
<a id="more"></a>
<h1 id="不使用frame的window-functions"><a href="#不使用frame的window-functions" class="headerlink" title="不使用frame的window functions"></a>不使用frame的window functions</h1><p><img data-src="https://cakebytheoceanluo.github.io/images/FDE/chap3/27.jpg" alt="27.jpg"></p>
<h2 id="ranking-排序"><a href="#ranking-排序" class="headerlink" title="ranking 排序"></a>ranking 排序</h2><h3 id="rank"><a href="#rank" class="headerlink" title="rank()"></a>rank()</h3><p>并列会占用后面的排名数字。</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  | rank </span><br><span class="line"><span class="comment">----+------</span></span><br><span class="line"> 10 |    1</span><br><span class="line"> 10 |    1</span><br><span class="line"> 14 |    3</span><br><span class="line"> 17 |    4</span><br><span class="line"> 17 |    4</span><br><span class="line"> 18 |    6</span><br><span class="line"> 20 |    7</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="dense-rank"><a href="#dense-rank" class="headerlink" title="dense_rank()"></a>dense_rank()</h3><p>并列不会占用后面的排名数字。</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  | dense_rank </span><br><span class="line"><span class="comment">----+------------</span></span><br><span class="line"> 10 |          1</span><br><span class="line"> 10 |          1</span><br><span class="line"> 14 |          2</span><br><span class="line"> 17 |          3</span><br><span class="line"> 17 |          3</span><br><span class="line"> 18 |          4</span><br><span class="line"> 20 |          5</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="row-number"><a href="#row-number" class="headerlink" title="row_number()"></a>row_number()</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, row_number() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  | row_number </span><br><span class="line"><span class="comment">----+------------</span></span><br><span class="line"> 10 |          1</span><br><span class="line"> 10 |          2</span><br><span class="line"> 14 |          3</span><br><span class="line"> 17 |          4</span><br><span class="line"> 17 |          5</span><br><span class="line"> 18 |          6</span><br><span class="line"> 20 |          7</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ntile-INT"><a href="#ntile-INT" class="headerlink" title="ntile(INT)"></a>ntile(INT)</h3><p>把表格均分为<code>INT</code>份</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, ntile(<span class="number">2</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  | ntile </span><br><span class="line"><span class="comment">----+-------</span></span><br><span class="line"> 10 |     1</span><br><span class="line"> 10 |     1</span><br><span class="line"> 14 |     1</span><br><span class="line"> 17 |     1</span><br><span class="line"> 17 |     2</span><br><span class="line"> 18 |     2</span><br><span class="line"> 20 |     2</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, ntile(<span class="number">3</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  | ntile </span><br><span class="line"><span class="comment">----+-------</span></span><br><span class="line"> 10 |     1</span><br><span class="line"> 10 |     1</span><br><span class="line"> 14 |     1</span><br><span class="line"> 17 |     2</span><br><span class="line"> 17 |     2</span><br><span class="line"> 18 |     3</span><br><span class="line"> 20 |     3</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="distribution-分布"><a href="#distribution-分布" class="headerlink" title="distribution 分布"></a>distribution 分布</h2><h3 id="percent-rank"><a href="#percent-rank" class="headerlink" title="percent_rank()"></a>percent_rank()</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">percent_rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  |   percent_rank    </span><br><span class="line"><span class="comment">----+-------------------</span></span><br><span class="line"> 10 |                 0</span><br><span class="line"> 10 |                 0</span><br><span class="line"> 14 | 0.333333333333333</span><br><span class="line"> 17 |               0.5</span><br><span class="line"> 17 |               0.5</span><br><span class="line"> 18 | 0.833333333333333</span><br><span class="line"> 20 |                 1</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="cume-dist"><a href="#cume-dist" class="headerlink" title="cume_dist()"></a>cume_dist()</h3><p>cumulative distribution function(cdf): 概率累加函数</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">cume_dist</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  |     cume_dist     </span><br><span class="line"><span class="comment">----+-------------------</span></span><br><span class="line"> 10 | 0.285714285714286</span><br><span class="line"> 10 | 0.285714285714286</span><br><span class="line"> 14 | 0.428571428571429</span><br><span class="line"> 17 | 0.714285714285714</span><br><span class="line"> 17 | 0.714285714285714</span><br><span class="line"> 18 | 0.857142857142857</span><br><span class="line"> 20 |                 1</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="navigation-in-partition-在同一个分组中进行定位"><a href="#navigation-in-partition-在同一个分组中进行定位" class="headerlink" title="navigation in partition 在同一个分组中进行定位"></a>navigation in partition 在同一个分组中进行定位</h2><h3 id="lag-expr-offset-default"><a href="#lag-expr-offset-default" class="headerlink" title="lag(expr, offset, default)"></a>lag(expr, offset, default)</h3><p>可以得到同组前<code>offset</code>的tupel的数值：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, lag(x, <span class="number">1</span>, <span class="literal">NULL</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  | lag </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 |    </span><br><span class="line"> 10 |  10</span><br><span class="line"> 14 |  10</span><br><span class="line"> 17 |  14</span><br><span class="line"> 17 |  17</span><br><span class="line"> 18 |  17</span><br><span class="line"> 20 |  18</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<p>其中空着的那一格是<code>NULL</code>，是我们设置的default默认值。</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, lag(<span class="number">2</span> * x, <span class="number">1</span>, <span class="literal">NULL</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  | lag </span><br><span class="line"><span class="comment">----+-----</span></span><br><span class="line"> 10 |    </span><br><span class="line"> 10 |  20</span><br><span class="line"> 14 |  20</span><br><span class="line"> 17 |  28</span><br><span class="line"> 17 |  34</span><br><span class="line"> 18 |  34</span><br><span class="line"> 20 |  36</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="lead-expr-offset-default"><a href="#lead-expr-offset-default" class="headerlink" title="lead(expr, offset, default)"></a>lead(expr, offset, default)</h3><p>可以得到同组前<code>offset</code>的tupel的数值：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> testdata(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">10</span>),</span><br><span class="line">                    (<span class="number">14</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">17</span>),</span><br><span class="line">                    (<span class="number">18</span>),</span><br><span class="line">                    (<span class="number">20</span>))</span><br><span class="line"><span class="keyword">select</span> x, <span class="keyword">lead</span>(<span class="number">2</span> * x, <span class="number">2</span>, <span class="number">-1</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> x)</span><br><span class="line"><span class="keyword">from</span> testdata;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> x  | lead </span><br><span class="line"><span class="comment">----+------</span></span><br><span class="line"> 10 |   28</span><br><span class="line"> 10 |   34</span><br><span class="line"> 14 |   34</span><br><span class="line"> 17 |   36</span><br><span class="line"> 17 |   40</span><br><span class="line"> 18 |   -1</span><br><span class="line"> 20 |   -1</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<hr>
<p>引用: </p>
<p>课件: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvY2hhcHRlcjMucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>TUM-IN2326</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Window Function</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQL]高级SQL-递归(6)</title>
    <url>/2020/03/31/SQL-%E9%AB%98%E7%BA%A7SQL-%E9%80%92%E5%BD%92-6/</url>
    <content><![CDATA[<h1 id="Six-Degrees-of-Kevin-Bacon"><a href="#Six-Degrees-of-Kevin-Bacon" class="headerlink" title="Six Degrees of Kevin Bacon"></a>Six Degrees of Kevin Bacon</h1><p>具体描述见: <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2l4X0RlZ3JlZXNfb2ZfS2V2aW5fQmFjb24=" title="https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon">https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon<i class="fa fa-external-link"></i></span></p>
<p>Six Degrees of Kevin Bacon或”Bacon’s Law”是基于”six degrees of separation六度分离”，它假定地球上任何两个人相距六个或更少的熟人链接。 比如寻找任意演员和多产演员Kevin Bacon之间的最短路径。 它基于一个假设，即好莱坞电影界的任何人都可以通过其电影角色在六个步骤中将其与Kevin Bacon联系起来。这个概念也类似Fackbook提出的概念。当然在计算机或者算法角度，这是一个BFS广度优先的图问题。通过间接的6步可能会接触非常多人，产生非常大的数据。具体我们会在下面的练习中体验到。</p>
<p>这里再附上Kevin Bacon的一些链接:</p>
<ul>
<li>个人网站(他直接用了six degree这个概念): <span class="exturl" data-url="aHR0cHM6Ly93d3cuc2l4ZGVncmVlcy5vcmc=" title="https://www.sixdegrees.org">https://www.sixdegrees.org<i class="fa fa-external-link"></i></span></li>
<li>豆瓣主页: <span class="exturl" data-url="aHR0cHM6Ly9tb3ZpZS5kb3ViYW4uY29tL2NlbGVicml0eS8xMDA5MjYwLw==" title="https://movie.douban.com/celebrity/1009260/">https://movie.douban.com/celebrity/1009260/<i class="fa fa-external-link"></i></span></li>
</ul>
<a id="more"></a>
<h2 id="IMDb数据集"><a href="#IMDb数据集" class="headerlink" title="IMDb数据集"></a>IMDb数据集</h2><p>我们这次使用IMDb数据集，本地载入数据集的方式见我以前的一篇文章: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#IMDb-%E6%95%B0%E6%8D%AE%E9%9B%86">[DBMS]PostgreSQL导入数据集 - IMDb 数据集</a></p>
<p><br></p>
<p>我们打开psql的计时器:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">imdb=# \timing</span><br><span class="line">Timing is on.</span><br></pre></td></tr></tbody></table></figure>
<h2 id="调整buffer-pool和cache大小"><a href="#调整buffer-pool和cache大小" class="headerlink" title="调整buffer pool和cache大小"></a>调整buffer pool和cache大小</h2><p>我们用自己喜欢的文本编辑器去打开<code>/etc/postgresql/10/main/postgresql.conf</code>文件:</p>
<ul>
<li>注意我<code>postgresql</code>的版本是<code>10</code></li>
<li>具体的配置文件位置和<code>postgresql</code>安装位置和安装版本有关</li>
</ul>
<p>找到下面对应的<code>shared_buffers</code>建议更改数值为1024MB， <code>work_mem</code>建议更改为1024MB (我都改成比建议值大，这里大家按照自己机器的硬件配置来估计):</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># RESOURCE USAGE (except WAL)</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Memory -</span></span><br><span class="line"></span><br><span class="line">shared_buffers = 2048MB                 <span class="comment"># min 128kB</span></span><br><span class="line">                                        <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#huge_pages = try                       # on, off, or try</span></span><br><span class="line">                                        <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment">#temp_buffers = 8MB                     # min 800kB </span></span><br><span class="line"><span class="comment">#max_prepared_transactions = 0          # zero disables the feature</span></span><br><span class="line">                                        <span class="comment"># (change requires restart)</span></span><br><span class="line"><span class="comment"># Caution: it is not advisable to set max_prepared_transactions nonzero unless</span></span><br><span class="line"><span class="comment"># you actively intend to use prepared transactions.</span></span><br><span class="line">work_mem = 8196MB                               <span class="comment"># min 64kB  </span></span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure>
<p>更改好后保存，执行下面的指令，让psql重启来使配置生效:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo service postgresql restart</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="求Bacon-Kevin演过的电影数量"><a href="#求Bacon-Kevin演过的电影数量" class="headerlink" title="求Bacon, Kevin演过的电影数量"></a>求<code>Bacon, Kevin</code>演过的电影数量</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> movie_name)</span><br><span class="line"><span class="keyword">from</span> playedin_text</span><br><span class="line"><span class="keyword">where</span> actor_name = <span class="string">'Bacon, Kevin'</span>;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> count </span><br><span class="line"><span class="comment">-------</span></span><br><span class="line">   322</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 838.464 ms</span><br></pre></td></tr></tbody></table></figure>
<h2 id="找到Bacon-Number小于等于1的演员数量"><a href="#找到Bacon-Number小于等于1的演员数量" class="headerlink" title="找到Bacon Number小于等于1的演员数量"></a>找到Bacon Number小于等于1的演员数量</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> baconnr (<span class="keyword">id</span>, nr) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="string">'Bacon, Kevin'</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">select</span> p2.actor_name, baconnr.nr + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> baconnr, playedin_text p1, playedin_text p2</span><br><span class="line">    <span class="keyword">where</span> baconnr.id = p1.actor_name <span class="keyword">and</span> </span><br><span class="line">          p1.movie_name = p2.movie_name <span class="keyword">and</span> </span><br><span class="line">          baconnr.nr &lt; <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) </span><br><span class="line"><span class="keyword">from</span> baconnr;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> count </span><br><span class="line"><span class="comment">-------</span></span><br><span class="line"> 35893</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 5718.960 ms (00:05.719)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="找到Bacon-Number小于等于2的演员数量-一次尝试"><a href="#找到Bacon-Number小于等于2的演员数量-一次尝试" class="headerlink" title="找到Bacon Number小于等于2的演员数量 - 一次尝试"></a>找到Bacon Number小于等于2的演员数量 - 一次尝试</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> baconnr (<span class="keyword">id</span>, nr) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="string">'Bacon, Kevin'</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">select</span> p2.actor_name, baconnr.nr + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> baconnr, playedin_text p1, playedin_text p2</span><br><span class="line">    <span class="keyword">where</span> baconnr.id = p1.actor_name <span class="keyword">and</span> </span><br><span class="line">          p1.movie_name = p2.movie_name <span class="keyword">and</span> </span><br><span class="line">          baconnr.nr &lt; <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) </span><br><span class="line"><span class="keyword">from</span> baconnr;</span><br></pre></td></tr></tbody></table></figure>
<p>很可惜这条SQL在我的电脑上十分钟内无法终止。本质上这属于一个广度搜索，我们可能会重复接触到很多人，这使这条SQL在短时间内不能终止。</p>
<h3 id="cardinality"><a href="#cardinality" class="headerlink" title="cardinality"></a>cardinality</h3><p>即Bacon Number等于1，但是存在重复</p>
<p>the size of intermediate results</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(p2.actor_name)</span><br><span class="line"><span class="keyword">from</span> playedin_text p1, playedin_text p2</span><br><span class="line"><span class="keyword">where</span> p1.actor_name = <span class="string">'Bacon, Kevin'</span> <span class="keyword">and</span> p1.movie_name = p2.movie_name;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">  count  </span><br><span class="line"><span class="comment">---------</span></span><br><span class="line"> 1391638</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 11896.991 ms (00:11.897)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="找到Bacon-Number小于等于2的演员数量-除去重复"><a href="#找到Bacon-Number小于等于2的演员数量-除去重复" class="headerlink" title="找到Bacon Number小于等于2的演员数量 - 除去重复"></a>找到Bacon Number小于等于2的演员数量 - 除去重复</h2><p>使用<code>union all</code>和<code>select distinct</code>:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> baconnr (actor_name, nr) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="string">'Bacon, Kevin'</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> p2.actor_name, movies.nr + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> p1.movie_name, baconnr.nr</span><br><span class="line">          <span class="keyword">from</span> baconnr, playedin_text p1</span><br><span class="line">          <span class="keyword">where</span> baconnr.actor_name = p1.actor_name</span><br><span class="line">         ) movies,</span><br><span class="line">         playedin_text p2</span><br><span class="line">    <span class="keyword">where</span> movies.movie_name = p2.movie_name <span class="keyword">and</span> movies.nr &lt; <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> actor_name)</span><br><span class="line"><span class="keyword">from</span> baconnr;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">  count  </span><br><span class="line"><span class="comment">---------</span></span><br><span class="line"> 1046450</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 27453.873 ms (00:27.454)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="找到Bacon-Number小于等于2的演员数量-除去重复-1"><a href="#找到Bacon-Number小于等于2的演员数量-除去重复-1" class="headerlink" title="找到Bacon Number小于等于2的演员数量 - 除去重复"></a>找到Bacon Number小于等于2的演员数量 - 除去重复</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> baconnr (actor_name, nr) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="string">'Bacon, Kevin'</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> p2.actor_name, movies.nr + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> p1.movie_name, baconnr.nr</span><br><span class="line">          <span class="keyword">from</span> baconnr, playedin_text p1</span><br><span class="line">          <span class="keyword">where</span> baconnr.actor_name = p1.actor_name</span><br><span class="line">         ) movies,</span><br><span class="line">         playedin_text p2</span><br><span class="line">    <span class="keyword">where</span> movies.movie_name = p2.movie_name <span class="keyword">and</span> movies.nr &lt; <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> actor_name)</span><br><span class="line"><span class="keyword">from</span> baconnr;</span><br></pre></td></tr></tbody></table></figure>
<p><br><br><br><br><br></p>
<h2 id="string-to-int"><a href="#string-to-int" class="headerlink" title="string to int"></a>string to int</h2><p>对string的操作是相对昂贵的，但是对int的操作是相对廉价的。我们新建对应的几个新的表格，使用int, 这样也可以降低表格的大小。</p>
<ul>
<li>table actors (id::integer, name::text)</li>
<li>table movies (id::integer, name::text)</li>
<li>table playedin (actor::integer, movies::integer)</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> movies (<span class="keyword">id</span> <span class="built_in">serial</span> primary <span class="keyword">key</span>, <span class="keyword">name</span> <span class="built_in">text</span> <span class="keyword">not</span> <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> actors (<span class="keyword">id</span> <span class="built_in">serial</span> primary <span class="keyword">key</span>, <span class="keyword">name</span> <span class="built_in">text</span> <span class="keyword">not</span> <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> playedin (</span><br><span class="line">    movie <span class="built_in">integer</span> <span class="keyword">references</span> movies (<span class="keyword">id</span>),</span><br><span class="line">    actor <span class="built_in">integer</span> <span class="keyword">references</span> actors (<span class="keyword">id</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> actors (<span class="keyword">name</span>) <span class="keyword">select</span> <span class="keyword">distinct</span> actor_name <span class="keyword">from</span> playedin_text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> movies (<span class="keyword">name</span>) <span class="keyword">select</span> <span class="keyword">distinct</span> movie_name <span class="keyword">from</span> playedin_text;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- read from all</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> playedin (actor, movie)</span><br><span class="line"><span class="keyword">select</span> actors.id, movies.id</span><br><span class="line"><span class="keyword">from</span> actors, movies, playedin_text p</span><br><span class="line"><span class="keyword">where</span> p.actor_name = actors.name <span class="keyword">and</span> p.movie_name = movies.name;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="找到Bacon-Number小于等于6的演员数量"><a href="#找到Bacon-Number小于等于6的演员数量" class="headerlink" title="找到Bacon Number小于等于6的演员数量"></a>找到Bacon Number小于等于6的演员数量</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> baconnr (<span class="keyword">id</span>, nr) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span> , <span class="number">0</span></span><br><span class="line">    <span class="keyword">from</span> actors</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'Bacon, Kevin'</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> p2.actor, movies.nr + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">    ( <span class="keyword">select</span> <span class="keyword">distinct</span> p1.movie, baconnr.nr</span><br><span class="line">    <span class="keyword">from</span> baconnr, playedin p1</span><br><span class="line">    <span class="keyword">where</span> baconnr.id = p1.actor) movies,</span><br><span class="line">    playedin p2</span><br><span class="line">    <span class="keyword">where</span> movies.movie = p2.movie <span class="keyword">and</span> movies.nr &lt; <span class="number">5</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span> (<span class="keyword">distinct</span> <span class="keyword">id</span>)</span><br><span class="line"><span class="keyword">from</span> baconnr;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">  count  </span><br><span class="line"><span class="comment">---------</span></span><br><span class="line"> 1821293</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">Time: 175282.570 ms (02:55.283)</span><br></pre></td></tr></tbody></table></figure>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>数据集(以及现实世界)中甚至有Bacon Number为7的演员，这里我们就不再继续了。大家如果能实验一下，了解主旨就很好。</p>
<p><br><br><br><br><br></p>
<h1 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h1><h2 id="Optional-找到Bacon-Number小于等于6的演员数量-Query-Plan"><a href="#Optional-找到Bacon-Number小于等于6的演员数量-Query-Plan" class="headerlink" title="Optional: 找到Bacon Number小于等于6的演员数量 - Query Plan"></a>Optional: 找到Bacon Number小于等于6的演员数量 - Query Plan</h2><p>这部分是可选的，而不是必须的。这部分我附上了上一个SQL对应的Query Plan。</p>
<ul>
<li>我打开了多线程选项: <code>testdb=# set max_parallel_workers_per_gather = 4;</code>, 对应下面的Query Plan中的Workers。</li>
<li>我使用了绝对大的buffer pool去容纳所有的page, 因此下面Query Plan只有<code>shared hit</code>， 而没有<code>shared read</code></li>
</ul>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">imdb=# explain (analyze, buffers) with recursive baconnr (id, nr) as (</span><br><span class="line">    select id , <span class="number">0</span></span><br><span class="line">    from actors</span><br><span class="line">    where name = 'Bacon, Kevin'</span><br><span class="line">    <span class="keyword">union</span> all</span><br><span class="line">    select distinct p2.actor, movies.nr + <span class="number">1</span></span><br><span class="line">    from</span><br><span class="line">    ( select distinct p1.movie, baconnr.nr</span><br><span class="line">    from baconnr, playedin p1</span><br><span class="line">    where baconnr.id = p1.actor) movies,</span><br><span class="line">    playedin p2</span><br><span class="line">    where movies.movie = p2.movie <span class="keyword">and</span> movies.nr &lt; <span class="number">5</span></span><br><span class="line">)</span><br><span class="line">select count (distinct id)</span><br><span class="line">from baconnr;</span><br><span class="line">                                                                                QUERY PLAN                                                                                </span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">3243681.47</span>.<span class="number">.3243681</span><span class="number">.48</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">181539.730</span>.<span class="number">.181539</span><span class="number">.730</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">   Buffers: shared hit=<span class="number">72933155</span></span><br><span class="line">   CTE baconnr</span><br><span class="line">     -&gt;  Recursive Union  (cost=<span class="number">1000.00</span>.<span class="number">.3196845</span><span class="number">.00</span> rows=<span class="number">2081621</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">1.375</span>.<span class="number">.178161</span><span class="number">.180</span> rows=<span class="number">6480755</span> loops=<span class="number">1</span>)</span><br><span class="line">           Buffers: shared hit=<span class="number">72933155</span></span><br><span class="line">           -&gt;  Gather  (cost=<span class="number">1000.00</span>.<span class="number">.23770</span><span class="number">.35</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">1.366</span>.<span class="number">.65</span><span class="number">.451</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">                 Workers Planned: <span class="number">2</span></span><br><span class="line">                 Workers Launched: <span class="number">2</span></span><br><span class="line">                 Buffers: shared hit=<span class="number">12501</span></span><br><span class="line">                 -&gt;  Parallel Seq Scan on actors  (cost=<span class="number">0.00</span>.<span class="number">.22770</span><span class="number">.25</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">40.406</span>.<span class="number">.61</span><span class="number">.732</span> rows=<span class="number">0</span> loops=<span class="number">3</span>)</span><br><span class="line">                       Filter: (name = 'Bacon, Kevin'::text)</span><br><span class="line">                       Rows Removed by Filter: <span class="number">657232</span></span><br><span class="line">                       Buffers: shared hit=<span class="number">12501</span></span><br><span class="line">           -&gt;  HashAggregate  (cost=<span class="number">310542.20</span>.<span class="number">.313144</span><span class="number">.22</span> rows=<span class="number">208162</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">29230.371</span>.<span class="number">.29512</span><span class="number">.804</span> rows=<span class="number">1080126</span> loops=<span class="number">6</span>)</span><br><span class="line">                 Group Key: p2.actor, (baconnr_1.nr + <span class="number">1</span>)</span><br><span class="line">                 Buffers: shared hit=<span class="number">72920654</span></span><br><span class="line">                 -&gt;  Nested Loop  (cost=<span class="number">2384.03</span>.<span class="number">.309501</span><span class="number">.39</span> rows=<span class="number">208162</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">13040.311</span>.<span class="number">.25542</span><span class="number">.265</span> rows=<span class="number">10389484</span> loops=<span class="number">6</span>)</span><br><span class="line">                       Buffers: shared hit=<span class="number">72920654</span></span><br><span class="line">                       -&gt;  HashAggregate  (cost=<span class="number">2376.97</span>.<span class="number">.2383</span><span class="number">.06</span> rows=<span class="number">609</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">13039.878</span>.<span class="number">.13290</span><span class="number">.218</span> rows=<span class="number">570802</span> loops=<span class="number">6</span>)</span><br><span class="line">                             Group Key: p1.movie, baconnr_1.nr</span><br><span class="line">                             Buffers: shared hit=<span class="number">30919755</span></span><br><span class="line">                             -&gt;  Nested Loop  (cost=<span class="number">6.01</span>.<span class="number">.2373</span><span class="number">.92</span> rows=<span class="number">609</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">16.277</span>.<span class="number">.9987</span><span class="number">.675</span> rows=<span class="number">8778940</span> loops=<span class="number">6</span>)</span><br><span class="line">                                   Buffers: shared hit=<span class="number">30919755</span></span><br><span class="line">                                   -&gt;  WorkTable Scan on baconnr baconnr_1  (cost=<span class="number">0.00</span>.<span class="number">.0</span><span class="number">.22</span> rows=<span class="number">3</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">16.246</span>.<span class="number">.173</span><span class="number">.118</span> rows=<span class="number">776577</span> loops=<span class="number">6</span>)</span><br><span class="line">                                         Filter: (nr &lt; <span class="number">5</span>)</span><br><span class="line">                                         Rows Removed by Filter: <span class="number">303549</span></span><br><span class="line">                                   -&gt;  Bitmap Heap Scan on playedin p1  (cost=<span class="number">6.01</span>.<span class="number">.789</span><span class="number">.20</span> rows=<span class="number">203</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">0.006</span>.<span class="number">.0</span><span class="number">.010</span> rows=<span class="number">11</span> loops=<span class="number">4659462</span>)</span><br><span class="line">                                         Recheck Cond: (actor = baconnr_1.id)</span><br><span class="line">                                         Heap Blocks: exact=<span class="number">16784601</span></span><br><span class="line">                                         Buffers: shared hit=<span class="number">30919755</span></span><br><span class="line">                                         -&gt;  Bitmap Index Scan on playedin_actor_idx  (cost=<span class="number">0.00</span>.<span class="number">.5</span><span class="number">.96</span> rows=<span class="number">203</span> <span class="built_in">width</span>=<span class="number">0</span>) (actual time=<span class="number">0.004</span>.<span class="number">.0</span><span class="number">.004</span> rows=<span class="number">11</span> loops=<span class="number">4659462</span>)</span><br><span class="line">                                               Index Cond: (actor = baconnr_1.id)</span><br><span class="line">                                               Buffers: shared hit=<span class="number">14135154</span></span><br><span class="line">                       -&gt;  Bitmap Heap Scan on playedin p2  (cost=<span class="number">7.07</span>.<span class="number">.500</span><span class="number">.01</span> rows=<span class="number">342</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">0.007</span>.<span class="number">.0</span><span class="number">.018</span> rows=<span class="number">18</span> loops=<span class="number">3424813</span>)</span><br><span class="line">                             Recheck Cond: (movie = p1.movie)</span><br><span class="line">                             Heap Blocks: exact=<span class="number">31546852</span></span><br><span class="line">                             Buffers: shared hit=<span class="number">42000899</span></span><br><span class="line">                             -&gt;  Bitmap Index Scan on playedin_movie_idx  (cost=<span class="number">0.00</span>.<span class="number">.6</span><span class="number">.98</span> rows=<span class="number">342</span> <span class="built_in">width</span>=<span class="number">0</span>) (actual time=<span class="number">0.005</span>.<span class="number">.0</span><span class="number">.005</span> rows=<span class="number">18</span> loops=<span class="number">3424813</span>)</span><br><span class="line">                                   Index Cond: (movie = p1.movie)</span><br><span class="line">                                   Buffers: shared hit=<span class="number">10454047</span></span><br><span class="line">   -&gt;  CTE Scan on baconnr  (cost=<span class="number">0.00</span>.<span class="number">.41632</span><span class="number">.42</span> rows=<span class="number">2081621</span> <span class="built_in">width</span>=<span class="number">4</span>) (actual time=<span class="number">1.379</span>.<span class="number">.179511</span><span class="number">.482</span> rows=<span class="number">6480755</span> loops=<span class="number">1</span>)</span><br><span class="line">         Buffers: shared hit=<span class="number">72933155</span></span><br><span class="line"> Planning time: <span class="number">0.260</span> ms</span><br><span class="line"> Execution time: <span class="number">181676.112</span> ms</span><br><span class="line">(<span class="number">44</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">181676.868</span> ms (<span class="number">03</span>:<span class="number">01.677</span>)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Optional-Buffer-Pool预加载"><a href="#Optional-Buffer-Pool预加载" class="headerlink" title="Optional: Buffer Pool预加载"></a>Optional: Buffer Pool预加载</h2><p>这部分是可选的，而不是必须的。这部分的具体解释见我的另一个实验 <a href="https://cakebytheoceanluo.github.io/2020/03/17/DBMS-PostgreSQL-%E7%BC%93%E5%AD%98%E5%8C%BA%E7%AE%A1%E7%90%86BufferPool/">[DBMS][PostgreSQL] 缓存区管理 BufferPool</a></p>
<p>我们可以通过如下的方式，在执行我们的SQL之前，将需要的page预加载进buffer pool:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">imdb=# CREATE EXTENSION pg_prewarm;</span><br><span class="line">CREATE EXTENSION</span><br><span class="line"></span><br><span class="line">imdb=# select * from pg_prewarm('actors');</span><br><span class="line"> pg_prewarm </span><br><span class="line">------------</span><br><span class="line">      <span class="number">12501</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">71.137</span> ms</span><br><span class="line">imdb=# select * from pg_prewarm('movies');</span><br><span class="line"> pg_prewarm </span><br><span class="line">------------</span><br><span class="line">       <span class="number">8396</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">88.954</span> ms</span><br><span class="line">imdb=# select * from pg_prewarm('playedin');</span><br><span class="line"> pg_prewarm </span><br><span class="line">------------</span><br><span class="line">      <span class="number">76623</span></span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>DBMS</category>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>PostgreSQL</tag>
        <tag>Recursion</tag>
        <tag>Six Degrees of Kevin Bacon</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQL]高级SQL-递归(5)</title>
    <url>/2020/03/30/SQL-%E9%AB%98%E7%BA%A7SQL-%E9%80%92%E5%BD%92-5/</url>
    <content><![CDATA[<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><p>在这篇文章高级 SQL 中我们会遇到递归查询图论的题目。我们使用的数据集(图)都在文章中的SQL中。</p>
<a id="more"></a>
<h2 id="无环图-树"><a href="#无环图-树" class="headerlink" title="无环图 / 树"></a>无环图 / 树</h2><p><img data-src="/images/FDE/chap3/21.jpg" alt="21.jpg"></p>
<h3 id="找父节点"><a href="#找父节点" class="headerlink" title="找父节点"></a>找父节点</h3><ul>
<li>搜索<code>turtle</code>的父节点(所有直接和间接父亲)：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span></span><br><span class="line">     animals (<span class="keyword">id</span>, <span class="keyword">name</span>, <span class="keyword">parent</span>) <span class="keyword">as</span> (</span><br><span class="line">         <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">'animal'</span>, <span class="literal">null</span>), (<span class="number">2</span>, <span class="string">'mammal'</span>, <span class="number">1</span>),</span><br><span class="line">                (<span class="number">3</span>, <span class="string">'giraffe'</span>, <span class="number">2</span>), (<span class="number">4</span>, <span class="string">'tiger'</span>, <span class="number">2</span>),</span><br><span class="line">                (<span class="number">5</span>, <span class="string">'reptile'</span>, <span class="number">1</span>), (<span class="number">6</span>, <span class="string">'snake'</span>, <span class="number">5</span>),</span><br><span class="line">                (<span class="number">7</span>, <span class="string">'turtle'</span>, <span class="number">5</span>), (<span class="number">8</span>, <span class="string">'grean sea turtle'</span>, <span class="number">7</span>)),</span><br><span class="line">     r <span class="keyword">as</span> (</span><br><span class="line">         <span class="keyword">select</span> * </span><br><span class="line">         <span class="keyword">from</span> animals </span><br><span class="line">         <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'turtle'</span></span><br><span class="line">         <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">         <span class="keyword">select</span> animals.*</span><br><span class="line">         <span class="keyword">from</span> r, animals</span><br><span class="line">         <span class="keyword">where</span> animals.id = r.parent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> r;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"> id |  name   | parent </span><br><span class="line">----+---------+--------</span><br><span class="line">  7 | turtle  |      5</span><br><span class="line">  5 | reptile |      1</span><br><span class="line">  1 | animal  |       </span><br><span class="line">(3 rows)</span><br></pre></td></tr></tbody></table></figure>
<p>&lt;/br&gt;</p>
<h3 id="找子节点"><a href="#找子节点" class="headerlink" title="找子节点"></a>找子节点</h3><ul>
<li>搜索<code>reptile</code>的子节点(所有直接和间接孩子)：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span></span><br><span class="line">     animals (<span class="keyword">id</span>, <span class="keyword">name</span>, <span class="keyword">parent</span>) <span class="keyword">as</span> (</span><br><span class="line">         <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">'animal'</span>, <span class="literal">null</span>), (<span class="number">2</span>, <span class="string">'mammal'</span>, <span class="number">1</span>),</span><br><span class="line">                (<span class="number">3</span>, <span class="string">'giraffe'</span>, <span class="number">2</span>), (<span class="number">4</span>, <span class="string">'tiger'</span>, <span class="number">2</span>),</span><br><span class="line">                (<span class="number">5</span>, <span class="string">'reptile'</span>, <span class="number">1</span>), (<span class="number">6</span>, <span class="string">'snake'</span>, <span class="number">5</span>),</span><br><span class="line">                (<span class="number">7</span>, <span class="string">'turtle'</span>, <span class="number">5</span>), (<span class="number">8</span>, <span class="string">'grean sea turtle'</span>, <span class="number">7</span>)),</span><br><span class="line">     r <span class="keyword">as</span> (</span><br><span class="line">         <span class="keyword">select</span> *</span><br><span class="line">         <span class="keyword">from</span> animals</span><br><span class="line">         <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'reptile'</span></span><br><span class="line">         <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">         <span class="keyword">select</span> animals.* <span class="comment">-- get the descendants</span></span><br><span class="line">         <span class="keyword">from</span> r, animals</span><br><span class="line">         <span class="keyword">where</span> animals.parent = r.id <span class="comment">-- r is the parent of the new founded animal</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> r;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> id |       name       | parent </span><br><span class="line"><span class="comment">----+------------------+--------</span></span><br><span class="line">  5 | reptile          |      1</span><br><span class="line">  7 | turtle           |      5</span><br><span class="line">  6 | snake            |      5</span><br><span class="line">  8 | grean sea turtle |      7</span><br><span class="line">(4 rows)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="带环图"><a href="#带环图" class="headerlink" title="带环图"></a>带环图</h2><p><img data-src="/images/FDE/chap3/24.jpg" alt="24.jpg"></p>
<ul>
<li>搜索<code>Alice</code>的所有朋友(即从<code>Alice</code>能到达的节点):</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span></span><br><span class="line">     friends (a, b) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">values</span> (<span class="string">'Alice'</span>, <span class="string">'Bob'</span>), (<span class="string">'Alice'</span>, <span class="string">'Carol'</span>),</span><br><span class="line">           (<span class="string">'Carol'</span>, <span class="string">'Grace'</span>), (<span class="string">'Carol'</span>, <span class="string">'Chuck'</span>),</span><br><span class="line">           (<span class="string">'Chuck'</span>, <span class="string">'Grace'</span>), (<span class="string">'Chuck'</span>,<span class="string">'Anne'</span>),</span><br><span class="line">           (<span class="string">'Bob'</span>,<span class="string">'Dan'</span>),(<span class="string">'Dan'</span>,<span class="string">'Anne'</span>),(<span class="string">'Eve'</span>,<span class="string">'Adam'</span>)</span><br><span class="line">           ),</span><br><span class="line">     friendship (<span class="keyword">name</span>, friend) <span class="keyword">as</span> <span class="comment">-- friendship is symmetric, bi-directional graph</span></span><br><span class="line">    (<span class="keyword">select</span> a, b</span><br><span class="line">    <span class="keyword">from</span> friends</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> b, a</span><br><span class="line">    <span class="keyword">from</span> friends),</span><br><span class="line">     r <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="string">'Alice'</span> <span class="keyword">as</span> <span class="keyword">name</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">select</span> friendship.name</span><br><span class="line">    <span class="keyword">from</span> r, friendship</span><br><span class="line">    <span class="keyword">where</span> r.name = friendship.friend)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> r;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> name  </span><br><span class="line"><span class="comment">-------</span></span><br><span class="line"> Alice</span><br><span class="line"> Bob</span><br><span class="line"> Carol</span><br><span class="line"> Grace</span><br><span class="line"> Chuck</span><br><span class="line"> Dan</span><br><span class="line"> Anne</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<p>到目前为止， 我们在高级SQL-递归部分对小规模的树和图进行了遍历。我们主要研究节点的父子关系和节点间的可到达性问题。使用<code>with recursive</code>子句，搭配对应的<code>union all</code>或<code>union</code>让递归问题一通百通。</p>
<p>下一次我们会研究一个真实数据集中的问题，依旧是<em>朋友</em>的图关系，但是数据集很大，同时计算量也非常巨大。</p>
<p>引用: </p>
<p>课件: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvY2hhcHRlcjMucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Graph</category>
        <category>TUM-IN2326</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Recursion</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQL]高级SQL-递归(4)</title>
    <url>/2020/03/27/SQL-%E9%AB%98%E7%BA%A7SQL-%E9%80%92%E5%BD%92-4/</url>
    <content><![CDATA[<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><p>在这篇文章高级 SQL 中我们会遇到递归查询图论的题目。我们使用的数据集(图)都在文章中的SQL中。</p>
<a id="more"></a>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img data-src="/images/SQL/graph1.png" alt="graph1.png"></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> singleDirection (a ,b) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span>(<span class="keyword">values</span> (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                (<span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">                (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">                (<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">                (<span class="number">2</span>, <span class="number">5</span>),</span><br><span class="line">                (<span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">                (<span class="number">4</span>, <span class="number">6</span>)) <span class="keyword">as</span> graph</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> singleDirection;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="寻找传递闭包-Transitive-closure-，即这个图中节点的联通节点-Connectivity"><a href="#寻找传递闭包-Transitive-closure-，即这个图中节点的联通节点-Connectivity" class="headerlink" title="寻找传递闭包(Transitive closure)，即这个图中节点的联通节点(Connectivity):"></a>寻找传递闭包(Transitive closure)，即这个图中节点的联通节点(Connectivity):</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> singleDirection (a ,b) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span>(<span class="keyword">values</span> (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                (<span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">                (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">                (<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">                (<span class="number">2</span>, <span class="number">5</span>),</span><br><span class="line">                (<span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">                (<span class="number">4</span>, <span class="number">6</span>)) <span class="keyword">as</span> graph</span><br><span class="line">    ), undirectedGraph <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> singleDirection</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">        <span class="keyword">select</span> b, a</span><br><span class="line">        <span class="keyword">from</span> singleDirection</span><br><span class="line">    ), transitive_closure (a, b) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> undirectedGraph</span><br><span class="line">        <span class="keyword">union</span></span><br><span class="line">        <span class="keyword">select</span> a.a, b.b</span><br><span class="line">        <span class="keyword">from</span> undirectedGraph b, transitive_closure a</span><br><span class="line">        <span class="keyword">where</span> a.b = b.a</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> transitive_closure</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a, b;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="6和1是联通-connected-reachable-的吗"><a href="#6和1是联通-connected-reachable-的吗" class="headerlink" title="6和1是联通(connected, reachable)的吗?"></a>6和1是联通(connected, reachable)的吗?</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> singleDirection (a ,b) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span>(<span class="keyword">values</span> (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                (<span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">                (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">                (<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">                (<span class="number">2</span>, <span class="number">5</span>),</span><br><span class="line">                (<span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">                (<span class="number">4</span>, <span class="number">6</span>)) <span class="keyword">as</span> graph</span><br><span class="line">    ), undirectedGraph <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> singleDirection</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">        <span class="keyword">select</span> b, a</span><br><span class="line">        <span class="keyword">from</span> singleDirection</span><br><span class="line">    ), transitive_closure (a, b) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> undirectedGraph</span><br><span class="line">        <span class="keyword">union</span></span><br><span class="line">        <span class="keyword">select</span> a.a, b.b</span><br><span class="line">        <span class="keyword">from</span> undirectedGraph b, transitive_closure a</span><br><span class="line">        <span class="keyword">where</span> a.b = b.a</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> transitive_closure </span><br><span class="line"><span class="keyword">where</span> a = <span class="number">6</span> <span class="keyword">and</span> b = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="求6和1的最短距离"><a href="#求6和1的最短距离" class="headerlink" title="求6和1的最短距离?"></a>求6和1的最短距离?</h3><p>这里我们在<code>transitive_closure</code>中使用了<code>union all</code>，为了避免对应出现的不终止的递归，我们必须加上对应的条件<code>dist &lt;= 4</code>。另外这个4是我们目测出来的一个参数，当然我们可以用一个更大更普遍的数字，比如图中边的总数，这样也能试递归终止。</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> singleDirection (a ,b) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span>(<span class="keyword">values</span> (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                (<span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">                (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">                (<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">                (<span class="number">2</span>, <span class="number">5</span>),</span><br><span class="line">                (<span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">                (<span class="number">4</span>, <span class="number">6</span>)) <span class="keyword">as</span> graph</span><br><span class="line">    ), undirectedGraph <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> singleDirection</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">        <span class="keyword">select</span> b, a</span><br><span class="line">        <span class="keyword">from</span> singleDirection</span><br><span class="line">    ), transitive_closure (a, b, dist) <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> a, b, <span class="number">1</span></span><br><span class="line">        <span class="keyword">from</span> undirectedGraph</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">        <span class="keyword">select</span> a.a, b.b, dist + <span class="number">1</span></span><br><span class="line">        <span class="keyword">from</span> undirectedGraph b, transitive_closure a</span><br><span class="line">        <span class="keyword">where</span> a.b = b.a <span class="keyword">and</span> dist &lt;= <span class="number">4</span> <span class="comment">-- 或者　dist &lt;= 9，因为这个图里面一共9条边</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(dist)</span><br><span class="line"><span class="keyword">from</span> transitive_closure</span><br><span class="line"><span class="keyword">where</span> a = <span class="number">6</span> <span class="keyword">and</span> b = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure>
<p><br><br><br><br><br></p>
<h3 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h3><p>SQL Standard中是这样定义来<code>union all</code>的递归语句的:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">workingTable = evaluateNonRecursive()</span><br><span class="line">output workingTable</span><br><span class="line"><span class="keyword">while</span> workingTable <span class="keyword">is</span> <span class="keyword">not</span> empty:</span><br><span class="line">  workingTable = evaluateRecursive(workingTable)</span><br><span class="line">  output workingTable</span><br></pre></td></tr></tbody></table></figure>
<p>下面是一个表格，代表一个图:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>From</th>
<th>To</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>b</td>
</tr>
<tr>
<td>b</td>
<td>c</td>
</tr>
<tr>
<td>b</td>
<td>d</td>
</tr>
<tr>
<td>c</td>
<td>e</td>
</tr>
<tr>
<td>d</td>
<td>e</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> edges (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">   <span class="keyword">values</span></span><br><span class="line">          (<span class="string">'a'</span>, <span class="string">'b'</span>), (<span class="string">'b'</span>, <span class="string">'c'</span>), (<span class="string">'b'</span>, <span class="string">'d'</span>),</span><br><span class="line">          (<span class="string">'c'</span>, <span class="string">'e'</span>), (<span class="string">'d'</span>, <span class="string">'e'</span>)</span><br><span class="line">), discovered (node) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> <span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    (<span class="keyword">select</span> edges.to_</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">    edges, discovered</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">    discovered.node = edges.from_)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> discovered;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> node </span><br><span class="line"><span class="comment">------</span></span><br><span class="line"> a</span><br><span class="line"> b</span><br><span class="line"> d</span><br><span class="line"> c</span><br><span class="line"> e</span><br><span class="line"> e</span><br><span class="line">(6 rows)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h4 id="求从a开始每一步能到达的节点"><a href="#求从a开始每一步能到达的节点" class="headerlink" title="求从a开始每一步能到达的节点"></a>求从<code>a</code>开始每一步能到达的节点</h4><p>应用SQL Standard中的Working Table表达:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> edges (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">   <span class="keyword">values</span></span><br><span class="line">          (<span class="string">'a'</span>, <span class="string">'b'</span>), (<span class="string">'b'</span>, <span class="string">'c'</span>), (<span class="string">'b'</span>, <span class="string">'d'</span>),</span><br><span class="line">          (<span class="string">'c'</span>, <span class="string">'e'</span>), (<span class="string">'d'</span>, <span class="string">'e'</span>)</span><br><span class="line">), discovered (node, step) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> <span class="string">'a'</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    (<span class="keyword">select</span> edges.to_, discovered.step + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">    edges, discovered</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">    discovered.node = edges.from_)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> discovered;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> node | step </span><br><span class="line"><span class="comment">------+------</span></span><br><span class="line"> a    |    0</span><br><span class="line"> b    |    1</span><br><span class="line"> d    |    2</span><br><span class="line"> c    |    2</span><br><span class="line"> e    |    3</span><br><span class="line"> e    |    3</span><br><span class="line">(6 rows)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">step | WorkingTable</span><br><span class="line">init | {a}</span><br><span class="line">1    | {b}</span><br><span class="line">2    | {c, d}</span><br><span class="line">3    | {e, e}</span><br><span class="line">4    | {}</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h4 id="图被更改-再求从a开始每一步能到达的节点"><a href="#图被更改-再求从a开始每一步能到达的节点" class="headerlink" title="图被更改, 再求从a开始每一步能到达的节点"></a>图被更改, 再求从<code>a</code>开始每一步能到达的节点</h4><p>图中我们多加了一个<code>('c', 'b')</code>的边。应用SQL Standard中的<code>WorkingTable</code>表达:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> edges (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">   <span class="keyword">values</span></span><br><span class="line">          (<span class="string">'a'</span>, <span class="string">'b'</span>), (<span class="string">'b'</span>, <span class="string">'c'</span>), (<span class="string">'b'</span>, <span class="string">'d'</span>),</span><br><span class="line">          (<span class="string">'c'</span>, <span class="string">'e'</span>), (<span class="string">'d'</span>, <span class="string">'e'</span>), (<span class="string">'c'</span>, <span class="string">'b'</span>)</span><br><span class="line">), discovered (node, step) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> <span class="string">'a'</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    (<span class="keyword">select</span> edges.to_, discovered.step + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> edges, discovered</span><br><span class="line">    <span class="keyword">where</span> discovered.node = edges.from_ <span class="keyword">and</span> step &lt; <span class="number">6</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> discovered;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> node | step </span><br><span class="line"><span class="comment">------+------</span></span><br><span class="line"> a    |    0</span><br><span class="line"> b    |    1</span><br><span class="line"> c    |    2</span><br><span class="line"> d    |    2</span><br><span class="line"> e    |    3</span><br><span class="line"> e    |    3</span><br><span class="line"> b    |    3</span><br><span class="line"> c    |    4</span><br><span class="line"> d    |    4</span><br><span class="line"> e    |    5</span><br><span class="line"> e    |    5</span><br><span class="line"> b    |    5</span><br><span class="line"> c    |    6</span><br><span class="line"> d    |    6</span><br><span class="line">(14 rows)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">step | WorkingTable</span><br><span class="line">init | {a}</span><br><span class="line">1    | {b}</span><br><span class="line">2    | {c, d}</span><br><span class="line">3    | {e, e, b}</span><br><span class="line">4    | {c, d}</span><br><span class="line">5    | {e, e, b}</span><br><span class="line">6    | {c, d}</span><br></pre></td></tr></tbody></table></figure>
<p>由于这条多加的边，让<code>union all</code>对应的循环一直不终止，即<code>WorkingTable</code>一直不为空。所有我在上面多加了<code>step &lt; 6</code>这个条件，强制６步以后终止。当然如果换用<code>union</code>可以让它终止。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Graph</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Recursion</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQL]高级SQL-递归(3)</title>
    <url>/2020/03/26/SQL-%E9%AB%98%E7%BA%A7SQL-%E9%80%92%E5%BD%92-3/</url>
    <content><![CDATA[<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><p>在这篇文章高级 SQL 中我们会遇到递归查询图论的题目。我们使用的数据集(图)都在文章中的SQL中。</p>
<a id="more"></a>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>一个图论的例子：</p>
<p><img data-src="/images/SQL/dag.png" alt="dag.png"></p>
<p><strong>如果我们无视图中的箭头</strong>，那么这个图是一个<strong>有向无环图(DAG, directed acyclic graph)</strong>。</p>
<p><br></p>
<h3 id="视作有向图，寻找传递闭包-Transitive-closure-，即这个图中节点的联通节点-Connectivity"><a href="#视作有向图，寻找传递闭包-Transitive-closure-，即这个图中节点的联通节点-Connectivity" class="headerlink" title="视作有向图，寻找传递闭包(Transitive closure)，即这个图中节点的联通节点(Connectivity):"></a>视作有向图，寻找传递闭包(Transitive closure)，即这个图中节点的联通节点(Connectivity):</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- Basic relation</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="string">'a'</span>, <span class="string">'b'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'c'</span> ,<span class="string">'d'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'e'</span>),</span><br><span class="line">           (<span class="string">'f'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'x'</span>, <span class="string">'y'</span>) <span class="comment">-- 第二个联通部分</span></span><br><span class="line">), transitive_closure (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> from_, to_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">    <span class="keyword">union</span> <span class="comment">-- Set(集合)</span></span><br><span class="line">    (<span class="keyword">select</span> c.from_, g.to_</span><br><span class="line">    <span class="keyword">from</span> transitive_closure c, graph g</span><br><span class="line">    <span class="keyword">where</span> c.to_ = g.from_)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> transitive_closure</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> from_, to_;</span><br></pre></td></tr></tbody></table></figure>
<p>输出:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> from_ | to_ </span><br><span class="line"><span class="comment">-------+-----</span></span><br><span class="line"> a     | b</span><br><span class="line"> a     | c</span><br><span class="line"> a     | d</span><br><span class="line"> a     | e</span><br><span class="line"> b     | c</span><br><span class="line"> b     | d</span><br><span class="line"> b     | e</span><br><span class="line"> c     | d</span><br><span class="line"> f     | c</span><br><span class="line"> f     | d</span><br><span class="line"> x     | y</span><br><span class="line">(11 rows)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h3 id="表达成无向图："><a href="#表达成无向图：" class="headerlink" title="表达成无向图："></a>表达成无向图：</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- Basic relation</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="string">'a'</span>, <span class="string">'b'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'c'</span> ,<span class="string">'d'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'e'</span>),</span><br><span class="line">           (<span class="string">'f'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'x'</span>, <span class="string">'y'</span>) <span class="comment">-- 第二个联通部分</span></span><br><span class="line">), un_dir_graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- 无向图</span></span><br><span class="line">    (<span class="keyword">select</span> from_, to_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    (<span class="keyword">select</span> to_, from_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> un_dir_graph</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> from_, to_;</span><br></pre></td></tr></tbody></table></figure>
<p>输出:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> from_ | to_ </span><br><span class="line"><span class="comment">-------+-----</span></span><br><span class="line"> a     | b</span><br><span class="line"> b     | a</span><br><span class="line"> b     | c</span><br><span class="line"> b     | e</span><br><span class="line"> c     | b</span><br><span class="line"> c     | d</span><br><span class="line"> c     | f</span><br><span class="line"> d     | c</span><br><span class="line"> e     | b</span><br><span class="line"> f     | c</span><br><span class="line"> x     | y</span><br><span class="line"> y     | x</span><br><span class="line">(12 rows)</span><br></pre></td></tr></tbody></table></figure>
<p>很容易发现<code>un_dir_graph</code>是一个对称的关系(symmetric relation): </p>
<script type="math/tex; mode=display">\exists (a , b) \in R \Rightarrow (b, a) \in R</script><p>当我们使用<code>un_dir_graph</code>递归的时候，　用<code>UNION ALL</code>是肯定不会终止的，因为<code>UNION ALL</code>采用包语义(Bag Semantics)，它不会消除重复(duplicates)。<br>而<code>UNION</code>采用集合语义(Set Semantics)，它会消除重复。</p>
<p><br></p>
<h3 id="视作无向图，寻找传递闭包-Transitive-closure-，即这个图中节点的联通节点-Connectivity"><a href="#视作无向图，寻找传递闭包-Transitive-closure-，即这个图中节点的联通节点-Connectivity" class="headerlink" title="视作无向图，寻找传递闭包(Transitive closure)，即这个图中节点的联通节点(Connectivity):"></a>视作无向图，寻找传递闭包(Transitive closure)，即这个图中节点的联通节点(Connectivity):</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- Basic relation</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="string">'a'</span>, <span class="string">'b'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'c'</span> ,<span class="string">'d'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'e'</span>),</span><br><span class="line">           (<span class="string">'f'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'x'</span>, <span class="string">'y'</span>) <span class="comment">-- 第二个联通部分</span></span><br><span class="line">), un_dir_graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- 无向图</span></span><br><span class="line">    (<span class="keyword">select</span> from_, to_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    (<span class="keyword">select</span> to_, from_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">), clo (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> from_, to_</span><br><span class="line">    <span class="keyword">from</span> un_dir_graph)</span><br><span class="line">    <span class="keyword">union</span> <span class="comment">-- Set(集合)</span></span><br><span class="line">    (<span class="keyword">select</span> c.from_, g.to_</span><br><span class="line">    <span class="keyword">from</span> clo c, un_dir_graph g</span><br><span class="line">    <span class="keyword">where</span> c.to_ = g.from_)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> clo</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> from_, to_;</span><br></pre></td></tr></tbody></table></figure>
<p>输出:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> from_ | to_ </span><br><span class="line"><span class="comment">-------+-----</span></span><br><span class="line"> a     | a</span><br><span class="line"> a     | b</span><br><span class="line"> a     | c</span><br><span class="line"> a     | d</span><br><span class="line"> a     | e</span><br><span class="line"> a     | f</span><br><span class="line"> b     | a</span><br><span class="line"> b     | b</span><br><span class="line"> b     | c</span><br><span class="line"> b     | d</span><br><span class="line"> b     | e</span><br><span class="line"> b     | f</span><br><span class="line"> c     | a</span><br><span class="line"> c     | b</span><br><span class="line"> c     | c</span><br><span class="line"> c     | d</span><br><span class="line"> c     | e</span><br><span class="line"> c     | f</span><br><span class="line"> d     | a</span><br><span class="line"> d     | b</span><br><span class="line"> d     | c</span><br><span class="line"> d     | d</span><br><span class="line"> d     | e</span><br><span class="line"> d     | f</span><br><span class="line"> e     | a</span><br><span class="line"> e     | b</span><br><span class="line"> e     | c</span><br><span class="line"> e     | d</span><br><span class="line"> e     | e</span><br><span class="line"> e     | f</span><br><span class="line"> f     | a</span><br><span class="line"> f     | b</span><br><span class="line"> f     | c</span><br><span class="line"> f     | d</span><br><span class="line"> f     | e</span><br><span class="line"> f     | f</span><br><span class="line"> x     | x</span><br><span class="line"> x     | y</span><br><span class="line"> y     | x</span><br><span class="line"> y     | y</span><br><span class="line">(40 rows)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>另一种解法:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- Basic relation</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="string">'a'</span>, <span class="string">'b'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'c'</span> ,<span class="string">'d'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'e'</span>),</span><br><span class="line">           (<span class="string">'f'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'x'</span>, <span class="string">'y'</span>) <span class="comment">-- 第二个联通部分</span></span><br><span class="line">), un_dir_graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- 无向图</span></span><br><span class="line">    (<span class="keyword">select</span> from_, to_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    (<span class="keyword">select</span> to_, from_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">), closure (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> from_, to_</span><br><span class="line">    <span class="keyword">from</span> un_dir_graph)</span><br><span class="line">    <span class="keyword">union</span> <span class="comment">-- Set(集合)</span></span><br><span class="line">    (<span class="keyword">select</span> c.from_, g.to_</span><br><span class="line">    <span class="keyword">from</span> closure c, graph g</span><br><span class="line">    <span class="keyword">where</span> c.to_ = g.from_)</span><br><span class="line">), connected_graph (from_ ,to_) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> to_ , from_</span><br><span class="line">    <span class="keyword">from</span> closure)</span><br><span class="line">    <span class="keyword">union</span> <span class="comment">-- Set(集合)</span></span><br><span class="line">    (<span class="keyword">select</span> c.from_ , cg.to_</span><br><span class="line">    <span class="keyword">from</span> closure c, connected_graph cg</span><br><span class="line">    <span class="keyword">where</span> c.to_ = cg.from_)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> connected_graph</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> from_, to_;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>这里必须解释一下<code>closure</code>所形成的表格，它即不是对应有向图的传递闭包(transitive_closure)，也不是对应无向图的传递闭包(transitive_closure)。它是我们求无向图传递闭包的一个中间步骤, 它代表的路径是:</p>
<ul>
<li>第一步来自于无向图</li>
<li>如果有后续的步骤，那么后续的步骤来自于有向图。</li>
</ul>
<p>下面是它的内容：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> from_ | to_ </span><br><span class="line"><span class="comment">-------+-----</span></span><br><span class="line"> a     | b</span><br><span class="line"> a     | c</span><br><span class="line"> a     | d</span><br><span class="line"> a     | e</span><br><span class="line"> b     | a</span><br><span class="line"> b     | b</span><br><span class="line"> b     | c</span><br><span class="line"> b     | d</span><br><span class="line"> b     | e</span><br><span class="line"> c     | b</span><br><span class="line"> c     | c</span><br><span class="line"> c     | d</span><br><span class="line"> c     | e</span><br><span class="line"> c     | f</span><br><span class="line"> d     | c</span><br><span class="line"> d     | d</span><br><span class="line"> e     | b</span><br><span class="line"> e     | c</span><br><span class="line"> e     | d</span><br><span class="line"> e     | e</span><br><span class="line"> f     | c</span><br><span class="line"> f     | d</span><br><span class="line"> x     | y</span><br><span class="line"> y     | x</span><br><span class="line"> y     | y</span><br><span class="line">(25 rows)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>(b, b)</code>在里面，因为第一步<code>(b, a)</code>属于无向图，第二步<code>(a, b)</code>属于有向图。</li>
<li><code>(c, a)</code>不在里面，因为即使第一步<code>(c, b)</code>属于无向图，但是第二步<code>(b, a)</code>不属于有向图。</li>
</ul>
<p><br></p>
<h3 id="求从b从两个方向能到达的所有地方："><a href="#求从b从两个方向能到达的所有地方：" class="headerlink" title="求从b从两个方向能到达的所有地方："></a>求从<code>b</code>从两个方向能到达的所有地方：</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- Basic relation</span></span><br><span class="line">    <span class="keyword">values</span> (<span class="string">'a'</span>, <span class="string">'b'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'c'</span> ,<span class="string">'d'</span>),</span><br><span class="line">           (<span class="string">'b'</span>, <span class="string">'e'</span>),</span><br><span class="line">           (<span class="string">'f'</span>, <span class="string">'c'</span>),</span><br><span class="line">           (<span class="string">'x'</span>, <span class="string">'y'</span>) <span class="comment">-- 第二个联通部分</span></span><br><span class="line">), un_dir_graph (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- 无向图</span></span><br><span class="line">    (<span class="keyword">select</span> from_, to_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    (<span class="keyword">select</span> to_, from_</span><br><span class="line">    <span class="keyword">from</span> graph)</span><br><span class="line">), clo (from_, to_) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> from_, to_</span><br><span class="line">    <span class="keyword">from</span> un_dir_graph)</span><br><span class="line">    <span class="keyword">union</span> <span class="comment">-- Set(集合)</span></span><br><span class="line">    (<span class="keyword">select</span> c.from_, g.to_</span><br><span class="line">    <span class="keyword">from</span> clo c, un_dir_graph g</span><br><span class="line">    <span class="keyword">where</span> c.to_ = g.from_)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> clo</span><br><span class="line"><span class="keyword">where</span> from_ = <span class="string">'b'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> to_;</span><br></pre></td></tr></tbody></table></figure>
<p>当然看图的话，我们可以发现<code>b</code>可以到达上面那个连通图中所有的6个节点。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Graph</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Recursion</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQL]高级SQL-去关联(2)</title>
    <url>/2020/03/25/SQL-%E9%AB%98%E7%BA%A7SQL-%E5%8E%BB%E5%85%B3%E8%81%94-2/</url>
    <content><![CDATA[<p>这篇文章继<a href="https://cakebytheoceanluo.github.io/2020/03/24/SQL-%E9%AB%98%E7%BA%A7SQL-%E5%8E%BB%E5%85%B3%E8%81%94-1/">[SQL]高级SQL-去关联(1)</a>后，继续对去关联这个主题进行练习。</p>
<a id="more"></a>
<h1 id="TPC-H例子一"><a href="#TPC-H例子一" class="headerlink" title="TPC-H例子一"></a>TPC-H例子一</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(l_extendedprice)</span><br><span class="line"><span class="keyword">from</span> lineitem l1</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">l_extendedprice &gt; (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">avg</span>(l2.l_extendedprice)</span><br><span class="line">    <span class="keyword">from</span> lineitem l2</span><br><span class="line">    <span class="keyword">where</span> l2.l_orderkey = l1.l_orderkey</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><code>l1.l_orderkey</code>是这个子查询(Sub-Query)中来自外查询的字段，也就是它造成了这个依赖(dependency)。</p>
<p>很容易可以发现：</p>
<ul>
<li>对每一个子查询的<code>lineitem l2</code>的元组，需要它的<code>l2.l_orderkey</code>字段值依赖于外界<code>lineitem l1</code>的对应<code>l1.l_orderkey</code>字段值。</li>
<li>外依赖条件指：<code>l2.l_orderkey = l1.l_orderkey</code></li>
<li>$D$是<code>l1.l_orderkey</code>对应字段值的集合。</li>
</ul>
<p>我们可以完全抽离这个关联部分到另外一个暂时的表格，再用<strong>外依赖条件</strong>和它regular join。<strong>这里这个外依赖条件没有意义，我们可以直接在<code>lineitem</code>表格中计算平均值, 而省去regular join获得高性能。</strong></p>
<h2 id="去除join的结果"><a href="#去除join的结果" class="headerlink" title="去除join的结果"></a>去除join的结果</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(l_extendedprice)</span><br><span class="line"><span class="keyword">from</span> lineitem l,</span><br><span class="line">     (<span class="keyword">select</span> <span class="keyword">avg</span>(l_extendedprice) <span class="keyword">as</span> avgPrice, </span><br><span class="line">             l_orderkey</span><br><span class="line">      <span class="keyword">from</span> lineitem</span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> l_orderkey) <span class="keyword">as</span> precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    l_extendedprice &gt; precomputed.avgPrice <span class="keyword">and</span> </span><br><span class="line">    l.l_orderkey = precomputed.l_orderkey;</span><br></pre></td></tr></tbody></table></figure>
<p>或</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> precomputed <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">avg</span>(l_extendedprice) <span class="keyword">as</span> avgPrice, </span><br><span class="line">           l_orderkey</span><br><span class="line">    <span class="keyword">from</span> lineitem</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> l_orderkey)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(l_extendedprice)</span><br><span class="line"><span class="keyword">from</span> lineitem l,</span><br><span class="line">     precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    l_extendedprice &gt; precomputed.avgPrice</span><br><span class="line">    <span class="keyword">and</span> l.l_orderkey = precomputed.l_orderkey;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="TPC-H例子二"><a href="#TPC-H例子二" class="headerlink" title="TPC-H例子二"></a>TPC-H例子二</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">        o_orderkey</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        orders o1</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        o_totalprice &lt; (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">                <span class="keyword">avg</span>(o_totalprice)</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">                orders o2</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">                o2.o_shippriority = o1.o_shippriority <span class="keyword">or</span></span><br><span class="line">                o2.o_orderstatus = o1.o_orderstatus)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>很容易可以发现：</p>
<ul>
<li>对每一个<code>orders o2</code>的元组，需要它的<code>o2.o_shippriority</code>和<code>o2.o_orderstatus</code>字段值依赖外界<code>order o1</code>的对应字段值。</li>
<li>外依赖条件指：<code>o2.o_shippriority = o1.o_shippriority or o2.o_orderstatus = o1.o_orderstatus</code></li>
<li>$D$是<code>o1.o_shippriority, o1.o_orderstatus</code>对应字段值的集合。</li>
</ul>
<p>我们可以完全抽离这个关联部分到另外一个暂时的表格，再用<strong>外依赖条件</strong>和它regular join。</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">        o_orderkey</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        orders o1,</span><br><span class="line">        (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">                <span class="keyword">avg</span>(o2.o_totalprice), d.o_shippriority, d.o_orderstatus</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">                orders o2, </span><br><span class="line">                (<span class="keyword">select</span> <span class="keyword">distinct</span> o_shippriority , o_orderstatus <span class="keyword">from</span> orders) d</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">                o2.o_shippriority = d.o_shippriority <span class="keyword">or</span></span><br><span class="line">                o2.o_orderstatus = d.o_orderstatus</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> d.o_shippriority, d.o_orderstatus</span><br><span class="line">        ) <span class="keyword">as</span> precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        o_totalprice &lt; precomputed.avg <span class="keyword">and</span></span><br><span class="line">        precomputed.o_shippriority = o1.o_shippriority <span class="keyword">and</span></span><br><span class="line">        precomputed.o_orderstatus = o1.o_orderstatus</span><br></pre></td></tr></tbody></table></figure>
<p>或</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> precomputed <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">            <span class="keyword">avg</span>(o2.o_totalprice), d.o_shippriority, d.o_orderstatus</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">            orders o2, </span><br><span class="line">            (<span class="keyword">select</span> <span class="keyword">distinct</span> o_shippriority , o_orderstatus <span class="keyword">from</span> orders) d</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">            o2.o_shippriority = d.o_shippriority <span class="keyword">or</span></span><br><span class="line">            o2.o_orderstatus = d.o_orderstatus</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> d.o_shippriority, d.o_orderstatus</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">        o_orderkey</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        orders o1, precomputed</span><br><span class="line">        </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        o_totalprice &lt; precomputed.avg <span class="keyword">and</span></span><br><span class="line">        precomputed.o_shippriority = o1.o_shippriority <span class="keyword">and</span></span><br><span class="line">        precomputed.o_orderstatus = o1.o_orderstatus</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="TPC-H例子三"><a href="#TPC-H例子三" class="headerlink" title="TPC-H例子三"></a>TPC-H例子三</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    o_orderpriority,</span><br><span class="line">    <span class="keyword">count</span>(*) <span class="keyword">as</span> order_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    orders</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    o_orderdate &gt;= <span class="built_in">date</span> <span class="string">'1993-07-01'</span> <span class="keyword">and</span> </span><br><span class="line">    o_orderdate &lt; <span class="built_in">date</span> <span class="string">'1993-10-01'</span><span class="keyword">and</span> </span><br><span class="line">    <span class="keyword">exists</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            *</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            lineitem</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            l_orderkey = o_orderkey <span class="keyword">and</span> </span><br><span class="line">            l_commitdate &lt; l_receiptdate</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> o_orderpriority</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_orderpriority;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>很容易可以发现：</p>
<ul>
<li>对每一个<code>lineitem</code>的元组，需要它的<code>l_orderkey</code>字段值依赖外界<code>order</code>的对应字段值。</li>
<li>外依赖条件指：<code>l_orderkey = o_orderkey</code></li>
<li>$D$是<code>order.o_orderkey</code>对应字段值的集合。</li>
</ul>
<p>我们可以完全抽离这个关联部分到另外一个暂时的表格，再用<strong>外依赖条件</strong>和它regular join。</p>
<h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    o_orderpriority,</span><br><span class="line">    <span class="keyword">count</span>(*) <span class="keyword">as</span> order_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    orders,(</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        o_orderkey</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        lineitem,</span><br><span class="line">        (<span class="keyword">select</span> <span class="keyword">distinct</span> o_orderkey <span class="keyword">from</span> orders) <span class="keyword">as</span> o</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        l_orderkey = o_orderkey <span class="keyword">and</span> </span><br><span class="line">        l_commitdate &lt; l_receiptdate</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        o_orderkey</span><br><span class="line">    ) <span class="keyword">as</span> precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    o_orderdate &gt;= <span class="built_in">date</span> <span class="string">'1993-07-01'</span> <span class="keyword">and</span></span><br><span class="line">    o_orderdate &lt; <span class="built_in">date</span> <span class="string">'1993-10-01'</span> <span class="keyword">and</span></span><br><span class="line">    precomputed.o_orderkey = orders.o_orderkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> o_orderpriority</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_orderpriority;</span><br></pre></td></tr></tbody></table></figure>
<p>或</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> precomputed <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        o_orderkey</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        lineitem,</span><br><span class="line">        (<span class="keyword">select</span> <span class="keyword">distinct</span> o_orderkey <span class="keyword">from</span> orders) <span class="keyword">as</span> o</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        l_orderkey = o_orderkey <span class="keyword">and</span> </span><br><span class="line">        l_commitdate &lt; l_receiptdate</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        o_orderkey</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    o_orderpriority,</span><br><span class="line">    <span class="keyword">count</span>(*) <span class="keyword">as</span> order_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    orders,</span><br><span class="line">    precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    o_orderdate &gt;= <span class="built_in">date</span> <span class="string">'1993-07-01'</span> <span class="keyword">and</span></span><br><span class="line">    o_orderdate &lt; <span class="built_in">date</span> <span class="string">'1993-10-01'</span> <span class="keyword">and</span></span><br><span class="line">    precomputed.o_orderkey = orders.o_orderkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> o_orderpriority</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_orderpriority;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="去除join的结果-1"><a href="#去除join的结果-1" class="headerlink" title="　去除join的结果"></a>　去除join的结果</h2><p><strong>这里这个外依赖条件没有意义，我们可以直接在<code>lineitem</code>表格中获得<code>l_orderkey</code>(它是<code>o_orderkey</code>的外键), 而省去regular join获得高性能。</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    o_orderpriority,</span><br><span class="line">    <span class="keyword">count</span>(*) <span class="keyword">as</span> order_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    orders,(</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        l_orderkey</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        lineitem</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        l_commitdate &lt; l_receiptdate</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        l_orderkey</span><br><span class="line">    ) <span class="keyword">as</span> precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    o_orderdate &gt;= <span class="built_in">date</span> <span class="string">'1993-07-01'</span> <span class="keyword">and</span></span><br><span class="line">    o_orderdate &lt; <span class="built_in">date</span> <span class="string">'1993-10-01'</span> <span class="keyword">and</span></span><br><span class="line">    precomputed.l_orderkey = orders.o_orderkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> o_orderpriority</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_orderpriority;</span><br></pre></td></tr></tbody></table></figure>
<p>或</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> precomputed <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        l_orderkey</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        lineitem</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        l_commitdate &lt; l_receiptdate</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        l_orderkey</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    o_orderpriority,</span><br><span class="line">    <span class="keyword">count</span>(*) <span class="keyword">as</span> order_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    orders, precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    o_orderdate &gt;= <span class="built_in">date</span> <span class="string">'1993-07-01'</span> <span class="keyword">and</span></span><br><span class="line">    o_orderdate &lt; <span class="built_in">date</span> <span class="string">'1993-10-01'</span> <span class="keyword">and</span></span><br><span class="line">    precomputed.l_orderkey = orders.o_orderkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> o_orderpriority</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_orderpriority;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="论文中的Q2"><a href="#论文中的Q2" class="headerlink" title="论文中的Q2"></a>论文中的Q2</h1><p>这个Q2不对应任何我已知的数据集，只是在论文中逻辑性地被提出。</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.name , e.course</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    students s,</span><br><span class="line">    exams e</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    s.id = e.sid <span class="keyword">and</span></span><br><span class="line">    (s.major = <span class="string">'CS'</span> <span class="keyword">or</span> s. major = <span class="string">'Games Eng'</span>)</span><br><span class="line"><span class="keyword">and</span> e.grade &gt;= (</span><br><span class="line">    <span class="comment">-- one grade worse</span></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="keyword">avg</span> (e2.grade) + <span class="number">1</span></span><br><span class="line">    <span class="comment">-- than the average grade</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        exams e2</span><br><span class="line">    <span class="comment">-- of exams taken by</span></span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        s.id = e2.sid <span class="keyword">or</span></span><br><span class="line">        <span class="comment">-- him / her or taken by elder peers</span></span><br><span class="line">        (e2.curriculum = s.major <span class="keyword">and</span> s.year &gt; e2.date))</span><br></pre></td></tr></tbody></table></figure>
<h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><p>很容易可以发现：</p>
<ul>
<li>对每一个<code>exams e2</code>的元组，需要它的<code>e2.sid, e2.curriculum, e2.data</code>字段值依赖外界<code>student s</code>的对应字段值。</li>
<li>外依赖条件指：<code>s.id = e2.sid or (e2.curriculum = s.major and s.year &gt; e2.date))</code></li>
<li>$D$是<code>s.id, s.major, s.year</code>对应字段值的集合。</li>
</ul>
<p>我们可以完全抽离这个关联部分到另外一个暂时的表格，再用<strong>外依赖条件</strong>和它regular join。</p>
<h2 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.name, e.course</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    students s,</span><br><span class="line">    exams e, (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> students s, exams e</span><br><span class="line">        <span class="keyword">where</span> s.id = e.sid <span class="keyword">and</span> (s.major = <span class="string">'CS'</span> <span class="keyword">or</span> s. major = <span class="string">'Games Eng'</span>)</span><br><span class="line">     ) <span class="keyword">as</span> l, (</span><br><span class="line">         <span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">id</span>, <span class="keyword">year</span>, major </span><br><span class="line">         <span class="keyword">from</span> l</span><br><span class="line">     ) <span class="keyword">as</span> d, (</span><br><span class="line">         <span class="keyword">select</span> d.id, d.year, d.major, <span class="keyword">avg</span>(e2.grade) <span class="keyword">as</span> m</span><br><span class="line">         <span class="keyword">from</span> d, exam e2</span><br><span class="line">         <span class="keyword">where</span> d.id = e2.sid <span class="keyword">or</span> (d.year &gt; e2.year <span class="keyword">and</span> e2.curriculum = d.major)</span><br><span class="line">         <span class="keyword">group</span> <span class="keyword">by</span> d.id, d.year, d.major</span><br><span class="line">     ) <span class="keyword">as</span> d_</span><br><span class="line"><span class="keyword">where</span> e.grade &gt; m + <span class="number">1</span> <span class="keyword">and</span></span><br><span class="line">      d_.id = s.id <span class="keyword">and</span> </span><br><span class="line">      d_.year = e.date <span class="keyword">and</span> </span><br><span class="line">      e.curriculum = d_.major;</span><br></pre></td></tr></tbody></table></figure>
<p>或</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> l <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> students s, exams e</span><br><span class="line">        <span class="keyword">where</span> s.id = e.sid <span class="keyword">and</span> (s.major = <span class="string">'CS'</span> <span class="keyword">or</span> s. major = <span class="string">'Games Eng'</span>)</span><br><span class="line">),</span><br><span class="line">d <span class="keyword">as</span> (</span><br><span class="line">         <span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">id</span>, <span class="keyword">year</span>, major</span><br><span class="line">         <span class="keyword">from</span> l</span><br><span class="line">     ),</span><br><span class="line">d_ <span class="keyword">as</span> (</span><br><span class="line">         <span class="keyword">select</span> d.id, d.year, d.major, <span class="keyword">avg</span>(e2.grade) <span class="keyword">as</span> m</span><br><span class="line">         <span class="keyword">from</span> d, exam e2</span><br><span class="line">         <span class="keyword">where</span> d.id = e2.sid <span class="keyword">or</span> (d.year &gt; e2.year <span class="keyword">and</span> e2.curriculum = d.major)</span><br><span class="line">         <span class="keyword">group</span> <span class="keyword">by</span> d.id, d.year, d.major</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> s.name, e.course</span><br><span class="line"><span class="keyword">from</span> l, d_</span><br><span class="line"><span class="keyword">where</span> e.grade &gt; m + <span class="number">1</span> <span class="keyword">and</span></span><br><span class="line">         d_.id = l.id <span class="keyword">and</span></span><br><span class="line">         d_.year = l.year <span class="keyword">and</span></span><br><span class="line">         d_.major = l.curriculum;</span><br></pre></td></tr></tbody></table></figure>
<p>或</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.name, e.course</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    students s,</span><br><span class="line">    exams e, (</span><br><span class="line">         <span class="keyword">select</span> s2.id, s2.year, s2.major, <span class="keyword">avg</span>(e2.grade) <span class="keyword">as</span> m</span><br><span class="line">         <span class="keyword">from</span> exam e2,</span><br><span class="line">              (<span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">id</span>, <span class="keyword">year</span>, major <span class="keyword">from</span> students) <span class="keyword">as</span> s2</span><br><span class="line">         <span class="keyword">where</span></span><br><span class="line">               s2.id = e2.sid</span><br><span class="line">               <span class="keyword">or</span> (s2.year &gt; e2.year <span class="keyword">and</span> e2.curriculum = s2.major)</span><br><span class="line">         <span class="keyword">group</span> <span class="keyword">by</span> s2.id, s2.year, s2.major</span><br><span class="line">     ) <span class="keyword">as</span> preagg</span><br><span class="line"><span class="keyword">where</span> s.id = e.sid <span class="keyword">and</span></span><br><span class="line">      (s.major = <span class="string">'CS'</span> <span class="keyword">or</span> s. major = <span class="string">'Games Eng'</span>) <span class="keyword">and</span></span><br><span class="line">      s.id = preagg.id <span class="keyword">and</span> </span><br><span class="line">      s.major = preagg.major <span class="keyword">and</span></span><br><span class="line">      s.year = preagg.year <span class="keyword">and</span></span><br><span class="line">      e.grade &gt; m + <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>引用: </p>
<p>1: TUM Foundation of Data Engineering Chap3.Advanced SQL: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvY2hhcHRlcjMucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de<i class="fa fa-external-link"></i></span></p>
<p>2.<span class="exturl" data-url="aHR0cHM6Ly9kbC5naS5kZS9iaXRzdHJlYW0vaGFuZGxlLzIwLjUwMC4xMjExNi8yNDE4LzM4My5wZGY/c2VxdWVuY2U9MQ==" title="https://dl.gi.de/bitstream/handle/20.500.12116/2418/383.pdf?sequence=1">Unnesting Arbitrary Queries - Thomas Neumann and Alfons Kemper - (BTW 2015)<i class="fa fa-external-link"></i></span></p>
<p>3.<a href="https://cakebytheoceanluo.github.io/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/">https://cakebytheoceanluo.github.io/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Query Optimizer</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Query Optimizer</tag>
        <tag>Subquery Optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQL]高级SQL-去关联(1)</title>
    <url>/2020/03/24/SQL-%E9%AB%98%E7%BA%A7SQL-%E5%8E%BB%E5%85%B3%E8%81%94-1/</url>
    <content><![CDATA[<p>我们在一篇论文解读文章<a href="https://cakebytheoceanluo.github.io/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/">[Paper]BTW 2015 | Unnesting Arbitrary Queries</a>中提到了去关联, 在这一篇文章中我们对这个主题进行<strong>练习</strong>。</p>
<p>这个主题其实远比大家想象中的要实用: 对于1GiB大小左右的数据集，SQL查询如果拥有$O(n^2)$的时间复杂度，基本可以判断很慢，或者慢到无实际意义。往往我们使用的各种大名鼎鼎的开源数据库和商用数据库不一定支持Unnesting这个feature(具体的支持在各个数据库的Document中描述，在对应的论文中的Motivation部分也有简单提到)。这就意味着, 我们需要手动成为Query Optimizer去优化我们SQL的时间复杂度。 </p>
<a id="more"></a>
<h1 id="Correlated-Sub-Query-vs-Uncorrelated-Sub-Query"><a href="#Correlated-Sub-Query-vs-Uncorrelated-Sub-Query" class="headerlink" title="Correlated Sub-Query vs. Uncorrelated Sub-Query"></a>Correlated Sub-Query vs. Uncorrelated Sub-Query</h1><p>一般来说，correlated sub-query(关联子query)的时间复杂度会比uncorrelated sub-query(无关联子query)大。</p>
<p>当然这部分的前提是：query optimizer(优化器)不对SQL的logical plan进行优化。<br>而一些优秀的数据库<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbmRleC5odG1sIw==" title="https://hyper-db.de/index.html#">HyPer<i class="fa fa-external-link"></i></span>已经把这个问题用query optimizer解决了，它会主动去优化，比如可以<strong>去关联</strong>。</p>
<p>更多的可以看这一篇论文<span class="exturl" data-url="aHR0cDovL3d3dy5idHctMjAxNS5kZS9yZXMvcHJvY2VlZGluZ3MvSGF1cHRiYW5kL1dpc3MvTmV1bWFubi1Vbm5lc3RpbmdfQXJiaXRyYXJ5X1F1ZXJpZS5wZGY=" title="http://www.btw-2015.de/res/proceedings/Hauptband/Wiss/Neumann-Unnesting_Arbitrary_Querie.pdf">Unnesting Arbitrary Queries, Thomas Neumann and Alfons Kemper, Technische Universitat München<i class="fa fa-external-link"></i></span></p>
<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>这篇文章中我们会使用如下的数据集:</p>
<ul>
<li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#TUM-Uni%E6%95%B0%E6%8D%AE%E9%9B%86">TUM Uni 数据集</a></li>
<li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#TPC-H">TPC-H 数据集</a></li>
</ul>
<p>具体的数据集安装见上面的对应的链接。另外有一些SQL并不对应任何数据集, 只是在论文中逻辑性地被提出和使用，这样的SQL我会特别注明: <strong>不对应数据集</strong>。</p>
<hr>
<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><h2 id="使用max代替exists-搜索出生日期比所有教授早的学生"><a href="#使用max代替exists-搜索出生日期比所有教授早的学生" class="headerlink" title="使用max代替exists: 搜索出生日期比所有教授早的学生"></a>使用<code>max</code>代替<code>exists</code>: 搜索出生日期比所有教授早的学生</h2><p>这个Query需要的属性值(gebdatum　出生日期)没有被写入数据集。<br>所以不能运行，但是我们可以看着理解意思。</p>
<ul>
<li>correlated sub-query</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.*</span><br><span class="line"><span class="keyword">from</span> studenten s</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> p.*</span><br><span class="line">    <span class="keyword">from</span> professoren p</span><br><span class="line">    <span class="keyword">where</span> p.gebdatum &gt; s.gebdatumm</span><br><span class="line">          )</span><br></pre></td></tr></tbody></table></figure>
<p>对每一个studenten s都需要看整个professoren表格。<br>这个情况很类似cross product(集合的叉乘)。这个subquery需要被执行<code>|studenten|</code>次。</p>
<p>如果query optimizer(优化器)不对这个SQL的logical plan进行优化的话，那它的runtime complexity(时间复杂度)是<code>O(|studenten| * |professoren|)</code>，类推到<code>O(n^2)</code>。</p>
<p><br></p>
<ul>
<li>uncorrelated Sub-query</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.*</span><br><span class="line"><span class="keyword">from</span> studenten s</span><br><span class="line"><span class="keyword">where</span> s.gebdatum &lt; (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">max</span>(gebdatum)</span><br><span class="line">    <span class="keyword">from</span> professoren p</span><br><span class="line">          )</span><br></pre></td></tr></tbody></table></figure>
<p>这样这个subquery只需一次被materialized(materialization，物质化，实例化)，也就是只需要被执行一次得到这个<code>max</code>。然后在去看<code>studenten</code>中的每一个人去和这个<code>max</code>比较。这样肯定会更加有效率。它的runtime complexity是$O(|\mathrm{studenten}| ＋ |\mathrm{professoren}|)$，类推到 $O(n)$。</p>
<p><br></p>
<h2 id="使用join代替subquery-搜索出生日期比对应教授早的助手-助手需要在对应教授手下工作"><a href="#使用join代替subquery-搜索出生日期比对应教授早的助手-助手需要在对应教授手下工作" class="headerlink" title="使用join代替subquery: 搜索出生日期比对应教授早的助手(助手需要在对应教授手下工作)"></a>使用join代替subquery: 搜索出生日期比对应教授早的助手(助手需要在对应教授手下工作)</h2><ul>
<li>correlated sub-query:</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.*</span><br><span class="line"><span class="keyword">from</span> assistenten a</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> p.*</span><br><span class="line">    <span class="keyword">from</span> professoren p</span><br><span class="line">    <span class="keyword">where</span> a.boss = p.persnr <span class="keyword">and</span> p.gebdatum &gt; a.gebdatum</span><br><span class="line">          )</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>unnested query(去嵌套):</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.*</span><br><span class="line"><span class="keyword">from</span> assistenten a, professoren p</span><br><span class="line"><span class="keyword">where</span> a.boss = p.persnr <span class="keyword">and</span> p.gebdatum &gt; a.gebdatum</span><br></pre></td></tr></tbody></table></figure>
<p>这时候我们直接用<code>join</code>来对原correlated sub-query去嵌套。采用<code>join</code>原因之一是：这时候不需要和所有professoren进行比较，只需要和对应的一个professor比较。</p>
<p><br></p>
<hr>
<h1 id="普遍作法"><a href="#普遍作法" class="headerlink" title="普遍作法"></a>普遍作法</h1><p>我们这里给出一个普遍的作法，但是不百分之百和原论文的想法契合。具体作法最好参考原论文：</p>
<p>下面这个很明显是一个关联的查询，子查询中需要外界<code>r1</code>的<code>attr1</code>, <code>attr2</code>。</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ...</span><br><span class="line"><span class="keyword">from</span> r1, </span><br><span class="line"><span class="keyword">where</span> ... </span><br><span class="line">(</span><br><span class="line">        <span class="keyword">select</span> ...</span><br><span class="line">        <span class="keyword">from</span> r2</span><br><span class="line">        <span class="keyword">where</span> r1.attr1 = ... <span class="keyword">and</span> r1.attr2 = ...</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>
<p>那么我们就将这个子查询给抽离出来到<code>from</code>下面或者<code>with</code>里面，提前用不关联的方式物理化它的结果，而不是之后进行低效的笛卡尔积。<br>如果我们想用不关联的方式物理化子查询的结果，我们可以需要<code>r1</code>这个表格的另外一份复制品，但是实际上我们只需要<code>r1</code>中和join相关的字段值：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ...</span><br><span class="line"><span class="keyword">from</span> r1, </span><br><span class="line">       (</span><br><span class="line">        <span class="keyword">select</span> d.attr1, d.attr2 <span class="comment">-- 有可能还有其他聚合函数</span></span><br><span class="line">        <span class="keyword">from</span> r2,</span><br><span class="line">             (<span class="keyword">select</span> <span class="keyword">distinct</span> r1.attr1, r1.attr2 <span class="keyword">from</span> r1) <span class="keyword">as</span> d</span><br><span class="line">        <span class="keyword">where</span> d.attr1 = ... <span class="keyword">and</span> d.attr2 = ...</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> d.attr1, d.attr2</span><br><span class="line">        ) <span class="keyword">as</span> precomputed</span><br><span class="line"><span class="keyword">where</span> ... </span><br><span class="line">        precomputed.attr1 = r1.attr1 <span class="keyword">and</span></span><br><span class="line">        precomputed.attr2 = r1.attr1</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="TPC-H例子一-1"><a href="#TPC-H例子一-1" class="headerlink" title="TPC-H例子一 1"></a>TPC-H例子一 <sup><a href="#fn1">1</a></sup></h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(l_extendedprice)</span><br><span class="line"><span class="keyword">from</span> lineitem l1</span><br><span class="line"><span class="keyword">where</span> l_extendedprice =</span><br><span class="line">   (<span class="keyword">select</span> <span class="keyword">min</span>(l_extendedprice)</span><br><span class="line">    <span class="keyword">from</span> lineitem l2</span><br><span class="line">    <span class="keyword">where</span> l1.l_orderkey = l2.l_orderkey);</span><br></pre></td></tr></tbody></table></figure>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(l_extendedprice)</span><br><span class="line"><span class="keyword">from</span> lineitem l1,</span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">min</span>(l_extendedprice) m, l_orderkey</span><br><span class="line">    <span class="keyword">from</span> lineitem</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> l_orderkey) l2</span><br><span class="line"><span class="keyword">where</span> l1.l_orderkey = l2.l_orderkey</span><br><span class="line"><span class="keyword">and</span> l_extendedprice = l2.m;</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>这里我们只需要对<code>l2</code>进行一次求值。</li>
</ul>
<p><br></p>
<h1 id="TPC-H例子二-1"><a href="#TPC-H例子二-1" class="headerlink" title="TPC-H例子二 1"></a>TPC-H例子二 <sup><a href="#fn1">1</a></sup></h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c1.c_name</span><br><span class="line"><span class="keyword">from</span> customer c1</span><br><span class="line"><span class="keyword">where</span> c1.c_mktsegment = <span class="string">'AUTOMOBILE'</span> </span><br><span class="line">      <span class="keyword">or</span> c1.c_acctbal &gt;</span><br><span class="line">                        (<span class="keyword">select</span> <span class="keyword">avg</span>(c2.c_acctbal)</span><br><span class="line">                        <span class="keyword">from</span> customer c2</span><br><span class="line">                        <span class="keyword">where</span> c2.c_mktsegment = c1.c_mktsegment);</span><br></pre></td></tr></tbody></table></figure>
<h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c1.c_name</span><br><span class="line"><span class="keyword">from</span> customer c1, (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">avg</span>(c.c_acctbal) <span class="keyword">as</span> <span class="keyword">avg</span>, c_mktsegment</span><br><span class="line">    <span class="keyword">from</span> customer c</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> c_mktsegment</span><br><span class="line">    ) <span class="keyword">as</span> c2</span><br><span class="line"><span class="keyword">where</span> (c1.c_mktsegment = <span class="string">'AUTOMOBILE'</span></span><br><span class="line">      <span class="keyword">or</span> c1.c_acctbal &gt; c2.avg)</span><br><span class="line">      <span class="keyword">and</span> c1.c_mktsegment = c2.c_mktsegment</span><br></pre></td></tr></tbody></table></figure>
<p>或</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> c2 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">avg</span>(c.c_acctbal) <span class="keyword">as</span> <span class="keyword">avg</span>, c_mktsegment</span><br><span class="line">    <span class="keyword">from</span> customer c</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> c_mktsegment</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> c1.c_name</span><br><span class="line"><span class="keyword">from</span> customer c1, c2</span><br><span class="line"><span class="keyword">where</span> (c1.c_mktsegment = <span class="string">'AUTOMOBILE'</span></span><br><span class="line">      <span class="keyword">or</span> c1.c_acctbal &gt; c2.avg)</span><br><span class="line">      <span class="keyword">and</span> c1.c_mktsegment = c2.c_mktsegment</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="TPC-H-Q17-例子"><a href="#TPC-H-Q17-例子" class="headerlink" title="TPC-H Q17 例子"></a>TPC-H Q17 例子</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- TPC-H Query 17</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">        <span class="keyword">sum</span>(l_extendedprice) / <span class="number">7.0</span> <span class="keyword">as</span> avg_yearly</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        lineitem,</span><br><span class="line">        part</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        p_partkey = l_partkey</span><br><span class="line">        <span class="keyword">and</span> p_brand = <span class="string">'Brand#23'</span></span><br><span class="line">        <span class="keyword">and</span> p_container = <span class="string">'MED BOX'</span></span><br><span class="line">        <span class="keyword">and</span> l_quantity &lt; (</span><br><span class="line">                <span class="keyword">select</span></span><br><span class="line">                        <span class="number">0.2</span> * <span class="keyword">avg</span>(l_quantity)</span><br><span class="line">                <span class="keyword">from</span></span><br><span class="line">                        lineitem</span><br><span class="line">                <span class="keyword">where</span></span><br><span class="line">                        l_partkey = p_partkey</span><br><span class="line">        )</span><br></pre></td></tr></tbody></table></figure>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>很清晰，关联(nested, correlated)的部分如下：<br></p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">...</span><br><span class="line">from</span><br><span class="line">        lineitem,</span><br><span class="line">        part</span><br><span class="line">...</span><br><span class="line">        and l_quantity &lt; (</span><br><span class="line">                <span class="keyword">select</span></span><br><span class="line">                        <span class="number">0.2</span> * <span class="keyword">avg</span>(l_quantity)</span><br><span class="line">                <span class="keyword">from</span></span><br><span class="line">                        lineitem</span><br><span class="line">                <span class="keyword">where</span></span><br><span class="line">                        l_partkey = p_partkey</span><br><span class="line">        )</span><br></pre></td></tr></tbody></table></figure><p></p>
<p><code>p_partkey</code>是这个子查询(Sub-Query)中来自外查询的字段，也就是它造成了这个依赖(dependency)。</p>
<p>我们用文字去描述一下这个关联部分:  </p>
<ul>
<li>对每一个子查询的<code>lineitem</code>的元组，需要它的<code>l_partkey</code>字段值依赖于外界<code>part</code>的对应<code>p_partkey</code>字段值。</li>
<li>外依赖条件指：<code>l_partkey = p_partkey</code></li>
<li>$D$是<code>part.p_partkey</code>对应字段值的集合。</li>
</ul>
<p>我们可以完全抽离这个关联部分到另外一个暂时的表格，再用<strong>外依赖条件</strong>和它regular join。</p>
<h2 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">        <span class="keyword">sum</span> (l_extendedprice) / <span class="number">7.0</span> <span class="keyword">as</span> avg_yearly</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        lineitem l,</span><br><span class="line">        part,</span><br><span class="line">        (</span><br><span class="line">            <span class="keyword">select</span></span><br><span class="line">                    <span class="number">0.2</span> * <span class="keyword">avg</span> (l_quantity) <span class="keyword">avg</span>, l_partkey</span><br><span class="line">            <span class="keyword">from</span></span><br><span class="line">                    lineitem</span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">                    l_partkey</span><br><span class="line">        ) quaprecomputednt</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        p_partkey = l. l_partkey</span><br><span class="line">        <span class="keyword">and</span> p_brand = <span class="string">'Brand #23'</span></span><br><span class="line">        <span class="keyword">and</span> p_container = <span class="string">'MED BOX'</span></span><br><span class="line">        <span class="keyword">and</span> precomputed.l_partkey = p_partkey  <span class="comment">-- 使用外依赖条件的regular join</span></span><br><span class="line">        <span class="keyword">and</span> l_quantity &lt; precomputed.avg       <span class="comment">-- 去除原依赖</span></span><br></pre></td></tr></tbody></table></figure>
<p>或</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> precomputed <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">            <span class="number">0.2</span> * <span class="keyword">avg</span> (l_quantity) <span class="keyword">avg</span> , l_partkey</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">            lineitem</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">            l_partkey</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">        <span class="keyword">sum</span> (l_extendedprice) / <span class="number">7.0</span> <span class="keyword">as</span> avg_yearly</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        lineitem l,</span><br><span class="line">        part,</span><br><span class="line">        precomputed</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        p_partkey = l. l_partkey</span><br><span class="line">        <span class="keyword">and</span> p_brand = <span class="string">'Brand #23'</span></span><br><span class="line">        <span class="keyword">and</span> p_container = <span class="string">'MED BOX'</span></span><br><span class="line">        <span class="keyword">and</span> precomputed.l_partkey = p_partkey  <span class="comment">-- 使用外依赖条件的regular join</span></span><br><span class="line">        <span class="keyword">and</span> l_quantity &lt; precomputed.avg       <span class="comment">-- 去除原依赖</span></span><br></pre></td></tr></tbody></table></figure>
<p>引用: </p>
<p><a name="fn1">1</a>: TUM Foundation of Data Engineering Chap3.Advanced SQL: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2ZvdW5kYXRpb25zZGUvY2hhcHRlcjMucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de">https://db.in.tum.de/teaching/ws1920/foundationsde/chapter3.pdf?lang=de<i class="fa fa-external-link"></i></span></p>
<p>2.<span class="exturl" data-url="aHR0cHM6Ly9kbC5naS5kZS9iaXRzdHJlYW0vaGFuZGxlLzIwLjUwMC4xMjExNi8yNDE4LzM4My5wZGY/c2VxdWVuY2U9MQ==" title="https://dl.gi.de/bitstream/handle/20.500.12116/2418/383.pdf?sequence=1">Unnesting Arbitrary Queries - Thomas Neumann and Alfons Kemper - (BTW 2015)<i class="fa fa-external-link"></i></span></p>
<p>3.<a href="https://cakebytheoceanluo.github.io/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/">https://cakebytheoceanluo.github.io/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Query Optimizer</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Query Optimizer</tag>
        <tag>Subquery Optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQL]中级SQL(5)</title>
    <url>/2020/03/22/SQL-%E4%B8%AD%E7%BA%A7SQL-5/</url>
    <content><![CDATA[<h1 id="TPC-H-数据集"><a href="#TPC-H-数据集" class="headerlink" title="TPC-H 数据集"></a>TPC-H 数据集</h1><p>我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注<code>select...from...where</code>这种读操作，分析query　(analytical query)。<br><code>TPC-H</code>数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p>
<p><strong>本地载入改数据集</strong>的方法见我的博客两篇文章:</p>
<ul>
<li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5TPC-H%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS] PostgreSQL 导入 TPC-H 数据集</a></li>
<li><a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS] PostgreSQL 导入数据集</a></li>
</ul>
<a id="more"></a>
<h1 id="中级SQL"><a href="#中级SQL" class="headerlink" title="中级SQL"></a>中级SQL</h1><p>这一篇文章其实目的是用简单的SQL去熟悉TPC-H这个数据集，因为这个数据集会在<strong>高级SQL</strong>部分一直被使用。</p>
<ul>
<li>有多少customer拥有order，而这个order的comment含有”packages”这个单词？</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> c_custkey)</span><br><span class="line"><span class="keyword">from</span> customer, orders</span><br><span class="line"><span class="keyword">where</span> c_custkey = o_custkey <span class="keyword">and</span> o_comment <span class="keyword">like</span> <span class="string">'%packages%'</span>;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> o_custkey)</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">where</span> o_comment <span class="keyword">like</span> <span class="string">'%packages%'</span>;</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>求<code>l_orderkey</code>的数字数量的平均值(<code>char_length()</code>函数)：<ul>
<li><code>l_orderkey::text</code>和<code>l_orderkey || ''</code>都可以使int变成string<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(<span class="keyword">char_length</span>(l_orderkey || <span class="string">''</span>))</span><br><span class="line"><span class="keyword">from</span> lineitem;</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span> (<span class="keyword">char_length</span>(l_orderkey::<span class="built_in">text</span>))</span><br><span class="line"><span class="keyword">from</span> lineitem ;</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><p>求所有<code>customer</code>和所有<code>supplier</code>的名字：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c_name</span><br><span class="line"><span class="keyword">from</span> customer</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> s_name</span><br><span class="line"><span class="keyword">from</span> supplier</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>读取10个customers对应的nation，用JSON的形式去表达<code>custkey, name, nation</code>：</p>
</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'{" custkey ": '</span> || c_custkey || <span class="string">', " name ":" '</span> || c_name || <span class="string">'", " nation ":{" nationkey ": '</span> || n_nationkey || <span class="string">', " name ":" '</span> || n_name || <span class="string">' "}} '</span> <span class="keyword">as</span> custjson</span><br><span class="line"><span class="keyword">from</span> customer , nation</span><br><span class="line"><span class="keyword">where</span> c_nationkey = n_nationkey <span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>输出：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">                                                  custjson                                                  </span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"> {" custkey ": 86, " name ":" Customer#000000086", " nation ":{" nationkey ": 0, " name ":" ALGERIA "}} </span><br><span class="line"> {" custkey ": 80, " name ":" Customer#000000080", " nation ":{" nationkey ": 0, " name ":" ALGERIA "}} </span><br><span class="line"> {" custkey ": 76, " name ":" Customer#000000076", " nation ":{" nationkey ": 0, " name ":" ALGERIA "}} </span><br><span class="line"> {" custkey ": 73, " name ":" Customer#000000073", " nation ":{" nationkey ": 0, " name ":" ALGERIA "}} </span><br><span class="line"> {" custkey ": 48, " name ":" Customer#000000048", " nation ":{" nationkey ": 0, " name ":" ALGERIA "}} </span><br><span class="line"> {" custkey ": 29, " name ":" Customer#000000029", " nation ":{" nationkey ": 0, " name ":" ALGERIA "}} </span><br><span class="line"> {" custkey ": 144, " name ":" Customer#000000144", " nation ":{" nationkey ": 1, " name ":" ARGENTINA "}} </span><br><span class="line"> {" custkey ": 141, " name ":" Customer#000000141", " nation ":{" nationkey ": 1, " name ":" ARGENTINA "}} </span><br><span class="line"> {" custkey ": 106, " name ":" Customer#000000106", " nation ":{" nationkey ": 1, " name ":" ARGENTINA "}} </span><br><span class="line"> {" custkey ": 59, " name ":" Customer#000000059", " nation ":{" nationkey ": 1, " name ":" ARGENTINA "}} </span><br><span class="line">(10 rows)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>German Supplier在1995年发了多少lineitem?</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(lineitem)</span><br><span class="line"><span class="keyword">from</span> supplier, nation, lineitem</span><br><span class="line"><span class="keyword">where</span> n_name = <span class="string">'GERMANY'</span> <span class="keyword">and</span> n_nationkey = s_nationkey <span class="keyword">and</span> s_suppkey = l_suppkey <span class="keyword">and</span> <span class="keyword">extract</span>(<span class="keyword">year</span> <span class="keyword">from</span> l_shipdate) = <span class="number">1995</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(lineitem)</span><br><span class="line"><span class="keyword">from</span> supplier, nation, lineitem</span><br><span class="line"><span class="keyword">where</span> n_name = <span class="string">'GERMANY'</span> <span class="keyword">and</span> n_nationkey = s_nationkey <span class="keyword">and</span> s_suppkey = l_suppkey <span class="keyword">and</span> l_shipdate <span class="keyword">between</span> <span class="string">'1995-01-01'</span> <span class="keyword">and</span> <span class="string">'1995-12-31'</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>搜索EUROPE在FURNITURE　market segment中最高account balance的十个customers:</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c_name, c_acctbal</span><br><span class="line"><span class="keyword">from</span> customer, nation, region</span><br><span class="line"><span class="keyword">where</span> r_name = <span class="string">'EUROPE'</span> <span class="keyword">and</span> r_regionkey = n_regionkey <span class="keyword">and</span> n_nationkey = c_nationkey <span class="keyword">and</span> c_mktsegment = <span class="string">'FURNITURE'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c_acctbal <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>How many orders do customer have?</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c_custkey, <span class="keyword">count</span>(o_orderkey) <span class="keyword">as</span> o_count</span><br><span class="line"><span class="keyword">from</span> customer <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders <span class="keyword">on</span> c_custkey = o_custkey</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c_custkey</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> o_count <span class="keyword">desc</span>, c_custkey <span class="keyword">asc</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li><code>sum(l_extendedprice * (1 - l_discount))</code>: revenue</li>
<li>得到年份的例子：<code>extract(year from l_shipdate) = 1995</code></li>
<li><code>c_mktsegment</code>: market segment</li>
<li><code>c_acctbal</code>: account balance</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>TPC-H</tag>
      </tags>
  </entry>
  <entry>
    <title>[CMU-15445]Lec07 Tree Indexes Part I - 树索引 I</title>
    <url>/2020/03/19/CMU-15445-Lec07/</url>
    <content><![CDATA[<p>Tree Indexes Part I - 树索引 I</p>
<p>Slide: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA3LXRyZWVzMS5wZGY=" title="https://15445.courses.cs.cmu.edu/fall2019/slides/07-trees1.pdf">https://15445.courses.cs.cmu.edu/fall2019/slides/07-trees1.pdf<i class="fa fa-external-link"></i></span><br>Note: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDctdHJlZXMxLnBkZg==" title="https://15445.courses.cs.cmu.edu/fall2019/notes/07-trees1.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/07-trees1.pdf<i class="fa fa-external-link"></i></span><br>Readings:  Chapter 11.1-11.4</p>
<p>Database Tree Indexes 在CMU分成了两部分，在两节课中讲。这是第一部分。</p>
<p>这节课中，我们会学习数据库的中使用的B+树，它数据库最重要的数据结构。几十年来，数据库的形式和技术变化很大，但是始终坚持在使用B+树以及它的变形。</p>
<a id="more"></a>
<p><img data-src="/images/CMU1544564/Lec07/1.jpg" alt="1.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/3.jpg" alt="3.jpg"></p>
<ul>
<li>上图我们在前一篇文章<a href="https://cakebytheoceanluo.github.io/2020/03/18/CMU-15445-Lec06/#Data-Structure-in-DBMS">[CMU-15445] Lec06 Hash Tables - 哈希表 - Data Structure in DBMS</a>中已经讨论过。我们现在代入hash table和tree再看看这一页。</li>
<li>前三点中hash table可以被应用，同时效果不错。但是在<strong>table indexes</strong>中tree更好，以至于各个DBMS默认的table index都是tree。具体tree哪里好，我们会在这几节课中具体讨论。</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec07/4.jpg" alt="4.jpg"></p>
<ul>
<li>从上图中:</li>
<li>index索引严格上说不是必须，它的是一个起到提速搜索的数据结构。如果没有它，那就linear sequential scan去找想要的tuple， $O(n)$</li>
<li>index索引其实将原表格内容存储在数据结构中，因此它也重复(replica)了一部分原表格的内容。如果我们对原表格进行更新(写操作)，那么也需要对index进行同样的操作，<strong>让原表格和index同步</strong>。</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec07/5.jpg" alt="5.jpg"></p>
<ul>
<li>从上图中:</li>
<li>index的存在会带来:</li>
<li>Storage Overhead: index重复了一部分原表格内容，index这个数据结构要占一块存储。常常需要多个page，不能保证全部在内存上。</li>
<li>Maintenance Overhead: 如果我们对原表格进行更新(写操作)，那么也需要对index进行同样的操作，<strong>让原表格和index同步</strong>。</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec07/6.jpg" alt="6.jpg"></p>
<h1 id="B-Tree-Family"><a href="#B-Tree-Family" class="headerlink" title="B-Tree Family"></a>B-Tree Family</h1><p><img data-src="/images/CMU1544564/Lec07/7.jpg" alt="7.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/8.jpg" alt="8.jpg"></p>
<ul>
<li>Efficient locking for concurrent operations on B-trees: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS8xMC4xMTQ1LzMxOTYyOC4zMTk2NjM=" title="https://dl.acm.org/doi/10.1145/319628.319663">https://dl.acm.org/doi/10.1145/319628.319663<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+ Tree"></a>B+ Tree</h1><p><img data-src="/images/CMU1544564/Lec07/9.jpg" alt="9.jpg"></p>
<ul>
<li>Ubiquitous B-Tree: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS8xMC4xMTQ1LzM1Njc3MC4zNTY3NzY=" title="https://dl.acm.org/doi/10.1145/356770.356776">https://dl.acm.org/doi/10.1145/356770.356776<i class="fa fa-external-link"></i></span></li>
</ul>
<p><img data-src="/images/CMU1544564/Lec07/10.jpg" alt="10.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/11.jpg" alt="11.jpg"></p>
<ul>
<li>从上图中:</li>
<li>leaf node: 指最下面一层的节点</li>
<li>inner node: 指非leaf node的节点</li>
<li>sibling pointer: 指拥有同一个父亲的leaf node</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec07/12.jpg" alt="12.jpg"></p>
<ul>
<li>从上图中:</li>
<li>inner node: 由<code>node*</code>和<code>key</code>组成</li>
<li>leaf node: 由<code>value</code>和<code>key</code>组成</li>
</ul>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p><img data-src="/images/CMU1544564/Lec07/13.jpg" alt="13.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/15.jpg" alt="15.jpg"></p>
<ul>
<li>从上图中:</li>
<li><code>prev</code>和<code>next</code>是两个指针，指向sibling node</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec07/16.jpg" alt="16.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/18.jpg" alt="18.jpg"></p>
<ul>
<li>从上图是实际实现中，B+ Tree的样子</li>
<li><code>sortd keys</code>排列在一块儿。因为scan的时候，只是检查<code>key</code>。另外<code>key</code>的数据类型大小一致,　<code>values</code>大小很可能不一致，如字符串。</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec07/19.jpg" alt="19.jpg"></p>
<h2 id="B-Tree-vs-B-Tree"><a href="#B-Tree-vs-B-Tree" class="headerlink" title="B Tree vs. B+ Tree"></a>B Tree vs. B+ Tree</h2><p><img data-src="/images/CMU1544564/Lec07/20.jpg" alt="20.jpg"></p>
<ul>
<li>从上图中:</li>
<li>B Tree中是没有重复的，<code>key</code>被存储在inner node和leaf node之间</li>
<li>B+ Tree中是有重复的，<code>key</code>只被存储在leaf node中</li>
<li><code>key</code>的存储地点不止影响树的样子，更影响多线程更改树信息的性能。B+ Tree的<code>key</code>信息只在leaf node中，更改信息以后只需要向上走，因此只需要latch一个向上的方向。但是B Tree需要latch两个方向，即向上和向下。这个我们会在后两次课中仔细讨论。<!-- TODO:后两次课。 -->
<!-- TODO: B Tree 介绍 -->
</li>
</ul>
<h2 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h2><p><img data-src="/images/CMU1544564/Lec07/21.jpg" alt="21.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/22.jpg" alt="22.jpg"></p>
<ul>
<li>上图中的链接: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY3MudXNmY2EuZWR1L35nYWxsZXMvdmlzdWFsaXphdGlvbi9CUGx1c1RyZWUuaHRtbA==" title="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html<i class="fa fa-external-link"></i></span></li>
</ul>
<p>我们使用一下作为Demo:<br><code>insert 4; insert 2; insert 6; insert 1; insert 5;</code><br>得到如下的树:</p>
<p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec07/b+tree_insert.png" alt="B+Tree-Insert"></p>
<h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><p><img data-src="/images/CMU1544564/Lec07/23.jpg" alt="23.jpg"></p>
<ul>
<li>上图中的链接: <span class="exturl" data-url="aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMzQ2LzIwMTUvbm90ZXMvQmxpbmsucHB0eA==" title="https://web.stanford.edu/class/cs346/2015/notes/Blink.pptx">https://web.stanford.edu/class/cs346/2015/notes/Blink.pptx<i class="fa fa-external-link"></i></span></li>
</ul>
<p>我们再继续刚刚的Demo:</p>
<p><code>delete 5; delete 4;</code><br>得到如下的树:</p>
<p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec07/b+tree_delete.png" alt="B+Tree-Delete"></p>
<h2 id="B-Tree-In-Practice"><a href="#B-Tree-In-Practice" class="headerlink" title="B+ Tree In Practice"></a>B+ Tree In Practice</h2><p><img data-src="/images/CMU1544564/Lec07/24.jpg" alt="24.jpg"></p>
<ul>
<li>从上图中:</li>
<li>Fill-Factor是指<code>leaf node的个数 / 所有 node的个数</code>比值</li>
<li>实际上B+树不需要５层以上。</li>
</ul>
<h2 id="Clustered-Indexes"><a href="#Clustered-Indexes" class="headerlink" title="Clustered Indexes"></a>Clustered Indexes</h2><p><img data-src="/images/CMU1544564/Lec07/25.jpg" alt="25.jpg"></p>
<p>指页面在硬盘存储的顺序和索引中排序的顺序一致，即也被排序，而并非任意顺序。这种Clustered Indexes在对于range query很有帮助。range query的一个例子是要<code>primary key</code>在0到100的所有tuple。对这个例子，如果我们需要5个page。那这5个page在clustered index以后的硬盘上是连续的，一次sequential I/O就可以解决。如果不使用clustered indexes, 那就可能出现5次random I/O，对应的性能就很垃圾了。</p>
<!-- TODO:实验 -->
<h2 id="Selection-Conditions"><a href="#Selection-Conditions" class="headerlink" title="Selection Conditions"></a>Selection Conditions</h2><p>Selection Conditions是B+ tree的优势，指我们可以搜索index对应的search key的prefix前缀, suffix后缀, 或者其中的部分。</p>
<p>这是hash table无法做到的，它只能搜索完整了search key。</p>
<p><img data-src="/images/CMU1544564/Lec07/26.jpg" alt="26.jpg"></p>
<h3 id="前缀例子"><a href="#前缀例子" class="headerlink" title="前缀例子"></a>前缀例子</h3><p>通过前缀我们可以知道我们想要找的tuple出现在index中的区间，即从小于我们前缀的位置，扫描到大于我们前缀的位置。下面是两个前缀的例子:</p>
<p><img data-src="/images/CMU1544564/Lec07/27.jpg" alt="27.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/28.jpg" alt="28.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/29.jpg" alt="29.jpg"></p>
<h3 id="后缀例子"><a href="#后缀例子" class="headerlink" title="后缀例子"></a>后缀例子</h3><p>我们缺失一个前缀，那就将所有的可能都填入前缀。这样会产生好几个需要扫描的区间，这些区间的个数等于所有前缀可能的个数。如下图<code>*</code>可以是A, B, C　(例子中合并了后面两个区间到一起)：</p>
<p><img data-src="/images/CMU1544564/Lec07/30.jpg" alt="30.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/31.jpg" alt="31.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/32.jpg" alt="32.jpg"></p>
<p><br></p>
<h2 id="B-Tree-Design-Choices"><a href="#B-Tree-Design-Choices" class="headerlink" title="B+ Tree Design Choices"></a>B+ Tree Design Choices</h2><p><img data-src="/images/CMU1544564/Lec07/33.jpg" alt="33.jpg"></p>
<ul>
<li>上图中的链接: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS8xMC4xNTYxLzE5MDAwMDAwMjg=" title="https://dl.acm.org/doi/10.1561/1900000028">https://dl.acm.org/doi/10.1561/1900000028<i class="fa fa-external-link"></i></span></li>
<li>这部分都是实现的经验之谈</li>
</ul>
<h3 id="Node-size"><a href="#Node-size" class="headerlink" title="Node size"></a>Node size</h3><p><img data-src="/images/CMU1544564/Lec07/34.jpg" alt="34.jpg"></p>
<ul>
<li>如上图中:</li>
<li>Node可以是一个page，也可以是多个page</li>
<li>在速度慢的硬件上的node的容量建议会更大，这样可以减少I/O的次数</li>
<li>leaf node scan: 涉及数量很多的node, 是sequential I/O</li>
<li>root-to-leaf traversal: 涉及数量很少的node, 但是是random I/O, 因为这些page很大概率不存储在一起</li>
</ul>
<p><br></p>
<ul>
<li>另外index和原表格可以使用两个buffer pool:</li>
<li>index buffer page: 1 MiB</li>
<li>table data buffer page: 8 KiB</li>
</ul>
<h3 id="Merge-Threshold"><a href="#Merge-Threshold" class="headerlink" title="Merge Threshold"></a>Merge Threshold</h3><p><img data-src="/images/CMU1544564/Lec07/35.jpg" alt="35.jpg"></p>
<ul>
<li>如上图:</li>
<li>如果一个node中元素少于<code>M/2 - 1</code>，即没有half-full, 发生underflow。我们可以让这个node保存存在，而不去merge它。然后每一段时间，批量处理B+ tree中所有这类的node。</li>
</ul>
<h3 id="Variable-Length-Keys"><a href="#Variable-Length-Keys" class="headerlink" title="Variable Length Keys"></a>Variable Length Keys</h3><p><img data-src="/images/CMU1544564/Lec07/36.jpg" alt="36.jpg"></p>
<ul>
<li>如上图:</li>
<li>Approach 1: Pointers　太慢</li>
<li>Approach 2: Variable Length Nodes不适合fix size page</li>
<li>Approach 3: Padding 太浪费空间</li>
<li>Approach 4: Key Map / Indirection 性能较好</li>
</ul>
<h4 id="Key-Map-Indirection"><a href="#Key-Map-Indirection" class="headerlink" title="Key Map / Indirection"></a>Key Map / Indirection</h4><p>这个就和slotted page类似，将vaiable lenght key存在同一个page。</p>
<p><img data-src="/images/CMU1544564/Lec07/38.jpg" alt="38.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/39.jpg" alt="39.jpg"></p>
<ul>
<li>如上图:</li>
<li>可以在<code>sorted key map</code>这个区域存一个<strong>首字母</strong>，这样可以减少跳到<code>key+values</code>区域的次数。不必每一个<code>key</code>都去看它的全部内容。</li>
</ul>
<h3 id="Non-Unique-Indexes"><a href="#Non-Unique-Indexes" class="headerlink" title="Non-Unique Indexes"></a>Non-Unique Indexes</h3><p><img data-src="/images/CMU1544564/Lec07/40.jpg" alt="40.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/41.jpg" alt="41.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/42.jpg" alt="42.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/43.jpg" alt="43.jpg"></p>
<h3 id="Intra-Node-Search"><a href="#Intra-Node-Search" class="headerlink" title="Intra-Node Search"></a>Intra-Node Search</h3><p>Intra-Node Search指在node中搜索，可以想象成在page中那些已经排序完的数据中搜索：</p>
<h4 id="Linear"><a href="#Linear" class="headerlink" title="Linear"></a>Linear</h4><p><img data-src="/images/CMU1544564/Lec07/44.jpg" alt="44.jpg"></p>
<h4 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h4><p><img data-src="/images/CMU1544564/Lec07/46.jpg" alt="46.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/47.jpg" alt="47.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/48.jpg" alt="48.jpg"></p>
<h4 id="Interpolation"><a href="#Interpolation" class="headerlink" title="Interpolation"></a>Interpolation</h4><p>Interpolation指数字的分布如果已知，可以直接猜到想搜的<code>key</code>的位置。这个属于特例，而且不适用于字符串。</p>
<p><img data-src="/images/CMU1544564/Lec07/49.jpg" alt="49.jpg"></p>
<p><br><br><br></p>
<h2 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h2><p><img data-src="/images/CMU1544564/Lec07/50.jpg" alt="50.jpg"></p>
<h3 id="Prefix-Compression"><a href="#Prefix-Compression" class="headerlink" title="Prefix Compression"></a>Prefix Compression</h3><p>Prefix Compression即字符串共有的前缀只需要存储一次，能高效节省出存储的空间，同时也可以降低B+ Tree的高度，加快搜索速度。</p>
<p><img data-src="/images/CMU1544564/Lec07/51.jpg" alt="51.jpg"></p>
<h3 id="Suffix-Truncation"><a href="#Suffix-Truncation" class="headerlink" title="Suffix Truncation"></a>Suffix Truncation</h3><p>我们在最开始说过leaf node起到存储信息的作用，inner node起到lookup中导航的作用。对于字符串，inner node中没有必要保存全部，只需要保存足够的前缀，<strong>保证大于小于的关系和导航的作用</strong>。见下面的例子中，实际上<code>a</code>和<code>l</code>也已经足够:</p>
<p><img data-src="/images/CMU1544564/Lec07/52.jpg" alt="52.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/53.jpg" alt="53.jpg"></p>
<h3 id="Bulk-Insert"><a href="#Bulk-Insert" class="headerlink" title="Bulk Insert"></a>Bulk Insert</h3><p>一次次insert来获得一个B+ Tree很慢。Bulk Insert是将keys先排序，再完成leaf node, 再根据leaf node去完成inner node。Bulk Insert让我们能更快去获得一个B+ Tree:</p>
<p><img data-src="/images/CMU1544564/Lec07/54.jpg" alt="54.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/55.jpg" alt="55.jpg"></p>
<h3 id="Pointer-Swizzling"><a href="#Pointer-Swizzling" class="headerlink" title="Pointer Swizzling"></a>Pointer Swizzling</h3><p>我们每一次从B+ Tree中需要一个page，都需要调用buffer pool中的函数，用<code>pageid</code>获得对应page的指针。这种间接indirection，带来固定的开销。而我们可以节省这一部分，特别在B+ Tree的上面几层。因为每次查询都需要上面几层的page，它们属于hot page，即它们经常需要有被访问，每一次都找buffer pool显得花销更大了。我们完全可以把这些page一直留着内存里，然后在B+_Tree中直接带上它们内容的指针，这样访问它们不需要经过buffer pool。而这些hot page的数量不是很多，完全可以长久留着内存中。(见<a href="#b+-tree-in-practice">B+ Tree In Practice</a>中，两层node大概在134个page, 占1MiB。)</p>
<p><img data-src="/images/CMU1544564/Lec07/57.jpg" alt="57.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/58.jpg" alt="58.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/59.jpg" alt="59.jpg"></p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p><img data-src="/images/CMU1544564/Lec07/60.jpg" alt="60.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec07/61.jpg" alt="61.jpg"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CMU-15445</category>
        <category>Access Methods</category>
        <category>B Tree</category>
        <category>Indexing</category>
      </categories>
      <tags>
        <tag>Indexing</tag>
        <tag>B Tree</tag>
        <tag>Clustered Index</tag>
        <tag>Variable Length Key</tag>
        <tag>Prefix Compression</tag>
        <tag>Suffix Truncation</tag>
        <tag>Bulk Load (Bulk Insert)</tag>
        <tag>Pointer Swizzling</tag>
      </tags>
  </entry>
  <entry>
    <title>[CMU-15445]Lec06 Hash Tables - 哈希表</title>
    <url>/2020/03/18/CMU-15445-Lec06/</url>
    <content><![CDATA[<p>Hash Tables - 哈希表</p>
<p>Slide: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA2LWhhc2h0YWJsZXMucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/slides/06-hashtables.pdf">https://15445.courses.cs.cmu.edu/fall2019/slides/06-hashtables.pdf<i class="fa fa-external-link"></i></span><br>Note: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDYtaGFzaHRhYmxlcy5wZGY=" title="https://15445.courses.cs.cmu.edu/fall2019/notes/06-hashtables.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/06-hashtables.pdf<i class="fa fa-external-link"></i></span><br>Readings: Chapter 11.6-11.7<!-- TODO:link here --></p>
<p>这节课中，我们会学习数据库的中使用的哈希表hash table，实际上我们涉及纯算法课中的理论，但更重要的是工程实现的角度。数据库中使用的hash table需要有高性能，多线程读写，内存访问友好。</p>
<a id="more"></a>
<p><img data-src="/images/CMU1544564/Lec06/1.jpg" alt="1.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/3.jpg" alt="3.jpg"></p>
<h1 id="Data-Structure-in-DBMS"><a href="#Data-Structure-in-DBMS" class="headerlink" title="Data Structure in DBMS"></a>Data Structure in DBMS</h1><p><img data-src="/images/CMU1544564/Lec06/4.jpg" alt="4.jpg"></p>
<ul>
<li>Internal Metadata: 用于管理数据库内部原数据的数据结构，如 page table, page directory</li>
<li>Core Data Storage: 存储tuple/表格的数据结构, 如：Memacache数据库用hash table,　MySQL使用B+树</li>
<li>Temporary Data Structures:对SQL Query暂时的数据结构，如一个使用hash join的SQL Query需要新建一个hash table,然后对它查询，这个hash table是暂时的，即Query结束就清除释放</li>
<li>Table Indexes: 辅助型索引数据结构, 使得查询更快，不需遍历所有tuple</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec06/5.jpg" alt="5.jpg"></p>
<h1 id="Hash-Table-Overview"><a href="#Hash-Table-Overview" class="headerlink" title="Hash Table Overview"></a>Hash Table Overview</h1><p><img data-src="/images/CMU1544564/Lec06/6.jpg" alt="6.jpg"></p>
<ul>
<li>上图中：</li>
<li>空间复杂度是$O(n)$, hash table并不是一个能节省存储空间的数据结构。</li>
<li>查询时间复杂度:<ul>
<li>average case: $O(1)$. 从算法理论上，它的复杂度是一个常数。但在工业中，一个常数也有<strong>大小</strong>之分。比如<strong>小的常数时间复杂度</strong>代表CPU指令数较少，而<strong>大的常数时间复杂度</strong>代表CPU指令数较多，即使它们对应的CPU指令数都是常数，但是运行时间还是有区别。</li>
<li>worst case: $O(n)$。比如hash function效果很不平均，将所有指hash到了一个位置，反而形成了一个list。这种不平均的hash function比如是：　$f(x) = 1$, 即常数函数。</li>
</ul>
</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec06/7.jpg" alt="7.jpg"></p>
<ul>
<li>上图中：</li>
<li>f(abc)=0, f(def)=2, f(xyz)=n</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec06/8.jpg" alt="8.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/9.jpg" alt="9.jpg"></p>
<ul>
<li>上图中的一些假设来自于算法中理论部分，但是实际上：</li>
<li>没有冲突collision的perfect hash function在大数据前提下是不存在的。hash collision是一定发生的。</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec06/10.jpg" alt="10.jpg"></p>
<ul>
<li>从上图中, hash table分成两个独立的部分，它们互相不依赖：</li>
<li>hash function: 即我们之前提到的$f$函数, $f (\mathrm{key}) \rightarrow \mathrm{int} \in D$, $D$是一个int的集合。我们希望这个hash function很快，并且冲突概率很低：<ul>
<li>我们签名提到的$f(x) = 1$常数函数很快，但是它把任何一个key都匹配到1这个位置，即它的冲突概率是100%,这个非常不好，使我们的hash table变成了list,查询的时间复杂度变成了$O(n)$的average case</li>
</ul>
</li>
<li>hash scheme:　即如何去处理一定会发生的冲突。</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec06/11.jpg" alt="11.jpg"></p>
<p><br></p>
<h1 id="Hash-Function"><a href="#Hash-Function" class="headerlink" title="Hash Function"></a>Hash Function</h1><p><img data-src="/images/CMU1544564/Lec06/12.jpg" alt="12.jpg"></p>
<ul>
<li>上图中:</li>
<li>我们不考虑密码学cryptographic的hash function,　因为我们只是在数据库内部使用hash table，来<a href="#data-structure-in-dbms">加速处理数据库的元数据, 存储, join, 索引</a>。而不是用来加密解密信息。<strong>数据库希望hash function很快，并且冲突概率很低。</strong></li>
</ul>
<p><img data-src="/images/CMU1544564/Lec06/13.jpg" alt="13.jpg"></p>
<ul>
<li>CRC-64: <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGUuc3RlcGhhbi1icnVtbWUuY29tL2NyYzMyLw==" title="https://create.stephan-brumme.com/crc32/">https://create.stephan-brumme.com/crc32/<i class="fa fa-external-link"></i></span></li>
<li>MurmurHash: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FhcHBsZWJ5L3NtaGFzaGVy" title="https://github.com/aappleby/smhasher">https://github.com/aappleby/smhasher<i class="fa fa-external-link"></i></span></li>
<li>Google CityHash: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jaXR5aGFzaA==" title="https://github.com/google/cityhash">https://github.com/google/cityhash<i class="fa fa-external-link"></i></span></li>
<li>Facebook XXHash: <span class="exturl" data-url="aHR0cHM6Ly9jeWFuNDk3My5naXRodWIuaW8veHhIYXNoLw==" title="https://cyan4973.github.io/xxHash/">https://cyan4973.github.io/xxHash/<i class="fa fa-external-link"></i></span></li>
<li>Google FarmHash: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9mYXJtaGFzaA==" title="https://github.com/google/farmhash">https://github.com/google/farmhash<i class="fa fa-external-link"></i></span></li>
</ul>
<!-- TODO -->
<p><img data-src="/images/CMU1544564/Lec06/14.jpg" alt="14.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/15.jpg" alt="15.jpg"></p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYXZsby9oYXNoLWZ1bmN0aW9uLWJlbmNobWFyaw==" title="https://github.com/apavlo/hash-function-benchmark">https://github.com/apavlo/hash-function-benchmark<i class="fa fa-external-link"></i></span></li>
</ul>
<p><br></p>
<p>另外还有一种Fibonacci Hashing, 推荐阅读: <span class="exturl" data-url="aHR0cHM6Ly9wcm9iYWJseWRhbmNlLmNvbS8yMDE4LzA2LzE2L2ZpYm9uYWNjaS1oYXNoaW5nLXRoZS1vcHRpbWl6YXRpb24tdGhhdC10aGUtd29ybGQtZm9yZ290LW9yLWEtYmV0dGVyLWFsdGVybmF0aXZlLXRvLWludGVnZXItbW9kdWxvLw==" title="https://probablydance.com/2018/06/16/fibonacci-hashing-the-optimization-that-the-world-forgot-or-a-better-alternative-to-integer-modulo/">https://probablydance.com/2018/06/16/fibonacci-hashing-the-optimization-that-the-world-forgot-or-a-better-alternative-to-integer-modulo/<i class="fa fa-external-link"></i></span></p>
<p><br></p>
<h1 id="Static-Hashing-Schemes"><a href="#Static-Hashing-Schemes" class="headerlink" title="Static Hashing Schemes"></a>Static Hashing Schemes</h1><p>Static Hashing Schemes正如staic所说，这种scheme下的hash table的容量是固定的。如果我们需要在hash的同时，发现容量不够，只能resize到更大的容量，这是我们需要将所有的key再重新hash进扩大容量的hash table。这种resize在static hashing scheme意味者rehashing，这个操作对性能来说是灾难级别的。很显然如果我们能一开始就知道<strong>合适的容量</strong>,　就能直接避免这部分的浪费时间。如何寻找合适的容量，我们可以进行cardinality estimation基数估计。这个部分后面会提到。<!-- TODO: --></p>
<blockquote>
<p>A static hashing scheme is one where the size of the hash table is fixed. This means that if the DBMS runs out of storage space in the hash table, then it has to rebuild it from scratch with a larger table. Typically the new hash table is twice the size of the original hash table.</p>
</blockquote>
<p><img data-src="/images/CMU1544564/Lec06/16.jpg" alt="16.jpg"></p>
<h2 id="Linear-Probe-Hashing"><a href="#Linear-Probe-Hashing" class="headerlink" title="Linear Probe Hashing"></a>Linear Probe Hashing</h2><p>Linear Probe Hashing是open address hashing的一种。</p>
<p>Linear Probing方式虽然简单，但并不是解决冲突的最好的策略，因为它会导致<strong>同类哈希的聚集(Primary Clustering)</strong>。这导致搜索哈希表时，冲突依然存在。如果我们要访问 Edward 的信息，因为 Edward 的社保号 111-00-1235 哈希为 1235，然而我们在 1235 位置找到的是 Bob，所以再搜索 1236，找到的却是 Danny，以此类推直到找到 Edward。<sup><a href="#fn2">2</a></sup></p>
<p><img data-src="/images/CMU1544564/Lec06/17.jpg" alt="17.jpg"></p>
<blockquote>
<ul>
<li>To see if value is present, go to slot using hash, and scan for the key. The scan stops if you find the desired key or you encounter an empty slot.</li>
</ul>
</blockquote>
<h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p>hash table存储不仅仅是<code>value</code>，而是<code>(key, value)</code>这一对。这是因为Linear Probe Hashing会遇到冲突，在查询时需要比较key来确定是否找到(key相等)或者只是一次冲突(key不相等)。</p>
<p><img data-src="/images/CMU1544564/Lec06/18.jpg" alt="18.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/19.jpg" alt="19.jpg"></p>
<p>下图中C和A的hash位置相同(冲突), 我们将C写在A的后面，并A连接C：<br><img data-src="/images/CMU1544564/Lec06/20.jpg" alt="20.jpg"></p>
<p>下图中D和C的hash位置相同(冲突), 我们将D写在C的后面，并C连接D：<br><img data-src="/images/CMU1544564/Lec06/21.jpg" alt="21.jpg"></p>
<p>下图中E和A/C的hash位置相同(冲突), 我们将E写在C的后面，<strong>但是C后面被D占有了</strong>，所有将E写在D后面,并D连接E：<br><img data-src="/images/CMU1544564/Lec06/22.jpg" alt="22.jpg"></p>
<p>下图中F和E的hash位置相同(冲突), 我们将F写在E的后面，并E连接F：<br><img data-src="/images/CMU1544564/Lec06/23.jpg" alt="23.jpg"></p>
<h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><h4 id="Delete-C"><a href="#Delete-C" class="headerlink" title="Delete C"></a>Delete C</h4><p>下图中我们想删除C, 我们已经见到C和A冲突。我们看第一个位置是key是A, 而A!=C, 然后往下看：<br><img data-src="/images/CMU1544564/Lec06/24.jpg" alt="24.jpg"></p>
<p>下图中，我们发现在第二个位置, hash table条目中的key是C，而我们就像删去C, C==C。这个条目被删除：<br><img data-src="/images/CMU1544564/Lec06/25.jpg" alt="25.jpg"></p>
<h4 id="Find-D-after-deletion-of-C"><a href="#Find-D-after-deletion-of-C" class="headerlink" title="Find D after deletion of C"></a>Find D after deletion of C</h4><p>下图中，我们想寻找D。由于之前D和C的hash位置相同(冲突)，而C已经被删除，D失去了和C的联系。导致我们不能找到D：<br><img data-src="/images/CMU1544564/Lec06/26.jpg" alt="26.jpg"></p>
<h5 id="Approach1-Tombstone"><a href="#Approach1-Tombstone" class="headerlink" title="Approach1: Tombstone"></a>Approach1: Tombstone</h5><p>解决上述问题的第一种方法是使用一个<em>墓碑</em>:　在上面的例子中，我们删除了C，但是留下了一个C的墓碑，墓碑依然保留着到D的联系链接。通过这个墓碑的链接我们可以找到D:<br><img data-src="/images/CMU1544564/Lec06/27.jpg" alt="27.jpg"></p>
<p>这种作法的缺点是：保存墓碑会占有空间。</p>
<h5 id="Approach2-Movement"><a href="#Approach2-Movement" class="headerlink" title="Approach2: Movement"></a>Approach2: Movement</h5><p>解决上述问题的第二种方法是<em>移动</em>：即删除一个条目之后，对hash table中和已被删除条目有联系的条目进行移动，移动至正确的地方。</p>
<p>下面的例子中，只能移动和已被删除<strong>有联系的条目</strong> (B和F并不曾碰撞冲突，但是B在如下例子不应该被移动):</p>
<p><img data-src="/images/CMU1544564/Lec06/28.jpg" alt="28.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/29.jpg" alt="29.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/30.jpg" alt="30.jpg"></p>
<p>下图中检查B是否和被删除的条目C存在联系，发现B就在它自己应该在的地方，而和其他条目无任何联系，因次不移动B。<strong>无视那个从上到下的箭头</strong>:<br><img data-src="/images/CMU1544564/Lec06/31.jpg" alt="31.jpg"></p>
<p>这种作法的缺点是:删除会变得非常麻烦。</p>
<p><br></p>
<p>这里提一下，在hash join中，我们只用insert和find这两个函数，而不用delete。对于hash join这中操作可以无视删除会导致的缺点。</p>
<p>但是在index索引中，insert, find, delete这些操作都被需要。</p>
<h3 id="Non-Unique-Keys"><a href="#Non-Unique-Keys" class="headerlink" title="Non-Unique Keys"></a>Non-Unique Keys</h3><p>有两种处理<strong>重复key</strong>的方式:</p>
<ul>
<li>value list存储重复key所拥有的value</li>
<li>存储key和value，这样即使key重复,value值也不一样。<strong>这种方式更加常见。</strong><br><img data-src="/images/CMU1544564/Lec06/32.jpg" alt="32.jpg"></li>
</ul>
<p><br></p>
<h2 id="Robin-Hood-Hashing"><a href="#Robin-Hood-Hashing" class="headerlink" title="Robin Hood Hashing"></a>Robin Hood Hashing</h2><p>Robin Hood Hashing和Linear Probe Hashing相比，更可以去平衡冲突，让冲突的key离它应该拥有的位置(optimal position)近一些。正如它的名字一样，罗宾汉，劫富济贫，解决badcase。</p>
<p><img data-src="/images/CMU1544564/Lec06/33.jpg" alt="33.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/34.jpg" alt="34.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/35.jpg" alt="35.jpg"></p>
<p>下图中, C与A冲突于红色箭头所指的位置。</p>
<ul>
<li>这时A离它的optimal postion距离为0, C离它的optimal postion距离为0。两值相等，C不能获得A的位置。</li>
<li>C获得A后面空的位置，C离它的optimal postion距离为1：<br><img data-src="/images/CMU1544564/Lec06/36.jpg" alt="36.jpg"></li>
</ul>
<p><br></p>
<p>下图中, D与C冲突于红色箭头所指的位置。</p>
<ul>
<li>这时C离它的optimal postion距离为1, D离它的optimal postion距离为0。D的距离值小于C的距离值，D不能获得C的位置。</li>
<li>D获得C后面空的位置，D离它的optimal postion距离为1：<br><img data-src="/images/CMU1544564/Lec06/37.jpg" alt="37.jpg"></li>
</ul>
<p><br></p>
<p><strong>下两张图中</strong>, E与A冲突于红色箭头所指的位置。</p>
<ul>
<li>这时A离它的optimal postion距离为0, E离它的optimal postion距离为0。两值相等，E不能获得A的位置。</li>
<li>E获得A后面空的位置，然后E与C冲突。</li>
<li>这时C离它的optimal postion距离为1, E离它的optimal postion距离为1。两值相等，E不能获得C的位置。</li>
<li>E获得C后面空的位置，然后E与D冲突。这时D离它的optimal postion距离为1, E离它的optimal postion距离为2。<strong>E的距离值大于D的距离值，E获得D的位置。</strong></li>
<li>D只能向后移动，同时也更新自己离自己optimal position的距离:<br><img data-src="/images/CMU1544564/Lec06/38.jpg" alt="38.jpg"></li>
</ul>
<p><img data-src="/images/CMU1544564/Lec06/39.jpg" alt="39.jpg"></p>
<p><br></p>
<p>下图中, F与D冲突于红色箭头所指的位置。</p>
<ul>
<li>这时D离它的optimal postion距离为2, F离它的optimal postion距离为1。F的距离值小于D的距离值，F不能获得D的位置。</li>
<li>F获得D后面空的位置，F离它的optimal postion距离为1：<br><img data-src="/images/CMU1544564/Lec06/40.jpg" alt="40.jpg"></li>
</ul>
<p><br></p>
<p>我们比较一下结果：</p>
<ul>
<li>Linear Probe Hashing: D在E的上面。D离自己optimal position距离为1,E离自己optimal position距离为3。</li>
<li>Robin Hood Hashing:　E在D的上面。D离自己optimal position距离为2,E离自己optimal position距离为2。</li>
</ul>
<p>Robin Hood Hashing平均了一下各个key离自己optimal position的距离。但是它在insert的时候，有可能会调整其他条目的位置, 在我们的例子中，在insert E的时候调整了D的位置。说明它会需要更多write operation的次数，另外在insert的时候它也有更多条件需要检查，这会造成更多的branch miss prediction。</p>
<p>实际实现上Linear Probe Hashing更为常见。</p>
<p><br></p>
<h2 id="Cuckoo-Hashing"><a href="#Cuckoo-Hashing" class="headerlink" title="Cuckoo Hashing"></a>Cuckoo Hashing</h2><p>Cuckoo Hashing使用多个hash table, 每个hash table拥有自己的hash function (hash function seed)。我们下面的例子是用两个表，当然也可以用三个来实现Cuckoo Hashing。</p>
<blockquote>
<p>The hash functions are the same algorithm (e.g., XXHash, CityHash); they generate different hashes for the same key by using different seed values.</p>
</blockquote>
<p>insert: </p>
<ul>
<li>总向有空位置(optimal position)的hash table插入。如果多个hash table都有空位置可以插入，随意选择其中的一个即可。</li>
<li>如果所有的hash table都没有空位置可以插入。随机选择一个hash table中对应的位置插入,　并取出原来在这位置上的key, 将它insert到其他的hash table。</li>
</ul>
<p>优点是查询快，路径短，最多两次就能查询到。</p>
<p>缺点是插入性能差，在容量小的情况下很容易冲突。连锁的冲突会陷入死循环, 解决只能增加容量并且rehash。</p>
<p><img data-src="/images/CMU1544564/Lec06/41.jpg" alt="41.jpg"></p>
<p>下图中，A对应的位置都是空的，A可以被插入至任何一个hash table，例子中选择了#1:<br><img data-src="/images/CMU1544564/Lec06/42.jpg" alt="42.jpg"></p>
<p><br></p>
<p>下图中，B对应的位置只有在#2是空的，那么插入至#2:<br><img data-src="/images/CMU1544564/Lec06/43.jpg" alt="43.jpg"></p>
<p><br></p>
<p>下面几张图中，</p>
<ul>
<li>C对应的位置<strong>都不是空的</strong>，C可以选择任何一个hash table，代替占有位置的key，例子中选择了#2, 即代替了B</li>
<li>B被rehash到#1，在#1中B对应的位置也不是空的，B代替占有位置的key A</li>
<li>A被rehash到#2, 在#2中对应的位置是空的：<br><img data-src="/images/CMU1544564/Lec06/44.jpg" alt="44.jpg"></li>
</ul>
<p><img data-src="/images/CMU1544564/Lec06/45.jpg" alt="45.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/46.jpg" alt="46.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/47.jpg" alt="47.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/48.jpg" alt="48.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/49.jpg" alt="49.jpg"></p>
<p><br></p>
<p>在Cuckoo Hashing中<strong>有可能不终止</strong>，即进入一个死循环，永远找不到能插入的地方。这时候说明hash table容量太小，需要<code>resize</code>到更大的容量。</p>
<blockquote>
<p> If we find a cycle, then we can rebuild all of the hash tables with new hash function seeds (less common) or rebuild the hash tables using larger tables (more common).</p>
</blockquote>
<h1 id="Dynamic-Hashing-Schemes"><a href="#Dynamic-Hashing-Schemes" class="headerlink" title="Dynamic Hashing Schemes"></a>Dynamic Hashing Schemes</h1><p>Dynamic Hashing Schemes的特征就是在能持续容量增长，而不需要额外rehash。即resize的操作花销不大。</p>
<p><img data-src="/images/CMU1544564/Lec06/50.jpg" alt="50.jpg"></p>
<h2 id="Chained-Hashing"><a href="#Chained-Hashing" class="headerlink" title="Chained Hashing"></a>Chained Hashing</h2><p>Chained Hashing又称Hashing with Chaining。特征是每一个hash table中的条目都是一个linked list of bucket。如果bucket满了，那就再指向一个新的bucket。</p>
<p><strong>这里的bucket可以具象成一个page。</strong></p>
<p>优点是实现简单，不需要resize。</p>
<p>缺点是每一个linked list如果很长, 就变成$O(n)$。</p>
<p><img data-src="/images/CMU1544564/Lec06/51.jpg" alt="51.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/52.jpg" alt="52.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/53.jpg" alt="53.jpg"></p>
<h2 id="Extendible-Hashing"><a href="#Extendible-Hashing" class="headerlink" title="Extendible Hashing"></a>Extendible Hashing</h2><ul>
<li>global <code>n bit</code>: 指key中前n个bit是对左侧directory有效。</li>
<li>local <code>m bit</code>: 指global中<code>n bit</code>中的前<code>m</code>个bit<strong>在这一个bucket</strong>有效。</li>
<li>$n \geq m$恒成立</li>
<li>如果local bucket满了(overflow)，那就增加一个local bit去容纳更多。如果$n=m$，那就先增加一个global bit，再增加local bit。使$n \geq m$条件依然成立</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec06/54.jpg" alt="54.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/55.jpg" alt="55.jpg"></p>
<h3 id="Find-A"><a href="#Find-A" class="headerlink" title="Find A"></a>Find A</h3><p><img data-src="/images/CMU1544564/Lec06/56.jpg" alt="56.jpg"></p>
<h3 id="Insert-B-No-Overflow"><a href="#Insert-B-No-Overflow" class="headerlink" title="Insert B - No Overflow"></a>Insert B - No Overflow</h3><p><img data-src="/images/CMU1544564/Lec06/57.jpg" alt="57.jpg"></p>
<h3 id="Insert-C-Overflow"><a href="#Insert-C-Overflow" class="headerlink" title="Insert C - Overflow"></a>Insert C - Overflow</h3><p>C对应的local bucket已经满了，另外local bit = global bit = 2</p>
<p>我们正如前面介绍的，先增加global bit到3, 再将local bit增加到3, 最后insert C。</p>
<p><img data-src="/images/CMU1544564/Lec06/58.jpg" alt="58.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/59.jpg" alt="59.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/60.jpg" alt="60.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/61.jpg" alt="61.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/62.jpg" alt="62.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/63.jpg" alt="63.jpg"></p>
<p>这里有一个上课问题引发的讨论。结果是extendible hash table的<code>resize</code>操作是很简单廉价的。左侧的directory是一个array of pointer或者array of page id。用latch保护这个array,　然后扩大它的容量，复制原来的内容进入以后，就可以解开latch了。这个过程不涉及rehash和大量的数据复制，因此很快速。</p>
<!-- TODO: TUM GDB 题目 -->
<h2 id="Linear-Hashing"><a href="#Linear-Hashing" class="headerlink" title="Linear Hashing"></a>Linear Hashing</h2><p>Linear Hashing的目的是不在<code>resize</code>的时候用一个global latch，来提高性能。我们可以从下面例子中看出，在Linear Hashing中只需要去latch一个位置, 即<code>split pointer</code>所指的地方。</p>
<p>作法是按照<em>顺序</em>去分裂bucket，而不是分裂特定满的bucket。顺序实际上只是bucket id顺序，有一个<code>split pointer</code>去跟踪下一个需要分裂的bucket。而且Linear Hashing使用多个hash function。</p>
<blockquote>
<p>Instead of immediately splitting a bucket when it overflows, this scheme maintains a split pointer that keeps track of the next bucket to split. No matter whether this pointer is pointing to the bucket that overflowed, the DBMS always splits. The overflow criterion is left up to the implementation</p>
</blockquote>
<p>具体描述和和Java实现，见一篇别人的博客: <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wYmYyNDAwNzg2ZjY=" title="https://www.jianshu.com/p/0bf2400786f6">https://www.jianshu.com/p/0bf2400786f6<i class="fa fa-external-link"></i></span></p>
<p><img data-src="/images/CMU1544564/Lec06/64.jpg" alt="64.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/65.jpg" alt="65.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/66.jpg" alt="66.jpg"></p>
<h3 id="Find-6"><a href="#Find-6" class="headerlink" title="Find 6"></a>Find 6</h3><p><img data-src="/images/CMU1544564/Lec06/67.jpg" alt="67.jpg"></p>
<p><br></p>
<h3 id="Insert-17-Overflow"><a href="#Insert-17-Overflow" class="headerlink" title="Insert 17 - Overflow"></a>Insert 17 - Overflow</h3><ul>
<li>Overflow的bucket后面会生成一个新的bucket。</li>
<li><code>split pointer</code>所指的bucket会进行分裂，分裂成两个bucket，原内容重新用新的hash function，再分配原内容到新旧两个bucket。下面例子中:<ul>
<li>$\mathrm{hash_2}(8) = 8 \% 8 = 0 \; \rightarrow \mathrm{bucket_0}$</li>
<li>$\mathrm{hash_2}(20) = 20 \% 8 = 4 \; \rightarrow \mathrm{bucket_4}$</li>
</ul>
</li>
<li>分裂完以后，<code>split pointer</code>指向下一个bucket(bucket id)。</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec06/68.jpg" alt="68.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/69.jpg" alt="69.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/70.jpg" alt="70.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/71.jpg" alt="71.jpg"></p>
<p><br></p>
<h3 id="Find-20"><a href="#Find-20" class="headerlink" title="Find 20"></a>Find 20</h3><ul>
<li>先应用$\mathrm{hash_1}$</li>
<li>$\mathrm{hash_1}$的结果是0, 0这个位置<strong>高于</strong><code>split pointer</code>, 说明0这个位置已经分裂过了。需要再应用$\mathrm{hash_2}$</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec06/72.jpg" alt="72.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/73.jpg" alt="73.jpg"></p>
<p><br></p>
<h3 id="Find-9"><a href="#Find-9" class="headerlink" title="Find 9"></a>Find 9</h3><ul>
<li>先应用$\mathrm{hash_1}$</li>
<li>$\mathrm{hash_1}$的结果是1, 1这个位置<strong>没有高于</strong><code>split pointer</code>, 说明1这个位置没有分裂过了。不需要再应用$\mathrm{hash_2}$</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec06/74.jpg" alt="74.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/75.jpg" alt="75.jpg"></p>
<p><br></p>
<h3 id="Delete-20"><a href="#Delete-20" class="headerlink" title="Delete 20"></a>Delete 20</h3><p>这个例子中，分裂出的bucket因为删除的原因变成了空bucket。这时候可以回收这个bucket，同时是逆操作之前的分裂步骤，需要将<code>split pointer</code>向上移动。</p>
<p><img data-src="/images/CMU1544564/Lec06/76.jpg" alt="76.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/77.jpg" alt="77.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/78.jpg" alt="78.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/79.jpg" alt="79.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/80.jpg" alt="80.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/81.jpg" alt="81.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/82.jpg" alt="82.jpg"></p>
<h3 id="Insert-21"><a href="#Insert-21" class="headerlink" title="Insert 21"></a>Insert 21</h3><p>这里也视作一个overflow。</p>
<p><img data-src="/images/CMU1544564/Lec06/83.jpg" alt="83.jpg"></p>
<p><br></p>
<p>当<code>split point</code>指向4的时候，即分裂完一轮了，当前 # bucket=8。把<code>split point</code>重置成0，<strong>开始下一轮</strong>，每轮的bucket数翻倍，所以hash函数中的取余的数也要翻倍。这样就实现了动态扩展。<sup><a href="#fn1">1</a></sup></p>
<blockquote>
<p>When pointer reaches last slot, delete original hash function and replace it with new hash function.</p>
</blockquote>
<p><br></p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p><img data-src="/images/CMU1544564/Lec06/84.jpg" alt="84.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec06/85.jpg" alt="85.jpg"></p>
<p>引用:</p>
<p><a name="fn1">1</a>: CMU Database Systems - Indexes - fxjwind: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZnhqd2luZC9wLzEwODM0ODQ0Lmh0bWw=" title="https://www.cnblogs.com/fxjwind/p/10834844.html">https://www.cnblogs.com/fxjwind/p/10834844.html<i class="fa fa-external-link"></i></span></p>
<p><a name="fn1">2</a>: CMU 15445 5. hash 表 - 西部小笼包: <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wYmYyNDAwNzg2ZjY=" title="https://www.jianshu.com/p/0bf2400786f6">https://www.jianshu.com/p/0bf2400786f6<i class="fa fa-external-link"></i></span></p>
<p>推荐阅读:</p>
<p>Lec 13 Cuckoo Hashing - CS166 Stanford: <span class="exturl" data-url="aHR0cHM6Ly93ZWIuc3RhbmZvcmQuZWR1L2NsYXNzL2NzMTY2L2xlY3R1cmVzLzEzL1NtYWxsMTMucGRm" title="https://web.stanford.edu/class/cs166/lectures/13/Small13.pdf">https://web.stanford.edu/class/cs166/lectures/13/Small13.pdf<i class="fa fa-external-link"></i></span></p>
<p>Extendible Hashing Example: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY29zYy5icm9ja3UuY2EvfmVmb3h3ZWxsLzJQMDMvc2xpZGVzL1dlZWsxMlNsaWRlcy5wZGY=" title="https://www.cosc.brocku.ca/~efoxwell/2P03/slides/Week12Slides.pdf">https://www.cosc.brocku.ca/~efoxwell/2P03/slides/Week12Slides.pdf<i class="fa fa-external-link"></i></span></p>
<p>LINEAR HASHING - QuePer: <span class="exturl" data-url="aHR0cDovL3F1ZXBlci5pbi9kcnVwYWwvYmxvZ3MvZGJzeXMvbGluZWFyX2hhc2hpbmc=" title="http://queper.in/drupal/blogs/dbsys/linear_hashing">http://queper.in/drupal/blogs/dbsys/linear_hashing<i class="fa fa-external-link"></i></span></p>
<!-- TODO: --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CMU-15445</category>
        <category>Access Methods</category>
        <category>Hash Table</category>
        <category>Indexing</category>
      </categories>
      <tags>
        <tag>Indexing</tag>
        <tag>Hash Function</tag>
        <tag>Hash Scheme</tag>
        <tag>Static Hashing Scheme</tag>
        <tag>Linear Probe Hashing</tag>
        <tag>Robin Hood Hashing</tag>
        <tag>Cuckoo Hashing</tag>
        <tag>Dynamic Hashing Scheme</tag>
        <tag>Chained Hashing</tag>
        <tag>Extendible Hashing</tag>
        <tag>Linear Hashing</tag>
      </tags>
  </entry>
  <entry>
    <title>[CMU-15445]Lec05 Buffer Pools - 数据库缓存区</title>
    <url>/2020/03/17/CMU-15445-Lec05/</url>
    <content><![CDATA[<p>Buffer Pools - 数据库缓存区</p>
<p>Slide: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA1LWJ1ZmZlcnBvb2wucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/slides/05-bufferpool.pdf">https://15445.courses.cs.cmu.edu/fall2019/slides/05-bufferpool.pdf<i class="fa fa-external-link"></i></span><br>Note: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDUtYnVmZmVycG9vbC5wZGY=" title="https://15445.courses.cs.cmu.edu/fall2019/notes/05-bufferpool.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/05-bufferpool.pdf<i class="fa fa-external-link"></i></span><br>Readings: Chapter 10.5-10.8</p>
<p>这节两课，我们会学习数据库的缓存区管理，这部分基于前面两节课(Storage I和Storage II)。</p>
<p>缓存区buffer pool就是在内存中对page的缓存(cache)。</p>
<a id="more"></a>
<p><img data-src="/images/CMU1544564/Lec05/1.jpg" alt="1.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/6.jpg" alt="6.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/7.jpg" alt="7.jpg"><br>上图中</p>
<ul>
<li>spatial control 空间控制: 物理(physically)上我们需要把有互相依赖的page写在硬盘中很近的位置。在我们使用这些page的时候，可以很快完成硬盘的寻址，sequantial I/O获得这些page。</li>
<li>temporal contral 时间控制: 我们需要最大化每一个page的左右，最小化花在I/O操作上的时间。</li>
</ul>
<p><br></p>
<p><img data-src="/images/CMU1544564/Lec05/8.jpg" alt="8.jpg"></p>
<ul>
<li>上图我们已经在<a href="https://cakebytheoceanluo.github.io/2020/03/11/CMU-15445-Lec03/#Demo">Lec03 - System Design Goals (in Disk-oriented databases) - Demo</a>见过</li>
</ul>
<p><br></p>
<p><img data-src="/images/CMU1544564/Lec05/9.jpg" alt="9.jpg"></p>
<h1 id="Buffer-Pool-Manager"><a href="#Buffer-Pool-Manager" class="headerlink" title="Buffer Pool Manager"></a>Buffer Pool Manager</h1><h2 id="Buffer-Pool-Organization-Demo"><a href="#Buffer-Pool-Organization-Demo" class="headerlink" title="Buffer Pool Organization - Demo"></a>Buffer Pool Organization - Demo</h2><p>和操作系统中的概念一样，我们将硬盘上的block成为page, 将内存(buffer pool)中的block称为frame，frame可以容纳page。</p>
<p><code>pin(int pageid)</code>这个函数就代表了之前的<code>get page</code>这个操作。这个函数之后我们可以获得一个指向这个page数据的指针。我们使用完这个page之后，需要<code>unpin(int pageid)</code>。</p>
<p>在下面3张图中：</p>
<ul>
<li>一开始buffer pool是空的</li>
<li>然后我们<code>pin(pageid 1)</code>, page1被加载进入buffer pool</li>
<li>然后我们<code>pin(pageid 3)</code>, page3被加载进入buffer pool</li>
<li>我们会在后面看到一个page table，他负责告诉我们page和frame的对应，例如：page1在frame1, page3在frame2</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec05/10.jpg" alt="10.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/11.jpg" alt="11.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/12.jpg" alt="12.jpg"></p>
<p><br></p>
<h2 id="Buffer-Pool-Metadata-Demo"><a href="#Buffer-Pool-Metadata-Demo" class="headerlink" title="Buffer Pool Metadata - Demo"></a>Buffer Pool Metadata - Demo</h2><p>这个Demo基于上一个Demo。 我们在这里讨论缓存区的metadata, 它们是管理区的管理信息。</p>
<ul>
<li>page table (也和操作系统中概念类似，只是不需要MMU, TLB)是一个in-memory hashtable, 负责 <code>page id -&gt; frame id</code>的映射，例如：page1在frame1, page3在frame2。</li>
<li>dirty flage: 告诉我们一个buffer pool中的frame是否被改写。如果被改写，即page上出现新数据，需要被写回至硬盘。</li>
<li>pin / reference counter: 对一个page当前使用的thread数进行计数。我们只允许将此数字为0的page写回硬盘，即当前没有任何thread在使用此page。</li>
</ul>
<p>这个Demo中很生动地表达了，如何在多线程的情况下，向buffer pool中加载一个新的page:</p>
<ul>
<li>首先我们<code>pin(pageid 2)</code>，但是我们在page table中找不到对应，这时是一个page fault, 说明我们需要从硬盘中加载这个page2</li>
<li>这时我们给page table上一个global latch，确保我们在整个过程中，没有其他线程会改变这个page table(比如加载page, 移除page)</li>
<li>确认获得global latch之后，我们向buffer pool加载这个page2, 同时也更新page table等metadata</li>
<li>整个过程结束后，我们松开global latch。这样整个过程中，只有我们这个当前线程更改了page table。</li>
<li>其他metadata是否也需要线程安全，取决于具体实现。</li>
</ul>
<p><br></p>
<ul>
<li>上述中可以不用global latch。而只是给对应的slot来一个latch。保证在过程中，没有其他人会读或者写这个slot。这样依旧是一种线程安全的实现。另外相对性能更好。</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec05/13.jpg" alt="13.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/14.jpg" alt="14.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/15.jpg" alt="15.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/16.jpg" alt="16.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/17.jpg" alt="17.jpg"></p>
<p><br></p>
<h2 id="Locks-vs-Latches-2"><a href="#Locks-vs-Latches-2" class="headerlink" title="Locks vs. Latches 2"></a>Locks vs. Latches <sup><a href="#fn2">2</a></sup></h2><ul>
<li>locks是一个high level 很抽象的概念, 它直接和transaction事务相关，应用于事务的lock protocol中。是应用层面的。是逻辑内容的互斥，比如行，表，事务。</li>
<li>latch基本上和low level实现相关，指<code>std::mutex</code>这类和代码相关的类(class)，来保护代码中的critical section。是应用不可见的，内部数据的互斥。</li>
<li>(这部分我们以后还会提到)<!-- TODO: --></li>
</ul>
<p><img data-src="/images/CMU1544564/Lec05/18.jpg" alt="18.jpg"></p>
<h2 id="Page-Table-vs-Page-Directory"><a href="#Page-Table-vs-Page-Directory" class="headerlink" title="Page Table vs. Page Directory"></a>Page Table vs. Page Directory</h2><ul>
<li>在<a href="https://cakebytheoceanluo.github.io/2020/03/11/CMU-15445-Lec03/#Page-Directory">[CMU-15445]Lec03 - Database Storage - Database Heap - Page Directory</a>文章中我们已经提到了 page directory, 它是一个特殊的page, 记录了page对应文件的位置，因此这个page directory也会以page的方式从硬盘读取到内存，最后从内存写回至硬盘。即它是持久化的(persistent, durable)。</li>
<li>page table 只是一个<code>page id -&gt; frame id</code>的映射, 具体是一个<code>page id -&gt; frame pointer</code>的hash table，指针的位置只是在本次启动有效，因为关机重启后，我们会allocate另一块内存区域给数据库buffer pool。这类完全依赖内存的数据结构(in-memory data structure)没有意义去存到硬盘上。</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec05/19.jpg" alt="19.jpg"></p>
<h2 id="Allocation-Policies"><a href="#Allocation-Policies" class="headerlink" title="Allocation Policies"></a>Allocation Policies</h2><ul>
<li>global policies: 指所有query, transaction使用同一个buffer pool的replacement policy</li>
<li>local policies: 指每一个query, transaction可以有一个自己的buffer pool， 和自己的replacement policy。同时可以在一个共有的buffer pool去share pages</li>
<li>实际上会混合这两种主意， 比如数据table拥有一个buffer pool, index(索引数据结构)拥有另一个buffer pool。这个我们会在index的课上提到。</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec05/20.jpg" alt="20.jpg"></p>
<p><br><br><br></p>
<h1 id="Buffer-Pool-Optimizations"><a href="#Buffer-Pool-Optimizations" class="headerlink" title="Buffer Pool Optimizations"></a>Buffer Pool Optimizations</h1><p><img data-src="/images/CMU1544564/Lec05/21.jpg" alt="21.jpg"></p>
<h2 id="Multiple-Buffer-Pools"><a href="#Multiple-Buffer-Pools" class="headerlink" title="Multiple Buffer Pools"></a>Multiple Buffer Pools</h2><p>见<a href="#allocation-policies">Allocation Policies</a>中提到了部分Local Policies。</p>
<p><img data-src="/images/CMU1544564/Lec05/22.jpg" alt="22.jpg"></p>
<p>另外这部分不知道为何没有课件， 我截图了视频来作为缺失的课件。</p>
<ul>
<li>Approach2 Hashing: 用一个hash function: <code>RID -&gt; buffer pool id</code>, 把有相同hash value的tuple分配到同一个buffer pool，提高buffer pool中的spatial locality(空间局部性)。(类似hash join)</li>
</ul>
<p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec05/missing_1.png" alt="Lec5_missing_1.jpg"></p>
<p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec05/missing_2.png" alt="Lec5_missing_2.jpg"></p>
<p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec05/missing_3.png" alt="Lec5_missing_3.jpg"></p>
<h2 id="Pre-Fetching"><a href="#Pre-Fetching" class="headerlink" title="Pre-Fetching"></a>Pre-Fetching</h2><p>我们可以预加载一些page, 一个thread在对page A进行扫描计算的同时，另外一个thread可以将下一个page B加载到buffer pool中。这个方法，是用猜测或者预先的只是，去加载未来可能用得到的page, 最终目的减少从硬盘加载的时间。具体有两种情况，根据这个<strong>下一个page</strong>是哪一个:</p>
<ul>
<li>Sequential Scans: 即物理上连续存储的下一个page</li>
<li>Index Scans: </li>
</ul>
<h3 id="Sequential-Scans"><a href="#Sequential-Scans" class="headerlink" title="Sequential Scans"></a>Sequential Scans</h3><p><img data-src="/images/CMU1544564/Lec05/23.jpg" alt="23.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/24.jpg" alt="24.jpg"></p>
<p>Q1在扫描page1的时候，buffer pool manager发现这是一个sequenial scan，决定pre fetch后面的page，所以在同时将page2,3加载进buffer pool。理想的话，等Q1结束对page1的扫描，page2,3就已经在buffer pool，相当于没有收到page fault的影响，没有浪费时间等待。</p>
<p><img data-src="/images/CMU1544564/Lec05/25.jpg" alt="25.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/26.jpg" alt="26.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/27.jpg" alt="27.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/28.jpg" alt="28.jpg"></p>
<h3 id="Index-Scans"><a href="#Index-Scans" class="headerlink" title="Index Scans"></a>Index Scans</h3><p>这里的index是一个B+ Tree， 具体作法是从根节点查找至叶子节点，再水平遍历有关的叶子节点。这时候我们需要的page不一定是物理上连续存储的：</p>
<p><img data-src="/images/CMU1544564/Lec05/29.jpg" alt="29.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/30.jpg" alt="30.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/31.jpg" alt="31.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/32.jpg" alt="32.jpg"></p>
<p><br></p>
<p>下图中很明显表达，我们接下面需要的是page3和page5, 它们不是连续的，也不紧跟在page1(当前page)之后。 但是index这个数据结构告诉我们，下一步是page3和page5被需要，因此去pre fetch它们俩。这里也是一个很明显的例子，操作系统在这一点帮不了我们，操作系统最多能帮我们pre fetch连续的page，但是它不知道index的存在，没有办法帮助我们准确去得到page3和page5：<br><img data-src="/images/CMU1544564/Lec05/33.jpg" alt="33.jpg"></p>
<h2 id="Scan-Sharing"><a href="#Scan-Sharing" class="headerlink" title="Scan Sharing"></a>Scan Sharing</h2><ul>
<li>Scan Sharing: reuse data retrieved from storage or operator computations， 即使用其他正在运行的query的中间过程值</li>
<li>result caching: 只是缓存最终结果值，而不是中间过程值</li>
</ul>
<p>具体流程：</p>
<ul>
<li>第一个Query已经在运行，有一些中间过程值</li>
<li>第二个Query开始运行，DBMS发现这第二个Query可以公用第一个Query的值，而且它们俩需要扫描的范围一样。</li>
<li>DBMS将第二个Query attch进第一个Query, 记录下第二个Query被attach的地方, 让它们俩一起扫描。</li>
<li>等它们俩共同扫描结束后，再扫描一开始第二个Query跳过的地方。</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec05/34.jpg" alt="34.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/35.jpg" alt="35.jpg"></p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>Q1需要扫描所有的page, 将val不断累加。</p>
<p><img data-src="/images/CMU1544564/Lec05/36.jpg" alt="36.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/37.jpg" alt="37.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/38.jpg" alt="38.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/39.jpg" alt="39.jpg"></p>
<p><br><br><br></p>
<p>在Q1扫描至page3的时候，Q2加入。很巧，Q2也需要扫描所有的page, 将val不断累加。这说明Q2已加入就可以使用Q1的中间结果，并且可以和Q1结合在一起扫描剩下的page：<br><img data-src="/images/CMU1544564/Lec05/40.jpg" alt="40.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/41.jpg" alt="41.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/42.jpg" alt="42.jpg"></p>
<p><br><br><br></p>
<p>Q1结束后， 这个例子中，Q2还需要扫描它没有扫描过的page， 因为Q2计算平均值， 需要知道每一个page上tuple的个数。</p>
<p><img data-src="/images/CMU1544564/Lec05/43.jpg" alt="43.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/44.jpg" alt="44.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/45.jpg" alt="45.jpg"></p>
<p>我们也想象一下，如果没有scan sharing这个feature， Q1和Q2相互竞争buffer pool会导致这两个Query性能都很差。</p>
<h2 id="Buffer-Pool-Bypass"><a href="#Buffer-Pool-Bypass" class="headerlink" title="Buffer Pool Bypass"></a>Buffer Pool Bypass</h2><p>sequantial scan会将大部分page加载进buffer pool, 而这些page又并不一定在未来会被重复利用。对这种sequantial scan的Query，我们可以单独给allocate一块内存区域，而独立于且不影响buffer pool。这一块专属的内存区域依然能保证对当前Query的性能，而且因为不会<em>打乱污染</em>buffer pool而影响其他Query的性能。这块内存区域会在该sequantial scan Query结束后被释放。</p>
<p><img data-src="/images/CMU1544564/Lec05/46.jpg" alt="46.jpg"></p>
<ul>
<li>Light Scans: <span class="exturl" data-url="aHR0cHM6Ly93d3cuaWJtLmNvbS9zdXBwb3J0L2tub3dsZWRnZWNlbnRlci9lbi9TU0dVOEdfMTIuMS4wL2NvbS5pYm0ucGVyZi5kb2MvaWRzX3ByZl8yMzcuaHRt" title="https://www.ibm.com/support/knowledgecenter/en/SSGU8G_12.1.0/com.ibm.perf.doc/ids_prf_237.htm">https://www.ibm.com/support/knowledgecenter/en/SSGU8G_12.1.0/com.ibm.perf.doc/ids_prf_237.htm<i class="fa fa-external-link"></i></span></li>
</ul>
<p><br></p>
<h2 id="OS-Page-Cache"><a href="#OS-Page-Cache" class="headerlink" title="OS Page Cache"></a>OS Page Cache</h2><p><img data-src="/images/CMU1544564/Lec05/47.jpg" alt="47.jpg"></p>
<ul>
<li>O_DIRECT: <span class="exturl" data-url="aHR0cHM6Ly9saW51eC5kaWUubmV0L21hbi8yL29wZW4=" title="https://linux.die.net/man/2/open">https://linux.die.net/man/2/open<i class="fa fa-external-link"></i></span></li>
<li>大部分DBMS<strong>使用direct I/O</strong>，省去文件被加载入操作系统文件缓存区。direct I/O可以直接讲文件读取到数据库缓存区的address space。省去了从操作系统缓存区复制进数据库缓存区的address space，这样性能也更好。更多见<a href="https://cakebytheoceanluo.github.io/2020/03/11/CMU-15445-Lec03/#mmap">[CMU-15445]Lec03 - Why not use the OS? - mmap</a></li>
<li>也有其他的DBMS<strong>不使用direct I/O</strong>， 比如PostgreSQL。它们从工程的角度觉得不使用direct I/O更好：数据库buffer pool出现page fault的时候，如果对应的page在操作系统的文件缓存区中，那这时候只需要一次内存中的复制(从操作系统的文件缓存区复制到数据库buffer pool)，而不是去硬盘做漫长的I/O。比如PostgreSQL重启后buffer pool是空的，但是操作系统的page cache以及还是有对应文件，这时候可以从page cache中复制，避免冷启动。</li>
</ul>
<p>课上的PostgreSQL实验, 见<a href="https://cakebytheoceanluo.github.io/2020/03/17/DBMS-PostgreSQL-%E7%BC%93%E5%AD%98%E5%8C%BA%E7%AE%A1%E7%90%86BufferPool/">[DBMS][PostgreSQL] 缓存区管理 BufferPool</a></p>
<p><br></p>
<h2 id="Buffer-Replacement-Policies"><a href="#Buffer-Replacement-Policies" class="headerlink" title="Buffer Replacement Policies"></a>Buffer Replacement Policies</h2><p>这部分中的理论和操作系统中的页替换没有太大区别。</p>
<p><img data-src="/images/CMU1544564/Lec05/48.jpg" alt="48.jpg"></p>
<h3 id="Lest-Recently-Used-LRU"><a href="#Lest-Recently-Used-LRU" class="headerlink" title="Lest Recently Used (LRU)"></a>Lest Recently Used (LRU)</h3><p><img data-src="/images/CMU1544564/Lec05/49.jpg" alt="49.jpg"></p>
<h3 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h3><p>LRU需要获取真的timestamp，　而无论获取software timer或者hardware timer都是非常昂贵的，需要很多CPU周期。所有我们选用Clock, 它是LRU的一个近似(approximation), 它就去除了每一个page的timestamp属性。而Clock使用一个不准确的时间区间, 即reference至顺时针被选择。具体我们可以看下面的Demo:</p>
<p>下图我们访问page1, 它在我们buffer pool中，我们得到这个page, 也让它的ref＝1:<br><img data-src="/images/CMU1544564/Lec05/50.jpg" alt="50.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/51.jpg" alt="51.jpg"></p>
<p><br><br><br></p>
<p>然后我们需要加载一个新的page5,　要去除一个buffer pool中的page。指针指向的page1的ref=1, 它可以留在buffer pool, 并且ref=0, 指针指向下一个page:</p>
<p><img data-src="/images/CMU1544564/Lec05/52.jpg" alt="52.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/53.jpg" alt="53.jpg"></p>
<p><br><br><br></p>
<p>指针指向的page2的ref=0, 它不可以留在buffer pool：</p>
<p><img data-src="/images/CMU1544564/Lec05/54.jpg" alt="54.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/55.jpg" alt="55.jpg"></p>
<p><br><br><br></p>
<h3 id="Problem-Sequential-Flooding-顺序泛洪"><a href="#Problem-Sequential-Flooding-顺序泛洪" class="headerlink" title="Problem - Sequential Flooding 顺序泛洪"></a>Problem - Sequential Flooding 顺序泛洪</h3><p>LRU和Clock容易收到Sequential Flooding的影响。Sequential Flooding我们之前也间接的提到过，一个Query如果需要扫描所有的page, buffer pool会因为它的变得很乱，而最后留在buffer pool中的page也不一定对未来的Query有帮助。这里我们更严谨定义这个行为叫Sequential Flooding，最后留在buffer pool中的page是最近被使用过的(least recently used)，　但是它们实际上是最不需要的(most unneeded)。(这些page往往是硬盘上最后几个page)</p>
<p><img data-src="/images/CMU1544564/Lec05/58.jpg" alt="58.jpg"></p>
<p><br></p>
<p>下面是一个Demo。下面这个Demo中的问题可以换一个思路解决：每次把Q2带进来的page中page id最大的舍弃。</p>
<p><img data-src="/images/CMU1544564/Lec05/59.jpg" alt="59.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/60.jpg" alt="60.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/61.jpg" alt="61.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/62.jpg" alt="62.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/63.jpg" alt="63.jpg"></p>
<h3 id="LRU-K-1"><a href="#LRU-K-1" class="headerlink" title="LRU-K 1"></a>LRU-K <sup><a href="#fn1">1</a></sup></h3><p>LRU-K中的<code>K</code>代表<strong>最近使用的次数</strong>，因此LRU可以认为是LRU-1。LRU-K的主要目的是为了解决LRU算法”缓存污染”的问题，其核心思想是将“最近使用过1次”的判断标准<strong>扩展为“最近使用过K次”</strong>。</p>
<p>相比LRU，LRU-K需要多维护<strong>一个队列: 缓存队列。它用于记录所有缓存数据被访问的历史。只有当数据的访问次数达到K次的时候，才将数据放入缓存队列</strong>。当需要淘汰数据时，LRU-K会淘汰第K次访问时间距当前时间最大的数据。详细实现如下：</p>
<ol>
<li>数据第一次被访问，加入到访问<strong>历史队列</strong></li>
<li>如果数据在访问<strong>历史队列</strong>里后没有达到K次访问，则按照一定规则(FIFO，LRU)淘汰</li>
<li>当访问<strong>历史队列</strong>中的数据访问次数达到K次后，将数据索引从<strong>历史队列</strong>删除，将数据移到<strong>缓存队列</strong>中，并缓存此数据，<strong>缓存队列</strong>重新按照时间排序</li>
<li><strong>缓存队列</strong>中被再次访问后，重新排序</li>
<li>需要淘汰数据时，淘汰<strong>缓存队列</strong>中排在末尾的数据，即淘汰”倒数第K次访问离现在最久”的数据</li>
</ol>
<p>LRU-K具有LRU的优点，同时能够避免LRU的缺点，实际应用中LRU-2是综合各种因素后最优的选择，LRU-3或者更大的K值命中率会高，但适应性差，需要大量的数据访问才能将历史访问记录清除掉。</p>
<p>另外LRU-K对sequential scan<strong>不敏感</strong>，因为sequential scan只使用每个page一次。而使用一次的page在LRU-K非常容易被evict。</p>
<!-- TODO: TUM ModernDBS -->
<p><img data-src="/images/CMU1544564/Lec05/64.jpg" alt="64.jpg"></p>
<h3 id="Localization"><a href="#Localization" class="headerlink" title="Localization"></a>Localization</h3><p>这部分已经在这课中的实验中体现了：PostgreSQL给每一个Query一个独立的buffer pool， 同时所有Query公用一个shared buffer pool。这最大限度地减少了每个query对buffer pool的污染。</p>
<p><img data-src="/images/CMU1544564/Lec05/65.jpg" alt="65.jpg"></p>
<h3 id="Priority-Hints"><a href="#Priority-Hints" class="headerlink" title="Priority Hints"></a>Priority Hints</h3><p>DBMS知道哪些page比较重要，经常访问，打上标签。<sup><a href="#fn2">2</a></sup></p>
<p><img data-src="/images/CMU1544564/Lec05/67.jpg" alt="67.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/68.jpg" alt="68.jpg"></p>
<h2 id="Dirty-Pages"><a href="#Dirty-Pages" class="headerlink" title="Dirty Pages"></a>Dirty Pages</h2><p>只有被更改过的page才有必要写回硬盘，持久化。</p>
<p>DBMS可以定期遍历page table并将脏页写回硬盘。因为如果每次等eviction的时候再去flush脏页，会让eviction的过程非常的慢，所以一般会有个后台进程定期批量的去写回脏页。<sup><a href="#fn2">2</a></sup>当安全地写会脏页之后，DBMS可以evict页面或者只是取消设置dirty bit, 因为这个页面已经<strong>不再脏了</strong>。需要注意的是，在写日志记录之前，我们不会去写脏页。<sup><a href="#fn1">1</a></sup></p>
<p><img data-src="/images/CMU1544564/Lec05/69.jpg" alt="69.jpg"></p>
<h2 id="Background-Writing"><a href="#Background-Writing" class="headerlink" title="Background Writing"></a>Background Writing</h2><p>我们需要控制page被写回硬盘的时间，但是如果我们使用<code>mmap</code>,就很难控制每一个page写回的时间点。</p>
<p><img data-src="/images/CMU1544564/Lec05/70.jpg" alt="70.jpg"></p>
<h2 id="Other-Memory-Pool"><a href="#Other-Memory-Pool" class="headerlink" title="Other Memory Pool"></a>Other Memory Pool</h2><p><img data-src="/images/CMU1544564/Lec05/71.jpg" alt="71.jpg"></p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p><img data-src="/images/CMU1544564/Lec05/72.jpg" alt="72.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec05/80.jpg" alt="80.jpg"></p>
<p>引用:</p>
<p><a name="fn1">1</a>: CMU 15445 4. 缓存层 - 西部小笼包: <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wODUxNDIxZjRjYjg=" title="https://www.jianshu.com/p/0851421f4cb8">https://www.jianshu.com/p/0851421f4cb8<i class="fa fa-external-link"></i></span></p>
<p><a name="fn2">2</a>: Database Storage - fxjwind: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZnhqd2luZC9wLzEwODE4ODE0Lmh0bWw=" title="https://www.cnblogs.com/fxjwind/p/10818814.html">https://www.cnblogs.com/fxjwind/p/10818814.html<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CMU-15445</category>
        <category>Storage</category>
        <category>Buffer Management</category>
      </categories>
      <tags>
        <tag>Page</tag>
        <tag>Buffer Pool</tag>
        <tag>LRU</tag>
        <tag>Clock</tag>
      </tags>
  </entry>
  <entry>
    <title>[DBMS][PostgreSQL]缓存区管理BufferPool</title>
    <url>/2020/03/17/DBMS-PostgreSQL-%E7%BC%93%E5%AD%98%E5%8C%BA%E7%AE%A1%E7%90%86BufferPool/</url>
    <content><![CDATA[<p>这篇文章服务于<a href="https://cakebytheoceanluo.github.io/2020/03/17/CMU-15445-Lec05/">[CMU-15445]Lec05</a></p>
<p>我们沿用上一个实验的数据集和数据库:</p>
<ul>
<li>上一个实验，见<a href="https://cakebytheoceanluo.github.io/2020/03/16/DBMS-Postgres%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98precision-numbers/">[DBMS]Postgres浮点数，定点数精度问题 precision_numbers</a></li>
<li>具体数据集，见<a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#CMU-15445-%E5%88%86%E6%95%B0%E6%95%B0%E6%8D%AE%E9%9B%86-Mock">[DBMS] PostgreSQL 导入数据集: CMU-15445 分数数据集 (Mock)</a></li>
</ul>
<p>这个实验的目的是观察PostgreSQL: </p>
<ul>
<li>buffer pool对Query性能的影响,</li>
<li>操作系统文件缓存区对Query在page fault的影响，因为PostgreSQL不使用direct I/O</li>
</ul>
<a id="more"></a>
<hr>
<h1 id="清空操作系统-pagecache-dentries-and-inodes"><a href="#清空操作系统-pagecache-dentries-and-inodes" class="headerlink" title="清空操作系统 pagecache, dentries and inodes"></a>清空操作系统 pagecache, dentries and inodes</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:            15G        9.8G        2.3G        1.9G        3.2G        3.3G</span><br><span class="line">Swap:          2.0G        1.4G        643M</span><br><span class="line">$ sync; <span class="built_in">echo</span> 3 | sudo tee /proc/sys/vm/drop_caches</span><br><span class="line">3</span><br><span class="line">$ free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:            15G        9.9G        3.0G        1.8G        2.5G        3.3G</span><br><span class="line">Swap:          2.0G        1.4G        579M</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>free -h</code> 可以显示系统空闲以及占用的内存容量<blockquote>
<pre><code>   free - Display amount of free and used memory in the system
</code></pre></blockquote>
</li>
<li><code>sync</code> 可以将缓存的页写入硬盘<blockquote>
<pre><code>   sync - Synchronize cached writes to persistent storage
</code></pre></blockquote>
</li>
<li><code>echo 3 | sudo tee /proc/sys/vm/drop_caches</code> 释放 pagecache, dentries and inodes</li>
<li>或者在<code>su</code>的权限下<code>echo 3 &gt; /proc/sys/vm/drop_caches</code></li>
</ul>
<p>从上面的输出中，我们可以发现，<code>buff/cache</code>在运行指令后减少了很多，说明这块被释放了一部分。</p>
<p><br></p>
<p>有关阅读：</p>
<ul>
<li>How do you empty the buffers and cache on a Linux system? - Stackoverflow: <span class="exturl" data-url="aHR0cHM6Ly91bml4LnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy84NzkwOC9ob3ctZG8teW91LWVtcHR5LXRoZS1idWZmZXJzLWFuZC1jYWNoZS1vbi1hLWxpbnV4LXN5c3RlbQ==" title="https://unix.stackexchange.com/questions/87908/how-do-you-empty-the-buffers-and-cache-on-a-linux-system">https://unix.stackexchange.com/questions/87908/how-do-you-empty-the-buffers-and-cache-on-a-linux-system<i class="fa fa-external-link"></i></span></li>
<li>How to Clear RAM Memory Cache, Buffer and Swap Space on Linux - TecMint: <span class="exturl" data-url="aHR0cHM6Ly93d3cudGVjbWludC5jb20vY2xlYXItcmFtLW1lbW9yeS1jYWNoZS1idWZmZXItYW5kLXN3YXAtc3BhY2Utb24tbGludXgv" title="https://www.tecmint.com/clear-ram-memory-cache-buffer-and-swap-space-on-linux/">https://www.tecmint.com/clear-ram-memory-cache-buffer-and-swap-space-on-linux/<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="清空psql-buffer-pool-重启psql"><a href="#清空psql-buffer-pool-重启psql" class="headerlink" title="清空psql buffer pool - 重启psql"></a>清空psql buffer pool - 重启psql</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo service postgresql restart</span><br></pre></td></tr></tbody></table></figure>
<p>在重启PostgreSQL服务后，buffer pool会被清空。</p>
<h1 id="实验-查看-page-hit-page-fault"><a href="#实验-查看-page-hit-page-fault" class="headerlink" title="实验 - 查看 page hit, page fault"></a>实验 - 查看 page hit, page fault</h1><p>在这时候我们已经做过了前面两步：</p>
<ul>
<li>操作系统没有我们需要的的page cache</li>
<li>PostgreSQL的buffer pool是空的</li>
</ul>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">testdb=# \timing</span><br><span class="line">Timing is on.</span><br><span class="line">testdb=# <span class="built_in">set</span> max_parallel_workers_per_gather = <span class="number">0</span>;</span><br><span class="line">SET</span><br><span class="line">Time: <span class="number">7.740</span> ms</span><br><span class="line">testdb=# explain (analyze, buffers) select sum(a + b) from testreals;</span><br><span class="line">                                                         QUERY PLAN                                                          </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">194247.66</span>.<span class="number">.194247</span><span class="number">.67</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">4</span>) (actual time=<span class="number">1817.296</span>.<span class="number">.1817</span><span class="number">.296</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">   Buffers: shared <span class="built_in">read</span>=<span class="number">44248</span></span><br><span class="line">   -&gt;  Seq Scan on testreals  (cost=<span class="number">0.00</span>.<span class="number">.144247</span><span class="number">.77</span> rows=<span class="number">9999977</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">0.401</span>.<span class="number">.814</span><span class="number">.209</span> rows=<span class="number">10000000</span> loops=<span class="number">1</span>)</span><br><span class="line">         Buffers: shared <span class="built_in">read</span>=<span class="number">44248</span></span><br><span class="line"> Planning time: <span class="number">0.225</span> ms</span><br><span class="line"> Execution time: <span class="number">1817.316</span> ms</span><br><span class="line">(<span class="number">6</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">1824.317</span> ms (<span class="number">00</span>:<span class="number">01.824</span>)</span><br><span class="line">testdb=# explain (analyze, buffers) select sum(a + b) from testreals;</span><br><span class="line">                                                         QUERY PLAN                                                          </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">194247.66</span>.<span class="number">.194247</span><span class="number">.67</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">4</span>) (actual time=<span class="number">1772.469</span>.<span class="number">.1772</span><span class="number">.469</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">   Buffers: shared hit=<span class="number">32</span> <span class="built_in">read</span>=<span class="number">44216</span></span><br><span class="line">   -&gt;  Seq Scan on testreals  (cost=<span class="number">0.00</span>.<span class="number">.144247</span><span class="number">.77</span> rows=<span class="number">9999977</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">0.032</span>.<span class="number">.765</span><span class="number">.356</span> rows=<span class="number">10000000</span> loops=<span class="number">1</span>)</span><br><span class="line">         Buffers: shared hit=<span class="number">32</span> <span class="built_in">read</span>=<span class="number">44216</span></span><br><span class="line"> Planning time: <span class="number">0.025</span> ms</span><br><span class="line"> Execution time: <span class="number">1772.488</span> ms</span><br><span class="line">(<span class="number">6</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">1772.799</span> ms (<span class="number">00</span>:<span class="number">01.773</span>)</span><br><span class="line">testdb=# explain (analyze, buffers) select sum(a + b) from testreals;</span><br><span class="line">                                                         QUERY PLAN                                                          </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">194247.66</span>.<span class="number">.194247</span><span class="number">.67</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">4</span>) (actual time=<span class="number">1673.223</span>.<span class="number">.1673</span><span class="number">.223</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">   Buffers: shared hit=<span class="number">64</span> <span class="built_in">read</span>=<span class="number">44184</span></span><br><span class="line">   -&gt;  Seq Scan on testreals  (cost=<span class="number">0.00</span>.<span class="number">.144247</span><span class="number">.77</span> rows=<span class="number">9999977</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">0.030</span>.<span class="number">.719</span><span class="number">.406</span> rows=<span class="number">10000000</span> loops=<span class="number">1</span>)</span><br><span class="line">         Buffers: shared hit=<span class="number">64</span> <span class="built_in">read</span>=<span class="number">44184</span></span><br><span class="line"> Planning time: <span class="number">0.025</span> ms</span><br><span class="line"> Execution time: <span class="number">1673.243</span> ms</span><br><span class="line">(<span class="number">6</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">1673.562</span> ms (<span class="number">00</span>:<span class="number">01.674</span>)</span><br><span class="line">testdb=# explain (analyze, buffers) select sum(a + b) from testreals;</span><br><span class="line">                                                         QUERY PLAN                                                          </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">194247.66</span>.<span class="number">.194247</span><span class="number">.67</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">4</span>) (actual time=<span class="number">1657.359</span>.<span class="number">.1657</span><span class="number">.359</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">   Buffers: shared hit=<span class="number">96</span> <span class="built_in">read</span>=<span class="number">44152</span></span><br><span class="line">   -&gt;  Seq Scan on testreals  (cost=<span class="number">0.00</span>.<span class="number">.144247</span><span class="number">.77</span> rows=<span class="number">9999977</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">0.034</span>.<span class="number">.711</span><span class="number">.246</span> rows=<span class="number">10000000</span> loops=<span class="number">1</span>)</span><br><span class="line">         Buffers: shared hit=<span class="number">96</span> <span class="built_in">read</span>=<span class="number">44152</span></span><br><span class="line"> Planning time: <span class="number">0.025</span> ms</span><br><span class="line"> Execution time: <span class="number">1657.378</span> ms</span><br><span class="line">(<span class="number">6</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">1657.683</span> ms (<span class="number">00</span>:<span class="number">01.658</span>)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>explain (analyze, buffers) select sum(a + b) from testreals;</code>中<ul>
<li><code>explain</code>: 给出query plan</li>
<li><code>analyze</code>: 执行query</li>
<li><code>buffers</code>: 给出buffer pool信息</li>
</ul>
</li>
<li>然后我前后执行4次同一个query:<ul>
<li>PostgreSQL有一个共用的share buffer pool, 然后每一个query也有一个自己的buffer pool。query的专属buffer pool的大小，会随着执行次数而增加，默认是每次增加32个位置。</li>
<li>第一次: <code>Buffers: shared read=44248</code> 因为buffer pool是空的，每一次都是page fault。同时操作系统file page cache也是空的，所有page都需要从硬盘先加载到操作系统file page cache, 在从这里复制进数据库buffer pool。<code>shared read</code>指的就是page fault, 是那些不在buffer pool中，需要从硬盘或从操作系统file cache中读取的page。</li>
<li><strong>我们也可以发现这个表格一共对应<code>44248</code>个page。</strong></li>
<li>第二次: <code>Buffers: shared hit=32 read=44216</code> Query的buffer pool是大小是32， 已增加32个位置。</li>
<li>第三次: <code>Buffers: shared hit=64 read=44184</code> Query的buffer pool是大小是64， 已增加32个位置。</li>
<li>第四次: <code>Buffers: shared hit=96 read=44152</code> Query的buffer pool是大小是94， 已增加32个位置。</li>
</ul>
</li>
</ul>
<h1 id="实验-扩大buffer-pool-size"><a href="#实验-扩大buffer-pool-size" class="headerlink" title="实验 - 扩大buffer pool size"></a>实验 - 扩大buffer pool size</h1><p>下面我们发现最大的buffer pool size是<code>128MB</code>：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# show shared_buffers;</span><br><span class="line"> shared_buffers </span><br><span class="line">----------------</span><br><span class="line"> <span class="number">128</span>MB</span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.196</span> ms</span><br></pre></td></tr></tbody></table></figure>
<p>但是我们对应的表格的所有page大概是<code>345MB</code>, 每一个page是<code>8KiB</code>:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# select (<span class="number">44248</span> * <span class="number">8</span>) / <span class="number">1024</span>;</span><br><span class="line"> ?column? </span><br><span class="line">----------</span><br><span class="line">      <span class="number">345</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.381</span> ms</span><br></pre></td></tr></tbody></table></figure>
<p>因此这个默认的buffer pool size不足以容纳我们这个表格。正因为这个原因，我们的query需要的page数总大于buffer size一次性所能容纳的数量，一定会出现page fault。</p>
<h2 id="更改PostgresSQL配置文件中的shared-buffers"><a href="#更改PostgresSQL配置文件中的shared-buffers" class="headerlink" title="更改PostgresSQL配置文件中的shared_buffers"></a>更改PostgresSQL配置文件中的<code>shared_buffers</code></h2><p>我们用自己喜欢的文本编辑器去打开<code>/etc/postgresql/10/main/postgresql.conf</code>文件:</p>
<ul>
<li>注意我postgresql的版本是<code>10</code></li>
<li>具体的配置文件位置和postgresql安装位置和安装版本有关</li>
</ul>
<p>找到下面对应的<code>shared_buffers</code>, 更改数值为<code>360MB</code>:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------                                                                                          </span></span><br><span class="line"><span class="comment"># RESOURCE USAGE (except WAL)                                                                                                                                            </span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------                                                                                          </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - Memory -                                                                                                                                                             </span></span><br><span class="line"></span><br><span class="line">shared_buffers = 128MB                  <span class="comment"># min 128kB  </span></span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>保存完以后我们打开<code>psql</code>看看是否更改成功。如果像下面例子中，看见<code>360MB</code>，而不是之前的<code>128MB</code>,即更改成功：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">testdb=# show shared_buffers;</span><br><span class="line"> shared_buffers </span><br><span class="line">----------------</span><br><span class="line"> <span class="number">360</span>MB</span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="重新之前实验-冷启动"><a href="#重新之前实验-冷启动" class="headerlink" title="重新之前实验 - 冷启动"></a>重新之前实验 - 冷启动</h2><p>我们依然执行下面两个命令， 去清空操作系统file page cache和数据库的buffer pool:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sync; <span class="built_in">echo</span> 3 | sudo tee /proc/sys/vm/drop_caches</span><br><span class="line">$ sudo service postgresql restart</span><br></pre></td></tr></tbody></table></figure>
<p>这样操作以后我们的数据库buffer pool被清空，操作系统page cache里面也没也对应的page, 所以我们称之为<strong>冷启动</strong>。</p>
<p><br></p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">testdb=# \timing</span><br><span class="line">Timing is on.</span><br><span class="line"></span><br><span class="line">testdb=# <span class="built_in">set</span> max_parallel_workers_per_gather = <span class="number">0</span>;</span><br><span class="line">SET</span><br><span class="line">Time: <span class="number">9.680</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# CREATE EXTENSION pg_prewarm;</span><br><span class="line">CREATE EXTENSION</span><br><span class="line">Time: <span class="number">12.151</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# select * from pg_prewarm('testreals');</span><br><span class="line"> pg_prewarm </span><br><span class="line">------------</span><br><span class="line">      <span class="number">44248</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">473.944</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# explain (analyze, buffers) select sum(a + b) from testreals;</span><br><span class="line">                                                         QUERY PLAN                                                          </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">194247.66</span>.<span class="number">.194247</span><span class="number">.67</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">4</span>) (actual time=<span class="number">1628.475</span>.<span class="number">.1628</span><span class="number">.475</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">   Buffers: shared hit=<span class="number">44248</span></span><br><span class="line">   -&gt;  Seq Scan on testreals  (cost=<span class="number">0.00</span>.<span class="number">.144247</span><span class="number">.77</span> rows=<span class="number">9999977</span> <span class="built_in">width</span>=<span class="number">8</span>) (actual time=<span class="number">0.008</span>.<span class="number">.664</span><span class="number">.942</span> rows=<span class="number">10000000</span> loops=<span class="number">1</span>)</span><br><span class="line">         Buffers: shared hit=<span class="number">44248</span></span><br><span class="line"> Planning time: <span class="number">6.139</span> ms</span><br><span class="line"> Execution time: <span class="number">1628.495</span> ms</span><br><span class="line">(<span class="number">6</span> rows)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>select * from pg_prewarm('testreals');</code>或<code>select pg_prewarm('testreals');</code>是将这个表格的所有page都预加载进buffer pool。因为我们调整过shared buffer pool size, 现在我们的shared buffer pool足够容纳这个表格对应的所有page了。<strong>注意这个执行的返回值<code>44248</code>, 它就是这个表格所有对应page的数值。</strong></li>
<li><code>CREATE EXTENSION pg_prewarm;</code>这个指令是运行上一条指令的前提。</li>
<li>然后我们又见到这个query： <code>explain (analyze, buffers) select sum(a + b) from testreals;</code><ul>
<li><code>Buffers: shared hit=44248</code> <strong>我们又发现<code>44248</code>这个数值，说明所有的page都是page hit，而不是page fault。</strong></li>
</ul>
</li>
</ul>
<p><br></p>
<p>热启动好像无法在psql中直接展示，这里略过。 <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span></p>
<p><br></p>
<p>推荐的阅读：</p>
<p>PREWARMING POSTGRESQL I/O CACHES - Hans-Jürgen Schönig： <span class="exturl" data-url="aHR0cHM6Ly93d3cuY3liZXJ0ZWMtcG9zdGdyZXNxbC5jb20vZW4vcHJld2FybWluZy1wb3N0Z3Jlc3FsLWktby1jYWNoZXMv" title="https://www.cybertec-postgresql.com/en/prewarming-postgresql-i-o-caches/">https://www.cybertec-postgresql.com/en/prewarming-postgresql-i-o-caches/<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CMU-15445</category>
        <category>Storage</category>
        <category>DBMS</category>
        <category>PostgreSQL</category>
        <category>Buffer Management</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[CMU-15445]Lec04 Database Storage Part II - 数据库存储  II</title>
    <url>/2020/03/16/CMU-15445-Lec04/</url>
    <content><![CDATA[<p>Database Storage Part II - 数据库存储  II</p>
<p>Slide: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA0LXN0b3JhZ2UyLnBkZg==" title="https://15445.courses.cs.cmu.edu/fall2019/slides/04-storage2.pdf">https://15445.courses.cs.cmu.edu/fall2019/slides/04-storage2.pdf<i class="fa fa-external-link"></i></span><br>Note: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDQtc3RvcmFnZTIucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf<i class="fa fa-external-link"></i></span></p>
<p>这节两课，我们会学习数据库内部的存储。</p>
<p>Database Storage 在CMU分成了两部分，在两节课中讲。这是第二部分。</p>
<p>这部分设涉及基础数据类型的表示, OLAP, OLTP, HTAP, row-store (NSM), column store(DSM) 等等。</p>
<a id="more"></a>
<p><img data-src="/images/CMU1544564/Lec04/1.jpg" alt="1.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec04/12.jpg" alt="12.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec04/13.jpg" alt="13.jpg"></p>
<p>a sequence of bytes = byte array</p>
<h1 id="Data-Representation"><a href="#Data-Representation" class="headerlink" title="Data Representation"></a>Data Representation</h1><p><img data-src="/images/CMU1544564/Lec04/14.jpg" alt="14.jpg"></p>
<ul>
<li>我们在<a href="https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part1/#DATE-TIME-OPERATIONS">[CMU-15445]Lec02_part1</a>, 在不同的数据库中已经见过Date Time Operations也不一样，没有唯一的标准。</li>
</ul>
<!-- TODO: unix epoch -->
<h2 id="Variable-Precision-Numbers-浮点数"><a href="#Variable-Precision-Numbers-浮点数" class="headerlink" title="Variable Precision Numbers 浮点数"></a>Variable Precision Numbers 浮点数</h2><p><img data-src="/images/CMU1544564/Lec04/15.jpg" alt="15.jpg"></p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSUVFRV83NTQ=" title="https://en.wikipedia.org/wiki/IEEE_754">https://en.wikipedia.org/wiki/IEEE_754<i class="fa fa-external-link"></i></span>  <!-- TODO --></li>
<li>对<code>FLOAT</code>, <code>REAL/DOUBLE</code>的操作会比较快，因为CPU有直接对应的指令(instruction)可以使用，但是因为精度有限的原因，使用这几个依然会失去精度。(和编程语言中一样)。因为计算机对数字存储是离散的，有限的，必然会失去一定精度，结果是近似的。</li>
</ul>
<h3 id="Demo-失去精度"><a href="#Demo-失去精度" class="headerlink" title="Demo - 失去精度"></a>Demo - 失去精度</h3><p><img data-src="/images/CMU1544564/Lec04/16.jpg" alt="16.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec04/17.jpg" alt="17.jpg"></p>
<h2 id="Fixed-Precision-Numbers-定点数"><a href="#Fixed-Precision-Numbers-定点数" class="headerlink" title="Fixed Precision Numbers 定点数"></a>Fixed Precision Numbers 定点数</h2><p>定点数就是小数点是固定的，所以我们用int分别存储小数点前后的数字就可以实现，定点数是可以做到精确计算的。但是局限也很明显，只能表示固定精度。<sup><a href="#fn1">1</a></sup></p>
<p><img data-src="/images/CMU1544564/Lec04/18.jpg" alt="18.jpg"></p>
<p>更多关于这个Demo实验，见这个文章<a href="https://cakebytheoceanluo.github.io/2020/03/16/DBMS-Postgres%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98precision-numbers/">[DBMS]Postgres浮点数，定点数精度问题 precision_numbers</a></p>
<p><img data-src="/images/CMU1544564/Lec04/19.jpg" alt="19.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec04/20.jpg" alt="20.jpg"></p>
<ul>
<li>PostgreSQL Source Code: <span class="exturl" data-url="aHR0cHM6Ly9kb3h5Z2VuLnBvc3RncmVzcWwub3JnL2ludGVyZmFjZXNfMmVjcGdfMnBndHlwZXNsaWJfMm51bWVyaWNfOGNfc291cmNlLmh0bWwjbDAwNzIy" title="https://doxygen.postgresql.org/interfaces_2ecpg_2pgtypeslib_2numeric_8c_source.html#l00722">https://doxygen.postgresql.org/interfaces_2ecpg_2pgtypeslib_2numeric_8c_source.html#l00722<i class="fa fa-external-link"></i></span></li>
<li>从源代码中可以看出固定精度的数字的操作很复杂，有很多branch，所以会比较慢。</li>
</ul>
<h2 id="Large-Values"><a href="#Large-Values" class="headerlink" title="Large Values"></a>Large Values</h2><p><img data-src="/images/CMU1544564/Lec04/21.jpg" alt="21.jpg"></p>
<ul>
<li>如果<code>c</code>很大，甚至超过了一个page的大小。比如<code>c</code>是一个tuple中一个很长的<code>VARCHAR</code>字段。String总是数据库中最麻烦的。对于这个超过一个page大小的<code>c</code>，我们可以把它额外存储在一个<em>overflow page</em>上，这时上图中的<code>c</code>实际上是一个指向overflow page的一个指针。</li>
<li>当然overflow page可以是多个。假如一个overflow page依然不够大，我们可以使用几个overflow page，它们之间继续用<em>指针</em>相连。</li>
<li>整体上overflow page只是一种实现存储large value的方式。它对使用数据库的应用是<strong>透明的(transparent)</strong>, 使用数据库的应用只获得那个很长的<code>c</code>字符串，而不必知道它是如何被存储，存储在哪儿。</li>
</ul>
<h2 id="External-Value-Storage"><a href="#External-Value-Storage" class="headerlink" title="External Value Storage"></a>External Value Storage</h2><p><img data-src="/images/CMU1544564/Lec04/22.jpg" alt="22.jpg"></p>
<ul>
<li>External Value Storage是指那些特别大的文件，超过我们前面提到的large value。它比如说是GiB大小的视频。</li>
<li>BLOB: Binary Large Object data</li>
<li>这种文件，我们没有必要把它存储在数据库内部，这样会浪费数据库空间。</li>
<li>我们直接在<code>c</code>的地方存储，该文件在操作系统文件系统中硬盘的位置。这样做不会浪费数据库内部空间。</li>
<li>如果我们使用的High End的设备去运行高性能数据库，那么该服务器中磁盘容量是很宝贵的，不应该被浪费的。在<code>c</code>存储一个硬盘位置，能降低数据库的成本，特别是这个硬盘可以是HTFS或者network storage。</li>
<li>这里注意对于存放到外部文件的数据，是不保证transaction等语义的。<sup><a href="#fn1">1</a></sup></li>
</ul>
<p><img data-src="/images/CMU1544564/Lec04/23.jpg" alt="23.jpg"></p>
<p>To BLOB or Not To BLOB: Large Object Storage in a Database or a Filesystem: <span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy9yZXNlYXJjaC9wdWJsaWNhdGlvbi90by1ibG9iLW9yLW5vdC10by1ibG9iLWxhcmdlLW9iamVjdC1zdG9yYWdlLWluLWEtZGF0YWJhc2Utb3ItYS1maWxlc3lzdGVtLw==" title="https://www.microsoft.com/en-us/research/publication/to-blob-or-not-to-blob-large-object-storage-in-a-database-or-a-filesystem/">https://www.microsoft.com/en-us/research/publication/to-blob-or-not-to-blob-large-object-storage-in-a-database-or-a-filesystem/<i class="fa fa-external-link"></i></span></p>
<p><br></p>
<h1 id="System-Catalogs-metadata"><a href="#System-Catalogs-metadata" class="headerlink" title="System Catalogs = metadata"></a>System Catalogs = metadata</h1><p><img data-src="/images/CMU1544564/Lec04/24.jpg" alt="24.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec04/25.jpg" alt="25.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec04/26.jpg" alt="26.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec04/27.jpg" alt="27.jpg"></p>
<!-- TODO: MySQL, SQLIte -->
<p>PostgreSQL的查看Schema操作，具体见另外一篇博客，里面有很多例子：<a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/#%E6%95%B0%E6%8D%AE%E9%9B%86">[DBMS] PostgreSQL 导入数据集 - 数据集</a></p>
<p><br><br><br></p>
<h1 id="Storage-Levels"><a href="#Storage-Levels" class="headerlink" title="Storage Levels"></a>Storage Levels</h1><p><img data-src="/images/CMU1544564/Lec04/28.jpg" alt="28.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec04/29.jpg" alt="29.jpg"></p>
<h2 id="OLTP"><a href="#OLTP" class="headerlink" title="OLTP"></a>OLTP</h2><p>OLTP := On-line Transaction Processing 通常是对很小一部分tuple的写操作</p>
<p>OLTP: On-line Transaction Processing</p>
<ul>
<li>Fast, short running operations</li>
<li>Queries operate on single entity at a time</li>
<li>More writes than reads</li>
<li>Repetitive operations</li>
<li>Usually the kind of application that people build first</li>
<li>Example: User invocations of Amazon. They can add things to their cart, they can make purchases,<br>but the actions only affect their account.<br>— 引用自: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDQtc3RvcmFnZTIucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf<i class="fa fa-external-link"></i></span></li>
</ul>
<p><img data-src="/images/CMU1544564/Lec04/30.jpg" alt="30.jpg"></p>
<h2 id="OLAP"><a href="#OLAP" class="headerlink" title="OLAP"></a>OLAP</h2><p>OLAP := On-line Analytical Processing 通常是对很大一部分是tuple做读操作, 同复杂的分析聚合　(decision-support, big data)</p>
<p>OLTP: On-line Transaction Processing</p>
<ul>
<li>Fast, short running operations</li>
<li>Queries operate on single entity at a time</li>
<li>More writes than reads</li>
<li>Repetitive operations</li>
<li>Usually the kind of application that people build first</li>
<li>Example: User invocations of Amazon. They can add things to their cart, they can make purchases,<br>but the actions only affect their account.<br>— 引用自: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDQtc3RvcmFnZTIucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf<i class="fa fa-external-link"></i></span></li>
</ul>
<p><img data-src="/images/CMU1544564/Lec04/31.jpg" alt="31.jpg"></p>
<h2 id="HTAP"><a href="#HTAP" class="headerlink" title="HTAP"></a>HTAP</h2><p><img data-src="/images/CMU1544564/Lec04/32.jpg" alt="32.jpg"></p>
<p>SOURCE: <span class="exturl" data-url="aHR0cHM6Ly9jYWNtLmFjbS5vcmcvbWFnYXppbmVzLzIwMTEvNi8xMDg2NTEtMTAtcnVsZXMtZm9yLXNjYWxhYmxlLXBlcmZvcm1hbmNlLWluLXNpbXBsZS1vcGVyYXRpb24tZGF0YXN0b3Jlcy9mdWxsdGV4dA==" title="https://cacm.acm.org/magazines/2011/6/108651-10-rules-for-scalable-performance-in-simple-operation-datastores/fulltext">https://cacm.acm.org/magazines/2011/6/108651-10-rules-for-scalable-performance-in-simple-operation-datastores/fulltext<i class="fa fa-external-link"></i></span></p>
<p><br></p>
<h1 id="Storage-Models"><a href="#Storage-Models" class="headerlink" title="Storage Models"></a>Storage Models</h1><p><img data-src="/images/CMU1544564/Lec04/33.jpg" alt="33.jpg"></p>
<h2 id="N-ary-Storage-Model-NSM-row-store"><a href="#N-ary-Storage-Model-NSM-row-store" class="headerlink" title="N-ary Storage Model (NSM): row store"></a>N-ary Storage Model (NSM): row store</h2><p><img data-src="/images/CMU1544564/Lec04/34.jpg" alt="34.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec04/35.jpg" alt="35.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec04/36.jpg" alt="36.jpg"></p>
<h3 id="OLTP-1"><a href="#OLTP-1" class="headerlink" title="OLTP"></a>OLTP</h3><p>OLTP往往有一个index(索引)，它可以快速找到OLTP需要的那一个tuple。</p>
<p><img data-src="/images/CMU1544564/Lec04/37.jpg" alt="37.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec04/38.jpg" alt="38.jpg"></p>
<h3 id="OLAP-1"><a href="#OLAP-1" class="headerlink" title="OLAP"></a>OLAP</h3><p>而OLAP往往需要扫描很大一部分的表格，这种情况index的帮助不会很大。<strong>扫描</strong>具体就是从每一个tuple头到尾，我们之前提过tuple就是一个byte array。即使我们下图中，只需要检查深蓝色和浅蓝色两个字段，但是整个tuple还是需要从内存加载到CPU cache。而且一个page上的大部分数据也都和当前query无关，这实际上很不高效。所以下图红圈中的都是useless data。</p>
<p><img data-src="/images/CMU1544564/Lec04/43.jpg" alt="43.jpg"></p>
<h3 id="NSM-Pros-amp-Cons"><a href="#NSM-Pros-amp-Cons" class="headerlink" title="NSM Pros&amp;Cons"></a>NSM Pros&amp;Cons</h3><p><img data-src="/images/CMU1544564/Lec04/44.jpg" alt="44.jpg"></p>
<ul>
<li>NSM适合OLTP, 因为对单个tuple的操作很简单。但是不适合OLAP，如果OLAP不需要所有字段的话。</li>
</ul>
<p>There are two different ways to organize a NSM database:</p>
<ul>
<li><strong>Heap-Organized Tables</strong>: Tuples are stored in blocks called a heap, and the heap does not necessarily<br>define an order.</li>
<li><strong>Index-Organized Tables</strong>: Tuples are stored in the primary key index itself, but different from a<br>clustered index.</li>
</ul>
<p>— 引用自: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDQtc3RvcmFnZTIucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/04-storage2.pdf<i class="fa fa-external-link"></i></span></p>
<p><br></p>
<h2 id="Decomposition-Storage-Model-DSM-column-store"><a href="#Decomposition-Storage-Model-DSM-column-store" class="headerlink" title="Decomposition Storage Model (DSM): column store"></a>Decomposition Storage Model (DSM): column store</h2><p>在DSM中，每一个字段(或每一列)都有拥有自己的page, 上面都是当前列的数据。</p>
<p><img data-src="/images/CMU1544564/Lec04/45.jpg" alt="45.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec04/46.jpg" alt="46.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec04/47.jpg" alt="47.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec04/49.jpg" alt="49.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec04/50.jpg" alt="50.jpg"></p>
<ul>
<li>上图中　Choice1是更好的主意，也更常见。适合每个字段的数据类型是<strong>等长的</strong>。</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec04/51.jpg" alt="51.jpg"></p>
<ul>
<li>DSM将同一列中的数据存在一起，这些数据自然也属于同一个数据类型。这样处理起来对CPU cache更高效, 同时也带来了很多comrpession(压缩), materialized aggregate(small index for a page), SIMD指令的优化。</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec04/52.jpg" alt="52.jpg"></p>
<ul>
<li>DSM Proposal - A Query Processing Strategy for the Decomposed Storage Model: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS8xMC41NTU1LzY0NTQ3Mi42NTU1NTU=" title="https://dl.acm.org/doi/10.5555/645472.655555">https://dl.acm.org/doi/10.5555/645472.655555<i class="fa fa-external-link"></i></span></li>
<li>大部分分析型的数据库都是用column store，它们采用的往往是DSM的现代变种</li>
<li>一个DSM的变种: <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvZG93bmxvYWRzL3B1YmxpY2F0aW9ucy9kYXRhYmxvY2tzLnBkZg==" title="https://db.in.tum.de/downloads/publications/datablocks.pdf">Data Blocks: Hybrid OLTP and OLAP on Compressed Storage using both Vectorization and Compilation<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Row stores are usually better for OLTP, while column stores ar better for OLAP.</p>
<p>大部分现代数据库:</p>
<ul>
<li>Frontend: OLTP in client, 处理用户的事务</li>
<li>Backend: OLAP in Server, data warehouse　大数据分析所有用户的资料(比如订单)</li>
</ul>
<p>下面三页是来自<span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzA1LWJ1ZmZlcnBvb2wucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/slides/05-bufferpool.pdf">Lec05<i class="fa fa-external-link"></i></span>, 在这节课最开始的时候，重新讲了这部分，我将这三页课件移动到这里。</p>
<p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec05/3.jpg" alt="Lec5_3.jpg"></p>
<p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec05/4.jpg" alt="Lec5_4.jpg"></p>
<ul>
<li>上图的客户端为传统的OLTP Data Silos，将数据发到Server - Data Warehouse(数据仓库)。Server端运行OLAP, 分析这些用户的信息。</li>
<li>ETL(Extract-Transform-Load)，将数据从来源端经过抽取extract、转换transform、加载load至目的端的过程。是一个常用在数据仓库的技术。Server短得到这些ETL后的数据，就可以运行OLAP Query或者数据挖掘等机器学习算法。</li>
</ul>
<p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec05/5.jpg" alt="Lec5_5.jpg"></p>
<ul>
<li>上图的客户端有HTAP， 即客户端中运行TP和AP，再将在客户端中处理过的数据ETL至Server - Data Warehouse。</li>
</ul>
<p><br></p>
<p><img data-src="/images/CMU1544564/Lec04/53.jpg" alt="53.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec04/54.jpg" alt="54.jpg"> </p>
<p>引用:</p>
<p><a name="fn1">1</a>: Database Storage - fxjwind: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZnhqd2luZC9wLzEwODE4ODE0Lmh0bWw=" title="https://www.cnblogs.com/fxjwind/p/10818814.html">https://www.cnblogs.com/fxjwind/p/10818814.html<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CMU-15445</category>
        <category>Storage</category>
        <category>Disk Management</category>
      </categories>
      <tags>
        <tag>N-ary Storage Model</tag>
        <tag>Decomposition Storage Model</tag>
        <tag>OLAP</tag>
        <tag>OLTP</tag>
        <tag>HTAP</tag>
        <tag>Variable Precision Numbers</tag>
        <tag>Fixed Precision Numbers</tag>
      </tags>
  </entry>
  <entry>
    <title>[DBMS]Postgres 浮点数，定点数 精度问题precision_numbers</title>
    <url>/2020/03/16/DBMS-Postgres%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98precision-numbers/</url>
    <content><![CDATA[<p>这篇文章服务于<a href="https://cakebytheoceanluo.github.io/2020/03/16/CMU-15445-Lec04/">[CMU-15445]Lec04</a></p>
<p>数据库中给小数(分数)有两种类型</p>
<ul>
<li>Variable Precision Numbers: 可变精度数字，可能有会rounding error</li>
<li>Fixed Precision Numbers: 定精度数字，在给定的精度下没有误差</li>
</ul>
<p>我们今天来看一看PostgreSQL中的这两种类型和它们可能产生的误差。</p>
<p>PostgreSQL中具体对应的数据类型是:</p>
<ul>
<li>Variable Precision Numbers: <code>REAL</code></li>
<li>Fixed Precision Numbers: <code>DECIMAL(precision, scale), NUMERIC(precision, scale)</code></li>
</ul>
<hr>
<p><code>DECIMAL(precision, scale)</code>:</p>
<ul>
<li><code>precision</code>: The <code>precision</code> must be positive. The <code>precision</code> of a <em>numeric</em> is the total count of significant digits in the whole number, that is, the number of digits to both sides of the decimal point.</li>
<li><code>scale</code>: The <code>scale</code> must be zero or positive.   The <code>scale</code> of a <em>numeric</em> is the count of decimal digits in the fractional part, to the right of the decimal point</li>
</ul>
<p>So the number 23.5141 has a precision of 6 and a scale of 4. Integers can be considered to have a scale of zero.</p>
<p>以上引用自: <span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjEvZGF0YXR5cGUtbnVtZXJpYy5odG1s" title="https://www.postgresql.org/docs/9.1/datatype-numeric.html">https://www.postgresql.org/docs/9.1/datatype-numeric.html<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>
<hr>
<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/Lec04/data_csv.png" alt="num_range"></p>
<p>上图为CMU-15445-Lec04课上的截图，内容是<code>data.csv</code>。实际上这只是一个随机生成的文件:</p>
<ul>
<li>一共10000000行</li>
<li>每行有两个数字，由<code>,</code>分隔开，每个数字是100以内的小数，并有6位小数部分</li>
</ul>
<h2 id="数据集faker"><a href="#数据集faker" class="headerlink" title="数据集faker"></a>数据集faker</h2><p>我用python写了一个类似的数据集faker:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000000</span>):</span><br><span class="line">    print(<span class="string">f'<span class="subst">{float(Decimal(random.randrange(<span class="number">0</span>, <span class="number">100000000</span>) / <span class="number">1000000</span>))}</span>,<span class="subst">{float(Decimal(random.randrange(<span class="number">0</span>, <span class="number">100000000</span>) / <span class="number">1000000</span>))}</span>'</span>)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载: <a href="https://cakebytheoceanluo.github.io/download/CMU15445/lec04_float_faker.py">lec04_float_faker.py</a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ./lec04_float_faker.py &gt; data.csv</span><br></pre></td></tr></tbody></table></figure>
<p>到现在我们获得了<code>data.csv</code>这个文件:</p>
<h2 id="数据集文件"><a href="#数据集文件" class="headerlink" title="数据集文件"></a>数据集文件</h2><p>我展示一些数据集文件信息：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ file data.csv </span><br><span class="line">data.csv: ASCII text</span><br><span class="line"></span><br><span class="line">$ ll data.csv</span><br><span class="line">-rw-rw-r-- 1 jigao jigao 195777640 Mar 11 19:17 data.csv</span><br><span class="line"></span><br><span class="line">$ shuf -n 5 data.csv </span><br><span class="line">66.798295,30.742821</span><br><span class="line">51.166558,51.72633</span><br><span class="line">87.780032,67.175637</span><br><span class="line">25.172411,70.619547</span><br><span class="line">12.432782,9.736797</span><br><span class="line"></span><br><span class="line">$ shuf -n 5 data.csv </span><br><span class="line">23.496402,68.946932</span><br><span class="line">6.035276,55.565444</span><br><span class="line">80.652459,83.420552</span><br><span class="line">69.633828,75.871921</span><br><span class="line">3.157022,43.588741</span><br></pre></td></tr></tbody></table></figure>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# drop table <span class="keyword">if</span> <span class="built_in">exists</span> testreals;</span><br><span class="line">DROP TABLE</span><br><span class="line"></span><br><span class="line">testdb=# drop table <span class="keyword">if</span> <span class="built_in">exists</span> testdecimals;</span><br><span class="line">DROP TABLE</span><br><span class="line"></span><br><span class="line">testdb=# create table testreals (a REAL <span class="keyword">not</span> null, b REAL <span class="keyword">not</span> null);</span><br><span class="line">CREATE TABLE</span><br><span class="line"></span><br><span class="line">testdb=# create table testdecimals (a DECIMAL(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> null, b DECIMAL(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> null);</span><br><span class="line">CREATE TABLE</span><br><span class="line"></span><br><span class="line">testdb=# copy testreals from '/tmp/data.csv' delimiter ',' csv;</span><br><span class="line">COPY <span class="number">10000000</span></span><br><span class="line"></span><br><span class="line">testdb=# copy testdecimals from '/tmp/data.csv' delimiter ',' csv;</span><br><span class="line">COPY <span class="number">10000000</span></span><br><span class="line"></span><br><span class="line">testdb=# \timing</span><br><span class="line">Timing is on.</span><br><span class="line"></span><br><span class="line">testdb=# <span class="built_in">set</span> max_parallel_workers_per_gather = <span class="number">0</span>;</span><br><span class="line">SET</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>testreals</code>: Variable Precision Numbers, <code>REAL</code></li>
<li><code>testdecimals</code>: Fixed Precision Numbers, <code>DECIMAL(10, 6)</code></li>
<li><code>\timing</code>: 打开计时器</li>
<li><code>set max_parallel_workers_per_gather = 0;</code>: <span class="exturl" data-url="aHR0cHM6Ly9kYmEuc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzIyNjY1NC9ob3ctY2FuLWktZGlzYWJsZS1wYXJhbGxlbC1xdWVyaWVzLWluLXBvc3RncmVzcWw=" title="https://dba.stackexchange.com/questions/226654/how-can-i-disable-parallel-queries-in-postgresql">取消并行的query执行<i class="fa fa-external-link"></i></span>, 因为我们想看single CPU performance</li>
</ul>
<h1 id="REAL表格"><a href="#REAL表格" class="headerlink" title="REAL表格"></a><code>REAL</code>表格</h1><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# select sum(a+b) from testreals;</span><br><span class="line">     sum     </span><br><span class="line">-------------</span><br><span class="line"> <span class="number">1.00012e+09</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">384.460</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# select sum(a+b) from testreals;</span><br><span class="line">     sum     </span><br><span class="line">-------------</span><br><span class="line"> <span class="number">1.00013e+09</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">386.714</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# select cast(sum(a+b) as decimal) from testreals;</span><br><span class="line">    sum     </span><br><span class="line">------------</span><br><span class="line"> <span class="number">1000120000</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">535.749</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# select cast(sum(a+b) as decimal) from testreals;</span><br><span class="line">    sum     </span><br><span class="line">------------</span><br><span class="line"> <span class="number">1000110000</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">943.324</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# explain select sum(a+b) from testreals;</span><br><span class="line">                                QUERY PLAN                                </span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">194247.66</span>.<span class="number">.194247</span><span class="number">.67</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">4</span>)</span><br><span class="line">   -&gt;  <span class="function">Seq Scan on <span class="title">testreals</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.144247</span><span class="number">.77</span> rows=<span class="number">9999977</span> <span class="built_in">width</span>=<span class="number">8</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">2</span> rows)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">Time: 2.369 ms</span><br><span class="line"></span><br><span class="line">testdb=# explain analyze select sum(a+b) from testreals;</span><br><span class="line">                                                         QUERY PLAN                                                          </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Aggregate  (cost=<span class="number">194247.66</span>.<span class="number">.194247</span><span class="number">.67</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">4</span>) (actual time=<span class="number">1598.636</span>.<span class="number">.1598</span><span class="number">.636</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span><br><span class="line">   -&gt;  <span class="function">Seq Scan on <span class="title">testreals</span>  <span class="params">(cost=<span class="number">0.00</span>.<span class="number">.144247</span><span class="number">.77</span> rows=<span class="number">9999977</span> <span class="built_in">width</span>=<span class="number">8</span>)</span> <span class="params">(actual time=<span class="number">0.036</span>.<span class="number">.705</span><span class="number">.511</span> rows=<span class="number">10000000</span> loops=<span class="number">1</span>)</span></span></span><br><span class="line"> Planning time: 0.025 ms</span><br><span class="line"> Execution time: <span class="number">1598.656</span> ms</span><br><span class="line">(<span class="number">4</span> rows)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>我们多次执行同一条指令<code>select sum(a+b) from testreals;</code>，前后有几率出现不一样的数值。这原因就是因为rounding error。同样的情况也出现在<code>select cast(sum(a+b) as decimal) from testreals;</code></li>
<li><code>explain &lt;sql&gt;</code>: 给出对应的query plan</li>
<li><code>explain analyze &lt;sql&gt;</code>: : 给出对应的query plan + 执行sql</li>
</ul>
<h1 id="DECIMAL表格"><a href="#DECIMAL表格" class="headerlink" title="DECIMAL表格"></a><code>DECIMAL</code>表格</h1><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# select sum(a+b) from testdecimals;</span><br><span class="line">        sum        </span><br><span class="line">-------------------</span><br><span class="line"> <span class="number">1000169047.417319</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">1175.335</span> ms (<span class="number">00</span>:<span class="number">01.175</span>)</span><br><span class="line"></span><br><span class="line">testdb=# explain select sum(a+b) from testdecimals;</span><br><span class="line">                                            QUERY PLAN                                             </span><br><span class="line">---------------------------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Finalize <span class="title">Aggregate</span>  <span class="params">(cost=<span class="number">126949.30</span>.<span class="number">.126949</span><span class="number">.31</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">32</span>)</span></span></span><br><span class="line">   -&gt;  Gather  (cost=126949.08..126949.29 rows=2 width=32)</span><br><span class="line">         Workers Planned: <span class="number">2</span></span><br><span class="line">         -&gt;  <span class="function">Partial <span class="title">Aggregate</span>  <span class="params">(cost=<span class="number">125949.08</span>.<span class="number">.125949</span><span class="number">.09</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">32</span>)</span></span></span><br><span class="line">               -&gt;  Parallel Seq Scan on testdecimals  (cost=0.00..105116.05 rows=4166605 width=16)</span><br><span class="line">(<span class="number">5</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">0.295</span> ms</span><br><span class="line"></span><br><span class="line">testdb=# explain analyze select sum(a+b) from testdecimals;</span><br><span class="line">                                                                     QUERY PLAN                                                                      </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> <span class="function">Finalize <span class="title">Aggregate</span>  <span class="params">(cost=<span class="number">126949.30</span>.<span class="number">.126949</span><span class="number">.31</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">32</span>)</span> <span class="params">(actual time=<span class="number">1382.202</span>.<span class="number">.1382</span><span class="number">.202</span> rows=<span class="number">1</span> loops=<span class="number">1</span>)</span></span></span><br><span class="line">   -&gt;  Gather  (cost=126949.08..126949.29 rows=2 width=32) (actual time=1382.191..1384.527 rows=3 loops=1)</span><br><span class="line">         Workers Planned: <span class="number">2</span></span><br><span class="line">         Workers Launched: <span class="number">2</span></span><br><span class="line">         -&gt;  <span class="function">Partial <span class="title">Aggregate</span>  <span class="params">(cost=<span class="number">125949.08</span>.<span class="number">.125949</span><span class="number">.09</span> rows=<span class="number">1</span> <span class="built_in">width</span>=<span class="number">32</span>)</span> <span class="params">(actual time=<span class="number">1380.379</span>.<span class="number">.1380</span><span class="number">.379</span> rows=<span class="number">1</span> loops=<span class="number">3</span>)</span></span></span><br><span class="line">               -&gt;  Parallel Seq Scan on testdecimals  (cost=0.00..105116.05 rows=4166605 width=16) (actual time=0.023..310.259 rows=3333333 loops=3)</span><br><span class="line"> Planning time: <span class="number">0.034</span> ms</span><br><span class="line"> Execution time: <span class="number">1384.563</span> ms</span><br><span class="line">(<span class="number">8</span> rows)</span><br><span class="line"></span><br><span class="line">Time: <span class="number">1384.835</span> ms (<span class="number">00</span>:<span class="number">01.385</span>)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>select sum(a+b) from testdecimals;</code>无论我们执行多少次，出现的结果都是一样的。</li>
</ul>
<p>推荐阅读：</p>
<p>8.1. Numeric Types - Documentation of PostgreSQL 9.1: <span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjEvZGF0YXR5cGUtbnVtZXJpYy5odG1s" title="https://www.postgresql.org/docs/9.1/datatype-numeric.html">https://www.postgresql.org/docs/9.1/datatype-numeric.html<i class="fa fa-external-link"></i></span></p>
<p>How can I disable parallel queries in PostgreSQL? - Stackoverflow: <span class="exturl" data-url="aHR0cHM6Ly9kYmEuc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzIyNjY1NC9ob3ctY2FuLWktZGlzYWJsZS1wYXJhbGxlbC1xdWVyaWVzLWluLXBvc3RncmVzcWw=" title="https://dba.stackexchange.com/questions/226654/how-can-i-disable-parallel-queries-in-postgresql">https://dba.stackexchange.com/questions/226654/how-can-i-disable-parallel-queries-in-postgresql<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CMU-15445</category>
        <category>Storage</category>
        <category>DBMS</category>
        <category>Disk Management</category>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[DBMS]PostgreSQL导入数据集</title>
    <url>/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    <content><![CDATA[<p>本文介绍了几种数据集，以及导入它们到PostgreSQL的方法，另外也提了一下如何查看数据集信息的命令。这些数据集都会在我的博客中<a href="https://cakebytheoceanluo.github.io/categories/SQL/">SQL 初级/中级/高级部分</a>出现。</p>
<h1 id="查看数据集信息的命令"><a href="#查看数据集信息的命令" class="headerlink" title="查看数据集信息的命令"></a>查看数据集信息的命令</h1><p>我们可以在psql环境中输入：</p>
<ul>
<li><code>\d;</code>, <code>\d+;</code> 可以查看当前数据库中的表格</li>
<li><code>\d &lt;table_name&gt;;</code>, <code>\d+ &lt;table_name&gt;;</code>: 可以查看对应表格的schema</li>
</ul>
<p><br></p>
<p>另外我们也可以在<strong>命令行</strong>中输入：</p>
<ul>
<li><code>psql -d testdb -c '\d'</code></li>
<li><code>psql -d testdb -c '\d+'</code></li>
<li><code>psql -d testdb -c '\d &lt;table_name&gt;'</code></li>
<li><code>psql -d testdb -c '\d+ &lt;table_name&gt;'</code></li>
</ul>
<p>另外有关PostgreSQL的安装和配置见我的另外一篇文章: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/">[DBMS] PostgreSQL 安装与配置</a></p>
<a id="more"></a>
<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><h2 id="TUM-Uni数据集"><a href="#TUM-Uni数据集" class="headerlink" title="TUM Uni数据集"></a>TUM Uni数据集</h2><p><img data-src="https://db.in.tum.de/teaching/ws1920/grundlagen/uni.png?lang=de" alt="schema_de"></p>
<p><img data-src="https://hyper-db.de/uniEngl.png" alt="schema_en"></p>
<p>Schma来自<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL2tlbXBlci8/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/kemper/?lang=de">Prof. Alfons Kemper, Ph.D.<i class="fa fa-external-link"></i></span>的课件和书。是一个很小的数据集， 关于学生教授大学课程考试等等表格。这个数据集很适合用来学习，练习SQL。我对这个数据集写了很多文章，提供SQL的练习，大家可以去<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMTYxODQ2MQ==" title="https://segmentfault.com/a/1190000021618461">我的专栏目录<i class="fa fa-external-link"></i></span>去寻找。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql</span><br><span class="line">$ psql testdb &lt; uni_mysql.sql</span><br><span class="line">$ psql testdb <span class="comment"># 然后我们就进入这个testdb，可以对这些表格进行操作了。</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                        List of relations</span><br><span class="line"> Schema |     Name     | Type  | Owner |    Size    | Description </span><br><span class="line">--------+--------------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | assistenten  | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | hoeren       | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | professoren  | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | pruefen      | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | studenten    | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | voraussetzen | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | vorlesungen  | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line">(<span class="number">7</span> rows)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ studenten;</span><br><span class="line">                                         Table <span class="string">"public.studenten"</span></span><br><span class="line">  Column  |         Type          | Collation | Nullable | Default | Storage  | Stats target | Description </span><br><span class="line">----------+-----------------------+-----------+----------+---------+----------+--------------+-------------</span><br><span class="line"> matrnr   | integer               |           | <span class="keyword">not</span> null |         | plain    |              | </span><br><span class="line"> name     | character varying(30) |           | not null |         | extended |              | </span><br><span class="line"> semester | integer               |           |          |         | plain    |              | </span><br><span class="line">Indexes:</span><br><span class="line">    <span class="string">"studenten_pkey"</span> PRIMARY KEY, btree (matrnr)</span><br><span class="line">Referenced by:</span><br><span class="line">    TABLE <span class="string">"hoeren"</span> CONSTRAINT <span class="string">"hoeren_matrnr_fkey"</span> <span class="function">FOREIGN <span class="title">KEY</span> <span class="params">(matrnr)</span> REFERENCES <span class="title">studenten</span><span class="params">(matrnr)</span> ON DELETE CASCADE</span></span><br><span class="line">    TABLE "pruefen" CONSTRAINT "pruefen_matrnr_fkey" FOREIGN KEY (matrnr) REFERENCES studenten(matrnr) ON DELETE CASCADE</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="TUM-十项全能比赛数据集"><a href="#TUM-十项全能比赛数据集" class="headerlink" title="TUM 十项全能比赛数据集"></a>TUM 十项全能比赛数据集</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vc3FsX3plaG5rYW1wZl9kaXN6aXBsaW4uc3FsP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/ws1920/grundlagen/sql_zehnkampf_disziplin.sql?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/sql_zehnkampf_disziplin.sql?lang=de<i class="fa fa-external-link"></i></span></p>
<p>这里我把schema改写成英文：<br></p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ZehnkampfD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ZehnkampfD (</span><br><span class="line">    <span class="keyword">Name</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    Discipline <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    points <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ZehnkampfD <span class="keyword">values</span></span><br><span class="line">    (<span class="string">'Bolt'</span>,        <span class="string">'100m'</span>,         <span class="number">50</span>),</span><br><span class="line">    (<span class="string">'Bolt'</span>,        <span class="string">'Weitsprung'</span>,   <span class="number">50</span>),</span><br><span class="line">    (<span class="string">'Eaton'</span>,       <span class="string">'100m'</span>,         <span class="number">40</span>),</span><br><span class="line">    (<span class="string">'Eaton'</span>,       <span class="string">'Weitsprung'</span>,   <span class="number">60</span>),</span><br><span class="line">    (<span class="string">'Suarez'</span>,      <span class="string">'100m'</span>,         <span class="number">60</span>),</span><br><span class="line">    (<span class="string">'Suarez'</span>,      <span class="string">'Weitsprung'</span>,   <span class="number">60</span>),</span><br><span class="line">    (<span class="string">'Behrenbruch'</span>, <span class="string">'100m'</span>,         <span class="number">30</span>),</span><br><span class="line">    (<span class="string">'Behrenbruch'</span>, <span class="string">'Weitsprung'</span>,   <span class="number">50</span>)</span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>再把这几行写入文件<code>ZehnkampfD.sql</code>，载入数据库<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 这里testdb应该是另外一个新建的 没有载入数据的数据库</span></span><br><span class="line">$ psql testdb &lt; ZehnkampfD.sql</span><br><span class="line">$ psql testdb <span class="comment"># 然后我们就进入这个testdb，可以对这些表格进行操作了。</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                       List of relations</span><br><span class="line"> Schema |    Name    | Type  | Owner |    Size    | Description </span><br><span class="line">--------+------------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | zehnkampfd | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ zehnkampfd;</span><br><span class="line">                                          Table <span class="string">"public.zehnkampfd"</span></span><br><span class="line">  Column   |          Type          | Collation | Nullable | Default | Storage  | Stats target | Description </span><br><span class="line">-----------+------------------------+-----------+----------+---------+----------+--------------+-------------</span><br><span class="line"> name      | character varying(100) |           | not null |         | extended |              | </span><br><span class="line"> disziplin | character varying(100) |           | not null |         | extended |              | </span><br><span class="line"> punkte    | integer                |           | <span class="keyword">not</span> null |         | plain    |              |</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="TUM-公共交通数据集"><a href="#TUM-公共交通数据集" class="headerlink" title="TUM 公共交通数据集"></a>TUM 公共交通数据集</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vc3FsX2ZhaHJwbGFuLnNxbD9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/sql_fahrplan.sql?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/sql_fahrplan.sql?lang=de<i class="fa fa-external-link"></i></span></p>
<p>这里我把schema改写成英文：<br></p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> Fahrplan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Fahrplan (</span><br><span class="line">    From_ <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    To_ <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    Line_ <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    depart <span class="built_in">TIME</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    arrival <span class="built_in">TIME</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Fahrplan <span class="keyword">values</span></span><br><span class="line">    (<span class="string">'Garching, Forschungszentrum'</span>,     <span class="string">'Garching'</span>,                     <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:06:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:09:00'</span>),</span><br><span class="line">    (<span class="string">'Garching'</span>,                        <span class="string">'Garching-Hochbrück'</span>,           <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:09:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:11:00'</span>),</span><br><span class="line">    (<span class="string">'Garching-Hochbrück'</span>,              <span class="string">'Fröttmaning'</span>,                  <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:11:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:15:00'</span>),</span><br><span class="line">    (<span class="string">'Garching'</span>,                        <span class="string">'Garching, Forschungszentrum'</span>,  <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:06:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:09:00'</span>),</span><br><span class="line">    (<span class="string">'Garching-Hochbrück'</span>,              <span class="string">'Garching'</span>,                     <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:04:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:06:00'</span>),</span><br><span class="line">    (<span class="string">'Fröttmaning'</span>,                     <span class="string">'Garching-Hochbrück'</span>,           <span class="string">'U6'</span>,  <span class="built_in">TIME</span> <span class="string">'09:00:00'</span>, <span class="built_in">TIME</span> <span class="string">'09:04:00'</span>),</span><br><span class="line">    (<span class="string">'Garching, Forschungszentrum'</span>,     <span class="string">'Technische Universität'</span>,       <span class="string">'690'</span>, <span class="built_in">TIME</span> <span class="string">'17:56:00'</span>, <span class="built_in">TIME</span> <span class="string">'17:57:00'</span>)</span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>再把这几行写入文件<code>Fahrplan.sql</code>，载入数据库<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 这里testdb应该是另外一个新建的 没有载入数据的数据库</span></span><br><span class="line">$ psql testdb &lt; Fahrplan.sql</span><br><span class="line">$ psql testdb <span class="comment"># 然后我们就进入这个testdb，可以对这些表格进行操作了。</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# \d+;</span><br><span class="line">                      List of relations</span><br><span class="line"> Schema |   Name   | Type  | Owner |    Size    | Description </span><br><span class="line">--------+----------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | fahrplan | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ fahrplan;</span><br><span class="line">                                          Table <span class="string">"public.fahrplan"</span></span><br><span class="line"> Column  |          Type          | Collation | Nullable | Default | Storage  | Stats target | Description </span><br><span class="line">---------+------------------------+-----------+----------+---------+----------+--------------+-------------</span><br><span class="line"> von     | character varying(100) |           | not null |         | extended |              | </span><br><span class="line"> nach    | character varying(100) |           | not null |         | extended |              | </span><br><span class="line"> linie   | character varying(10)  |           | not null |         | extended |              | </span><br><span class="line"> abfahrt | time without time zone |           | <span class="keyword">not</span> null |         | plain    |              | </span><br><span class="line"> ankunft | time without time zone |           | <span class="keyword">not</span> null |         | plain    |              |</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="TPC-H"><a href="#TPC-H" class="headerlink" title="TPC-H"></a>TPC-H</h2><p>我单独写了一篇文章，见我的博客: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5TPC-H%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS]PostgreSQL导入TPC-H数据集</a></p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                        List of relations</span><br><span class="line"> Schema |     Name     | Type  | Owner |    Size    | Description </span><br><span class="line">--------+--------------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | customer     | table | jigao | <span class="number">28</span> MB      | </span><br><span class="line"> <span class="keyword">public</span> | lineitem     | table | jigao | <span class="number">879</span> MB     | </span><br><span class="line"> <span class="keyword">public</span> | nation       | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | orders       | table | jigao | <span class="number">204</span> MB     | </span><br><span class="line"> <span class="keyword">public</span> | part         | table | jigao | <span class="number">32</span> MB      | </span><br><span class="line"> <span class="keyword">public</span> | partsupp     | table | jigao | <span class="number">136</span> MB     | </span><br><span class="line"> <span class="keyword">public</span> | region       | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | supplier     | table | jigao | <span class="number">1800</span> kB    | </span><br><span class="line">(<span class="number">8</span> rows)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ customer;</span><br><span class="line">                                            Table <span class="string">"public.customer"</span></span><br><span class="line">    Column    |          Type          | Collation | Nullable | Default | Storage  | Stats target | Description </span><br><span class="line">--------------+------------------------+-----------+----------+---------+----------+--------------+-------------</span><br><span class="line"> c_custkey    | integer                |           | <span class="keyword">not</span> null |         | plain    |              | </span><br><span class="line"> c_name       | character varying(25)  |           | not null |         | extended |              | </span><br><span class="line"> c_address    | character varying(40)  |           | not null |         | extended |              | </span><br><span class="line"> c_nationkey  | integer                |           | <span class="keyword">not</span> null |         | plain    |              | </span><br><span class="line"> c_phone      | character(<span class="number">15</span>)          |           | <span class="keyword">not</span> null |         | extended |              | </span><br><span class="line"> c_acctbal    | numeric(<span class="number">15</span>,<span class="number">2</span>)          |           | <span class="keyword">not</span> null |         | main     |              | </span><br><span class="line"> c_mktsegment | character(<span class="number">10</span>)          |           | <span class="keyword">not</span> null |         | extended |              | </span><br><span class="line"> c_comment    | character varying(117) |           | not null |         | extended |              |</span><br></pre></td></tr></tbody></table></figure>
<h2 id="IMDb-数据集"><a href="#IMDb-数据集" class="headerlink" title="IMDb 数据集"></a>IMDb 数据集</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxNzE4L2ZvdW5kYXRpb25zZGUvYWN0b3JzLmxpc3QueHo=" title="https://db.in.tum.de/teaching/ws1718/foundationsde/actors.list.xz">https://db.in.tum.de/teaching/ws1718/foundationsde/actors.list.xz<i class="fa fa-external-link"></i></span></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget https://db.in.tum.de/teaching/ws1718/foundationsde/actors.list.xz</span><br></pre></td></tr></tbody></table></figure>
<h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ unxz actors.list.xz </span><br><span class="line">$ awk <span class="string">'NR &gt;= 241 &amp;&amp; NR &lt;= 20494548'</span> actors.list &gt; actorsTrimmed.list</span><br><span class="line">$ iconv -f latin1 -t utf-8 actorsTrimmed.list &gt; actorsUtf8.list</span><br><span class="line">$ sed -r -e <span class="string">'s/\t+/|/g'</span> -e <span class="string">'s/((\s*)|(\{.*\})|(\[.*\])|(&lt;.*&gt;)|\(.*[a-zA-Z].*\))*$//g'</span> actorsUtf8.list | awk -F <span class="string">'|'</span>  <span class="string">'{if($1 != "") { actor = $1 }; if ($2) print actor "|" $2 }'</span> &gt; actors.csv</span><br></pre></td></tr></tbody></table></figure>
<h3 id="导入psql并建立索引"><a href="#导入psql并建立索引" class="headerlink" title="导入psql并建立索引"></a>导入psql并建立索引</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"># 这里testdb应该是另外一个新建的 没有载入数据的数据库</span><br><span class="line">$ psql testdb # 然后我们就进入这个testdb，可以对这些表格进行操作了。</span><br><span class="line"></span><br><span class="line">testdb=# create table playedin_text (actor_name <span class="built_in">text</span> <span class="keyword">not</span> null, movie_name <span class="built_in">text</span> <span class="keyword">not</span> null);</span><br><span class="line"></span><br><span class="line">testdb=# \copy playedin_text from actors.csv delimiter <span class="string">'|'</span>;</span><br><span class="line"></span><br><span class="line">testdb=# create table movies (id serial primary key , name <span class="built_in">text</span> <span class="keyword">not</span> null );</span><br><span class="line"></span><br><span class="line">testdb=# insert into movies ( name ) select distinct movie_name from playedin_text ;</span><br><span class="line"></span><br><span class="line">testdb=# create table actors (id serial primary key , name <span class="built_in">text</span> <span class="keyword">not</span> null );</span><br><span class="line"></span><br><span class="line">testdb=# insert into actors ( name ) select distinct actor_name from playedin_text ;</span><br><span class="line"></span><br><span class="line">testdb=# create table playedin ( movie integer references movies (id), actor integer references actors (id));</span><br><span class="line"></span><br><span class="line">testdb=# insert into playedin (actor , movie ) select actors.id , movies.id from actors, movies, playedin_text p where p.actor_name = actors.name <span class="keyword">and</span> p.movie_name = movies.name;</span><br><span class="line"></span><br><span class="line">testdb=# create index on playedin ( actor ); <span class="function">create index on <span class="title">playedin</span> <span class="params">( movie )</span></span>;</span><br><span class="line"></span><br><span class="line">testdb=# create index on playedin (actor); </span><br><span class="line"></span><br><span class="line">testdb=# create index on playedin (movie);</span><br></pre></td></tr></tbody></table></figure>
<h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                          List of relations</span><br><span class="line"> Schema |     Name      |   Type   | Owner |    Size    | Description </span><br><span class="line">--------+---------------+----------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | actors        | table    | jigao | <span class="number">98</span> MB      | </span><br><span class="line"> <span class="keyword">public</span> | actors_id_seq | sequence | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | movies        | table    | jigao | <span class="number">66</span> MB      | </span><br><span class="line"> <span class="keyword">public</span> | movies_id_seq | sequence | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | playedin      | table    | jigao | <span class="number">599</span> MB     | </span><br><span class="line"> <span class="keyword">public</span> | playedin_text | table    | jigao | <span class="number">1183</span> MB    | </span><br><span class="line">(<span class="number">6</span> rows)</span><br><span class="line"></span><br><span class="line">testdb=# \d actors</span><br><span class="line">                            Table <span class="string">"public.actors"</span></span><br><span class="line"> Column |  Type   | Collation | Nullable |              Default               </span><br><span class="line">--------+---------+-----------+----------+------------------------------------</span><br><span class="line"> id     | integer |           | not null | nextval('actors_id_seq'::regclass)</span><br><span class="line"> name   | <span class="built_in">text</span>    |           | <span class="keyword">not</span> null | </span><br><span class="line">Indexes:</span><br><span class="line">    <span class="string">"actors_pkey"</span> PRIMARY KEY, btree (id)</span><br><span class="line">Referenced by:</span><br><span class="line">    TABLE <span class="string">"playedin"</span> CONSTRAINT <span class="string">"playedin_actor_fkey"</span> <span class="function">FOREIGN <span class="title">KEY</span> <span class="params">(actor)</span> REFERENCES <span class="title">actors</span><span class="params">(id)</span></span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="CMU-15445-歌手数据集"><a href="#CMU-15445-歌手数据集" class="headerlink" title="CMU-15445 歌手数据集"></a>CMU-15445 歌手数据集</h2><p>这个数据集在CMU-15445 Lec2 Advanced SQL中使用，见我的两篇博客笔记:</p>
<ul>
<li><a href="https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part1/">[CMU-15445]Lec02_part1</a></li>
<li><a href="https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part2/">[CMU-15445]Lec02_part2</a></li>
</ul>
<p><img data-src="/images/CMU1544564/Lec02/7.jpg" alt="7.jpg"></p>
<p>对应的SQL语句　<a href="https://cakebytheoceanluo.github.io/download/CMU15445/lec02_schema.sql">下载</a>：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> student <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> course <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> enrolled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student </span><br><span class="line">   (<span class="keyword">sid</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">16</span>), </span><br><span class="line">    login <span class="built_in">varchar</span>(<span class="number">32</span>), </span><br><span class="line">    age <span class="built_in">smallint</span>, </span><br><span class="line">    gpa <span class="built_in">numeric</span>(<span class="number">2</span>, <span class="number">1</span>) <span class="keyword">check</span> (gpa <span class="keyword">between</span> <span class="number">0.0</span> <span class="keyword">and</span> <span class="number">4.0</span>)</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course </span><br><span class="line">   (cid <span class="built_in">varchar</span>(<span class="number">32</span>) primary <span class="keyword">key</span>, </span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> enrolled </span><br><span class="line">   (<span class="keyword">sid</span> <span class="built_in">int</span> <span class="keyword">references</span> student (<span class="keyword">sid</span>) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>, </span><br><span class="line">    cid <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">references</span> course (cid) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>, </span><br><span class="line">    grade <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">check</span> (grade <span class="keyword">in</span> (<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>)),</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="keyword">sid</span>, cid)</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (<span class="keyword">sid</span>, <span class="keyword">name</span>, login, age, gpa) <span class="keyword">values</span> (<span class="number">53666</span>, <span class="string">'Kanye'</span>, <span class="string">'kanye@cs'</span>, <span class="number">39</span>, <span class="number">4.0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (<span class="keyword">sid</span>, <span class="keyword">name</span>, login, age, gpa) <span class="keyword">values</span> (<span class="number">53688</span>, <span class="string">'Bieber'</span>, <span class="string">'jbieber@cs'</span>, <span class="number">22</span>, <span class="number">3.9</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (<span class="keyword">sid</span>, <span class="keyword">name</span>, login, age, gpa) <span class="keyword">values</span> (<span class="number">53655</span>, <span class="string">'Tupac'</span>, <span class="string">'shakur@cs'</span>, <span class="number">26</span>, <span class="number">3.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course (cid, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'15-445'</span>, <span class="string">'Database Systems'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course (cid, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'15-721'</span>, <span class="string">'Advanced Database Systems'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course (cid, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'15-826'</span>, <span class="string">'Data Mining'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course (cid, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'15-823'</span>, <span class="string">'Advanced Topics in Databases'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53666</span>, <span class="string">'15-445'</span>, <span class="string">'C'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53688</span>, <span class="string">'15-721'</span>, <span class="string">'A'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53666</span>, <span class="string">'15-826'</span>, <span class="string">'B'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53655</span>, <span class="string">'15-445'</span>, <span class="string">'B'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53666</span>, <span class="string">'15-721'</span>, <span class="string">'C'</span>);</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>可以在PostgreSQL, MySQL, SQLite中使用</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ wget https://cakebytheoceanluo.github.io/download/CMU15445/lec02_schema.sql</span><br><span class="line">$ psql testdb &lt; uni_mysql.sql</span><br><span class="line">$ psql testdb <span class="comment"># 然后我们就进入这个testdb，可以对这些表格进行操作了。</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                        List of relations</span><br><span class="line"> Schema |     Name     | Type  | Owner |    Size    | Description </span><br><span class="line">--------+--------------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | course       | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | enrolled     | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line"> <span class="keyword">public</span> | student      | table | jigao | <span class="number">8192</span> bytes | </span><br><span class="line">(<span class="number">3</span> rows)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ enrolled</span><br><span class="line">                                         Table <span class="string">"public.enrolled"</span></span><br><span class="line"> Column |         Type          | Collation | Nullable | Default | Storage  | Stats target | Description </span><br><span class="line">--------+-----------------------+-----------+----------+---------+----------+--------------+-------------</span><br><span class="line"> sid    | integer               |           | <span class="keyword">not</span> null |         | plain    |              | </span><br><span class="line"> cid    | character varying(<span class="number">32</span>) |           | <span class="keyword">not</span> null |         | extended |              | </span><br><span class="line"> grade  | character(<span class="number">1</span>)          |           |          |         | extended |              | </span><br><span class="line">Indexes:</span><br><span class="line">    <span class="string">"enrolled_pkey"</span> PRIMARY KEY, btree (sid, cid)</span><br><span class="line">Check constraints:</span><br><span class="line">    <span class="string">"enrolled_grade_check"</span> CHECK (grade = ANY (ARRAY[<span class="string">'A'</span>::bpchar, <span class="string">'B'</span>::bpchar, <span class="string">'C'</span>::bpchar]))</span><br><span class="line">Foreign-key constraints:</span><br><span class="line">    <span class="string">"enrolled_cid_fkey"</span> FOREIGN KEY (cid) REFERENCES course(cid) ON DELETE CASCADE</span><br><span class="line">    <span class="string">"enrolled_sid_fkey"</span> FOREIGN KEY (sid) REFERENCES student(sid) ON DELETE CASCADE</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="CMU-15445-分数数据集-Mock"><a href="#CMU-15445-分数数据集-Mock" class="headerlink" title="CMU-15445 分数数据集 (Mock)"></a>CMU-15445 分数数据集 (Mock)</h2><p>更多关于这个数据集，见这个实验<a href="https://cakebytheoceanluo.github.io/2020/03/16/DBMS-Postgres%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98precision-numbers/">[DBMS] Postgres 精度问题 precision_numbers</a></p>
<p>这个实验服务于<a href="https://cakebytheoceanluo.github.io/2020/03/16/CMU-15445-Lec04/">[CMU-15445]Lec04</a></p>
<h3 id="数据集faker"><a href="#数据集faker" class="headerlink" title="数据集faker"></a>数据集faker</h3><p>我用python写了一个类似的数据集faker:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000000</span>):</span><br><span class="line">    print(<span class="string">f'<span class="subst">{float(Decimal(random.randrange(<span class="number">0</span>, <span class="number">100000000</span>) / <span class="number">1000000</span>))}</span>,<span class="subst">{float(Decimal(random.randrange(<span class="number">0</span>, <span class="number">100000000</span>) / <span class="number">1000000</span>))}</span>'</span>)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h4><p>下载: <a href="https://cakebytheoceanluo.github.io/download/CMU15445/lec04_float_faker.py">lec04_float_faker.py</a></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>使用:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ./lec04_float_faker.py &gt; data.csv</span><br></pre></td></tr></tbody></table></figure>
<p>到现在我们获得了<code>data.csv</code>这个文件:</p>
<h3 id="导入数据集"><a href="#导入数据集" class="headerlink" title="导入数据集"></a>导入数据集</h3><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> testreals;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> testdecimals;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> testreals (a <span class="built_in">REAL</span> <span class="keyword">not</span> <span class="literal">null</span>, b <span class="built_in">REAL</span> <span class="keyword">not</span> <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> testdecimals (a <span class="built_in">DECIMAL</span>(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> <span class="literal">null</span>, b <span class="built_in">DECIMAL</span>(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> <span class="literal">null</span>);</span><br><span class="line">copy testreals from '/tmp/data.csv' delimiter ',' csv;</span><br><span class="line">copy testdecimals from '/tmp/data.csv' delimiter ',' csv;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="输出例子"><a href="#输出例子" class="headerlink" title="输出例子"></a>输出例子</h4><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# drop table <span class="keyword">if</span> <span class="built_in">exists</span> testreals;</span><br><span class="line">DROP TABLE</span><br><span class="line"></span><br><span class="line">testdb=# drop table <span class="keyword">if</span> <span class="built_in">exists</span> testdecimals;</span><br><span class="line">DROP TABLE</span><br><span class="line"></span><br><span class="line">testdb=# create table testreals (a REAL <span class="keyword">not</span> null, b REAL <span class="keyword">not</span> null);</span><br><span class="line">CREATE TABLE</span><br><span class="line"></span><br><span class="line">testdb=# create table testdecimals (a DECIMAL(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> null, b DECIMAL(<span class="number">10</span>, <span class="number">6</span>) <span class="keyword">not</span> null);</span><br><span class="line">CREATE TABLE</span><br><span class="line"></span><br><span class="line">testdb=# copy testreals from '/tmp/data.csv' delimiter ',' csv;</span><br><span class="line">COPY <span class="number">10000000</span></span><br><span class="line"></span><br><span class="line">testdb=# copy testdecimals from '/tmp/data.csv' delimiter ',' csv;</span><br><span class="line">COPY <span class="number">10000000</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# \d+</span><br><span class="line">                        List of relations</span><br><span class="line"> Schema |     Name     | Type  | Owner |    Size    | Description </span><br><span class="line">--------+--------------+-------+-------+------------+-------------</span><br><span class="line"> <span class="keyword">public</span> | testdecimals | table | jigao | <span class="number">496</span> MB     | </span><br><span class="line"> <span class="keyword">public</span> | testreals    | table | jigao | <span class="number">346</span> MB     | </span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">testdb=# \d+ testreals </span><br><span class="line">                               Table <span class="string">"public.testreals"</span></span><br><span class="line"> Column | Type | Collation | Nullable | Default | Storage | Stats target | Description </span><br><span class="line">--------+------+-----------+----------+---------+---------+--------------+-------------</span><br><span class="line"> a      | real |           | <span class="keyword">not</span> null |         | plain   |              | </span><br><span class="line"> b      | real |           | <span class="keyword">not</span> null |         | plain   |              | </span><br><span class="line"></span><br><span class="line">testdb=# \d+ testdecimals </span><br><span class="line">                                  Table <span class="string">"public.testdecimals"</span></span><br><span class="line"> Column |     Type      | Collation | Nullable | Default | Storage | Stats target | Description </span><br><span class="line">--------+---------------+-----------+----------+---------+---------+--------------+-------------</span><br><span class="line"> a      | numeric(<span class="number">10</span>,<span class="number">6</span>) |           | <span class="keyword">not</span> null |         | main    |              | </span><br><span class="line"> b      | numeric(<span class="number">10</span>,<span class="number">6</span>) |           | <span class="keyword">not</span> null |         | main    |              |</span><br></pre></td></tr></tbody></table></figure><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>DBMS</category>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[DBMS]PostgreSQL导入TPC-H数据集</title>
    <url>/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5TPC-H%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    <content><![CDATA[<p>本文关注如何将TPC-H数据集导入至PostgreSQL, 同时简单提一下如何生成TPC-H数据。</p>
<h1 id="TPC-H介绍"><a href="#TPC-H介绍" class="headerlink" title="TPC-H介绍"></a>TPC-H介绍</h1><blockquote>
<p>TPC-H is a Decision Support Benchmark. The TPC Benchmark™H (TPC-H) is a decision support benchmark. It consists of a suite of business oriented ad-hoc queries and concurrent data modifications. <sup><a href="#fn1">1</a></sup></p>
</blockquote>
<p>TPC-H是TPC协会提供的一个benchmark，用来模拟一个现实中的商业应用，且自带22个SQL Query。这22个Query均关注于OLAP分析型查询。<br>这些Query可以在如下的地方找到:</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzJuZFF1YWRyYW50L3BnLXRwY2gvdHJlZS9tYXN0ZXIvcXVlcmllcw==" title="https://github.com/2ndQuadrant/pg-tpch/tree/master/queries">https://github.com/2ndQuadrant/pg-tpch/tree/master/queries<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbCM=" title="https://hyper-db.de/interface.html#">https://hyper-db.de/interface.html#<i class="fa fa-external-link"></i></span> 点击右下角Insert TPC-H Query</li>
<li><span class="exturl" data-url="aHR0cHM6Ly91bWJyYS5kYi5pbi50dW0uZGUvaW50ZXJmYWNlLw==" title="https://umbra.db.in.tum.de/interface/">https://umbra.db.in.tum.de/interface/<i class="fa fa-external-link"></i></span>　点击Load Query</li>
</ul>
<p>有一篇论文具体讲每一个TPC-H的Query，实际上和本文无关，我链接在这里：　<span class="exturl" data-url="aHR0cHM6Ly9ob21lcGFnZXMuY3dpLm5sL35ib25jei9zbmItY2hhbGxlbmdlL2Nob2tlcG9pbnRzLXRwY3RjLnBkZg==" title="https://homepages.cwi.nl/~boncz/snb-challenge/chokepoints-tpctc.pdf">TPC-H Analyzed: Hidden Messages and Lessons Learned from an Influential Benchmark<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>
<h1 id="TPC-H数据集"><a href="#TPC-H数据集" class="headerlink" title="TPC-H数据集"></a>TPC-H数据集</h1><p>我们可以手动生成TPC-H是数据集，常常成为<strong>synthetic dataset</strong>, 人工生成的数据集。</p>
<p>我们使用这个工具：　<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cnVtL3RwY2gtZGJnZW4=" title="https://github.com/electrum/tpch-dbgen">https://github.com/electrum/tpch-dbgen<i class="fa fa-external-link"></i></span></p>
<p>使用方法是：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:electrum/tpch-dbgen.git</span><br><span class="line">Cloning into <span class="string">'tpch-dbgen'</span>...</span><br><span class="line">remote: Enumerating objects: 149, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 149 (delta 0), reused 0 (delta 0), pack-reused 149</span><br><span class="line">Receiving objects: 100% (149/149), 214.31 KiB | 637.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (34/34), <span class="keyword">done</span>.</span><br><span class="line">$ <span class="built_in">cd</span> tpch-dbgen/</span><br><span class="line">$ make</span><br><span class="line"><span class="comment">## make 的输出我全部删去了</span></span><br><span class="line">$ ./dbgen</span><br><span class="line">TPC-H Population Generator (Version 2.14.0)</span><br><span class="line">Copyright Transaction Processing Performance Council 1994 - 2010</span><br><span class="line">$ ls | grep <span class="string">'.*.tbl'</span></span><br><span class="line">customer.tbl</span><br><span class="line">lineitem.tbl</span><br><span class="line">nation.tbl</span><br><span class="line">orders.tbl</span><br><span class="line">partsupp.tbl</span><br><span class="line">part.tbl</span><br><span class="line">region.tbl</span><br><span class="line">supplier.tbl</span><br></pre></td></tr></tbody></table></figure>
<p>我们看到最后生成了8个<code>.tbl</code>文件，它们就是TPC-H的8个表格(a.k.a关系)。另外我这里生成的是TPC-H scale factor=1的数据集，即它的伸缩系数是１，生成的数据大概是1GiB左右。我们还可以在生成数据的时候调整这这scale factor(sf)，比如当它为10的时候，生成的数据大概是10GiB左右。另外我们也可以在生成的时候去特定生成一张表格。这些情况都可以在，　<code>dbgen</code>这个程序中通过参数确定，这里也不再详细说了。</p>
<h2 id="dbgen的各种参数-可略读浏览"><a href="#dbgen的各种参数-可略读浏览" class="headerlink" title="dbgen的各种参数 (可略读浏览)"></a><code>dbgen</code>的各种参数 (可略读浏览)</h2><p>详见：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ./dbgen --<span class="built_in">help</span></span><br><span class="line">./dbgen: invalid option -- <span class="string">'-'</span></span><br><span class="line">ERROR: option <span class="string">'-'</span> unknown.</span><br><span class="line">TPC-H Population Generator (Version 2.14.0 build 0)</span><br><span class="line">Copyright Transaction Processing Performance Council 1994 - 2010</span><br><span class="line">USAGE:</span><br><span class="line">dbgen [-{vf}][-T {pcsoPSOL}]</span><br><span class="line">	[-s &lt;scale&gt;][-C &lt;procs&gt;][-S &lt;step&gt;]</span><br><span class="line">dbgen [-v] [-O m] [-s &lt;scale&gt;] [-U &lt;updates&gt;]</span><br><span class="line"></span><br><span class="line">Basic Options</span><br><span class="line">===========================</span><br><span class="line">-C &lt;n&gt; -- separate data <span class="built_in">set</span> into &lt;n&gt; chunks (requires -S, default: 1)</span><br><span class="line">-f     -- force. Overwrite existing files</span><br><span class="line">-h     -- display this message</span><br><span class="line">-q     -- <span class="built_in">enable</span> QUIET mode</span><br><span class="line">-s &lt;n&gt; -- <span class="built_in">set</span> Scale Factor (SF) to  &lt;n&gt; (default: 1) </span><br><span class="line">-S &lt;n&gt; -- build the &lt;n&gt;th step of the data/update <span class="built_in">set</span> (used with -C or -U)</span><br><span class="line">-U &lt;n&gt; -- generate &lt;n&gt; update sets</span><br><span class="line">-v     -- <span class="built_in">enable</span> VERBOSE mode</span><br><span class="line"></span><br><span class="line">Advanced Options</span><br><span class="line">===========================</span><br><span class="line">-b &lt;s&gt; -- load distributions <span class="keyword">for</span> &lt;s&gt; (default: dists.dss)</span><br><span class="line">-d &lt;n&gt; -- split deletes between &lt;n&gt; files (requires -U)</span><br><span class="line">-i &lt;n&gt; -- split inserts between &lt;n&gt; files (requires -U)</span><br><span class="line">-T c   -- generate cutomers ONLY</span><br><span class="line">-T l   -- generate nation/region ONLY</span><br><span class="line">-T L   -- generate lineitem ONLY</span><br><span class="line">-T n   -- generate nation ONLY</span><br><span class="line">-T o   -- generate orders/lineitem ONLY</span><br><span class="line">-T O   -- generate orders ONLY</span><br><span class="line">-T p   -- generate parts/partsupp ONLY</span><br><span class="line">-T P   -- generate parts ONLY</span><br><span class="line">-T r   -- generate region ONLY</span><br><span class="line">-T s   -- generate suppliers ONLY</span><br><span class="line">-T S   -- generate partsupp ONLY</span><br><span class="line"></span><br><span class="line">To generate the SF=1 (1GB), validation database population, use:</span><br><span class="line">	dbgen -vf -s 1</span><br><span class="line"></span><br><span class="line">To generate updates <span class="keyword">for</span> a SF=1 (1GB), use:</span><br><span class="line">	dbgen -v -U 1 -s 1</span><br></pre></td></tr></tbody></table></figure>
<h2 id="另外可替代生成的工具"><a href="#另外可替代生成的工具" class="headerlink" title="另外可替代生成的工具"></a>另外可替代生成的工具</h2><p>当然也有其他工具可以生成这个数据集，　比如: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dyZWdyYWhuL3RwY2gta2l0" title="https://github.com/gregrahn/tpch-kit">https://github.com/gregrahn/tpch-kit<i class="fa fa-external-link"></i></span>　。但是我们不在这篇文章中赘述。</p>
<p><br><br><br></p>
<h1 id="PostgreSQL准备"><a href="#PostgreSQL准备" class="headerlink" title="PostgreSQL准备"></a>PostgreSQL准备</h1><h2 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h2><p>PostgreSQL具体操作详见我的另一篇文章: <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/#%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E5%BA%93">[DBMS] PostgreSQL 安装与配置 - 新建一个用户数据库</a></p>
<p>这里我就展示我的命令和输出例子，在你的环境也大同小异。</p>
<h3 id="新建数据库命令"><a href="#新建数据库命令" class="headerlink" title="新建数据库命令"></a>新建数据库命令</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo -u postgres psql</span><br><span class="line">postgres=# CREATE DATABASE tpch;</span><br><span class="line">postgres=# GRANT ALL ON DATABASE tpch to &lt;我们之前创建的用户名 不带尖角括号&gt;;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="输出例子"><a href="#输出例子" class="headerlink" title="输出例子"></a>输出例子</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo -u postgres psql</span><br><span class="line">[sudo] password <span class="keyword">for</span> jigao: </span><br><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">postgres=# CREATE DATABASE tpch_sf1;</span><br><span class="line">CREATE DATABASE</span><br><span class="line">postgres=#  GRANT ALL ON DATABASE tpch_sf1 to jigao;</span><br><span class="line">GRANT</span><br><span class="line">postgres=# \q</span><br></pre></td></tr></tbody></table></figure>
<h2 id="新建表格"><a href="#新建表格" class="headerlink" title="新建表格"></a>新建表格</h2><p>这里需要用到<code>tpch-dbgen/dss.ddl</code>这个文件，它就在和我们刚刚<code>dbgen</code>程序同一个文件，也可以在repo中找到：　<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cnVtL3RwY2gtZGJnZW4vYmxvYi9tYXN0ZXIvZHNzLmRkbA==" title="https://github.com/electrum/tpch-dbgen/blob/master/dss.ddl">https://github.com/electrum/tpch-dbgen/blob/master/dss.ddl<i class="fa fa-external-link"></i></span></p>
<h3 id="新建表格命令"><a href="#新建表格命令" class="headerlink" title="新建表格命令"></a>新建表格命令</h3><p><code>$ psql -d tpch_sf1 &lt; dss.ddl</code></p>
<h3 id="输出例子-1"><a href="#输出例子-1" class="headerlink" title="输出例子"></a>输出例子</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ file dss.ddl</span><br><span class="line">dss.ddl: ASCII text</span><br><span class="line">$ psql tpch_sf1 &lt; dss.ddl </span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br><span class="line">CREATE TABLE</span><br></pre></td></tr></tbody></table></figure>
<h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ psql -d tpch_sf1 -c <span class="string">'\dt+'</span></span><br><span class="line">                      List of relations</span><br><span class="line"> Schema |   Name   | Type  | Owner |  Size   | Description </span><br><span class="line">--------+----------+-------+-------+---------+-------------</span><br><span class="line"> public | customer | table | jigao | 0 bytes | </span><br><span class="line"> public | lineitem | table | jigao | 0 bytes | </span><br><span class="line"> public | nation   | table | jigao | 0 bytes | </span><br><span class="line"> public | orders   | table | jigao | 0 bytes | </span><br><span class="line"> public | part     | table | jigao | 0 bytes | </span><br><span class="line"> public | partsupp | table | jigao | 0 bytes | </span><br><span class="line"> public | region   | table | jigao | 0 bytes | </span><br><span class="line"> public | supplier | table | jigao | 0 bytes | </span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>如果能看到上面的输出，那么这些表格已经被新建了。</li>
</ul>
<p><br></p>
<p><code>$man psql</code>:</p>
<blockquote>
<pre><code>   -d dbname
   -c command
</code></pre></blockquote>
<h2 id="TPC-H-Schema"><a href="#TPC-H-Schema" class="headerlink" title="TPC-H Schema"></a>TPC-H Schema</h2><p>ddl即Data Definition Language 数据定义语言, 也是就是TPC-H中表格的架构和相互关系。</p>
<p><img data-src="https://hyper-db.de/tpch.png" alt="TPC-H Schema, Source: https://hyper-db.de/tpch.png"></p>
<p><br><br><br></p>
<h1 id="导入PostgreSQL-2"><a href="#导入PostgreSQL-2" class="headerlink" title="导入PostgreSQL 2"></a>导入PostgreSQL <sup><a href="#fn2">2</a></sup></h1><h2 id="导入命令"><a href="#导入命令" class="headerlink" title="导入命令"></a>导入命令</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ </span><br><span class="line">for i in `ls *.tbl`; do</span><br><span class="line">    echo $i;</span><br><span class="line">    sed -i 's/|$//' *.tbl;</span><br><span class="line">    name=`echo $i| cut -d'.' -f1`;</span><br><span class="line">    psql -d tpch_sf1 -c "COPY $name FROM '`pwd`/$i' DELIMITER '|' ENCODING 'LATIN1';";</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>sed -i 's/|$//' *.tbl;</code>: 对于每一个<code>.tbl</code>文件，将每一行最后的<code>|</code>去掉</li>
<li>因为psql会认为分隔符<code>|</code>后面还依然有数据。</li>
</ul>
<h2 id="输出例子-2"><a href="#输出例子-2" class="headerlink" title="输出例子"></a>输出例子</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> `ls *.tbl`; <span class="keyword">do</span></span><br><span class="line">&gt;     <span class="built_in">echo</span> <span class="variable">$i</span>;</span><br><span class="line">&gt;     sed -i <span class="string">'s/|$//'</span> *.tbl;</span><br><span class="line">&gt;     name=`<span class="built_in">echo</span> <span class="variable">$i</span>| cut -d<span class="string">'.'</span> -f1`;</span><br><span class="line">&gt;     psql -d tpch_sf1 -c <span class="string">"COPY <span class="variable">$name</span> FROM '`pwd`/<span class="variable">$i</span>' DELIMITER '|' ENCODING 'LATIN1';"</span>;</span><br><span class="line">&gt; <span class="keyword">done</span></span><br><span class="line">customer.tbl</span><br><span class="line">COPY 150000</span><br><span class="line">lineitem.tbl</span><br><span class="line">COPY 6001215</span><br><span class="line">nation.tbl</span><br><span class="line">COPY 25</span><br><span class="line">orders.tbl</span><br><span class="line">COPY 1500000</span><br><span class="line">partsupp.tbl</span><br><span class="line">COPY 800000</span><br><span class="line">part.tbl</span><br><span class="line">COPY 200000</span><br><span class="line">region.tbl</span><br><span class="line">COPY 5</span><br><span class="line">supplier.tbl</span><br><span class="line">COPY 1000</span><br></pre></td></tr></tbody></table></figure>
<h2 id="检查-1"><a href="#检查-1" class="headerlink" title="检查"></a>检查</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ psql -d tpch_sf1 -c <span class="string">'\dt+'</span></span><br><span class="line">                      List of relations</span><br><span class="line"> Schema |   Name   | Type  | Owner |    Size    | Description </span><br><span class="line">--------+----------+-------+-------+------------+-------------</span><br><span class="line"> public | customer | table | jigao | 28 MB      | </span><br><span class="line"> public | lineitem | table | jigao | 879 MB     | </span><br><span class="line"> public | nation   | table | jigao | 8192 bytes | </span><br><span class="line"> public | orders   | table | jigao | 204 MB     | </span><br><span class="line"> public | part     | table | jigao | 32 MB      | </span><br><span class="line"> public | partsupp | table | jigao | 136 MB     | </span><br><span class="line"> public | region   | table | jigao | 8192 bytes | </span><br><span class="line"> public | supplier | table | jigao | 1800 kB    | </span><br><span class="line">(8 rows)</span><br><span class="line"></span><br><span class="line">$ psql -d tpch_sf1  -c <span class="string">"select count(*) from lineitem"</span>;</span><br><span class="line">  count  </span><br><span class="line">---------</span><br><span class="line"> 6001215</span><br><span class="line">(1 row)r | table | jigao | 1800 kB    | </span><br><span class="line">(8 rows)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>如果能看到上面的输出，那么这些表格已经被载入了。</li>
</ul>
<h2 id="替代方式-Bash-Script"><a href="#替代方式-Bash-Script" class="headerlink" title="替代方式: Bash Script"></a>替代方式: Bash Script</h2><p>我将<a href="#导入命令">上面的导入数据命令</a>写成了一个bash script脚本: <a href="https://cakebytheoceanluo.github.io/download/dbms/psql_tpch_import.sh">下载</a></p>
<p><strong>注意我更改了带psql那行，这个脚本需要一个变量，即数据库的名字，在本文例子中是<code>tpch_sf1</code>，你当然可以在新建数据库的时候自行选择。</strong></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ chmod +x psql_tpch_import.sh </span><br><span class="line">$ ./psql_tpch_import.sh tpch_sf1</span><br></pre></td></tr></tbody></table></figure>
<p><br><br><br></p>
<p>引用：</p>
<p><a name="fn1">1</a>: <span class="exturl" data-url="aHR0cDovL3d3dy50cGMub3JnL3RwY2gv" title="http://www.tpc.org/tpch/">http://www.tpc.org/tpch/<i class="fa fa-external-link"></i></span></p>
<p><a name="fn2">2</a>: TPCH on PostgreSQL - Xi Liang: <span class="exturl" data-url="aHR0cDovL3h0ci5haS9ibG9nLzIwMTktMDMtMTItdHBjaC8=" title="http://xtr.ai/blog/2019-03-12-tpch/">http://xtr.ai/blog/2019-03-12-tpch/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cnVtL3RwY2gtZGJnZW4=" title="https://github.com/electrum/tpch-dbgen">https://github.com/electrum/tpch-dbgen<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>DBMS</category>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>TPC-H</tag>
      </tags>
  </entry>
  <entry>
    <title>[DBMS]PostgreSQL安装与配置</title>
    <url>/2020/03/15/DBMS-PostgreSQL%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="PostgreSQL介绍"><a href="#PostgreSQL介绍" class="headerlink" title="PostgreSQL介绍"></a>PostgreSQL介绍</h1><p>PostgreSQL是一个开源的对象-关系数据库数据库管理系统。它最初开始于在加利福尼亚大学伯克利分校(UCB)的Ingres计划。这个计划的领导者Michael Stonebraker在1982年离开加利福尼亚大学伯克利分校去推进Ingres的商业化，但最后还是返回了学术界。在1985年返回伯克利之后，Michael Stonebraker开始了post-Ingres计划，致力于解决在1980年代早期所出现一些数据库系统存在的问题。Postgres和Ingres的代码库开始(并保持)完全分离。<sup><a href="#myfootnote1">1</a></sup></p>
<p>Michael Stonebraker于2014年获得图灵奖。另外PostgreSQL也常称为psql。</p>
<p>本文主要记录PostgreSQL的安装和基本配置。</p>
<a id="more"></a>
<h1 id="PostgreSQL-安装"><a href="#PostgreSQL-安装" class="headerlink" title="PostgreSQL 安装"></a>PostgreSQL 安装</h1><p>本文基于deb Linux系统。</p>
<p>安装PostgreSQL:<br></p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install postgresql postgresql-contrib</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>上面这条指令包括了PostgreSQL的客户端和服务器端，另外还有一些其他插件。　</p>
<p>例如<code>apt-get install postgresql-11</code>会安装上如下软件　<sup><a href="#fn">2</a></sup>：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>software</th>
<th>functionality</th>
</tr>
</thead>
<tbody>
<tr>
<td>postgresql-client-11</td>
<td>client libraries and client binaries</td>
</tr>
<tr>
<td>postgresql-11</td>
<td>core database server</td>
</tr>
<tr>
<td>postgresql-contrib-9.x</td>
<td>additional supplied modules (part of the postgresql-xx package in version 10 and later)</td>
</tr>
<tr>
<td>libpq-dev</td>
<td>libraries and headers for C language frontend development</td>
</tr>
<tr>
<td>postgresql-server-dev-11</td>
<td>libraries and headers for C language backend development</td>
</tr>
<tr>
<td>pgadmin4</td>
<td>pgAdmin 4 graphical administration utility</td>
</tr>
</tbody>
</table>
</div>
<p>其他的系统可以在官方下载网页中找到：　<span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG93bmxvYWQv" title="https://www.postgresql.org/download/">https://www.postgresql.org/download/<i class="fa fa-external-link"></i></span></p>
<p><br></p>
<p>另外PostgreSQL和MySQL一样属于”<strong>正式的数据库</strong>“: 客户端和服务器通过端口通信。不像SQLite这种嵌入式的数据库，不区分客户端和服务器端。</p>
<p>当我们运行psql的时候(我们后面会讲如何运行):</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">psql (12.2 (Ubuntu 12.2-2.pgdg18.04+1), server 10.12 (Ubuntu 10.12-2.pgdg18.04+1))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>12.2</code>: 是客户端的版本</li>
<li><code>10.12</code>: 是服务器端的版本</li>
</ul>
<p>同时查看版本，也可以在PostgreSQL通过如下命令：<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ psql -c <span class="string">'select version();'</span></span><br><span class="line">                                                               version                                                               </span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> PostgreSQL 10.12 (Ubuntu 10.12-2.pgdg18.04+1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0, 64-bit</span><br><span class="line">(1 row)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="管理PostgreSQL"><a href="#管理PostgreSQL" class="headerlink" title="管理PostgreSQL"></a>管理PostgreSQL</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo systemctl (start|stop|restart|reload|status) postgresql</span><br></pre></td></tr></tbody></table></figure>
<p>比如：</p>
<ul>
<li>启动PostgreSQL: <code>sudo systemctl start postgresql</code></li>
<li>停止PostgreSQL: <code>sudo systemctl stop postgresql</code></li>
<li>重启PostgreSQL: <code>sudo systemctl restart postgresql</code></li>
<li>查看PostgreSQL状态: <code>systemctl status postgresql</code></li>
<li>reload (我从来没用过这个): : <code>sudo systemctl reload postgresql</code></li>
</ul>
<h2 id="开机自动启动"><a href="#开机自动启动" class="headerlink" title="开机自动启动"></a>开机自动启动</h2><p>通过如下命令可以使postgreSQL自动随着系统启动：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> postgresql</span><br></pre></td></tr></tbody></table></figure>
<h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ps -ef | grep postgres</span><br></pre></td></tr></tbody></table></figure>
<p><br><br><br></p>
<h1 id="用户user和角色role"><a href="#用户user和角色role" class="headerlink" title="用户user和角色role"></a>用户user和角色role</h1><h2 id="postgres本地访问"><a href="#postgres本地访问" class="headerlink" title="postgres本地访问"></a><code>postgres</code>本地访问</h2><p>在UNIX平台中安装PostgreSQL之后，PostgreSQL会在UNIX系统中创建一个名为<code>postgres</code>的<strong>linux登录用户</strong>(属于最高权限 Superuser)。</p>
<p>PostgreSQL的默认用户名和数据库也是<code>postgres</code>， 不过没有默认密码。我们通过如下几个命令去进行该用户的本地访问:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo su postgres</span><br><span class="line">$ psql postgres</span><br></pre></td></tr></tbody></table></figure>
<p>或</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo -i -u postgres psql</span><br></pre></td></tr></tbody></table></figure>
<h3 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h3><p>最开始的时候<code>postgres</code>用户不支持远程登录(报错：psql: fe_sendauth: no password supplied)，必须设置密码后才行(普通用户也适应这个规则)。<sup><a href="#fn2">3</a></sup></p>
<p>如果需要改密码的话，我们可以用<code>passwd postgres</code>进行进行密码修改。</p>
<p>在当前用户下，我们可以监听psql的默认端口号<code>5432</code>，使用<code>lsof</code>或者<code>netstat</code>:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">postgres:/$ lsof -i:5432</span><br><span class="line">COMMAND   PID     USER   FD   TYPE    DEVICE SIZE/OFF NODE NAME</span><br><span class="line">postgres 7877 postgres    5u  IPv4 700026722      0t0  TCP localhost:postgresql (LISTEN)</span><br><span class="line">postgres:/$ netstat -an | grep 5432</span><br><span class="line">tcp        0      0 127.0.0.1:5432          0.0.0.0:*               LISTEN     </span><br><span class="line">unix  2      [ ACC ]     STREAM     LISTENING     700026723 /var/run/postgresql/.s.PGSQL.5432</span><br><span class="line">unix  3      [ ]         STREAM     CONNECTED     3941554326 </span><br><span class="line">unix  3      [ ]         STREAM     CONNECTED     3941554325</span><br></pre></td></tr></tbody></table></figure>
<h2 id="创建用户-createuser"><a href="#创建用户-createuser" class="headerlink" title="创建用户 - createuser"></a>创建用户 - createuser</h2><p>PostgreSQL 每创建一个新用户，都会生成一个<strong>新的对应的linux同名用户</strong>。默认的用户是<code>postgres</code>，登录此用户的shell，去执行psql无需密码 (本质上是因为 pg_hba.conf 的配置) 。PostgreSQL这种通过将Linux用户与PostgreSQL帐户相关联来处理身份验证的方式，被称为“对等”身份验证。</p>
<p>创建用户往往是我们使用PostgreSQL的第一步。因为我们如果新建了一个用户(user)， 我们以后就可以通过<code>psql</code>登陆我们的PostgeSQL。个人建议这个用户名可以设置成和我们Linux系统用户名一致。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo -u postgres createuser --interactive -P &lt;我们的用户名 不带尖角括号&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p><code>$ man createuser</code>:</p>
<blockquote>
<pre><code>   createuser - define a new PostgreSQL user account 
</code></pre></blockquote>
<h2 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h2><p><code>select current_user;</code>:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">jigao=# select current_user;</span><br><span class="line"> current_user </span><br><span class="line">--------------</span><br><span class="line"> jigao</span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><p><code>\c &lt;user_name&gt;</code> 可以让我们切换不同的用户名</p>
<p><br></p>
<p>远程登陆的部分见: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGpub3R4ai9wLzExMTk4MjU1Lmh0bWwjMzU5NDY3MzQwOA==" title="https://www.cnblogs.com/xjnotxj/p/11198255.html#3594673408">https://www.cnblogs.com/xjnotxj/p/11198255.html#3594673408<i class="fa fa-external-link"></i></span></p>
<p><br></p>
<h1 id="新建一个用户数据库"><a href="#新建一个用户数据库" class="headerlink" title="新建一个用户数据库"></a>新建一个用户数据库</h1><p>在bash中输入(不是在psql中)：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ createdb &lt;我们之前创建的用户名 不带尖角括号&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>这个数据库从属于我们当前的用户，新建完成之后，我们(当前用户)可以用<code>psql</code>命令进入该数据库, 这就是我们刚刚提到的<em>对等身份验证</em>。比如我是这么操作的：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ createdb jigao</span><br><span class="line">$ psql</span><br><span class="line">psql (12.2 (Ubuntu 12.2-2.pgdg18.04+1), server 10.12 (Ubuntu 10.12-2.pgdg18.04+1))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">jigao=<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p><code>$ man createdb</code>:</p>
<blockquote>
<pre><code>   createdb - create a new PostgreSQL database
</code></pre></blockquote>
<h1 id="新建一个数据库-create-database"><a href="#新建一个数据库-create-database" class="headerlink" title="新建一个数据库 - create database"></a>新建一个数据库 - create database</h1><p>有了用户名之后，我们需要新建一个数据库，这个数据库有一些表格。我们才可以运行SQL语句。有两种方式，一种我们在<a href="#新建一个用户数据库">上一块内容: 新建一个用户数据库</a>已经见过，不过我们需要在<code>postgres</code>用户下新建：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo -u postgres createdb testdb</span><br></pre></td></tr></tbody></table></figure>
<p>或用下面指令：</p>
<p>对于PostgreSQL每一个数据库database是带有权限的，我们还需要把这个新建的数据库<code>GRANT</code>(授权)给我们上一步的用户名。</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo -u postgres psql</span><br><span class="line">postgres=# CREATE DATABASE testdb;</span><br><span class="line">postgres=# GRANT ALL ON DATABASE testdb to &lt;我们之前创建的用户名 不带尖角括号&gt;;</span><br></pre></td></tr></tbody></table></figure>
<p><code>sudo -u postgres psql</code>可以让我们进入<code>postgres</code>这个数据库，它是default administrative connection database。</p>
<p>如果成功， 我们可以从这个<code>psql</code>界面用：<code>\q</code>退出到shell。</p>
<h2 id="新建表格-—-create-table"><a href="#新建表格-—-create-table" class="headerlink" title="新建表格 — create table"></a>新建表格 — create table</h2><p>这时候我们可以向刚刚新建的数据库里面加入我们的表格了。PostgreSQL是一种关系数据库(relational Database system)，我们需要提供<code>create table...</code>语句去新建表格，定义每一个表格字段(field)的数据类型(data type)以及其他信息(如能不能是<code>null value</code>)。</p>
<p>这里我们可以采用一些别人提供好的表格。</p>
<p>具体导入数据集可以看这一篇文章： <a href="https://cakebytheoceanluo.github.io/2020/03/15/DBMS-PostgreSQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E9%9B%86/">[DBMS]PostgreSQL导入数据集</a></p>
<h2 id="查看当前数据库"><a href="#查看当前数据库" class="headerlink" title="查看当前数据库"></a>查看当前数据库</h2><p><code>select current_database();</code>:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# select current_database();</span><br><span class="line"> current_database </span><br><span class="line">------------------</span><br><span class="line"> testdb</span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="查看所有数据库"><a href="#查看所有数据库" class="headerlink" title="查看所有数据库"></a>查看所有数据库</h2><p>在任何一个psql数据库中, 我们可以通过<code>\l</code>或<code>\l+</code>命令来，查看psql下总共有哪些数据库。我可以从我的用户数据库<code>jigao</code>查看：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">jigao=# \l</span><br><span class="line">                                     List of databases</span><br><span class="line">     Name     |    Owner    | Encoding |   Collate   |    Ctype    |   Access privileges   </span><br><span class="line">--------------+-------------+----------+-------------+-------------+-----------------------</span><br><span class="line"> dbname       | owning_user | UTF8     | en_US.UTF-8 | en_US.UTF-8 | </span><br><span class="line"> jigao        | jigao       | UTF8     | en_US.UTF-8 | en_US.UTF-8 | </span><br><span class="line"> postgres     | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | </span><br><span class="line"> template0    | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +</span><br><span class="line">              |             |          |             |             | postgres=CTc/postgres</span><br><span class="line"> template1    | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +</span><br><span class="line">              |             |          |             |             | postgres=CTc/postgres</span><br><span class="line"> testdb       | testuser    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | </span><br><span class="line">(6 rows)</span><br><span class="line"></span><br><span class="line">jigao=# \l+</span><br><span class="line">                                                                       List of databases</span><br><span class="line">     Name     |    Owner    | Encoding |   Collate   |    Ctype    |   Access privileges   |  Size   | Tablespace |                Description                 </span><br><span class="line">--------------+-------------+----------+-------------+-------------+-----------------------+---------+------------+--------------------------------------------</span><br><span class="line"> dbname       | owning_user | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 7497 kB | pg_default | </span><br><span class="line"> jigao        | jigao       | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 7631 kB | pg_default | </span><br><span class="line"> postgres     | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 7631 kB | pg_default | default administrative connection database</span><br><span class="line"> template0    | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +| 7497 kB | pg_default | unmodifiable empty database</span><br><span class="line">              |             |          |             |             | postgres=CTc/postgres |         |            | </span><br><span class="line"> template1    | postgres    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +| 7631 kB | pg_default | default template for new databases</span><br><span class="line">              |             |          |             |             | postgres=CTc/postgres |         |            | </span><br><span class="line"> testdb       | testuser    | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 848 MB  | pg_default | </span><br><span class="line">(6 rows)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h2><p><code>\c &lt;database_name&gt;</code> 可以让我们在不同数据库中切换</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> help.</span><br><span class="line"></span><br><span class="line">jigao=# \c jigao</span><br><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">You are now <span class="built_in">connected</span> to database <span class="string">"jigao"</span> as user <span class="string">"jigao"</span>.</span><br><span class="line">jigao=# \c testdb</span><br><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">You are now <span class="built_in">connected</span> to database <span class="string">"testdb"</span> as user <span class="string">"jigao"</span>.</span><br><span class="line">testdb-# \c postgres</span><br><span class="line">psql (<span class="number">12.2</span> (Ubuntu <span class="number">12.2</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>), server <span class="number">10.12</span> (Ubuntu <span class="number">10.12</span><span class="number">-2.</span>pgdg18<span class="number">.04</span>+<span class="number">1</span>))</span><br><span class="line">You are now <span class="built_in">connected</span> to database <span class="string">"postgres"</span> as user <span class="string">"jigao"</span>.</span><br><span class="line">postgres=#</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="查看SQL函数"><a href="#查看SQL函数" class="headerlink" title="查看SQL函数"></a>查看SQL函数</h1><blockquote>
<p>  \df[anptw][S+] [PATRN] list [only agg/normal/procedures/trigger/window] functions</p>
</blockquote>
<h2 id="查看所有函数"><a href="#查看所有函数" class="headerlink" title="查看所有函数　"></a>查看所有函数　</h2><p>postgreSQL中所有的函数都会被列出(输出会非常多！)：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">jigao=# \df *</span><br></pre></td></tr></tbody></table></figure>
<h2 id="匹配查看函数"><a href="#匹配查看函数" class="headerlink" title="匹配查看函数"></a>匹配查看函数</h2><h3 id="substring例子"><a href="#substring例子" class="headerlink" title="substring例子"></a><code>substring</code>例子</h3><p>比如我们忘记了<code>substring</code>这个函数，只记得<code>sub</code>:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">jigao=# \df sub*</span><br><span class="line">                             List of functions</span><br><span class="line">   Schema   |   Name    | Result data type |   Argument data types   | Type </span><br><span class="line">------------+-----------+------------------+-------------------------+------</span><br><span class="line"> pg_catalog | substr    | bytea            | bytea, integer          | func</span><br><span class="line"> pg_catalog | substr    | bytea            | bytea, integer, integer | func</span><br><span class="line"> pg_catalog | substr    | <span class="built_in">text</span>             | <span class="built_in">text</span>, integer           | func</span><br><span class="line"> pg_catalog | substr    | <span class="built_in">text</span>             | <span class="built_in">text</span>, integer, integer  | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">bit</span>              | <span class="built_in">bit</span>, integer            | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">bit</span>              | <span class="built_in">bit</span>, integer, integer   | func</span><br><span class="line"> pg_catalog | substring | bytea            | bytea, integer          | func</span><br><span class="line"> pg_catalog | substring | bytea            | bytea, integer, integer | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">text</span>             | <span class="built_in">text</span>, integer           | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">text</span>             | <span class="built_in">text</span>, integer, integer  | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">text</span>             | <span class="built_in">text</span>, <span class="built_in">text</span>              | func</span><br><span class="line"> pg_catalog | substring | <span class="built_in">text</span>             | <span class="built_in">text</span>, <span class="built_in">text</span>, <span class="built_in">text</span>        | func</span><br><span class="line">(<span class="number">12</span> rows)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="sum例子"><a href="#sum例子" class="headerlink" title="sum例子"></a><code>sum</code>例子</h3><p>比如我们忘记了<code>sum</code>这个函数，只记得<code>su</code>。另外我们还知道它还是一个聚合函数(aggregation) - agg - <strong>a</strong>:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">jigao=# \dfa su*</span><br><span class="line">                         List of functions</span><br><span class="line">   Schema   | Name | Result data type | Argument data types | Type </span><br><span class="line">------------+------+------------------+---------------------+------</span><br><span class="line"> pg_catalog | sum  | numeric          | bigint              | agg</span><br><span class="line"> pg_catalog | sum  | <span class="keyword">double</span> precision | <span class="keyword">double</span> precision    | agg</span><br><span class="line"> pg_catalog | sum  | bigint           | integer             | agg</span><br><span class="line"> pg_catalog | sum  | interval         | interval            | agg</span><br><span class="line"> pg_catalog | sum  | money            | money               | agg</span><br><span class="line"> pg_catalog | sum  | numeric          | numeric             | agg</span><br><span class="line"> pg_catalog | sum  | real             | real                | agg</span><br><span class="line"> pg_catalog | sum  | bigint           | smallint            | agg</span><br><span class="line">(<span class="number">8</span> rows)</span><br></pre></td></tr></tbody></table></figure>
<p>引用:</p>
<p><a name="myfootnote1">1</a>:　PostgreSQL 维基百科. <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvUG9zdGdyZVNRTA==" title="https://zh.wikipedia.org/wiki/PostgreSQL">https://zh.wikipedia.org/wiki/PostgreSQL<i class="fa fa-external-link"></i></span></p>
<p><a name="fn">2</a>: Linux downloads (Ubuntu): <span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG93bmxvYWQvbGludXgvdWJ1bnR1Lw==" title="https://www.postgresql.org/download/linux/ubuntu/">https://www.postgresql.org/download/linux/ubuntu/<i class="fa fa-external-link"></i></span></p>
<p><a name="fn2">3</a>: PostgreSQL 安装 &amp; 用户配置 - 小蒋不素小蒋: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGpub3R4ai9wLzExMTk4MjU1Lmh0bWw=" title="https://www.cnblogs.com/xjnotxj/p/11198255.html">https://www.cnblogs.com/xjnotxj/p/11198255.html<i class="fa fa-external-link"></i></span></p>
<p><br></p>
<p>推荐的阅读:</p>
<p>PostgreSQL 安装最新的版本 - DaozyIT: <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbmN1cG9ma2Fpd2F0ZXIvYXJ0aWNsZS9kZXRhaWxzLzgxNDgyMzQw" title="https://blog.csdn.net/tencupofkaiwater/article/details/81482340">https://blog.csdn.net/tencupofkaiwater/article/details/81482340<i class="fa fa-external-link"></i></span></p>
<p>How To Install and Use PostgreSQL on Ubuntu 18.04 -  Justin Ellingwood and Mark Drake: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlnaXRhbG9jZWFuLmNvbS9jb21tdW5pdHkvdHV0b3JpYWxzL2hvdy10by1pbnN0YWxsLWFuZC11c2UtcG9zdGdyZXNxbC1vbi11YnVudHUtMTgtMDQ=" title="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-18-04">https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-18-04<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>DBMS</category>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 1179.reformat-department-table</title>
    <url>/2020/03/13/SQL-Leetcode-1179-reformat-department-table/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>1179.Reformat Department Table</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Department (<span class="keyword">id</span> <span class="built_in">int</span>, revenue <span class="built_in">int</span>, <span class="keyword">month</span> <span class="built_in">varchar</span>(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Department</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'8000'</span>, <span class="string">'Jan'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'9000'</span>, <span class="string">'Jan'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'10000'</span>, <span class="string">'Feb'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'7000'</span>, <span class="string">'Feb'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'6000'</span>, <span class="string">'Mar'</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--PostgreSQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Department (<span class="keyword">id</span> <span class="built_in">int</span>, revenue <span class="built_in">int</span>, <span class="keyword">month</span> <span class="built_in">varchar</span>(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Department</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'8000'</span>, <span class="string">'Jan'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'9000'</span>, <span class="string">'Jan'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'10000'</span>, <span class="string">'Feb'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'7000'</span>, <span class="string">'Feb'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">id</span>, revenue, <span class="keyword">month</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'6000'</span>, <span class="string">'Mar'</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>Table: <code>Department</code><br></p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">---------------+---------+</span></span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+<span class="comment">---------------+---------+</span></span><br><span class="line">| id            | int     |</span><br><span class="line">| revenue       | int     |</span><br><span class="line">| month         | varchar |</span><br><span class="line">+<span class="comment">---------------+---------+</span></span><br><span class="line">(id, month) is the primary key of this table.</span><br><span class="line">The table has information about the revenue of each department per month.</span><br><span class="line">The month has <span class="keyword">values</span> <span class="keyword">in</span> [<span class="string">"Jan"</span>,<span class="string">"Feb"</span>,<span class="string">"Mar"</span>,<span class="string">"Apr"</span>,<span class="string">"May"</span>,<span class="string">"Jun"</span>,<span class="string">"Jul"</span>,<span class="string">"Aug"</span>,<span class="string">"Sep"</span>,<span class="string">"Oct"</span>,<span class="string">"Nov"</span>,<span class="string">"Dec"</span>].</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>Write an SQL query to reformat the table such that there is a department id column and a revenue column <strong>for each month</strong>.</p>
<p>The query result format is in the following example:<br></p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">Department table:</span><br><span class="line">+<span class="comment">------+---------+-------+</span></span><br><span class="line">| id   | revenue | month |</span><br><span class="line">+<span class="comment">------+---------+-------+</span></span><br><span class="line">| 1    | 8000    | Jan   |</span><br><span class="line">| 2    | 9000    | Jan   |</span><br><span class="line">| 3    | 10000   | Feb   |</span><br><span class="line">| 1    | 7000    | Feb   |</span><br><span class="line">| 1    | 6000    | Mar   |</span><br><span class="line">+<span class="comment">------+---------+-------+</span></span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+<span class="comment">------+-------------+-------------+-------------+-----+-------------+</span></span><br><span class="line">| id   | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |</span><br><span class="line">+<span class="comment">------+-------------+-------------+-------------+-----+-------------+</span></span><br><span class="line">| 1    | 8000        | 7000        | 6000        | ... | null        |</span><br><span class="line">| 2    | 9000        | null        | null        | ... | null        |</span><br><span class="line">| 3    | null        | 10000       | null        | ... | null        |</span><br><span class="line">+<span class="comment">------+-------------+-------------+-------------+-----+-------------+</span></span><br><span class="line"></span><br><span class="line">Note that the result table has 13 columns (1 for the department id + 12 for the months).</span><br></pre></td></tr></tbody></table></figure><p></p>
<a id="more"></a>
<hr>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">	<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'jan'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Jan_Revenue,</span><br><span class="line">	<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'feb'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Feb_Revenue,</span><br><span class="line">	<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'mar'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Mar_Revenue,</span><br><span class="line">	<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'apr'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Apr_Revenue,</span><br><span class="line">	<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'may'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> May_Revenue,</span><br><span class="line">	<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'jun'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Jun_Revenue,</span><br><span class="line">	<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'jul'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Jul_Revenue,</span><br><span class="line">	<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'aug'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Aug_Revenue,</span><br><span class="line">	<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'sep'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Sep_Revenue,</span><br><span class="line">	<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'oct'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Oct_Revenue,</span><br><span class="line">	<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'nov'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Nov_Revenue,</span><br><span class="line">	<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">month</span> = <span class="string">'dec'</span> <span class="keyword">then</span> revenue <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) <span class="keyword">as</span> Dec_Revenue</span><br><span class="line"><span class="keyword">from</span> department</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">asc</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Jan'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Jan_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Feb'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Feb_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Mar'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Mar_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Apr'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Apr_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'May'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> May_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Jun'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Jun_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Jul'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Jul_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Aug'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Aug_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Sep'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Sep_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Oct'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Oct_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Nov'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Nov_Revenue,</span><br><span class="line">    <span class="keyword">sum</span>( <span class="keyword">if</span>( <span class="keyword">month</span> = <span class="string">'Dec'</span>, revenue, <span class="literal">null</span> ) ) <span class="keyword">AS</span> Dec_Revenue</span><br><span class="line"><span class="keyword">FROM</span> Department</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="解法２：-Pivot-table"><a href="#解法２：-Pivot-table" class="headerlink" title="解法２：　Pivot table"></a>解法２：　Pivot table</h1><p>这个解法只能在SQL Server中使用，我也头一回看见。</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    Jan <span class="keyword">AS</span> Jan_Revenue,</span><br><span class="line">    Feb <span class="keyword">AS</span> Feb_Revenue, </span><br><span class="line">    Mar <span class="keyword">AS</span> Mar_Revenue, </span><br><span class="line">    Apr <span class="keyword">AS</span> Apr_Revenue,</span><br><span class="line">    May <span class="keyword">AS</span> May_Revenue,</span><br><span class="line">    Jun <span class="keyword">AS</span> Jun_Revenue,</span><br><span class="line">    Jul <span class="keyword">AS</span> Jul_Revenue,</span><br><span class="line">    Aug <span class="keyword">AS</span> Aug_Revenue,</span><br><span class="line">    Sep <span class="keyword">AS</span> Sep_Revenue,</span><br><span class="line">    <span class="keyword">Oct</span> <span class="keyword">AS</span> Oct_Revenue,</span><br><span class="line">    Nov <span class="keyword">AS</span> Nov_Revenue,</span><br><span class="line">    <span class="built_in">Dec</span> <span class="keyword">AS</span> Dec_Revenue</span><br><span class="line"><span class="keyword">FROM</span> Department</span><br><span class="line"><span class="keyword">PIVOT</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">MAX</span>(revenue)</span><br><span class="line">    <span class="keyword">FOR</span> <span class="keyword">month</span> <span class="keyword">IN</span> (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, <span class="keyword">Oct</span>, Nov, <span class="built_in">Dec</span>)        </span><br><span class="line">) <span class="keyword">AS</span> MonthsRevenue</span><br></pre></td></tr></tbody></table></figure>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVmb3JtYXQtZGVwYXJ0bWVudC10YWJsZS8=" title="https://leetcode.com/problems/reformat-department-table/">https://leetcode.com/problems/reformat-department-table/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVmb3JtYXQtZGVwYXJ0bWVudC10YWJsZS9kaXNjdXNzLzQyMjM4My9teXNxbC1lYXN5LXNvbHV0aW9u" title="https://leetcode.com/problems/reformat-department-table/discuss/422383/mysql-easy-solution">https://leetcode.com/problems/reformat-department-table/discuss/422383/mysql-easy-solution<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVmb3JtYXQtZGVwYXJ0bWVudC10YWJsZS9kaXNjdXNzLzM3NjI0MS9NeVNRTC1Tb2x1dGlvbi13aXRoLTM4MS1tcy1mYXN0ZXItdGhhbi0xMDAuMDA=" title="https://leetcode.com/problems/reformat-department-table/discuss/376241/MySQL-Solution-with-381-ms-faster-than-100.00">https://leetcode.com/problems/reformat-department-table/discuss/376241/MySQL-Solution-with-381-ms-faster-than-100.00<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjEvdGFibGVmdW5jLmh0bWw=" title="https://www.postgresql.org/docs/9.1/tablefunc.html">https://www.postgresql.org/docs/9.1/tablefunc.html<i class="fa fa-external-link"></i></span> : pivot table in PostgreSQL</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc3Fsc2VydmVydHV0b3JpYWwubmV0L3NxbC1zZXJ2ZXItYmFzaWNzL3NxbC1zZXJ2ZXItcGl2b3Qv" title="https://www.sqlservertutorial.net/sql-server-basics/sql-server-pivot/">https://www.sqlservertutorial.net/sql-server-basics/sql-server-pivot/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDgzODYyNjMvcGl2b3QtdGFibGUtaW4tc3FsLWNvbHVtbi1yZXN1bHRzLXRvLXJvd3M=" title="https://stackoverflow.com/questions/48386263/pivot-table-in-sql-column-results-to-rows">https://stackoverflow.com/questions/48386263/pivot-table-in-sql-column-results-to-rows<i class="fa fa-external-link"></i></span><br><!-- 
该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 --></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 627.swap.salary</title>
    <url>/2020/03/13/SQL-Leetcode-627-swap-salary/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>627.Swap Salary</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--MySQL</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> salary(<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>), sex <span class="built_in">char</span>(<span class="number">1</span>), salary <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> salary</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'A'</span>, <span class="string">'m'</span>, <span class="string">'2500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'B'</span>, <span class="string">'f'</span>, <span class="string">'1500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'C'</span>, <span class="string">'m'</span>, <span class="string">'5500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'D'</span>, <span class="string">'f'</span>, <span class="string">'500'</span>);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> salary;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> salary(<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>), sex <span class="built_in">char</span>(<span class="number">1</span>), salary <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> salary</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'A'</span>, <span class="string">'m'</span>, <span class="string">'2500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'B'</span>, <span class="string">'f'</span>, <span class="string">'1500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'C'</span>, <span class="string">'m'</span>, <span class="string">'5500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salary (<span class="keyword">id</span>, <span class="keyword">name</span>, sex, salary) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'D'</span>, <span class="string">'f'</span>, <span class="string">'500'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>Given a table <code>salary</code>, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update statement and no intermediate temp table.</p>
<p>Note that you must write a single update statement, DO NOT write any select statement for this problem.</p>
<p>Example:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">| id | name | sex | salary |</span><br><span class="line">|<span class="comment">----|------|-----|--------|</span></span><br><span class="line">| 1  | A    | m   | 2500   |</span><br><span class="line">| 2  | B    | f   | 1500   |</span><br><span class="line">| 3  | C    | m   | 5500   |</span><br><span class="line">| 4  | D    | f   | 500    |</span><br></pre></td></tr></tbody></table></figure>
<p>After running your update statement, the above salary table should have the following rows:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">| id | name | sex | salary |</span><br><span class="line">|<span class="comment">----|------|-----|--------|</span></span><br><span class="line">| 1  | A    | f   | 2500   |</span><br><span class="line">| 2  | B    | m   | 1500   |</span><br><span class="line">| 3  | C    | f   | 5500   |</span><br><span class="line">| 4  | D    | m   | 500    |</span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<hr>
<p><br></p>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> salary s</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">id</span> = s.id, <span class="keyword">name</span> = s.name, salary = s.salary, sex = (<span class="keyword">case</span> <span class="keyword">when</span> s.sex = <span class="string">'f'</span> <span class="keyword">then</span> <span class="string">'m'</span> <span class="keyword">else</span> <span class="string">'f'</span> <span class="keyword">end</span>);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> salary s</span><br><span class="line"><span class="keyword">set</span> sex = (<span class="keyword">case</span> <span class="keyword">when</span> s.sex = <span class="string">'f'</span> <span class="keyword">then</span> <span class="string">'m'</span> <span class="keyword">else</span> <span class="string">'f'</span> <span class="keyword">end</span>);</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><p><strong>不适用于PostgreSQL</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> salary <span class="keyword">SET</span> sex = <span class="keyword">IF</span>(sex = <span class="string">'m'</span>, <span class="string">'f'</span>, <span class="string">'m'</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法３"><a href="#解法３" class="headerlink" title="解法３"></a>解法３</h1><p><strong>适用于PostgreSQL</strong>:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex = <span class="keyword">CHR</span>(<span class="keyword">ASCII</span>(<span class="string">'f'</span>) + <span class="keyword">ASCII</span>(<span class="string">'m'</span>) - <span class="keyword">ASCII</span>(sex));</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>ascii</code>: char -&gt; ascii</li>
<li><code>chr</code>: ascii -&gt; char</li>
</ul>
<p><strong>不适用于PostgreSQL</strong>:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex = <span class="built_in">CHAR</span>(<span class="keyword">ASCII</span>(<span class="string">'f'</span>) ^ <span class="keyword">ASCII</span>(<span class="string">'m'</span>) ^ <span class="keyword">ASCII</span>(sex));</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex= <span class="built_in">CHAR</span>(<span class="keyword">ASCII</span>(<span class="string">'f'</span>) + <span class="keyword">ASCII</span>(<span class="string">'m'</span>) - <span class="keyword">ASCII</span>(sex));</span><br></pre></td></tr></tbody></table></figure>
<p>其实在很多解法中，有很多看起来很fancy的SQL解法，其实我觉得只是看起比较厉害罢了。<br>但是这个<strong>解法3</strong>说不定真的可以带来更短的运行时间，因为它看起来branch-free，回避了<code>case</code>或者<code>if</code>。</p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3dhcC1zYWxhcnkv" title="https://leetcode.com/problems/swap-salary/">https://leetcode.com/problems/swap-salary/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3dhcC1zYWxhcnkvZGlzY3Vzcy8xMDQ3MTMvQWNjZXB0LXNvbHV0aW9uLXdpdGgteG9y" title="https://leetcode.com/problems/swap-salary/discuss/104713/Accept-solution-with-xor">https://leetcode.com/problems/swap-salary/discuss/104713/Accept-solution-with-xor<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjEvZnVuY3Rpb25zLWNvbmRpdGlvbmFsLmh0bWw=" title="https://www.postgresql.org/docs/9.1/functions-conditional.html">https://www.postgresql.org/docs/9.1/functions-conditional.html<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTEyOTkwMzcvcG9zdGdyZXNxbC1pZi1zdGF0ZW1lbnQ=" title="https://stackoverflow.com/questions/11299037/postgresql-if-statement">https://stackoverflow.com/questions/11299037/postgresql-if-statement<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 626.exchange.seats</title>
    <url>/2020/03/13/SQL-Leetcode-626-exchange-seats/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>626.Exchange Seats</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> seat(<span class="keyword">id</span> <span class="built_in">int</span>, student <span class="built_in">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> seat</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Abbot'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Doris'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Emerson'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Green'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'Jeames'</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> seat;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> seat(<span class="keyword">id</span> <span class="built_in">int</span>, student <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Abbot'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Doris'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Emerson'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Green'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> seat (<span class="keyword">id</span>, student) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'Jeames'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>Mary is a teacher in a middle school and she has a table <code>seat</code> storing students’ names and their corresponding <code>seat</code> ids.</p>
<p>The column id is continuous increment.</p>
<p>Mary wants to change seats for the adjacent students.</p>
<p>Can you write a SQL query to output the result for Mary?</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">|    id   | student |</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">|    1    | Abbot   |</span><br><span class="line">|    2    | Doris   |</span><br><span class="line">|    3    | Emerson |</span><br><span class="line">|    4    | Green   |</span><br><span class="line">|    5    | Jeames  |</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>For the sample input, the output is:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">|    id   | student |</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br><span class="line">|    1    | Doris   |</span><br><span class="line">|    2    | Abbot   |</span><br><span class="line">|    3    | Green   |</span><br><span class="line">|    4    | Emerson |</span><br><span class="line">|    5    | Jeames  |</span><br><span class="line">+<span class="comment">---------+---------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>Note:<br>If the number of students is odd, there is no need to change the last one’s seat.</p>
<a id="more"></a>
<hr>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p><strong>适用于PostgreSQL</strong>:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,</span><br><span class="line">        (<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">id</span> % <span class="number">2</span> = <span class="number">1</span> <span class="keyword">then</span> <span class="keyword">lead</span>(student, <span class="number">1</span>, student) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>)</span><br><span class="line">                              <span class="keyword">else</span> lag(student, <span class="number">1</span>, <span class="literal">null</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>) <span class="keyword">end</span>) <span class="keyword">as</span> student</span><br><span class="line"><span class="keyword">from</span> seat;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    (<span class="keyword">CASE</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="keyword">MOD</span>(<span class="keyword">id</span>, <span class="number">2</span>) != <span class="number">0</span> <span class="keyword">AND</span> counts != <span class="keyword">id</span> <span class="keyword">THEN</span> <span class="keyword">id</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="keyword">MOD</span>(<span class="keyword">id</span>, <span class="number">2</span>) != <span class="number">0</span> <span class="keyword">AND</span> counts = <span class="keyword">id</span> <span class="keyword">THEN</span> <span class="keyword">id</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="keyword">id</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="keyword">id</span>,</span><br><span class="line">    student</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    seat,</span><br><span class="line">    (<span class="keyword">SELECT</span></span><br><span class="line">        <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> counts</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        seat) <span class="keyword">AS</span> seat_counts</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span>;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法３"><a href="#解法３" class="headerlink" title="解法３"></a>解法３</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s1.id, <span class="keyword">COALESCE</span>(s2.student, s1.student) <span class="keyword">AS</span> student</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    seat s1</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    seat s2 <span class="keyword">ON</span> ((s1.id + <span class="number">1</span>) ^ <span class="number">1</span>) - <span class="number">1</span> = s2.id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> s1.id;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>Bit manipulation expression <code>(id+1)^1-1</code> can calculate the new id after switch.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, (<span class="keyword">id</span>+<span class="number">1</span>)^<span class="number">1</span><span class="number">-1</span>, student <span class="keyword">FROM</span> seat;</span><br><span class="line"></span><br><span class="line">| id | (id+1)^1-1 | student |</span><br><span class="line">|<span class="comment">----|------------|---------|</span></span><br><span class="line">| 1  | 2          | Abbot   |</span><br><span class="line">| 2  | 1          | Doris   |</span><br><span class="line">| 3  | 4          | Emerson |</span><br><span class="line">| 4  | 3          | Green   |</span><br><span class="line">| 5  | 6          | Jeames  |</span><br></pre></td></tr></tbody></table></figure>
<p>Then, we can make a temp table and join seat with this table like below.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    seat s1</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    seat s2 <span class="keyword">ON</span> (s1.id+<span class="number">1</span>)^<span class="number">1</span><span class="number">-1</span> = s2.id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> s1.id;</span><br><span class="line"></span><br><span class="line">| id | student | id | student |</span><br><span class="line">|<span class="comment">----|---------|----|---------|</span></span><br><span class="line">| 1  | Abbot   | 2  | Doris   |</span><br><span class="line">| 2  | Doris   | 1  | Abbot   |</span><br><span class="line">| 3  | Emerson | 4  | Green   |</span><br><span class="line">| 4  | Green   | 3  | Emerson |</span><br><span class="line">| 5  | Jeames  |    |         |</span><br></pre></td></tr></tbody></table></figure>
<p>Note:The first two columns are from s1 and the last two are from s2.</p>
<p>At last, we can output s1.id and s2.student. However, the s2.student is NULL for seat id ‘5’ but s1.student is right. Thus, we we can use function <code>COALESCE()</code> to generate the correct output for the last record.</p>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZXhjaGFuZ2Utc2VhdHMv" title="https://leetcode.com/problems/exchange-seats/">https://leetcode.com/problems/exchange-seats/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZXhjaGFuZ2Utc2VhdHMvZGlzY3Vzcy81MjQ1MzkvNC1saW5lLXNvbHV0aW9uLXVzaW5nLXdpbmRvdy1mdW5jdGlvbi1Ub3AtUnVudGltZQ==" title="https://leetcode.com/problems/exchange-seats/discuss/524539/4-line-solution-using-window-function-Top-Runtime">https://leetcode.com/problems/exchange-seats/discuss/524539/4-line-solution-using-window-function-Top-Runtime<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZXhjaGFuZ2Utc2VhdHMvc29sdXRpb24v" title="https://leetcode.com/problems/exchange-seats/solution/">https://leetcode.com/problems/exchange-seats/solution/<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Window Function</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 620.not.boring.movies</title>
    <url>/2020/03/13/SQL-Leetcode-620-not-boring-movies/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>627.Swap Salary</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> cinema (<span class="keyword">id</span> <span class="built_in">int</span>, movie <span class="built_in">varchar</span>(<span class="number">255</span>), description <span class="built_in">varchar</span>(<span class="number">255</span>), rating <span class="built_in">float</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> cinema</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'War'</span>, <span class="string">'great 3D'</span>, <span class="string">'8.9'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Science'</span>, <span class="string">'fiction'</span>, <span class="string">'8.5'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'irish'</span>, <span class="string">'boring'</span>, <span class="string">'6.2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Ice song'</span>, <span class="string">'Fantacy'</span>, <span class="string">'8.6'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'House card'</span>, <span class="string">'Interesting'</span>, <span class="string">'9.1'</span>);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> cinema;</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> cinema (<span class="keyword">id</span> <span class="built_in">int</span>, movie <span class="built_in">varchar</span>(<span class="number">255</span>), description <span class="built_in">varchar</span>(<span class="number">255</span>), rating <span class="built_in">decimal</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'War'</span>, <span class="string">'great 3D'</span>, <span class="string">'8.9'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Science'</span>, <span class="string">'fiction'</span>, <span class="string">'8.5'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'irish'</span>, <span class="string">'boring'</span>, <span class="string">'6.2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Ice song'</span>, <span class="string">'Fantacy'</span>, <span class="string">'8.6'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> cinema (<span class="keyword">id</span>, movie, description, rating) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'House card'</span>, <span class="string">'Interesting'</span>, <span class="string">'9.1'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.<br>Please write a SQL query to output movies with an odd numbered ID and a description that is not ‘boring’. Order the result by rating.</p>
<p>For example, table <code>cinema</code>:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br><span class="line">|   id    | movie     |  description |  rating   |</span><br><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br><span class="line">|   1     | War       |   great 3D   |   8.9     |</span><br><span class="line">|   2     | Science   |   fiction    |   8.5     |</span><br><span class="line">|   3     | irish     |   boring     |   6.2     |</span><br><span class="line">|   4     | Ice song  |   Fantacy    |   8.6     |</span><br><span class="line">|   5     | House card|   Interesting|   9.1     |</span><br><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>For the example above, the output should be:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br><span class="line">|   id    | movie     |  description |  rating   |</span><br><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br><span class="line">|   5     | House card|   Interesting|   9.1     |</span><br><span class="line">|   1     | War       |   great 3D   |   8.9     |</span><br><span class="line">+<span class="comment">---------+-----------+--------------+-----------+</span></span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<hr>
<p><br></p>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> cinema c</span><br><span class="line"><span class="keyword">where</span> c.id % <span class="number">2</span> = <span class="number">1</span> <span class="keyword">and</span> c.description != <span class="string">'boring'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c.rating <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> cinema c</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">mod</span>(c.id, <span class="number">2</span>) = <span class="number">1</span> <span class="keyword">and</span> c.description != <span class="string">'boring'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> c.rating <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbm90LWJvcmluZy1tb3ZpZXMv" title="https://leetcode.com/problems/not-boring-movies/">https://leetcode.com/problems/not-boring-movies/<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 601.human.traffic.of.stadium</title>
    <url>/2020/03/13/SQL-Leetcode-601-human-traffic-of-stadium/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>601.Human Traffic of Stadium</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> stadium (<span class="keyword">id</span> <span class="built_in">int</span>, visit_date <span class="built_in">DATE</span> <span class="literal">NULL</span>, people <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> stadium</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'2017-01-01'</span>, <span class="string">'10'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2017-01-02'</span>, <span class="string">'109'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'2017-01-03'</span>, <span class="string">'150'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'2017-01-04'</span>, <span class="string">'99'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'2017-01-05'</span>, <span class="string">'145'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'2017-01-06'</span>, <span class="string">'1455'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'2017-01-07'</span>, <span class="string">'199'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'8'</span>, <span class="string">'2017-01-08'</span>, <span class="string">'188'</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> stadium;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stadium (<span class="keyword">id</span> <span class="built_in">int</span>, visit_date <span class="built_in">DATE</span> <span class="literal">NULL</span>, people <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'2017-01-01'</span>, <span class="string">'10'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2017-01-02'</span>, <span class="string">'109'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'2017-01-03'</span>, <span class="string">'150'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'2017-01-04'</span>, <span class="string">'99'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'2017-01-05'</span>, <span class="string">'145'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'2017-01-06'</span>, <span class="string">'1455'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'2017-01-07'</span>, <span class="string">'199'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stadium (<span class="keyword">id</span>, visit_date, people) <span class="keyword">values</span> (<span class="string">'8'</span>, <span class="string">'2017-01-08'</span>, <span class="string">'188'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>X city built a new stadium, each day many people visit it and the stats are saved as these columns: id, visit_date, people</p>
<p>Please write a query to display the records which have 3 or more consecutive rows and the amount of people more than 100(inclusive).</p>
<p>For example, the table <code>stadium</code>:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">------+------------+-----------+</span></span><br><span class="line">| id   | visit_date | people    |</span><br><span class="line">+<span class="comment">------+------------+-----------+</span></span><br><span class="line">| 1    | 2017-01-01 | 10        |</span><br><span class="line">| 2    | 2017-01-02 | 109       |</span><br><span class="line">| 3    | 2017-01-03 | 150       |</span><br><span class="line">| 4    | 2017-01-04 | 99        |</span><br><span class="line">| 5    | 2017-01-05 | 145       |</span><br><span class="line">| 6    | 2017-01-06 | 1455      |</span><br><span class="line">| 7    | 2017-01-07 | 199       |</span><br><span class="line">| 8    | 2017-01-08 | 188       |</span><br><span class="line">+<span class="comment">------+------------+-----------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>For the sample data above, the output is:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">------+------------+-----------+</span></span><br><span class="line">| id   | visit_date | people    |</span><br><span class="line">+<span class="comment">------+------------+-----------+</span></span><br><span class="line">| 5    | 2017-01-05 | 145       |</span><br><span class="line">| 6    | 2017-01-06 | 1455      |</span><br><span class="line">| 7    | 2017-01-07 | 199       |</span><br><span class="line">| 8    | 2017-01-08 | 188       |</span><br><span class="line">+<span class="comment">------+------------+-----------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>Note:<br>Each day only have one row record, and the dates are increasing with id increasing.</p>
<a id="more"></a>
<hr>
<p>这里我需要实名diss一下<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvaHVtYW4tdHJhZmZpYy1vZi1zdGFkaXVtL3NvbHV0aW9uLw==" title="https://leetcode.com/problems/human-traffic-of-stadium/solution/">Leetcode所选出的答案<i class="fa fa-external-link"></i></span>。笛卡儿积形式的算法在大型数据集下的SQL基本上都不能终止。</p>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> three_day <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *, </span><br><span class="line">           <span class="keyword">lead</span>(people, <span class="number">1</span>, <span class="literal">NULL</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>) <span class="keyword">as</span> next1, </span><br><span class="line">           <span class="keyword">lead</span>(people, <span class="number">2</span>, <span class="literal">NULl</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>) <span class="keyword">as</span> next2 </span><br><span class="line">    <span class="keyword">from</span> stadium</span><br><span class="line">), ids <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span> </span><br><span class="line">    <span class="keyword">from</span> three_day</span><br><span class="line">    <span class="keyword">where</span> people &gt;= <span class="number">100</span> <span class="keyword">and</span> next1 &gt;= <span class="number">100</span> <span class="keyword">and</span> next2 &gt;= <span class="number">100</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> three_day</span><br><span class="line">    <span class="keyword">where</span> people &gt;= <span class="number">100</span> <span class="keyword">and</span> next1 &gt;= <span class="number">100</span> <span class="keyword">and</span> next2 &gt;= <span class="number">100</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span> + <span class="number">2</span></span><br><span class="line">    <span class="keyword">from</span> three_day</span><br><span class="line">    <span class="keyword">where</span> people &gt;= <span class="number">100</span> <span class="keyword">and</span> next1 &gt;= <span class="number">100</span> <span class="keyword">and</span> next2 &gt;= <span class="number">100</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> stadium s </span><br><span class="line"><span class="keyword">where</span> s.id <span class="keyword">in</span> (<span class="keyword">select</span> * <span class="keyword">from</span> ids);</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s1.id, s1.visit_date, s1.people</span><br><span class="line"><span class="keyword">FROM</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">    s.id, </span><br><span class="line">    s.visit_date, </span><br><span class="line">    s.people, </span><br><span class="line">    <span class="keyword">lead</span>(people) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span>) <span class="keyword">as</span> next1,</span><br><span class="line">    <span class="keyword">lead</span>(people,<span class="number">2</span>) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span> ) <span class="keyword">as</span> next2,</span><br><span class="line">    lag(people) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span>) <span class="keyword">as</span> prev1,</span><br><span class="line">    lag(people,<span class="number">2</span>) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">ASC</span> ) <span class="keyword">as</span> prev2</span><br><span class="line">    <span class="keyword">FROM</span> stadium <span class="keyword">as</span> s</span><br><span class="line">    ) <span class="keyword">AS</span> s1	</span><br><span class="line"><span class="keyword">WHERE</span> (people&gt;=<span class="number">100</span> <span class="keyword">and</span> </span><br><span class="line">       ((next1&gt;=<span class="number">100</span> <span class="keyword">and</span> next2&gt;=<span class="number">100</span>)</span><br><span class="line">        <span class="keyword">or</span> (prev1&gt;=<span class="number">100</span> <span class="keyword">and</span> prev2&gt;=<span class="number">100</span>)</span><br><span class="line">        <span class="keyword">or</span> (prev1&gt;=<span class="number">100</span> <span class="keyword">and</span> next1&gt;=<span class="number">100</span>) <span class="comment">-- &lt;-this one is missing</span></span><br><span class="line">       ));</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvaHVtYW4tdHJhZmZpYy1vZi1zdGFkaXVtLw==" title="https://leetcode.com/problems/human-traffic-of-stadium/">https://leetcode.com/problems/human-traffic-of-stadium/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvaHVtYW4tdHJhZmZpYy1vZi1zdGFkaXVtL2Rpc2N1c3MvMjM3Mjk1L01TLVNRTC1TaW1wbGUtTGVhZC1hbmQtTGFn" title="https://leetcode.com/problems/human-traffic-of-stadium/discuss/237295/MS-SQL-Simple-Lead-and-Lag">https://leetcode.com/problems/human-traffic-of-stadium/discuss/237295/MS-SQL-Simple-Lead-and-Lag<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Window Function</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 596.classes.more.than.5.students</title>
    <url>/2020/03/12/SQL-Leetcode-596-classes-more-than-5-students/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>596.Classes More Than 5 Students</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> courses (student <span class="built_in">varchar</span>(<span class="number">255</span>), <span class="keyword">class</span> <span class="built_in">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> courses</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'A'</span>, <span class="string">'Math'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'B'</span>, <span class="string">'English'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'C'</span>, <span class="string">'Math'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'D'</span>, <span class="string">'Biology'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'E'</span>, <span class="string">'Math'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'F'</span>, <span class="string">'Computer'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'G'</span>, <span class="string">'Math'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'H'</span>, <span class="string">'Math'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'I'</span>, <span class="string">'Math'</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> courses;</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> courses (student <span class="built_in">varchar</span>(<span class="number">255</span>), <span class="keyword">class</span> <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'A'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'B'</span>, <span class="string">'English'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'C'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'D'</span>, <span class="string">'Biology'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'E'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'F'</span>, <span class="string">'Computer'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'G'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'H'</span>, <span class="string">'Math'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses (student, <span class="keyword">class</span>) <span class="keyword">values</span> (<span class="string">'I'</span>, <span class="string">'Math'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>There is a table <code>courses</code> with columns: student and class</p>
<p>Please list out all classes which have more than or equal to 5 students.</p>
<p>For example, the table:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">---------+------------+</span></span><br><span class="line">| student | class      |</span><br><span class="line">+<span class="comment">---------+------------+</span></span><br><span class="line">| A       | Math       |</span><br><span class="line">| B       | English    |</span><br><span class="line">| C       | Math       |</span><br><span class="line">| D       | Biology    |</span><br><span class="line">| E       | Math       |</span><br><span class="line">| F       | Computer   |</span><br><span class="line">| G       | Math       |</span><br><span class="line">| H       | Math       |</span><br><span class="line">| I       | Math       |</span><br><span class="line">+<span class="comment">---------+------------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>Should output:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">---------+</span></span><br><span class="line">| class   |</span><br><span class="line">+<span class="comment">---------+</span></span><br><span class="line">| Math    |</span><br><span class="line">+<span class="comment">---------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>Note:<br>The students should not be counted duplicate in each course.</p>
<a id="more"></a>
<hr>
<p><br></p>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> c.class </span><br><span class="line"><span class="keyword">from</span> courses c </span><br><span class="line"><span class="keyword">where</span> <span class="number">5</span> &lt;= (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> s.student) </span><br><span class="line">    <span class="keyword">from</span> courses s </span><br><span class="line">    <span class="keyword">where</span> s.class = c.class</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c.class </span><br><span class="line"><span class="keyword">from</span> courses c </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c.class </span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> c.student) &gt;= <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY2xhc3Nlcy1tb3JlLXRoYW4tNS1zdHVkZW50cy8=" title="https://leetcode.com/problems/classes-more-than-5-students/">https://leetcode.com/problems/classes-more-than-5-students/<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 595.big.countries</title>
    <url>/2020/03/12/SQL-Leetcode-595-big-countries/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>595.Big Countries</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> World (<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), continent <span class="built_in">varchar</span>(<span class="number">255</span>), area <span class="built_in">int</span>, population <span class="built_in">int</span>, gdp <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> World</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Afghanistan'</span>, <span class="string">'Asia'</span>, <span class="string">'652230'</span>, <span class="string">'25500100'</span>, <span class="string">'20343000000'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Albania'</span>, <span class="string">'Europe'</span>, <span class="string">'28748'</span>, <span class="string">'2831741'</span>, <span class="string">'12960000000'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Algeria'</span>, <span class="string">'Africa'</span>, <span class="string">'2381741'</span>, <span class="string">'37100000'</span>, <span class="string">'188681000000'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Andorra'</span>, <span class="string">'Europe'</span>, <span class="string">'468'</span>, <span class="string">'78115'</span>, <span class="string">'3712000000'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Angola'</span>, <span class="string">'Africa'</span>, <span class="string">'1246700'</span>, <span class="string">'20609294'</span>, <span class="string">'100990000000'</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> World;</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> World (<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), continent <span class="built_in">varchar</span>(<span class="number">255</span>), area <span class="built_in">int</span>, population <span class="built_in">int</span>, gdp <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Afghanistan'</span>, <span class="string">'Asia'</span>, <span class="string">'652230'</span>, <span class="string">'25500100'</span>, <span class="string">'20343000000'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Albania'</span>, <span class="string">'Europe'</span>, <span class="string">'28748'</span>, <span class="string">'2831741'</span>, <span class="string">'12960000000'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Algeria'</span>, <span class="string">'Africa'</span>, <span class="string">'2381741'</span>, <span class="string">'37100000'</span>, <span class="string">'188681000000'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Andorra'</span>, <span class="string">'Europe'</span>, <span class="string">'468'</span>, <span class="string">'78115'</span>, <span class="string">'3712000000'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> World (<span class="keyword">name</span>, continent, area, population, gdp) <span class="keyword">values</span> (<span class="string">'Angola'</span>, <span class="string">'Africa'</span>, <span class="string">'1246700'</span>, <span class="string">'20609294'</span>, <span class="string">'100990000000'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>There is a table <code>World</code></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">-----------------+------------+------------+--------------+---------------+</span></span><br><span class="line">| name            | continent  | area       | population   | gdp           |</span><br><span class="line">+<span class="comment">-----------------+------------+------------+--------------+---------------+</span></span><br><span class="line">| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |</span><br><span class="line">| Albania         | Europe     | 28748      | 2831741      | 12960000      |</span><br><span class="line">| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |</span><br><span class="line">| Andorra         | Europe     | 468        | 78115        | 3712000       |</span><br><span class="line">| Angola          | Africa     | 1246700    | 20609294     | 100990000     |</span><br><span class="line">+<span class="comment">-----------------+------------+------------+--------------+---------------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.</p>
<p>Write a SQL solution to output big countries’ name, population and area.</p>
<p>For example, according to the above table, we should output:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">--------------+-------------+--------------+</span></span><br><span class="line">| name         | population  | area         |</span><br><span class="line">+<span class="comment">--------------+-------------+--------------+</span></span><br><span class="line">| Afghanistan  | 25500100    | 652230       |</span><br><span class="line">| Algeria      | 37100000    | 2381741      |</span><br><span class="line">+<span class="comment">--------------+-------------+--------------+</span></span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<hr>
<p><br></p>
<h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> w.name, w.population, w.area</span><br><span class="line"><span class="keyword">from</span> world w</span><br><span class="line"><span class="keyword">where</span> w.area &gt; <span class="number">3000000</span> <span class="keyword">or</span> w.population &gt; <span class="number">25000000</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">name</span>, population, area</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    world</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    area &gt; <span class="number">3000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">name</span>, population, area</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    world</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    population &gt; <span class="number">25000000</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>这题非常简单，但是有另外一点引起我的注意：<br><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy9zb2x1dGlvbi8=" title="https://leetcode.com/problems/big-countries/solution/">https://leetcode.com/problems/big-countries/solution/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTM3NTA0NzUvc3FsLXBlcmZvcm1hbmNlLXVuaW9uLXZzLW9y" title="https://stackoverflow.com/questions/13750475/sql-performance-union-vs-or">https://stackoverflow.com/questions/13750475/sql-performance-union-vs-or<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy9kaXNjdXNzLzEwMzU2MS9Vbmlvbi1hbmQtT1ItYW5kLXRoZS1FeHBsYW5hdGlvbg==" title="https://leetcode.com/problems/big-countries/discuss/103561/Union-and-OR-and-the-Explanation">https://leetcode.com/problems/big-countries/discuss/103561/Union-and-OR-and-the-Explanation<i class="fa fa-external-link"></i></span></p>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy8=" title="https://leetcode.com/problems/big-countries/">https://leetcode.com/problems/big-countries/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy9zb2x1dGlvbi8=" title="https://leetcode.com/problems/big-countries/solution/">https://leetcode.com/problems/big-countries/solution/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTM3NTA0NzUvc3FsLXBlcmZvcm1hbmNlLXVuaW9uLXZzLW9y" title="https://stackoverflow.com/questions/13750475/sql-performance-union-vs-or">https://stackoverflow.com/questions/13750475/sql-performance-union-vs-or<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYmlnLWNvdW50cmllcy9kaXNjdXNzLzEwMzU2MS9Vbmlvbi1hbmQtT1ItYW5kLXRoZS1FeHBsYW5hdGlvbg==" title="https://leetcode.com/problems/big-countries/discuss/103561/Union-and-OR-and-the-Explanation">https://leetcode.com/problems/big-countries/discuss/103561/Union-and-OR-and-the-Explanation<i class="fa fa-external-link"></i></span></p>
<p>该文章遵循<span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLzQuMC9kZWVkLnpo" title="https://creativecommons.org/licenses/by-nc/4.0/deed.zh">创作共用版权协议 CC BY-NC 4.0<i class="fa fa-external-link"></i></span>，要求署名、非商业 、保持一致。在满足<span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLzQuMC9kZWVkLnpo" title="https://creativecommons.org/licenses/by-nc/4.0/deed.zh">创作共用版权协议 CC BY-NC 4.0<i class="fa fa-external-link"></i></span> 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 262.trips.and.users</title>
    <url>/2020/03/12/SQL-Leetcode-262-trips-and-users/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>262.Trips and Users</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Trips (<span class="keyword">Id</span> <span class="built_in">int</span>, Client_Id <span class="built_in">int</span>, Driver_Id <span class="built_in">int</span>, City_Id <span class="built_in">int</span>, <span class="keyword">Status</span> ENUM(<span class="string">'completed'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'cancelled_by_client'</span>), Request_at <span class="built_in">varchar</span>(<span class="number">50</span>))</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> <span class="keyword">Users</span> (Users_Id <span class="built_in">int</span>, Banned <span class="built_in">varchar</span>(<span class="number">50</span>), <span class="keyword">Role</span> ENUM(<span class="string">'client'</span>, <span class="string">'driver'</span>, <span class="string">'partner'</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Trips</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'10'</span>, <span class="string">'1'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-01'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'11'</span>, <span class="string">'1'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'2013-10-01'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'12'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-01'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'13'</span>, <span class="string">'6'</span>, <span class="string">'cancelled_by_client'</span>, <span class="string">'2013-10-01'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'1'</span>, <span class="string">'10'</span>, <span class="string">'1'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'2'</span>, <span class="string">'11'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'3'</span>, <span class="string">'12'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'8'</span>, <span class="string">'2'</span>, <span class="string">'12'</span>, <span class="string">'12'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-03'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'9'</span>, <span class="string">'3'</span>, <span class="string">'10'</span>, <span class="string">'12'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-03'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'10'</span>, <span class="string">'4'</span>, <span class="string">'13'</span>, <span class="string">'12'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'2013-10-03'</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> <span class="keyword">Users</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Yes'</span>, <span class="string">'client'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'10'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'11'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'12'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'13'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> Trips;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">Users</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> <span class="keyword">status</span> <span class="keyword">AS</span> ENUM(<span class="string">'completed'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'cancelled_by_client'</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> <span class="keyword">role</span> <span class="keyword">AS</span> ENUM(<span class="string">'client'</span>, <span class="string">'driver'</span>, <span class="string">'partner'</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Trips (<span class="keyword">Id</span> <span class="built_in">int</span>, Client_Id <span class="built_in">int</span>, Driver_Id <span class="built_in">int</span>, City_Id <span class="built_in">int</span>, <span class="keyword">Status</span> <span class="keyword">status</span>, Request_at <span class="built_in">varchar</span>(<span class="number">50</span>));</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">Users</span> (Users_Id <span class="built_in">int</span>, Banned <span class="built_in">varchar</span>(<span class="number">50</span>), <span class="keyword">Role</span> <span class="keyword">role</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'10'</span>, <span class="string">'1'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'11'</span>, <span class="string">'1'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'2013-10-01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'3'</span>, <span class="string">'12'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'13'</span>, <span class="string">'6'</span>, <span class="string">'cancelled_by_client'</span>, <span class="string">'2013-10-01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'1'</span>, <span class="string">'10'</span>, <span class="string">'1'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'2'</span>, <span class="string">'11'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'3'</span>, <span class="string">'12'</span>, <span class="string">'6'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-02'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'8'</span>, <span class="string">'2'</span>, <span class="string">'12'</span>, <span class="string">'12'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-03'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'9'</span>, <span class="string">'3'</span>, <span class="string">'10'</span>, <span class="string">'12'</span>, <span class="string">'completed'</span>, <span class="string">'2013-10-03'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Trips (<span class="keyword">Id</span>, Client_Id, Driver_Id, City_Id, <span class="keyword">Status</span>, Request_at) <span class="keyword">values</span> (<span class="string">'10'</span>, <span class="string">'4'</span>, <span class="string">'13'</span>, <span class="string">'12'</span>, <span class="string">'cancelled_by_driver'</span>, <span class="string">'2013-10-03'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Yes'</span>, <span class="string">'client'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'No'</span>, <span class="string">'client'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'10'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'11'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'12'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Users</span> (Users_Id, Banned, <span class="keyword">Role</span>) <span class="keyword">values</span> (<span class="string">'13'</span>, <span class="string">'No'</span>, <span class="string">'driver'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>The <code>Trips</code> table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are both foreign keys to the Users_Id at the Users table. Status is an ENUM type of (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’).</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----+-----------+-----------+---------+--------------------+----------+</span></span><br><span class="line">| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|</span><br><span class="line">+<span class="comment">----+-----------+-----------+---------+--------------------+----------+</span></span><br><span class="line">| 1  |     1     |    10     |    1    |     completed      |2013-10-01|</span><br><span class="line">| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|</span><br><span class="line">| 3  |     3     |    12     |    6    |     completed      |2013-10-01|</span><br><span class="line">| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|</span><br><span class="line">| 5  |     1     |    10     |    1    |     completed      |2013-10-02|</span><br><span class="line">| 6  |     2     |    11     |    6    |     completed      |2013-10-02|</span><br><span class="line">| 7  |     3     |    12     |    6    |     completed      |2013-10-02|</span><br><span class="line">| 8  |     2     |    12     |    12   |     completed      |2013-10-03|</span><br><span class="line">| 9  |     3     |    10     |    12   |     completed      |2013-10-03| </span><br><span class="line">| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|</span><br><span class="line">+<span class="comment">----+-----------+-----------+---------+--------------------+----------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>The Users table holds all users. Each user has an unique Users_Id, and Role is an ENUM type of (‘client’, ‘driver’, ‘partner’).</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----------+--------+--------+</span></span><br><span class="line">| Users_Id | Banned |  Role  |</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br><span class="line">|    1     |   No   | client |</span><br><span class="line">|    2     |   Yes  | client |</span><br><span class="line">|    3     |   No   | client |</span><br><span class="line">|    4     |   No   | client |</span><br><span class="line">|    10    |   No   | driver |</span><br><span class="line">|    11    |   No   | driver |</span><br><span class="line">|    12    |   No   | driver |</span><br><span class="line">|    13    |   No   | driver |</span><br><span class="line">+<span class="comment">----------+--------+--------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>Write a SQL query to find the cancellation rate of requests made by unbanned users (both client and driver must be unbanned) between Oct 1, 2013 and Oct 3, 2013. The cancellation rate is computed by dividing the number of canceled (by client or driver) requests made by unbanned users by the total number of requests made by unbanned users.</p>
<p>For the above tables, your SQL query should return the following rows with the cancellation rate being rounded to two decimal places.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">------------+-------------------+</span></span><br><span class="line">|     Day    | Cancellation Rate |</span><br><span class="line">+<span class="comment">------------+-------------------+</span></span><br><span class="line">| 2013-10-01 |       0.33        |</span><br><span class="line">| 2013-10-02 |       0.00        |</span><br><span class="line">| 2013-10-03 |       0.50        |</span><br><span class="line">+<span class="comment">------------+-------------------+</span></span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<hr>
<p><br></p>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p><strong>适用于PostgreSQL</strong>:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> temp.request_at <span class="keyword">as</span> <span class="string">"Day"</span>, </span><br><span class="line">       <span class="keyword">round</span>(<span class="keyword">cast</span>(<span class="keyword">count</span>(*) filter (<span class="keyword">where</span> temp.status != <span class="string">'completed'</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> temp.request_at) <span class="keyword">as</span> <span class="built_in">decimal</span>) / <span class="keyword">count</span>(*) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> temp.request_at), <span class="number">2</span>) <span class="keyword">as</span> <span class="string">"Cancellation Rate"</span> </span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> request_at, <span class="keyword">status</span> </span><br><span class="line">    <span class="keyword">from</span> trips t, <span class="keyword">users</span> <span class="keyword">client</span>, <span class="keyword">users</span> driver </span><br><span class="line">    <span class="keyword">where</span> t.client_id = client.users_id <span class="keyword">and</span> t.driver_id = driver.users_id <span class="keyword">and</span> client.banned = <span class="string">'No'</span> <span class="keyword">and</span> driver.banned = <span class="string">'No'</span>) <span class="keyword">as</span> temp;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p><strong>适用于MSSQL和PostgreSQL</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> temp.request_at <span class="keyword">as</span> <span class="string">"Day"</span>, </span><br><span class="line">       <span class="keyword">round</span>(<span class="keyword">cast</span>(<span class="keyword">count</span>(<span class="keyword">case</span> <span class="keyword">when</span> temp.status != <span class="string">'completed'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> temp.request_at) <span class="keyword">as</span> <span class="built_in">decimal</span>) / <span class="keyword">count</span>(*) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> temp.request_at), <span class="number">2</span>) <span class="keyword">as</span> <span class="string">"Cancellation Rate"</span> </span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> request_at, <span class="keyword">status</span> </span><br><span class="line">    <span class="keyword">from</span> trips t, <span class="keyword">users</span> <span class="keyword">client</span>, <span class="keyword">users</span> driver </span><br><span class="line">    <span class="keyword">where</span> t.client_id = client.users_id <span class="keyword">and</span> t.driver_id = driver.users_id <span class="keyword">and</span> client.banned = <span class="string">'No'</span> <span class="keyword">and</span> driver.banned = <span class="string">'No'</span>) <span class="keyword">as</span> temp;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdHJpcHMtYW5kLXVzZXJzLw==" title="https://leetcode.com/problems/trips-and-users/">https://leetcode.com/problems/trips-and-users/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzkzNzg1NTAvc3FsLXdpbmRvdy1mdW5jdGlvbi13aXRoLWEtd2hlcmUtY2xhdXNl" title="https://stackoverflow.com/questions/39378550/sql-window-function-with-a-where-clause">https://stackoverflow.com/questions/39378550/sql-window-function-with-a-where-clause<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tb2Rlcm4tc3FsLmNvbS9kZS9mZWF0dXJlL2ZpbHRlcg==" title="https://modern-sql.com/de/feature/filter">https://modern-sql.com/de/feature/filter<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Window Function</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 197.rising.temperature</title>
    <url>/2020/03/12/SQL-Leetcode-197-rising-temperature/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>197.Rising Temperature</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Weather (<span class="keyword">Id</span> <span class="built_in">int</span>, RecordDate <span class="built_in">date</span>, Temperature <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Weather;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'2015-01-01'</span>, <span class="string">'10'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2015-01-02'</span>, <span class="string">'25'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'2015-01-03'</span>, <span class="string">'20'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'2015-01-04'</span>, <span class="string">'30'</span>);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Weather;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Weather (<span class="keyword">Id</span> <span class="built_in">int</span>, RecordDate <span class="built_in">date</span>, Temperature <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'2015-01-01'</span>, <span class="string">'10'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'2015-01-02'</span>, <span class="string">'25'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'2015-01-03'</span>, <span class="string">'20'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Weather (<span class="keyword">Id</span>, RecordDate, Temperature) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'2015-01-04'</span>, <span class="string">'30'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>Given a <code>Weather</code> table, write a SQL query to find all dates’ Ids with higher temperature compared to its previous (yesterday’s) dates.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">---------+------------------+------------------+</span></span><br><span class="line">| Id(INT) | RecordDate(DATE) | Temperature(INT) |</span><br><span class="line">+<span class="comment">---------+------------------+------------------+</span></span><br><span class="line">|       1 |       2015-01-01 |               10 |</span><br><span class="line">|       2 |       2015-01-02 |               25 |</span><br><span class="line">|       3 |       2015-01-03 |               20 |</span><br><span class="line">|       4 |       2015-01-04 |               30 |</span><br><span class="line">+<span class="comment">---------+------------------+------------------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>For example, return the following Ids for the above <code>Weather</code> table:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----+</span></span><br><span class="line">| Id |</span><br><span class="line">+<span class="comment">----+</span></span><br><span class="line">|  2 |</span><br><span class="line">|  4 |</span><br><span class="line">+<span class="comment">----+</span></span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<hr>
<p>我第一次审题，误看成和前一个tuple(当然不一定是前一天)比较温度的大小，然后写了如下的带window function的版本：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> w.id <span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> *, lag(Temperature, <span class="number">1</span>, <span class="literal">NULL</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> RecordDate) <span class="keyword">as</span> last_temp </span><br><span class="line">    <span class="keyword">from</span> weather) <span class="keyword">as</span> w </span><br><span class="line"><span class="keyword">where</span> w.temperature &gt; w.last_temp;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p><strong>适用于PostgreSQL</strong>:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> temp.id <span class="keyword">as</span> <span class="keyword">Id</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> w1.id <span class="keyword">as</span> <span class="keyword">id</span>, w1.temperature <span class="keyword">as</span> temp, w2.temperature <span class="keyword">as</span> last_temp </span><br><span class="line">    <span class="keyword">from</span> weather w1, weather w2 </span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">EXTRACT</span> (<span class="keyword">DAY</span> <span class="keyword">FROM</span> w1.recorddate) - <span class="keyword">EXTRACT</span> (<span class="keyword">DAY</span> <span class="keyword">FROM</span> w2.recorddate) = <span class="number">1</span>) <span class="keyword">as</span> temp </span><br><span class="line"><span class="keyword">where</span> temp.temp &gt; temp.last_temp;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><p><strong>适用于MySQL</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> temp.id <span class="keyword">as</span> <span class="keyword">Id</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> w1.id <span class="keyword">as</span> <span class="keyword">id</span>, w1.temperature <span class="keyword">as</span> temp, w2.temperature <span class="keyword">as</span> last_temp </span><br><span class="line">    <span class="keyword">from</span> weather w1, weather w2 </span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">DATEDIFF</span>(w1.recorddate, w2.recorddate) = <span class="number">1</span>) <span class="keyword">as</span> temp </span><br><span class="line"><span class="keyword">where</span> temp.temp &gt; temp.last_temp;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t1.Id</span><br><span class="line"><span class="keyword">From</span> </span><br><span class="line">    Weather t1, Weather t2</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    t1.Temperature &gt; t2.Temperature</span><br><span class="line"><span class="keyword">AND</span></span><br><span class="line">    <span class="keyword">subdate</span>(t1.Date, <span class="number">1</span>) = t2.Date</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmlzaW5nLXRlbXBlcmF0dXJlLw==" title="https://leetcode.com/problems/rising-temperature/">https://leetcode.com/problems/rising-temperature/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmlzaW5nLXRlbXBlcmF0dXJlL2Rpc2N1c3MvNTU2NDkvU29sdXRpb24td2l0aC1teXNxbC1idWlsdC1pbi1mdW5jdGlvbg==" title="https://leetcode.com/problems/rising-temperature/discuss/55649/Solution-with-mysql-built-in-function">https://leetcode.com/problems/rising-temperature/discuss/55649/Solution-with-mysql-built-in-function<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjMvZnVuY3Rpb25zLWRhdGV0aW1lLmh0bWwjRlVOQ1RJT05TLURBVEVUSU1FLUVYVFJBQ1Q=" title="https://www.postgresql.org/docs/9.3/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT">https://www.postgresql.org/docs/9.3/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 196.delete.duplicate.emails</title>
    <url>/2020/03/12/SQL-Leetcode-196-delete-duplicate-emails/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>196.Delete Duplicate Emails</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Person (<span class="keyword">Id</span> <span class="built_in">int</span>, Email <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Person</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'john@example.com'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'bob@example.com'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'john@example.com'</span>);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Person;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Person (<span class="keyword">Id</span> <span class="built_in">int</span>, Email <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'john@example.com'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'bob@example.com'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'john@example.com'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>Write a SQL query to delete all duplicate email entries in a table named <code>Person</code>, keeping only unique emails based on its smallest Id.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----+------------------+</span></span><br><span class="line">| Id | Email            |</span><br><span class="line">+<span class="comment">----+------------------+</span></span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">| 3  | john@example.com |</span><br><span class="line">+<span class="comment">----+------------------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>Id is the primary key column for this table.<br>For example, after running your query, the above <code>Person</code> table should have the following rows:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----+------------------+</span></span><br><span class="line">| Id | Email            |</span><br><span class="line">+<span class="comment">----+------------------+</span></span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">+<span class="comment">----+------------------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>Note:</p>
<p>Your output is the whole <code>Person</code> table after executing your sql. Use <code>delete</code> statement.</p>
<a id="more"></a>
<hr>
<p><br></p>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p><strong>适用于PostgreSQL</strong>:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> </span><br><span class="line"><span class="keyword">from</span> person p1 </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span> (</span><br><span class="line">    <span class="keyword">select</span> * </span><br><span class="line">    <span class="keyword">from</span> person p2 </span><br><span class="line">    <span class="keyword">where</span> p1.id &gt; p2.id <span class="keyword">and</span> p1.email = p2.email</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><p><strong>不适用于PostgreSQL</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> p1 </span><br><span class="line"><span class="keyword">FROM</span> Person p1,</span><br><span class="line">    Person p2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    p1.Email = p2.Email <span class="keyword">AND</span> p1.Id &gt; p2.Id;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZGVsZXRlLWR1cGxpY2F0ZS1lbWFpbHMv" title="https://leetcode.com/problems/delete-duplicate-emails/">https://leetcode.com/problems/delete-duplicate-emails/<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[CMU-15445]Lec03 Database Storage Part I - 数据库存储 I</title>
    <url>/2020/03/11/CMU-15445-Lec03/</url>
    <content><![CDATA[<p>Database Storage Part I - 数据库存储 I</p>
<p>Slide: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzAzLXN0b3JhZ2UxLnBkZg==" title="https://15445.courses.cs.cmu.edu/fall2019/slides/03-storage1.pdf">https://15445.courses.cs.cmu.edu/fall2019/slides/03-storage1.pdf<i class="fa fa-external-link"></i></span><br>Note: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDMtc3RvcmFnZTEucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/03-storage1.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/03-storage1.pdf<i class="fa fa-external-link"></i></span><br>Reading: Chapter 10.1-10.2, 10.5-10.6</p>
<p>这节两课，我们会学习数据库内部的存储。</p>
<p>Database Storage 在CMU分成了两部分，在两节课中讲。这是第一部分。</p>
<p>这部分涉及存储的硬件, 操作系统提供的syscall, 数据库缓存区(buffer pool)的缓存页(buffer page), Slotted page等等。</p>
<a id="more"></a>
<p><img data-src="/images/CMU1544564/Lec03/1.jpg" alt="1.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/3.jpg" alt="3.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/4.jpg" alt="4.jpg"></p>
<h1 id="Disk-Oriented-Architecture"><a href="#Disk-Oriented-Architecture" class="headerlink" title="Disk-Oriented Architecture"></a>Disk-Oriented Architecture</h1><p><img data-src="/images/CMU1544564/Lec03/5.jpg" alt="5.jpg"></p>
<p>这个课我们重点在Disk-oriented databases(面向磁盘的数据库), 这是一种比较成熟，诞生很早的数据库类型。在2010s　学术界和工业界中开发了非常多优秀的In-Memory databases(内存数据库)，当然它的数据主要存储(primary storage location)于内存中。内存数据库具体的细节可以在CMU的高级数据库课(CMU 15-721)中学到。</p>
<p>另外，<strong>年龄比较大</strong>并不意味着Disk-oriented databases没落。相反的是， HDD的可靠性和低廉的价格保障了Disk-oriented databases的市场份额，SSD硬件的读写能力的进步让Disk-oriented databases并不比 In-Memory databases慢很多。近些年，Disk-oriented databases正在努力融合接纳 In-Memory databases 的技术，并拥有相同的performance，见　<span class="exturl" data-url="aHR0cHM6Ly91bWJyYS5kYi5pbi50dW0uZGUv" title="https://umbra.db.in.tum.de/">https://umbra.db.in.tum.de/<i class="fa fa-external-link"></i></span></p>
<h2 id="Storage-Hierarchy"><a href="#Storage-Hierarchy" class="headerlink" title="Storage Hierarchy"></a>Storage Hierarchy</h2><p><img data-src="/images/CMU1544564/Lec03/6.jpg" alt="6.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/7.jpg" alt="7.jpg"></p>
<p>我们注意水平的虚线：</p>
<ul>
<li>虚线以上：　voltaile devices (易失的存储硬件设备)，数据只能在电力提供的情况下被存储。单位容量价格更贵，随机访问(random access)较快，访问数据粒度(granularity)是Byte, 即每次访问可以获得数据的最小单元是Byte。</li>
<li>虚线以下：　non-voltaile devices (非易失的存储硬件设备)，数据可以在无电力提供的情况下被存储。单位容量价格更便宜，随机访问(random access)较慢，访问数据粒度(granularity)是Block, 即每次访问可以获得数据的最小单元是Block。一个Block一般为4KiB。</li>
</ul>
<p>non-voltaile devices可以被模糊称为<em>disk</em>，当然是在我们不区分SSD, HDD, Network Storage, Tape的时候。另外它们也被称为　block devices，因为是访问粒度是一个block。</p>
<h3 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h3><p><img data-src="/images/CMU1544564/Lec03/8.jpg" alt="8.jpg"></p>
<p>Pavlo教授的第一个PhD学生 Joy Arulraj的主要研究方向是一种新的硬件 Non-voltaile Memory，这种硬件会改变我们已知的 Storage Hierarchy。</p>
<p>非常不严谨的说，它像是内存和硬盘的孩子：</p>
<ul>
<li>访问粒度是Byte</li>
<li>访问速度稍慢于内存</li>
<li>非易失</li>
</ul>
<p><img data-src="https://blobs.gitbook.com/assets%2F-LCeQxrze3Z6fEniTf2v%2F-LLjk64O7_5of1p_CGnO%2F-LLjkCG1sMXBB_QrIqZp%2Fpmem_storage_pyramid.jpg?alt=media&amp;token=7b37e107-1927-43a8-b4c1-6e4289cdb458" alt="NVM -- Source: Persistent Memory Documentation, pmem"></p>
<p>Non-Volatile Memory Database Management Systems: <span class="exturl" data-url="aHR0cHM6Ly93d3cubW9yZ2FuY2xheXBvb2wuY29tL2RvaS8xMC4yMjAwL1MwMDg5MUVEMVYwMVkyMDE4MTJEVE0wNTU=" title="https://www.morganclaypool.com/doi/10.2200/S00891ED1V01Y201812DTM055">https://www.morganclaypool.com/doi/10.2200/S00891ED1V01Y201812DTM055<i class="fa fa-external-link"></i></span></p>
<p>另附上两篇NVM有关的论文, 作者是我本科论文的导师 <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span> : </p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL3ZhbnJlbmVuL3BhcGVycy9IeU1lbS5wZGY/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/vanrenen/papers/HyMem.pdf?lang=de">Managing Non-Volatile Memory in Database Systems<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL3ZhbnJlbmVuL3BhcGVycy9udm1fc3RhdHMucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/people/sites/vanrenen/papers/nvm_stats.pdf?lang=de">Persistent Memory I/O Primitives<i class="fa fa-external-link"></i></span></li>
</ul>
<p><br></p>
<h2 id="Acess-Time"><a href="#Acess-Time" class="headerlink" title="Acess Time"></a>Acess Time</h2><p><img data-src="/images/CMU1544564/Lec03/9.jpg" alt="9.jpg"></p>
<ul>
<li>1s = 1,000 ms = 1,000,000 ns</li>
<li>红色箭头右侧的是数字只是一个<strong>类比比喻</strong>，假设<code>1ns = 1s</code>,　来使得各个存储介质的访问时间差距变得更清晰。</li>
</ul>
<p>Latency numbers every programmer should know: <span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vaGVsbGVyYmFyZGUvMjg0MzM3NQ==" title="https://gist.github.com/hellerbarde/2843375">https://gist.github.com/hellerbarde/2843375<i class="fa fa-external-link"></i></span></p>
<!-- TODO: link more access time -->
<be>

<h2 id="System-Design-Goals-in-Disk-oriented-databases"><a href="#System-Design-Goals-in-Disk-oriented-databases" class="headerlink" title="System Design Goals (in Disk-oriented databases)"></a>System Design Goals (in Disk-oriented databases)</h2><p>Disk-oriented databases　需要处理比物理内存更大的数据，这意味着数据库需要有缓存区管理器，它<em>提供服务</em>给上层的数据库，让数据库能访问任何一个数据，而这个数据实际上已经由缓存区管理器由硬盘 load 进内存。缓存区管理器的工作就是将数据(实际上是<strong>页</strong>)从硬盘读进内存 或 从内存写入硬盘，目的是让上层的数据库有更高效的缓存机制(caching)，更少的I/O Operation，更高的性能，更短的运行时间。</p>
<p>几个概念：</p>
<ul>
<li>缓存区: Buffer Pool</li>
<li>缓存区管理器: Buffer Manager / buffer pool manager</li>
<li>页:　page / Buffer page</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec03/10.jpg" alt="10.jpg"></p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>我们演示一下，假设我们刚刚打开数据库，此时数据库的Buffer Pool是空的：</p>
<p><img data-src="/images/CMU1544564/Lec03/12.jpg" alt="12.jpg"></p>
<p><br></p>
<p>Execution Engine调用了buffer pool manager的一个函数: <code>getpage(int : 2)</code>, 为了得到第二个 page。　目前我们只将　Execution Engine视作一个需要 page 的数据库高层的部分，需要 buffer pool manager　提供的服务:</p>
<p><img data-src="/images/CMU1544564/Lec03/13.jpg" alt="13.jpg"></p>
<p><br></p>
<p>这时候数据库需要从硬盘中读<strong>directory page</strong>到内存，directory page是buffer pool的header,　记录了每一个page对应的文件。</p>
<p>Directory page在这节课后面会被提到，见<a href="#page-directory">Heap File - Page Directory</a></p>
<p>当directory page进入内存，buffer pool manager从它上面读到了page 2对应的文件位置:</p>
<p><img data-src="/images/CMU1544564/Lec03/14.jpg" alt="14.jpg"></p>
<p><br></p>
<p>接下来page 2被读到内存中，execution engine得到它想要的东西： 一个page2内容在内存的指针。</p>
<p><img data-src="/images/CMU1544564/Lec03/15.jpg" alt="15.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/16.jpg" alt="16.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/17.jpg" alt="17.jpg"></p>
<p><br></p>
<h2 id="Why-not-use-the-OS"><a href="#Why-not-use-the-OS" class="headerlink" title="Why not use the OS?"></a>Why not use the OS?</h2><p>上述整个机制完全和<strong>操作系统中虚拟内存</strong>一致。操作系统给每一个进程(process)提供虚拟内存大小的地址空间(address space)，而虚拟内存的大小往往比机器的物理内存要大，进程被<em>欺骗</em>而使用虚拟内存对应的地址。而操作系统通过MMU映射每一个虚拟内存到物理内存，从而向进程提供对应的物理内存的地址上的数据。而当进程使用超过物理内存大小的地址空间(address space)时，操作系统也是在硬盘和内存中缓存 page，进行swap。</p>
<p>那既然操作系统和数据库的缓存页机制类似，我们向自己提出一个直击灵魂的问题：<br><strong>为什么数据库不直接用操作系统的页，而浪费时间(?)开发一个buffer pool manager做类似的事情呢？</strong></p>
<h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a><code>mmap</code></h3><blockquote>
<p>One way to achieve this virtual memory, is by using mmap to map the contents of a file in a process address space</p>
</blockquote>
<p>上面这句话来自于<span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDMtc3RvcmFnZTEucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/03-storage1.pdf">Note<i class="fa fa-external-link"></i></span>, 它实际上不太完整，<code>mmap</code>是一个操作系统提供的<code>syscall</code>:  </p>
<ul>
<li>map <strong>the OS file caching area, where the reqeusted file is readed</strong>, in a process address space</li>
<li>原话中的<code>map the contents of file...</code>会让人误解为，直接从硬盘开始映射，这当然是错的。实际上，操作系统先将文件读进操作系统文件缓存区(file cache)，再将这个缓存区的文件内容映射到对应进程的地址空间。</li>
<li>或者</li>
<li>使用direct I/O: <code>O_DIRECT</code> = disable page cache in OS for reading/writing file, 可以避免使用操作系统文件缓存区，直接将文件读取到数据库(比如buffer pool缓存区)的address space。这样性能也会更好。因为省去从操作系统文件缓存区复制进数据库address space这一步。<code>mmap</code>可以产生内存文件，把磁盘文件的内容map到内存的地址空间。</li>
</ul>
<p><br></p>
<ul>
<li>在Lec05中，我们继续会提到操作系统中的page cache<a href="https://cakebytheoceanluo.github.io/2020/03/17/CMU-15445-Lec05/#OS-Page-Cache">[CMU-15445]Lec05 - OS Page Cache</a></li>
<li>Lec05课上的对应的PostgreSQL实验, 见<a href="https://cakebytheoceanluo.github.io/2020/03/17/DBMS-PostgreSQL-%E7%BC%93%E5%AD%98%E5%8C%BA%E7%AE%A1%E7%90%86BufferPool/">[DBMS][PostgreSQL] 缓存区管理 BufferPool</a></li>
</ul>
<p><code>mmap</code>是一个非常重要的进程通信方式(if <code>shared</code>)，同时也是高性能文件操作的方法。我们以后会仔细讲讲。</p>
<!-- TODO: mmap -->
<h3 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h3><p><img data-src="/images/CMU1544564/Lec03/18.jpg" alt="18.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/19.jpg" alt="19.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/20.jpg" alt="20.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/21.jpg" alt="21.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/22.jpg" alt="22.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/23.jpg" alt="23.jpg"></p>
<p>上面的demo的意思是，当我们在物理内存已满的情况下，继续需要page2，这时候会出现一个page fault(页缺失)，我们需要从物理内存中去掉一个page，来给page2提供空间。当然demo最开始的时候，我们需要page1的时候，和我们需要page3的时候，它们都不再物理内存中，这时候我们也遇到了page Fault。</p>
<p>当<code>mmap</code>遇到一个page fault的时候会被blocked:</p>
<blockquote>
<p>Unfortunately, this means that if <code>mmap</code> hits a page fault, this will <strong>block</strong> the process. </p>
</blockquote>
<p>上面这句话来自于<span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDMtc3RvcmFnZTEucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/03-storage1.pdf">Note<i class="fa fa-external-link"></i></span></p>
<blockquote>
<p>… mmap() can block, because setting up a user visible virtual memory mapping requires a relatively complex data structure setup on the kernel side, which involves kernel allocating memory from its internal allocators …</p>
</blockquote>
<p>上面这句话来自于<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIwMDg1NDU2LzgwNDk0MDg=" title="https://stackoverflow.com/a/20085456/8049408">Can sbrk(2) or mmap(2) block? - oakad’s answer<i class="fa fa-external-link"></i></span></p>
<p>page Fault时具体发生的事情，完全类似<code>syscall</code>发生的事情一样:<br>当前程序会从ser mode TRAP进入 kernel mode，这时进程一直被blocked (CPU stalled), 直到对应新的page被加载进入kernel space而且程序回到user mode为止。</p>
<h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><p>我们已知<code>mmap</code>会被blocked, 这个阻断时间中，数据库上面也做不了，只能等待新的page加载结束。这会带来性能下降问题。另外如果有多个并发写，需要同步机制，系统也提供一些同步指令<code>madvise</code>, <code>mlock</code>, <code>msync</code>。但是操作系统只是一个通用方案，达不到性能最优。</p>
<p>另外操作系统不能将一个page立即写回硬盘，这一点会在事务Logging中使正确性不能被保证。</p>
<p>由于<strong>性能问题</strong>和<strong>正确性问题</strong>，<code>mmap</code>比较少在数据库中被采用。</p>
<p><img data-src="/images/CMU1544564/Lec03/24.jpg" alt="24.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/25.jpg" alt="25.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/26.jpg" alt="26.jpg"></p>
<p><br><br><br><br><br></p>
<h1 id="Database-Storage"><a href="#Database-Storage" class="headerlink" title="Database Storage"></a>Database Storage</h1><p><img data-src="/images/CMU1544564/Lec03/27.jpg" alt="27.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/28.jpg" alt="28.jpg"></p>
<h2 id="File-Storage"><a href="#File-Storage" class="headerlink" title="File Storage"></a>File Storage</h2><p><img data-src="/images/CMU1544564/Lec03/29.jpg" alt="29.jpg"></p>
<h3 id="Storage-Manager"><a href="#Storage-Manager" class="headerlink" title="Storage Manager"></a>Storage Manager</h3><p>下面一个问题，DBMS如何将数据库的数据放到磁盘文件上？ 这里有个选择，DBMS是否要用操作系统的文件系统，还是拿一块raw storage自己管理。现在一般的选择是还是使用操作系统文件系统，毕竟方便。既然用文件系统，那么DBMS就需要把数据库数据存成一个或多个文件。每个文件有多个page组成。page其实就是固定大小的数据块，那为什么要有这层抽象？这个和我们使用的存储的磁盘有关，它除了慢，还有个特点是对顺序读写比较友好，因为随机读需要磁头不断的机械移动的。所以操作系统的文件系统和磁盘间的I/O，需要<strong>尽量批量读</strong>，读写数据的最小单位称为数据块block，一般是4KiB，因为4KiB比较经济。而数据库的page是基于文件系统的，所以设计成4KiB的倍数会比较合理。<sup><a href="#fn1">1</a></sup></p>
<p>storage manager能够理解解释interpret对应的数据库文件，将数据库文件represent成一个page的集合。它也记录下page的读与写操作，另外page上剩下的存储空间大小也会被记录下来。</p>
<p><img data-src="/images/CMU1544564/Lec03/30.jpg" alt="30.jpg"></p>
<h3 id="Database-Pages"><a href="#Database-Pages" class="headerlink" title="Database Pages"></a>Database Pages</h3><blockquote>
<p>Self-contained:= all the information needed to read each page is on the page itself.</p>
</blockquote>
<p>上面这句话来自于<span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDMtc3RvcmFnZTEucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/03-storage1.pdf">Note<i class="fa fa-external-link"></i></span></p>
<ul>
<li>Self-contained指这个page拥有metadata(元数据)，这个metadata用来告诉我们如何interpret该page。</li>
<li>每一个page有一个唯一的page id:<ul>
<li>如果数据库只有一个文件，在这种简单的情况下，page id可以是对应数据在该文件的offset</li>
<li>大多数情况，数据库有多个文件。这是page id可以是对应数据所在的<strong>那一个</strong>文件的路径＋在该文件中的offset</li>
<li>因此每一个page id可以对应上某些数据，这些数据的大小是一个page的大小</li>
<li>在数据库的高层组成成分中(比如 execution engine)，都需要将对应的page id当做参数，从buffer pool manager中获得对应的page(和数据)。</li>
</ul>
</li>
<li>另外在学术中page也可以是变长的(variable sized): 见 <span class="exturl" data-url="aHR0cDovL2NpZHJkYi5vcmcvY2lkcjIwMjAvcGFwZXJzL3AyOS1uZXVtYW5uLWNpZHIyMC5wZGY=" title="http://cidrdb.org/cidr2020/papers/p29-neumann-cidr20.pdf">Umbra: A Disk-Based System with In-Memory Performance<i class="fa fa-external-link"></i></span></li>
</ul>
<p><img data-src="/images/CMU1544564/Lec03/31.jpg" alt="31.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/32.jpg" alt="32.jpg"></p>
<h3 id="Database-Heap"><a href="#Database-Heap" class="headerlink" title="Database Heap"></a>Database Heap</h3><p><img data-src="/images/CMU1544564/Lec03/33.jpg" alt="33.jpg"></p>
<p>上图说，我们有多种途径去对硬盘上的page位置进行管理，heap file是其中的一种途径，我们重点看一下heap file。<strong>heap file就是用来放page的文件，当然我们可以通过文件名+offset，访问某个特定的page。</strong><sup><a href="#fn1">1</a></sup>  heap file也有两种实现方式: linked list, page directory。</p>
<blockquote>
<p>A <strong>heap file</strong> is an unordered collection of pages where tuples that are stored in random order.</p>
</blockquote>
<p><img data-src="/images/CMU1544564/Lec03/34.jpg" alt="34.jpg"></p>
<h4 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h4><p>Header page有两个指针：</p>
<ul>
<li><code>free page list</code> 指向一个free page的list</li>
<li><code>data page list</code> 指向一个not free page的list</li>
</ul>
<p>如果我们想寻找某一个特定的page (或者一个特定的page id), 我们只能低效地sequential scan。总体上linked list不是一个好主意。</p>
<p><img data-src="/images/CMU1544564/Lec03/36.jpg" alt="36.jpg"></p>
<h4 id="Page-Directory"><a href="#Page-Directory" class="headerlink" title="Page Directory"></a>Page Directory</h4><p>page directory:= special pages that tracks <strong>the location and the amount of free space</strong> of data pages in the database files.</p>
<p>page directory是一种比较常见的方式，　它提供了一种映射：<code>page id -&gt; offset in file</code>, 这样我们可以通过page id找到对应的数据。</p>
<p>另外我们需要同步(sync)page directory上的信息和实际上的page信息。这需要我们在每次更改page的时候，同时也需要更改page directory上的信息。</p>
<p><img data-src="/images/CMU1544564/Lec03/37.jpg" alt="37.jpg"></p>
<p><br><br><br></p>
<h2 id="Page-Layout"><a href="#Page-Layout" class="headerlink" title="Page Layout"></a>Page Layout</h2><p><img data-src="/images/CMU1544564/Lec03/38.jpg" alt="38.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/39.jpg" alt="39.jpg"></p>
<h3 id="Tuple-oriented"><a href="#Tuple-oriented" class="headerlink" title="Tuple-oriented"></a>Tuple-oriented</h3><h4 id="Strawman-idea"><a href="#Strawman-idea" class="headerlink" title="Strawman idea"></a>Strawman idea</h4><p>Strawman idea只是一个<strong>反面教材，并不是一种好的实现</strong>。</p>
<p><img data-src="/images/CMU1544564/Lec03/41.jpg" alt="41.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/42.jpg" alt="42.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/43.jpg" alt="43.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/44.jpg" alt="44.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/45.jpg" alt="45.jpg"></p>
<p>这个作法的缺点：</p>
<ul>
<li>删除tuple时，会出现external fragmentation</li>
<li>无法存储长度变长的tuple，比如<code>VARCHAR</code>字符串</li>
</ul>
<p><br></p>
<h4 id="Slotted-Pages"><a href="#Slotted-Pages" class="headerlink" title="Slotted Pages"></a>Slotted Pages</h4><p><img data-src="/images/CMU1544564/Lec03/47.jpg" alt="47.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/48.jpg" alt="48.jpg"></p>
<p>对于slotted pages，如果我们删除tuple3与更改header后,　我们可以有两种选择：</p>
<ul>
<li>将原tuple3的位置留空，不改变其他tuple的位置</li>
<li>或</li>
<li>将tuple4向右移动，占有原tuple3的空间，也调整tuple4的指针和header (当然在普遍情况下，需要调整<strong>所有</strong>tuple３之后的tuple)</li>
</ul>
<p>我们将上面第二种选择成为compaction，它需要在什么时间发生，有如下几种可能：</p>
<ul>
<li>每一次delete以后</li>
<li>累加一定量的delete后</li>
<li>每一次insert之前</li>
<li>在一次特定insert的时候，发现没有<strong>足够空间(即slot array和tuple data重合)</strong></li>
<li>…</li>
</ul>
<p>上述的compaction时间点可能性自然会影响性能，这些可能性都是实现相关，也这该数据库中insert和delete的分布和比例有关。</p>
<p>有关的一个PostgreSQL中的实验：见<a href="https://cakebytheoceanluo.github.io/2020/03/11/DBMS-PostgreSQL-PageLayout/">[DBMS][PostgreSQL] Page Layout 页面布局</a></p>
<p><br></p>
<h4 id="Log-Structured-File-Organization"><a href="#Log-Structured-File-Organization" class="headerlink" title="Log-Structured File Organization"></a>Log-Structured File Organization</h4><p><img data-src="/images/CMU1544564/Lec03/49.jpg" alt="49.jpg"></p>
<ul>
<li>如上图中，新的操作(insert, delete, update)直接被记录下来，我们就在维护这个log file</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec03/50.jpg" alt="50.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/51.jpg" alt="51.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/52.jpg" alt="52.jpg"></p>
<p>优点：</p>
<ul>
<li>速度很快，只需要向文件中写入一行log信息</li>
<li>自带log, 在recovery很大帮助</li>
<li>适合append only的存储形式　(大部分的分布式存储是append only)</li>
</ul>
<p>缺点:</p>
<ul>
<li>数据读写较慢，需要依靠log生成tuple (这个生成过程叫replay)</li>
<li>数据分散，且难以缓存(data ends up spread out wide and hard to cache.)</li>
</ul>
<p><br><br><br></p>
<h2 id="Tuple-Layout"><a href="#Tuple-Layout" class="headerlink" title="Tuple Layout"></a>Tuple Layout</h2><p><img data-src="/images/CMU1544564/Lec03/54.jpg" alt="54.jpg"></p>
<h3 id="Tuple-Header"><a href="#Tuple-Header" class="headerlink" title="Tuple Header"></a>Tuple Header</h3><p><img data-src="/images/CMU1544564/Lec03/55.jpg" alt="55.jpg"></p>
<h3 id="Tuple-Data"><a href="#Tuple-Data" class="headerlink" title="Tuple Data"></a>Tuple Data</h3><p><img data-src="/images/CMU1544564/Lec03/56.jpg" alt="56.jpg"></p>
<h3 id="Record-ids-—-Unique-identifier"><a href="#Record-ids-—-Unique-identifier" class="headerlink" title="Record ids — Unique identifier"></a>Record ids — Unique identifier</h3><p>(这一页slide被我提前了)</p>
<p>Record ids缩写成RID, 常见的指是<code>page id + offset / slot</code>，即和这个tuple存储的位置相关。既然它是唯一的，而且可以确定一个tuple，因此RID可以作为index(索引)的key。</p>
<p><img data-src="/images/CMU1544564/Lec03/61.jpg" alt="61.jpg"></p>
<h3 id="Denormalized-Tuple-Data"><a href="#Denormalized-Tuple-Data" class="headerlink" title="Denormalized Tuple Data"></a>Denormalized Tuple Data</h3><p>这部分也是实现相关，也和数据库的Normal Form, Functional Dependency有关。</p>
<p>Denormalized，都知道关系模型有范式，冗余数据一定是会打破范式的，所以是<strong>de</strong>。<sup><a href="#fn1">1</a></sup></p>
<p><img data-src="/images/CMU1544564/Lec03/57.jpg" alt="57.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/58.jpg" alt="58.jpg"></p>
<ul>
<li>注意上图中<code>bar</code>的三个<code>c</code>值不一样，即<code>c1</code>, <code>c2</code>, <code>c3</code></li>
</ul>
<p><img data-src="/images/CMU1544564/Lec03/59.jpg" alt="59.jpg"></p>
<ul>
<li>注意上图中<code>bar</code>的三个<code>c</code>值不一样，即<code>c1</code>, <code>c2</code>, <code>c3</code></li>
<li>如上图的prejoin之后:<ul>
<li>read会更快，因为两个表格已经被存储在一个page上</li>
<li>update会复杂一些，因为tuple所占空间更大，而且原来的fixed-sized tuple变成variable-sized tuple，处理起来更麻烦。</li>
</ul>
</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec03/60.jpg" alt="60.jpg"></p>
<h1 id="Conclusion-结论"><a href="#Conclusion-结论" class="headerlink" title="Conclusion 结论"></a>Conclusion 结论</h1><p><img data-src="/images/CMU1544564/Lec03/62.jpg" alt="62.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec03/63.jpg" alt="63.jpg"></p>
<p>引用:</p>
<p><a name="fn1">1</a>: Database Storage - fxjwind: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZnhqd2luZC9wLzEwODE4ODE0Lmh0bWw=" title="https://www.cnblogs.com/fxjwind/p/10818814.html">https://www.cnblogs.com/fxjwind/p/10818814.html<i class="fa fa-external-link"></i></span></p>
</be><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CMU-15445</category>
        <category>Storage</category>
        <category>Disk Management</category>
      </categories>
      <tags>
        <tag>Slotted Page</tag>
      </tags>
  </entry>
  <entry>
    <title>[DBMS][PostgreSQL]Page Layout 页面布局</title>
    <url>/2020/03/11/DBMS-PostgreSQL-PageLayout/</url>
    <content><![CDATA[<p>这篇文章服务于<a href="https://cakebytheoceanluo.github.io/2020/03/11/CMU-15445-Lec03/">[CMU-15445]Lec03</a></p>
<p>绝大部分的关系数据库的page layout采用的都是slotted page, 学术上的创新的主意也往往基于它。我们今天来看一看PostgreSQL中的page layout，以及它在<code>insert</code>, <code>delete</code>等操作下的具体行为。</p>
<a id="more"></a>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# drop table <span class="keyword">if</span> <span class="built_in">exists</span> r;</span><br><span class="line">DROP TABLE</span><br><span class="line">testdb=# create table r (id <span class="keyword">int</span> primary key , val varchar(<span class="number">6</span>));</span><br><span class="line">CREATE TABLE</span><br><span class="line">testdb=# insert into r values (101, 'aaa'), (102, 'bbb'), (103, 'ccc');</span><br><span class="line">INSERT <span class="number">0</span> <span class="number">3</span></span><br><span class="line">testdb=# select * from r;</span><br><span class="line"> id  | val </span><br><span class="line">-----+-----</span><br><span class="line"> <span class="number">101</span> | aaa</span><br><span class="line"> <span class="number">102</span> | bbb</span><br><span class="line"> <span class="number">103</span> | ccc</span><br><span class="line">(<span class="number">3</span> rows)</span><br></pre></td></tr></tbody></table></figure>
<h1 id="ctid-—-PostgreSQL中的RID"><a href="#ctid-—-PostgreSQL中的RID" class="headerlink" title="ctid — PostgreSQL中的RID"></a><code>ctid</code> — PostgreSQL中的RID</h1><ul>
<li><code>ctid</code>就是PostgreSQL中的Record ID, 是一个来自page id和offset的pair</li>
</ul>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# select r.ctid, r.* from r;</span><br><span class="line"> ctid  | id  | val </span><br><span class="line">-------+-----+-----</span><br><span class="line"> (<span class="number">0</span>,<span class="number">1</span>) | <span class="number">101</span> | aaa</span><br><span class="line"> (<span class="number">0</span>,<span class="number">2</span>) | <span class="number">102</span> | bbb</span><br><span class="line"> (<span class="number">0</span>,<span class="number">3</span>) | <span class="number">103</span> | ccc</span><br><span class="line">(<span class="number">3</span> rows)</span><br><span class="line">testdb=# select r.ctid, r.* from r where ctid = '(0, 1)';</span><br><span class="line"> ctid  | id  | val </span><br><span class="line">-------+-----+-----</span><br><span class="line"> (<span class="number">0</span>,<span class="number">1</span>) | <span class="number">101</span> | aaa</span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure>
<p>我们可以看到: </p>
<ul>
<li>page id均为0, 说明所有的tuple都在同一个page上</li>
<li><code>insert</code>顺序插入tuple到page中，即第一个insert的tuple在page的第一个offset</li>
</ul>
<h1 id="delete后的行为"><a href="#delete后的行为" class="headerlink" title="delete后的行为"></a><code>delete</code>后的行为</h1><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# <span class="keyword">delete</span> from r where id = <span class="number">102</span>;</span><br><span class="line">DELETE <span class="number">1</span></span><br><span class="line">testdb=# select r.ctid, r.* from r;</span><br><span class="line"> ctid  | id  | val </span><br><span class="line">-------+-----+-----</span><br><span class="line"> (<span class="number">0</span>,<span class="number">1</span>) | <span class="number">101</span> | aaa</span><br><span class="line"> (<span class="number">0</span>,<span class="number">3</span>) | <span class="number">103</span> | ccc</span><br><span class="line">(<span class="number">2</span> rows)</span><br></pre></td></tr></tbody></table></figure>
<p>我们将中间的<code>102</code>tuple删除:</p>
<ul>
<li>可以看到对应的page layout除了了<code>102</code>tuple以外，没有其他区别</li>
<li>这说明PostgreSQL没有在delete后马上compact page, 删除的位置空着，而不是去移动其他的tuple去占有空出来的位置。</li>
</ul>
<h1 id="delete后的insert行为"><a href="#delete后的insert行为" class="headerlink" title="delete后的insert行为"></a><code>delete</code>后的<code>insert</code>行为</h1><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# insert into r values (104, 'xxx');</span><br><span class="line">INSERT <span class="number">0</span> <span class="number">1</span></span><br><span class="line">testdb=# select r.ctid, r.* from r;</span><br><span class="line"> ctid  | id  | val </span><br><span class="line">-------+-----+-----</span><br><span class="line"> (<span class="number">0</span>,<span class="number">1</span>) | <span class="number">101</span> | aaa</span><br><span class="line"> (<span class="number">0</span>,<span class="number">3</span>) | <span class="number">103</span> | ccc</span><br><span class="line"> (<span class="number">0</span>,<span class="number">4</span>) | <span class="number">104</span> | xxx</span><br><span class="line">(<span class="number">3</span> rows)</span><br></pre></td></tr></tbody></table></figure>
<p>我们在删除<code>102</code>后，插入<code>104</code>:</p>
<ul>
<li>我们看到<code>104</code>tuple的位置的offset4, 即之前最后一个tuple之后</li>
<li>说明PostgreSQL在删除后的插入，不会重新利用空出来的空间。</li>
</ul>
<p><br></p>
<ul>
<li>我们看到了上面<code>delete后的行为</code>和<code>delete后的insert行为</code>, 可以猜测，PostgreSQL为了性能，并没有让<code>delete</code>和<code>insert</code>去干预page layout</li>
</ul>
<h1 id="vacuum-full-—-整合空间"><a href="#vacuum-full-—-整合空间" class="headerlink" title="vacuum full; — 整合空间"></a><code>vacuum full;</code> — 整合空间</h1><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# vacuum full;</span><br><span class="line">VACUUM</span><br><span class="line">testdb=# select r.ctid, r.* from r;</span><br><span class="line"> ctid  | id  | val </span><br><span class="line">-------+-----+-----</span><br><span class="line"> (<span class="number">0</span>,<span class="number">1</span>) | <span class="number">101</span> | aaa</span><br><span class="line"> (<span class="number">0</span>,<span class="number">2</span>) | <span class="number">103</span> | ccc</span><br><span class="line"> (<span class="number">0</span>,<span class="number">3</span>) | <span class="number">104</span> | xxx</span><br><span class="line">(<span class="number">3</span> rows)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>vacuum full;</code> 可以显式(explicit)去compact page，也就是占有空着的空间</li>
<li>这个指令之后，后面的tuple向前移动, 占据了原<code>102</code>有的空间</li>
</ul>
<h1 id="SQL-Script"><a href="#SQL-Script" class="headerlink" title="SQL Script"></a>SQL Script</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> r (<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> , val <span class="built_in">varchar</span>(<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> r <span class="keyword">values</span> (<span class="number">101</span>, <span class="string">'aaa'</span>), (<span class="number">102</span>, <span class="string">'bbb'</span>), (<span class="number">103</span>, <span class="string">'ccc'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> r;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ctid := a pair of page id and offset</span></span><br><span class="line"><span class="keyword">select</span> r.ctid, r.* <span class="keyword">from</span> r;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- tuple 102 delete, but the page is not compacted after deletion</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> r <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">102</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> r.ctid, r.* <span class="keyword">from</span> r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> r <span class="keyword">values</span> (<span class="number">104</span>, <span class="string">'xxx'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- in PostgreSQL:</span></span><br><span class="line"><span class="comment">-- insert after after the last inserted offset</span></span><br><span class="line"><span class="comment">-- ignore the free space after the previous deletion</span></span><br><span class="line"><span class="keyword">select</span> r.ctid, r.* <span class="keyword">from</span> r;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- like GC (garbegac collection)</span></span><br><span class="line"><span class="comment">-- compact(reorganize) the pages</span></span><br><span class="line"><span class="comment">-- takes time</span></span><br><span class="line">vacuum full;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> r.ctid, r.* <span class="keyword">from</span> r;</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CMU-15445</category>
        <category>Storage</category>
        <category>DBMS</category>
        <category>Disk Management</category>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>Slotted Page</tag>
      </tags>
  </entry>
  <entry>
    <title>[DBMS Books]数据库书籍推荐</title>
    <url>/2020/03/10/books/</url>
    <content><![CDATA[<p>这篇文章囊括了数据库领域经典书籍，并附上必要链接，方便搜索。所推荐书籍囊括基础概念，实现原理，数据库理论，分布式数据库，数据库事务。</p>
<p>本文基于该文章：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">作者：钱卫宁 华东师范大学 数据科学与工程学院 教授/院长</span><br><span class="line">链接：https://www.zhihu.com/question/52498996/answer/142789892</span><br><span class="line">来源：知乎</span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<hr>
<p>0.完整教材：</p>
<ul>
<li><p>全书：Hector Garcia-Molina, Jeffrey D. Ullman, Jennifer Widom: <strong>Database systems - the complete book</strong> (2. ed.). Pearson Education 2009, ISBN 978-0-13-187325-4, pp. I-XXVI, 1-1203</p>
<ul>
<li>官网：　<span class="exturl" data-url="aHR0cDovL2luZm9sYWIuc3RhbmZvcmQuZWR1L351bGxtYW4vZHNjYi5odG1s" title="http://infolab.stanford.edu/~ullman/dscb.html">http://infolab.stanford.edu/~ullman/dscb.html<i class="fa fa-external-link"></i></span></li>
<li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xMTM3MjYyLw==" title="https://book.douban.com/subject/1137262/">https://book.douban.com/subject/1137262/<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li><p>奶牛书：Raghu Ramakrishnan, Johannes Gehrke: <strong>Database management systems</strong> (3. ed.). McGraw-Hill 2003, ISBN 978-0-07-115110-8, pp. I-XXXII, 1-1065</p>
<ul>
<li>官网: <span class="exturl" data-url="aHR0cDovL3BhZ2VzLmNzLndpc2MuZWR1L35kYmJvb2sv" title="http://pages.cs.wisc.edu/~dbbook/">http://pages.cs.wisc.edu/~dbbook/<i class="fa fa-external-link"></i></span></li>
<li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xMTU1OTM0Lw==" title="https://book.douban.com/subject/1155934/">https://book.douban.com/subject/1155934/<i class="fa fa-external-link"></i></span></li>
<li>注: 清华大学出版社有出版英文影印版, 豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xMTQ2MjMzLw==" title="https://book.douban.com/subject/1146233/">https://book.douban.com/subject/1146233/<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
</ul>
<p>1.数据库基础</p>
<ul>
<li><p>帆船书：Abraham Silberschatz, Henry F. Korth, S. Sudarshan: <strong>Database System Concepts</strong>, 6th Edition. McGraw-Hill Book Company 2010</p>
<ul>
<li>第六版: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI2L2luZGV4Lmh0bWw=" title="https://www.db-book.com/db6/index.html">https://www.db-book.com/db6/index.html<i class="fa fa-external-link"></i></span></li>
<li>第七版 2019: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGItYm9vay5jb20vZGI3L2luZGV4Lmh0bWw=" title="https://www.db-book.com/db7/index.html">https://www.db-book.com/db7/index.html<i class="fa fa-external-link"></i></span></li>
<li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xMDU0ODM3OS8=" title="https://book.douban.com/subject/10548379/">https://book.douban.com/subject/10548379/<i class="fa fa-external-link"></i></span></li>
<li>注: 高等教育出版社有出版英文影印版, 豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yNjA0NTkzMS8=" title="https://book.douban.com/subject/26045931/">https://book.douban.com/subject/26045931/<i class="fa fa-external-link"></i></span></li>
<li>注: 机械工业出版社有出版英文影印版, 豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yMDQ4MDY5My8=" title="https://book.douban.com/subject/20480693/">https://book.douban.com/subject/20480693/<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li><p>全书前一半：Hector Garcia-Molina, Jeffrey D. Ullman, Jennifer Widom: <strong>Database systems - the complete book</strong> (2. ed.). Pearson Education 2009, ISBN 978-0-13-187325-4, pp. I-XXVI, 1-1203</p>
<ul>
<li>全书前一半对应: Jeff Ullman, Jennifer Widom: <strong>A First Course in Database systems</strong><ul>
<li>官网: <span class="exturl" data-url="aHR0cDovL2luZm9sYWIuc3RhbmZvcmQuZWR1L351bGxtYW4vZmNkYi5odG1s" title="http://infolab.stanford.edu/~ullman/fcdb.html">http://infolab.stanford.edu/~ullman/fcdb.html<i class="fa fa-external-link"></i></span></li>
<li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8zOTIzNTc1Lw==" title="https://book.douban.com/subject/3923575/">https://book.douban.com/subject/3923575/<i class="fa fa-external-link"></i></span></li>
<li>注: 机械工业出版社有出版英文影印版, 豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8zMTgyMTEwLw==" title="https://book.douban.com/subject/3182110/">https://book.douban.com/subject/3182110/<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>2.实现</p>
<ul>
<li><p>奶牛书：Raghu Ramakrishnan, Johannes Gehrke: <strong>Database management systems</strong> (3. ed.). McGraw-Hill 2003, ISBN 978-0-07-115110-8, pp. I-XXXII, 1-1065</p>
</li>
<li><p>全书后一半：Hector Garcia-Molina, Jeffrey D. Ullman, Jennifer Widom: <strong>Database systems - the complete book</strong> (2. ed.). Pearson Education 2009, ISBN 978-0-13-187325-4, pp. I-XXVI, 1-1203</p>
<ul>
<li>全书后一半对应: Hector Garcia-Molina, Jeff Ullman, Jennifer Widom: <strong>Database System Implementation</strong><ul>
<li>: 官网: <span class="exturl" data-url="aHR0cDovL2luZm9sYWIuc3RhbmZvcmQuZWR1L351bGxtYW4vZGJzaS5odG1s" title="http://infolab.stanford.edu/~ullman/dbsi.html">http://infolab.stanford.edu/~ullman/dbsi.html<i class="fa fa-external-link"></i></span></li>
<li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC80ODM4NDMwLw==" title="https://book.douban.com/subject/4838430/">https://book.douban.com/subject/4838430/<i class="fa fa-external-link"></i></span></li>
<li>注: 机械工业出版社有出版英文影印版, 豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC80MTY2NTQ2Lw==" title="https://book.douban.com/subject/4166546/">https://book.douban.com/subject/4166546/<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
</ul>
</li>
<li><p>M. Tamer Özsu, Patrick Valduriez: <strong>Principles of Distributed Database Systems</strong>, Third Edition. Springer 2011, ISBN 978-1-4419-8833-1, pp. I-XIX, 1-845</p>
<ul>
<li>Spinger出版社-书目网站: <span class="exturl" data-url="aHR0cHM6Ly93d3cuc3ByaW5nZXIuY29tL3VzL2Jvb2svOTc4MTQ5Mzk0MTc0Mmh0dHBzOi8vYm9vay5kb3ViYW4uY29tL3N1YmplY3QvMjY4NTE2MDUv" title="https://www.springer.com/us/book/9781493941742https://book.douban.com/subject/26851605/">https://www.springer.com/us/book/9781493941742https://book.douban.com/subject/26851605/<i class="fa fa-external-link"></i></span></li>
<li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yNjg1MTYwNS8=" title="https://book.douban.com/subject/26851605/">https://book.douban.com/subject/26851605/<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
</ul>
<p>3.理论</p>
<ul>
<li><p>棒球书：J.D. Ullman: <strong>Principles of Database and Knowledge-base Systems</strong>, Vol. I/II. 1988/1989</p>
<ul>
<li>ACM-书目链接: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS9ib29rLzEwLjU1NTUvNDI3OTA=" title="https://dl.acm.org/doi/book/10.5555/42790">https://dl.acm.org/doi/book/10.5555/42790<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li><p>爱丽丝书：Serge Abiteboul, Richard Hull, Victor Vianu: <strong>Foundations of Databases</strong>. Addison-Wesley 1995, ISBN 0-201-53771-0</p>
<ul>
<li>官网：<span class="exturl" data-url="aHR0cDovL3dlYmRhbS5pbnJpYS5mci9BbGljZS8=" title="http://webdam.inria.fr/Alice/">http://webdam.inria.fr/Alice/<i class="fa fa-external-link"></i></span></li>
<li>与官网即可下载电子版</li>
</ul>
</li>
</ul>
<p>4.事务</p>
<ul>
<li><p>基础：Philip A. Bernstein, Eric Newcomer: <strong>Principles of Transaction Processing for Systems Professionals</strong> (2nd Edition). Morgan Kaufmann. 2009</p>
<ul>
<li>ACM－书目链接: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS9ib29rLzEwLjU1NTUvMTIwODkzMA==" title="https://dl.acm.org/doi/book/10.5555/1208930">https://dl.acm.org/doi/book/10.5555/1208930<i class="fa fa-external-link"></i></span></li>
<li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC81NDEyODM1Lw==" title="https://book.douban.com/subject/5412835/">https://book.douban.com/subject/5412835/<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li><p>理论：Gerhard Weikum, Gottfried Vossen: <strong>Transactional Information Systems: Theory, Algorithms, and the Practice of Concurrency Control and Recovery</strong>. Morgan Kaufmann 2002, ISBN 1-55860-508-8</p>
<ul>
<li>ACM-书目链接: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS9ib29rLzEwLjU1NTUvMjgyMTU3Mg==" title="https://dl.acm.org/doi/book/10.5555/2821572">https://dl.acm.org/doi/book/10.5555/2821572<i class="fa fa-external-link"></i></span></li>
<li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xNTAzODEyLw==" title="https://book.douban.com/subject/1503812/">https://book.douban.com/subject/1503812/<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li><p>实现：Jim Gray, Andreas Reuter: <strong>Transaction Processing: Concepts and Techniques</strong>. Morgan Kaufmann 1993, ISBN 1-55860-190-2</p>
<ul>
<li>ACM-书目链接: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS9ib29rLzEwLjU1NTUvNTczMzA0" title="https://dl.acm.org/doi/book/10.5555/573304">https://dl.acm.org/doi/book/10.5555/573304<i class="fa fa-external-link"></i></span></li>
<li>中文翻译版豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xMTQ0NTQzLw==" title="https://book.douban.com/subject/1144543/">https://book.douban.com/subject/1144543/<i class="fa fa-external-link"></i></span></li>
<li>注: 人民邮电出版社有出版英文影印版, 豆瓣链接: <span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8zNjUxMDE1Lw==" title="https://book.douban.com/subject/3651015/">https://book.douban.com/subject/3651015/<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
</ul>
<p>5.进阶</p>
<ul>
<li><p>红宝书：Peter Bailis, Joseph M. Hellerstein, Michael Stonebraker, editors. <strong>Readings in Database Systems</strong>, 5th Edition (Readings in Database Systems, 5th Edition)</p>
<ul>
<li>官网：<span class="exturl" data-url="aHR0cDovL3d3dy5yZWRib29rLmlvLw==" title="http://www.redbook.io/">http://www.redbook.io/<i class="fa fa-external-link"></i></span></li>
<li>与官网即可下载电子版</li>
</ul>
</li>
<li><p>Joseph M. Hellerstein, Michael Stonebraker, James Hamilton. Architecture of a Database System</p>
<ul>
<li>电子版: <span class="exturl" data-url="aHR0cHM6Ly9kc2YuYmVya2VsZXkuZWR1L3BhcGVycy9mbnRkYjA3LWFyY2hpdGVjdHVyZS5wZGY=" title="https://dsf.berkeley.edu/papers/fntdb07-architecture.pdf">https://dsf.berkeley.edu/papers/fntdb07-architecture.pdf<i class="fa fa-external-link"></i></span></li>
<li>中文翻译(厦门大学数据库实验室 林子雨): <span class="exturl" data-url="aHR0cDovL2RibGFiLnhtdS5lZHUuY24vd3AtY29udGVudC91cGxvYWRzL29sZC9maWxlcy9saW56aXl1LUFyY2hpdGVjdHVyZSUyMG9mJTIwYSUyMERhdGFiYXNlJTIwU3lzdGVtKENoaW5lc2UlMjBWZXJzaW9uKS1BTEwucGRm" title="http://dblab.xmu.edu.cn/wp-content/uploads/old/files/linziyu-Architecture%20of%20a%20Database%20System(Chinese%20Version)-ALL.pdf">http://dblab.xmu.edu.cn/wp-content/uploads/old/files/linziyu-Architecture%20of%20a%20Database%20System(Chinese%20Version)-ALL.pdf<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
</ul>
<p><br></p>
<p>推荐阅读：</p>
<p>hzbooks－姚编辑: <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h6Ym9va3MvYXJ0aWNsZS9kZXRhaWxzLzIxMDU0MjA=" title="https://blog.csdn.net/hzbooks/article/details/2105420">https://blog.csdn.net/hzbooks/article/details/2105420<i class="fa fa-external-link"></i></span></p>
<p>数据库有没有类似现代操作系统的好书？ - <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzUyNDk4OTk2" title="https://www.zhihu.com/question/52498996">https://www.zhihu.com/question/52498996<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>DBMS</category>
      </categories>
      <tags>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 185.department.top.three.salaries</title>
    <url>/2020/03/10/SQL-Leetcode-185-department-top-three-salaries/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>185.Department Top Three Salaries</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), Salary <span class="built_in">int</span>, DepartmentId <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Department (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Employee</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>, <span class="string">'85000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Henry'</span>, <span class="string">'80000'</span>, <span class="string">'2'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Sam'</span>, <span class="string">'60000'</span>, <span class="string">'2'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Max'</span>, <span class="string">'90000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'Janet'</span>, <span class="string">'69000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'Randy'</span>, <span class="string">'85000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'Will'</span>, <span class="string">'70000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Department</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'IT'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Sales'</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Employee;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Department;</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), Salary <span class="built_in">int</span>, DepartmentId <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Department (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>, <span class="string">'85000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Henry'</span>, <span class="string">'80000'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Sam'</span>, <span class="string">'60000'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Max'</span>, <span class="string">'90000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'Janet'</span>, <span class="string">'69000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'Randy'</span>, <span class="string">'85000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'Will'</span>, <span class="string">'70000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'IT'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Sales'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>The <code>Employee</code> table holds all employees. Every employee has an Id, a salary, and there is also a column for the department Id.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------+--------+--------------+</span></span><br><span class="line">| Id | Name  | Salary | DepartmentId |</span><br><span class="line">+<span class="comment">----+-------+--------+--------------+</span></span><br><span class="line">| 1  | Joe   | 85000  | 1            |</span><br><span class="line">| 2  | Henry | 80000  | 2            |</span><br><span class="line">| 3  | Sam   | 60000  | 2            |</span><br><span class="line">| 4  | Max   | 90000  | 1            |</span><br><span class="line">| 5  | Janet | 69000  | 1            |</span><br><span class="line">| 6  | Randy | 85000  | 1            |</span><br><span class="line">| 7  | Will  | 70000  | 1            |</span><br><span class="line">+<span class="comment">----+-------+--------+--------------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>The <code>Department</code> table holds all departments of the company.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| Id | Name     |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| 1  | IT       |</span><br><span class="line">| 2  | Sales    |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>Write a SQL query to find employees who earn the top three salaries in each of the department. For the above tables, your SQL query should return the following rows (order of rows does not matter).</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">------------+----------+--------+</span></span><br><span class="line">| Department | Employee | Salary |</span><br><span class="line">+<span class="comment">------------+----------+--------+</span></span><br><span class="line">| IT         | Max      | 90000  |</span><br><span class="line">| IT         | Randy    | 85000  |</span><br><span class="line">| IT         | Joe      | 85000  |</span><br><span class="line">| IT         | Will     | 70000  |</span><br><span class="line">| Sales      | Henry    | 80000  |</span><br><span class="line">| Sales      | Sam      | 60000  |</span><br><span class="line">+<span class="comment">------------+----------+--------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>Explanation:</p>
<p>In IT department, Max earns the highest salary, both Randy and Joe earn the second highest salary, and Will earns the third highest salary. There are only two employees in the Sales department, Henry earns the highest salary while Sam earns the second highest salary.</p>
<a id="more"></a>
<hr>
<p><br></p>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p>用Window Function的解法和<a href="https://cakebytheoceanluo.github.io/2020/03/10/SQL-Leetcode-184-department-highest-salary/">Leetcode 184</a>几乎毫无差别。</p>
<p><strong>适用于PostgreSQL</strong>:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> d.name <span class="keyword">as</span> Department, temp.name <span class="keyword">as</span> Employee, temp.salary <span class="keyword">as</span> Salary</span><br><span class="line"><span class="keyword">from</span> department d, (</span><br><span class="line">    <span class="keyword">select</span> e.departmentid <span class="keyword">as</span> did, </span><br><span class="line">    　　　　e.name, </span><br><span class="line">    　　　　e.salary, </span><br><span class="line">    　　　　<span class="keyword">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> departmentid <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="keyword">rank</span> </span><br><span class="line">    <span class="keyword">from</span> employee e) <span class="keyword">as</span> temp </span><br><span class="line"><span class="keyword">where</span> d.id = temp.did <span class="keyword">and</span> temp.rank &lt;= <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    d.Name <span class="keyword">AS</span> Department, e1.Name <span class="keyword">AS</span> Employee, e1.Salary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee e1 <span class="keyword">JOIN</span> Department d </span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">    e1.DepartmentId = d.Id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="number">3</span> &gt; (<span class="keyword">SELECT</span></span><br><span class="line">            <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> e2.Salary)</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            Employee e2</span><br><span class="line">        <span class="keyword">WHERE</span></span><br><span class="line">            e2.Salary &gt; e1.Salary <span class="keyword">AND</span> e1.DepartmentId = e2.DepartmentId</span><br><span class="line">        )</span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZGVwYXJ0bWVudC10b3AtdGhyZWUtc2FsYXJpZXMv" title="https://leetcode.com/problems/department-top-three-salaries/">https://leetcode.com/problems/department-top-three-salaries/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZGVwYXJ0bWVudC10b3AtdGhyZWUtc2FsYXJpZXMvc29sdXRpb24v" title="https://leetcode.com/problems/department-top-three-salaries/solution/">https://leetcode.com/problems/department-top-three-salaries/solution/<i class="fa fa-external-link"></i></span></p>
<p><a href="https://cakebytheoceanluo.github.io/2020/03/10/SQL-Leetcode-184-department-highest-salary/">https://cakebytheoceanluo.github.io/2020/03/10/SQL-Leetcode-184-department-highest-salary/</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Window Function</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 184.department.highest.salary</title>
    <url>/2020/03/10/SQL-Leetcode-184-department-highest-salary/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>184.Department Highest Salary</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), Salary <span class="built_in">int</span>, DepartmentId <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Department (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Employee</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>, <span class="string">'70000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Jim'</span>, <span class="string">'90000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Henry'</span>, <span class="string">'80000'</span>, <span class="string">'2'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Sam'</span>, <span class="string">'60000'</span>, <span class="string">'2'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'Max'</span>, <span class="string">'90000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Department</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'IT'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Sales'</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Employee;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Department;</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), Salary <span class="built_in">int</span>, DepartmentId <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Department (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>, <span class="string">'70000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Jim'</span>, <span class="string">'90000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Henry'</span>, <span class="string">'80000'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Sam'</span>, <span class="string">'60000'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'Max'</span>, <span class="string">'90000'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'IT'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Sales'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>The <code>Employee</code> table holds all employees. Every employee has an Id, a salary, and there is also a column for the department Id.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------+--------+--------------+</span></span><br><span class="line">| Id | Name  | Salary | DepartmentId |</span><br><span class="line">+<span class="comment">----+-------+--------+--------------+</span></span><br><span class="line">| 1  | Joe   | 70000  | 1            |</span><br><span class="line">| 2  | Jim   | 90000  | 1            |</span><br><span class="line">| 3  | Henry | 80000  | 2            |</span><br><span class="line">| 4  | Sam   | 60000  | 2            |</span><br><span class="line">| 5  | Max   | 90000  | 1            |</span><br><span class="line">+<span class="comment">----+-------+--------+--------------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>The <code>Department</code> table holds all departments of the company.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| Id | Name     |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| 1  | IT       |</span><br><span class="line">| 2  | Sales    |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>Write a SQL query to find employees who have the highest salary in each of the departments. For the above tables, your SQL query should return the following rows (order of rows does not matter).</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">------------+----------+--------+</span></span><br><span class="line">| Department | Employee | Salary |</span><br><span class="line">+<span class="comment">------------+----------+--------+</span></span><br><span class="line">| IT         | Max      | 90000  |</span><br><span class="line">| IT         | Jim      | 90000  |</span><br><span class="line">| Sales      | Henry    | 80000  |</span><br><span class="line">+<span class="comment">------------+----------+--------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>Explanation:</p>
<p>Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department.</p>
<a id="more"></a>
<hr>
<p><br></p>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p><strong>适用于PostgreSQL</strong>:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> d.name <span class="keyword">as</span> Department, temp.name <span class="keyword">as</span> Employee, temp.salary <span class="keyword">as</span> Salary</span><br><span class="line"><span class="keyword">from</span> department d, (</span><br><span class="line">    <span class="keyword">select</span> e.departmentid <span class="keyword">as</span> did, </span><br><span class="line">           e.name, </span><br><span class="line">           e.salary, </span><br><span class="line">           <span class="keyword">rank</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> departmentid <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="keyword">rank</span> </span><br><span class="line">    <span class="keyword">from</span> employee e) <span class="keyword">as</span> temp </span><br><span class="line"><span class="keyword">where</span> d.id = temp.did <span class="keyword">and</span> temp.rank = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    Department.name <span class="keyword">AS</span> Department,</span><br><span class="line">    Employee.name <span class="keyword">AS</span> Employee,</span><br><span class="line">    Salary</span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">JOIN</span> Department </span><br><span class="line"><span class="keyword">ON</span> Employee.DepartmentId = Department.Id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    (Employee.DepartmentId, Salary) <span class="keyword">IN</span></span><br><span class="line">    (   <span class="keyword">SELECT</span></span><br><span class="line">            DepartmentId, <span class="keyword">MAX</span>(Salary)</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            Employee</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> DepartmentId</span><br><span class="line">	)</span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZGVwYXJ0bWVudC1oaWdoZXN0LXNhbGFyeS8=" title="https://leetcode.com/problems/department-highest-salary/">https://leetcode.com/problems/department-highest-salary/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZGVwYXJ0bWVudC1oaWdoZXN0LXNhbGFyeS9zb2x1dGlvbi8=" title="https://leetcode.com/problems/department-highest-salary/solution/">https://leetcode.com/problems/department-highest-salary/solution/<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Window Function</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 183.customers.who.never.order</title>
    <url>/2020/03/10/SQL-Leetcode-183-customers-who-never-order/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>183.Customers Who Never Order</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Customers (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Orders (<span class="keyword">Id</span> <span class="built_in">int</span>, CustomerId <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Customers</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Henry'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Sam'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Max'</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Orders</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Orders (<span class="keyword">Id</span>, CustomerId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'3'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Orders (<span class="keyword">Id</span>, CustomerId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'1'</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Customers;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Orders;</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Customers (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Orders (<span class="keyword">Id</span> <span class="built_in">int</span>, CustomerId <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Henry'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Sam'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Max'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Orders (<span class="keyword">Id</span>, CustomerId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Orders (<span class="keyword">Id</span>, CustomerId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'1'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>Suppose that a website contains two tables, the <code>Customers</code> table and the <code>Orders</code> table. Write a SQL query to find all customers who never order anything.</p>
<p>Table: <code>Customers</code>.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">| Id | Name  |</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">| 1  | Joe   |</span><br><span class="line">| 2  | Henry |</span><br><span class="line">| 3  | Sam   |</span><br><span class="line">| 4  | Max   |</span><br><span class="line">+<span class="comment">----+-------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>Table: <code>Orders</code>.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----+------------+</span></span><br><span class="line">| Id | CustomerId |</span><br><span class="line">+<span class="comment">----+------------+</span></span><br><span class="line">| 1  | 3          |</span><br><span class="line">| 2  | 1          |</span><br><span class="line">+<span class="comment">----+------------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>Using the above tables as example, return the following:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| Customers |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| Henry     |</span><br><span class="line">| Max       |</span><br><span class="line">+<span class="comment">-----------+</span></span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<hr>
<p><br></p>
<p>这题很明显是指的是关系代数中的<code>anti join</code>。这里要提一下：　</p>
<ul>
<li>关系代数中的<code>semi join</code>对应SQL中的<code>exists</code></li>
<li>关系代数中的<code>anti join</code>对应SQL中的<code>not exists</code></li>
<li>SQL Standard中<strong>根本没有</strong><code>semi join</code>和<code>anti join</code>这两个关键词 (我改本科生必修课卷的时候发现很多同学没有意识到这一点)</li>
</ul>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c.name <span class="keyword">as</span> Customers </span><br><span class="line"><span class="keyword">from</span> customers c </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">    <span class="keyword">select</span> * </span><br><span class="line">    <span class="keyword">from</span> orders o </span><br><span class="line">    <span class="keyword">where</span> o.customerid = c.id</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c.name <span class="keyword">as</span> Customers </span><br><span class="line"><span class="keyword">from</span> customers c </span><br><span class="line"><span class="keyword">where</span> c.id <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> o.customerid</span><br><span class="line">    <span class="keyword">from</span> orders o </span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法３"><a href="#解法３" class="headerlink" title="解法３"></a>解法３</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c.name <span class="keyword">as</span> Customers </span><br><span class="line"><span class="keyword">from</span> customers c <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders o </span><br><span class="line"><span class="keyword">on</span> o.customerid = c.id</span><br><span class="line"><span class="keyword">where</span> o.id <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c.name <span class="keyword">as</span> Customers </span><br><span class="line"><span class="keyword">from</span> customers c <span class="keyword">left</span> <span class="keyword">join</span> orders o </span><br><span class="line"><span class="keyword">on</span> o.customerid = c.id</span><br><span class="line"><span class="keyword">where</span> o.id <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY3VzdG9tZXJzLXdoby1uZXZlci1vcmRlci8=" title="https://leetcode.com/problems/customers-who-never-order/">https://leetcode.com/problems/customers-who-never-order/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY3VzdG9tZXJzLXdoby1uZXZlci1vcmRlci9kaXNjdXNzLzUzNTc5L1RocmVlLWFjY2VwdGVkLXNvbHV0aW9ucw==" title="https://leetcode.com/problems/customers-who-never-order/discuss/53579/Three-accepted-solutions">https://leetcode.com/problems/customers-who-never-order/discuss/53579/Three-accepted-solutions<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUmVsYXRpb25hbF9hbGdlYnJhI0FudGlqb2luXyglRTIlOTYlQjc=" title="https://en.wikipedia.org/wiki/Relational_algebra#Antijoin_(%E2%96%B7">https://en.wikipedia.org/wiki/Relational_algebra#Antijoin_(%E2%96%B7<i class="fa fa-external-link"></i></span>)</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDIyNDk2OTAvd2hhdC1pcy1zZW1pLWpvaW4taW4tZGF0YWJhc2U=" title="https://stackoverflow.com/questions/42249690/what-is-semi-join-in-database">https://stackoverflow.com/questions/42249690/what-is-semi-join-in-database<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 182.duplicate.emails</title>
    <url>/2020/03/10/SQL-Leetcode-182-duplicate-emails/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>182.Duplicate Emails</p>
<p>SQL Schema</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Person (<span class="keyword">Id</span> <span class="built_in">int</span>, Email <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Person</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'a@b.com'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'c@d.com'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'a@b.com'</span>);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Person;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Person (<span class="keyword">Id</span> <span class="built_in">int</span>, Email <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'a@b.com'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'c@d.com'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'a@b.com'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>Write a SQL query to find all duplicate emails in a table named <code>Person</code>.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----+---------+</span></span><br><span class="line">| Id | Email   |</span><br><span class="line">+<span class="comment">----+---------+</span></span><br><span class="line">| 1  | a@b.com |</span><br><span class="line">| 2  | c@d.com |</span><br><span class="line">| 3  | a@b.com |</span><br><span class="line">+<span class="comment">----+---------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>For example, your query should return the following for the above table:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">---------+</span></span><br><span class="line">| Email   |</span><br><span class="line">+<span class="comment">---------+</span></span><br><span class="line">| a@b.com |</span><br><span class="line">+<span class="comment">---------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>Note: All emails are in lowercase.</p>
<a id="more"></a>
<hr>
<p><br></p>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span>(email)</span><br><span class="line"><span class="keyword">from</span> person p</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> (</span><br><span class="line">        <span class="keyword">select</span> email, <span class="keyword">count</span>(<span class="keyword">id</span>) <span class="keyword">as</span> counter</span><br><span class="line">        <span class="keyword">from</span> person</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> email</span><br><span class="line">    ) <span class="keyword">as</span> temp</span><br><span class="line">    <span class="keyword">where</span> counter &gt; <span class="number">1</span> <span class="keyword">and</span> p.email = temp.email</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> Email <span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">select</span> Email, <span class="keyword">count</span>(Email) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">  <span class="keyword">from</span> Person</span><br><span class="line">  <span class="keyword">group</span> <span class="keyword">by</span> Email</span><br><span class="line">) <span class="keyword">as</span> statistic</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">num</span> &gt; <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法３"><a href="#解法３" class="headerlink" title="解法３"></a>解法３</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> Email</span><br><span class="line"><span class="keyword">from</span> Person</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> Email</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(Email) &gt; <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZHVwbGljYXRlLWVtYWlscw==" title="https://leetcode.com/problems/duplicate-emails">https://leetcode.com/problems/duplicate-emails<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZHVwbGljYXRlLWVtYWlscy9zb2x1dGlvbi8=" title="https://leetcode.com/problems/duplicate-emails/solution/">https://leetcode.com/problems/duplicate-emails/solution/<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 181.employees.earning.more.than.their.managers</title>
    <url>/2020/03/10/SQL-Leetcode-181-employees-earning-more-than-their-managers/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>181.Employees Earning More Than Their Managers</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), Salary <span class="built_in">int</span>, ManagerId <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Employee</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, ManagerId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>, <span class="string">'70000'</span>, <span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, ManagerId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Henry'</span>, <span class="string">'80000'</span>, <span class="string">'4'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, ManagerId) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Sam'</span>, <span class="string">'60000'</span>, <span class="string">'None'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, ManagerId) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Max'</span>, <span class="string">'90000'</span>, <span class="string">'None'</span>);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Employee;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), Salary <span class="built_in">int</span>, ManagerId <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, ManagerId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>, <span class="string">'70000'</span>, <span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, ManagerId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Henry'</span>, <span class="string">'80000'</span>, <span class="string">'4'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, ManagerId) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Sam'</span>, <span class="string">'60000'</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, ManagerId) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Max'</span>, <span class="string">'90000'</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>The <code>Employee</code> table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------+--------+-----------+</span></span><br><span class="line">| Id | Name  | Salary | ManagerId |</span><br><span class="line">+<span class="comment">----+-------+--------+-----------+</span></span><br><span class="line">| 1  | Joe   | 70000  | 3         |</span><br><span class="line">| 2  | Henry | 80000  | 4         |</span><br><span class="line">| 3  | Sam   | 60000  | NULL      |</span><br><span class="line">| 4  | Max   | 90000  | NULL      |</span><br><span class="line">+<span class="comment">----+-------+--------+-----------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>Given the <code>Employee</code> table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| Employee |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| Joe      |</span><br><span class="line">+<span class="comment">----------+</span></span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<hr>
<p><br></p>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.name <span class="keyword">as</span> Employee </span><br><span class="line"><span class="keyword">from</span> employee e </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span> (</span><br><span class="line">    <span class="keyword">select</span> * </span><br><span class="line">    <span class="keyword">from</span> employee m </span><br><span class="line">    <span class="keyword">where</span> e.salary &gt; m.salary <span class="keyword">and</span> e.managerid = m.id</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.name <span class="keyword">as</span> Employee </span><br><span class="line"><span class="keyword">from</span> employee e, employee m </span><br><span class="line"><span class="keyword">where</span> e.salary &gt; m.salary <span class="keyword">and</span> e.managerid = m.id;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZW1wbG95ZWVzLWVhcm5pbmctbW9yZS10aGFuLXRoZWlyLW1hbmFnZXJzLw==" title="https://leetcode.com/problems/employees-earning-more-than-their-managers/">https://leetcode.com/problems/employees-earning-more-than-their-managers/<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 180.consecutive.numbers</title>
    <url>/2020/03/09/SQL-Leetcode-180-consecutive-numbers/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>180.Consecutive Numbers</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Num</span> <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> <span class="keyword">Logs</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'2'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'2'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'2'</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> <span class="keyword">Logs</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Num</span> <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">Logs</span> (<span class="keyword">Id</span>, <span class="keyword">Num</span>) <span class="keyword">values</span> (<span class="string">'7'</span>, <span class="string">'2'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>Write a SQL query to find all numbers that appear at least three times consecutively.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">| Id | Num |</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">| 1  |  1  |</span><br><span class="line">| 2  |  1  |</span><br><span class="line">| 3  |  1  |</span><br><span class="line">| 4  |  2  |</span><br><span class="line">| 5  |  1  |</span><br><span class="line">| 6  |  2  |</span><br><span class="line">| 7  |  2  |</span><br><span class="line">+<span class="comment">----+-----+</span></span><br></pre></td></tr></tbody></table></figure>
<p>For example, given the above <code>Logs</code> table, 1 is the only number that appears consecutively for at least three times.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| ConsecutiveNums |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| 1               |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<hr>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p><strong>适用于PostgreSQL</strong>:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">num</span> <span class="keyword">as</span> ConsecutiveNums </span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">num</span>, </span><br><span class="line">           lag(<span class="keyword">num</span>, <span class="number">1</span>, <span class="literal">NULL</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>) <span class="keyword">as</span> <span class="keyword">last</span>, </span><br><span class="line">           <span class="keyword">lead</span>(<span class="keyword">num</span>, <span class="number">1</span>, <span class="literal">NULL</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>) <span class="keyword">as</span> <span class="keyword">next</span> <span class="keyword">from</span> <span class="keyword">logs</span>) <span class="keyword">as</span> temp </span><br><span class="line"><span class="keyword">where</span> temp.num = temp.last <span class="keyword">and</span> temp.num = temp.next;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY29uc2VjdXRpdmUtbnVtYmVycy8=" title="https://leetcode.com/problems/consecutive-numbers/">https://leetcode.com/problems/consecutive-numbers/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjYvZnVuY3Rpb25zLXdpbmRvdy5odG1s" title="https://www.postgresql.org/docs/9.6/functions-window.html">https://www.postgresql.org/docs/9.6/functions-window.html<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Window Function</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 178.rank.scores</title>
    <url>/2020/03/09/SQL-Leetcode-178-rank-scores/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>178.Rank Scores</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Scores (<span class="keyword">Id</span> <span class="built_in">int</span>, Score <span class="built_in">DECIMAL</span>(<span class="number">3</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Scores</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'3.5'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'3.65'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'4.0'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'3.85'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'4.0'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'3.65'</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Scores;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Scores (<span class="keyword">Id</span> <span class="built_in">int</span>, Score <span class="built_in">DECIMAL</span>(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'3.5'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'3.65'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'4.0'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'3.85'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'4.0'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (<span class="keyword">Id</span>, Score) <span class="keyword">values</span> (<span class="string">'6'</span>, <span class="string">'3.65'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no “holes” between ranks.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">| Id | Score |</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">| 1  | 3.50  |</span><br><span class="line">| 2  | 3.65  |</span><br><span class="line">| 3  | 4.00  |</span><br><span class="line">| 4  | 3.85  |</span><br><span class="line">| 5  | 4.00  |</span><br><span class="line">| 6  | 3.65  |</span><br><span class="line">+<span class="comment">----+-------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>For example, given the above <code>Scores</code> table, your query should generate the following report (order by highest score):</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">-------+------+</span></span><br><span class="line">| Score | Rank |</span><br><span class="line">+<span class="comment">-------+------+</span></span><br><span class="line">| 4.00  | 1    |</span><br><span class="line">| 4.00  | 1    |</span><br><span class="line">| 3.85  | 2    |</span><br><span class="line">| 3.65  | 3    |</span><br><span class="line">| 3.65  | 3    |</span><br><span class="line">| 3.50  | 4    |</span><br><span class="line">+<span class="comment">-------+------+</span></span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<hr>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><p><strong>适用于PostgreSQL</strong>:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> score, <span class="keyword">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="keyword">Rank</span> <span class="keyword">from</span> scores;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.Score, <span class="keyword">COUNT</span>(S2.Score) <span class="keyword">AS</span> <span class="keyword">Rank</span> </span><br><span class="line"><span class="keyword">FROM</span> Scores S, (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Score <span class="keyword">FROM</span> Scores) S2</span><br><span class="line"><span class="keyword">WHERE</span> S.Score &lt;= S2.Score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S.Id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> S.Score <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmFuay1zY29yZXMv" title="https://leetcode.com/problems/rank-scores/">https://leetcode.com/problems/rank-scores/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmFuay1zY29yZXMvZGlzY3Vzcy80NTY2MTAvTXlTUUwtVHdvLVNpbXBsZS1Tb2x1dGlvbnMtYW5kLUV4cGxhbmF0aW9ucy1mb3ItQmVnaW5uZXJz" title="https://leetcode.com/problems/rank-scores/discuss/456610/MySQL-Two-Simple-Solutions-and-Explanations-for-Beginners">https://leetcode.com/problems/rank-scores/discuss/456610/MySQL-Two-Simple-Solutions-and-Explanations-for-Beginners<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjYvZnVuY3Rpb25zLXdpbmRvdy5odG1s" title="https://www.postgresql.org/docs/9.6/functions-window.html">https://www.postgresql.org/docs/9.6/functions-window.html<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Window Function</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 177.nth.highest.salary</title>
    <url>/2020/03/09/SQL-Leetcode-177-nth-highest-salary/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>177.Nth Highest Salary</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, Salary <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Employee</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, Salary) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'100'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, Salary) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'200'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, Salary) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'300'</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Employee;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, Salary <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, Salary) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'100'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, Salary) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'200'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, Salary) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'300'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>Write a SQL query to get the n-th highest salary from the <code>Employee</code> table.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----+--------+</span></span><br><span class="line">| Id | Salary |</span><br><span class="line">+<span class="comment">----+--------+</span></span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+<span class="comment">----+--------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>For example, given the above Employee table, the n-th highest salary where n = 2 is <code>200</code>. If there is no n-th highest salary, then the query should return <code>null</code>.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">------------------------+</span></span><br><span class="line">| getNthHighestSalary(2) |</span><br><span class="line">+<span class="comment">------------------------+</span></span><br><span class="line">| 200                    |</span><br><span class="line">+<span class="comment">------------------------+</span></span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<hr>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getNthHighestSalary(@N <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">INT</span> <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">RETURN</span> (</span><br><span class="line">        <span class="keyword">select</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> salary <span class="keyword">from</span> (<span class="keyword">select</span> *, <span class="keyword">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="keyword">rank</span> <span class="keyword">from</span> employee) <span class="keyword">as</span> temp <span class="keyword">where</span> temp.rank = @N)</span><br><span class="line">    );</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>distinct</code>是为了将并列的数值聚合为同一个数字。</li>
</ul>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbnRoLWhpZ2hlc3Qtc2FsYXJ5Lw==" title="https://leetcode.com/problems/nth-highest-salary/">https://leetcode.com/problems/nth-highest-salary/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy85LjYvZnVuY3Rpb25zLXdpbmRvdy5odG1s" title="https://www.postgresql.org/docs/9.6/functions-window.html">https://www.postgresql.org/docs/9.6/functions-window.html<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Window Function</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 176.second.highest.salary</title>
    <url>/2020/03/09/SQL-Leetcode-176-second-highest-salary/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>176.Second Highest Salary</p>
<p>SQL Schema:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, Salary <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Employee</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, Salary) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'100'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, Salary) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'200'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, Salary) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'300'</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Employee;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, Salary <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, Salary) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'100'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, Salary) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'200'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, Salary) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'300'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>Write a SQL query to get the second highest salary from the <code>Employee</code> table.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">----+--------+</span></span><br><span class="line">| Id | Salary |</span><br><span class="line">+<span class="comment">----+--------+</span></span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+<span class="comment">----+--------+</span></span><br></pre></td></tr></tbody></table></figure>
<p>For example, given the above <code>Employee</code> table, the query should return <code>200</code> as the second highest salary. If there is no second highest salary, then the query should return <code>null</code>.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| SecondHighestSalary |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| 200                 |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<hr>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> e.salary</span><br><span class="line">    <span class="keyword">from</span> Employee e</span><br><span class="line">    <span class="keyword">where</span> <span class="number">1</span> = (</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">count</span>(*) </span><br><span class="line">        <span class="keyword">from</span> Employee top </span><br><span class="line">        <span class="keyword">where</span> top.salary &gt; e.salary</span><br><span class="line">    )</span><br><span class="line">) <span class="keyword">as</span> SecondHighestSalary;</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>distinct</code>是为了将并列的第二数值聚合为同一个数字。</li>
<li><code>distinct</code>也使这个解法的运行时间变慢。</li>
</ul>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(e2.salary) <span class="keyword">as</span> SecondHighestSalary </span><br><span class="line"><span class="keyword">from</span> employee e1 <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> employee e2 </span><br><span class="line"><span class="keyword">on</span> e1.salary &gt; e2.salary;</span><br></pre></td></tr></tbody></table></figure>
<p>如果我们的数据量非常大，这个解法的运行时间也会很慢。</p>
<p><br></p>
<h1 id="解法３"><a href="#解法３" class="headerlink" title="解法３"></a>解法３</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">            Salary</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            Employee</span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">DESC</span></span><br><span class="line">        <span class="keyword">LIMIT</span> <span class="number">1</span> <span class="keyword">OFFSET</span> <span class="number">1</span>) <span class="keyword">AS</span> SecondHighestSalary</span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure>
<p>这个解法的运行时间较好，但是<code>limit</code>没有被ANSI SQL Standard收录。(甚至在我们学校本科生数据库考试中不算分)　<br><!-- TODO: LIMIT ANSI --></p>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTUyODYwNC9ob3ctdW5pdmVyc2FsLWlzLXRoZS1saW1pdC1zdGF0ZW1lbnQtaW4tc3Fs" title="https://stackoverflow.com/questions/1528604/how-universal-is-the-limit-statement-in-sql">https://stackoverflow.com/questions/1528604/how-universal-is-the-limit-statement-in-sql<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYmEuc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzIxNDM2Ny93aGF0LWlzLXRoZS1zcWwtc3RhbmRhcmQtbWV0aG9kLW9mLWRvaW5nLWxpbWl0LW9mZnNldA==" title="https://dba.stackexchange.com/questions/214367/what-is-the-sql-standard-method-of-doing-limit-offset">https://dba.stackexchange.com/questions/214367/what-is-the-sql-standard-method-of-doing-limit-offset<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTk1MTIzL2lzLXRoZXJlLWFuLWFuc2ktc3FsLWFsdGVybmF0aXZlLXRvLXRoZS1teXNxbC1saW1pdC1rZXl3b3Jk" title="https://stackoverflow.com/questions/595123/is-there-an-ansi-sql-alternative-to-the-mysql-limit-keyword">https://stackoverflow.com/questions/595123/is-there-an-ansi-sql-alternative-to-the-mysql-limit-keyword<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-SQL] 175.combine.two.tables</title>
    <url>/2020/03/09/SQL-Leetcode-175-combine-two-tables/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>175.Combine Two Tables</p>
<p>SQL Schema</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Person (PersonId <span class="built_in">int</span>, FirstName <span class="built_in">varchar</span>(<span class="number">255</span>), LastName <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> Address (AddressId <span class="built_in">int</span>, PersonId <span class="built_in">int</span>, City <span class="built_in">varchar</span>(<span class="number">255</span>), State <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Person;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (PersonId, LastName, FirstName) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Wang'</span>, <span class="string">'Allen'</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Address;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Address (AddressId, PersonId, City, State) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'New York City'</span>, <span class="string">'New York'</span>);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> Pelson;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Person (PersonId <span class="built_in">int</span>, FirstName <span class="built_in">varchar</span>(<span class="number">255</span>), LastName <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Address (AddressId <span class="built_in">int</span>, PersonId <span class="built_in">int</span>, City <span class="built_in">varchar</span>(<span class="number">255</span>), State <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (PersonId, LastName, FirstName) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Wang'</span>, <span class="string">'Allen'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Address (AddressId, PersonId, City, State) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'New York City'</span>, <span class="string">'New York'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>Table: <code>Person</code></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">-------------+---------+</span></span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+<span class="comment">-------------+---------+</span></span><br><span class="line">| PersonId    | int     |</span><br><span class="line">| FirstName   | varchar |</span><br><span class="line">| LastName    | varchar |</span><br><span class="line">+<span class="comment">-------------+---------+</span></span><br><span class="line">PersonId is the primary key column for this table.</span><br></pre></td></tr></tbody></table></figure>
<p>Table: <code>Address</code></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">+<span class="comment">-------------+---------+</span></span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+<span class="comment">-------------+---------+</span></span><br><span class="line">| AddressId   | int     |</span><br><span class="line">| PersonId    | int     |</span><br><span class="line">| City        | varchar |</span><br><span class="line">| State       | varchar |</span><br><span class="line">+<span class="comment">-------------+---------+</span></span><br><span class="line">AddressId is the primary key column for this table.</span><br></pre></td></tr></tbody></table></figure>
<p>Write a SQL query for a report that provides the following information for each person in the <code>Person</code> table, regardless if there is an address for each of those people:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">FirstName, LastName, City, State</span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<hr>
<p><br></p>
<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> p.firstname, p.lastname, a.city, a.state </span><br><span class="line"><span class="keyword">from</span> person p <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> address a </span><br><span class="line"><span class="keyword">on</span> p.personid = a.personid;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> p.firstname, p.lastname, a.city, a.state </span><br><span class="line"><span class="keyword">from</span> person p <span class="keyword">left</span> <span class="keyword">join</span> address a </span><br><span class="line"><span class="keyword">on</span> p.personid = a.personid;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY29tYmluZS10d28tdGFibGVzLw==" title="https://leetcode.com/problems/combine-two-tables/">https://leetcode.com/problems/combine-two-tables/<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>[CMU-15445]HomeWork1_17Fall</title>
    <url>/2020/03/08/CMU-15445-HomeWork1-17Fall/</url>
    <content><![CDATA[<p>2017 Fall: HOMEWORK #1 - SQL</p>
<p>Homework: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTcvaG9tZXdvcmsxLw==" title="https://15445.courses.cs.cmu.edu/fall2017/homework1/">https://15445.courses.cs.cmu.edu/fall2017/homework1/<i class="fa fa-external-link"></i></span><br>Solution: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTcvZmlsZXMvaHcxLXNvbHMudGFyLmd6" title="https://15445.courses.cs.cmu.edu/fall2017/files/hw1-sols.tar.gz">https://15445.courses.cs.cmu.edu/fall2017/files/hw1-sols.tar.gz<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>
<p>CMU推荐使用 SQLite: <span class="exturl" data-url="aHR0cHM6Ly93d3cuc3FsaXRlLm9yZy9pbmRleC5odG1s" title="https://www.sqlite.org/index.html">https://www.sqlite.org/index.html<i class="fa fa-external-link"></i></span></p>
<p>已检查过我的解法和答案生成的结果一样。</p>
<!-- TODO: link 文章 SQLITE 安装 和SQLITE数据集 -->
<h1 id="熟悉数据集"><a href="#熟悉数据集" class="headerlink" title="熟悉数据集"></a>熟悉数据集</h1><p><span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTcvaG9tZXdvcmsxLw==" title="https://15445.courses.cs.cmu.edu/fall2017/homework1/">https://15445.courses.cs.cmu.edu/fall2017/homework1/<i class="fa fa-external-link"></i></span>  -&gt; CHECK THE SCHEMA</p>
<h1 id="Q0"><a href="#Q0" class="headerlink" title="Q0"></a>Q0</h1><p>Count the number of cases in the Maryland Judiciary Court System. The output should look like this (only a single number):</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">sqlite&gt; select ...;</span><br><span class="line">12345</span><br></pre></td></tr></tbody></table></figure>
<p>Details: Make use of the <code>count</code> function.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(case_id) <span class="keyword">from</span> cases;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h1><p>Count the number of attorneys in the system. The output should look like this (only a single number):</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">sqlite&gt; select ...;</span><br><span class="line">12345</span><br></pre></td></tr></tbody></table></figure>
<p>Details: Ensure that there are no duplicates.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--- Count the number of attorneys</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">name</span>)</span><br><span class="line"><span class="keyword">from</span> attorneys;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h1><p>Repeated phone calls can sometimes land you in jail. Count the number of charges related to phone calls by examining their description. The output should look like this:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">12345</span><br></pre></td></tr></tbody></table></figure>
<p>Details: The search string for the appropriate column is <code>%PHONE%</code>.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--- Count the number of cases related to repeated phone calls.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(case_id)</span><br><span class="line"><span class="keyword">from</span> charges</span><br><span class="line"><span class="keyword">where</span> description <span class="keyword">like</span> <span class="string">'%PHONE%'</span> ;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h1><p>Reckless endangerment is another reason why one can end up in a courthouse. Count the number of cases related to reckless endangerment in each county. The output should look like this:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">County A|500</span><br><span class="line">County B|400</span><br><span class="line">County C|300</span><br></pre></td></tr></tbody></table></figure>
<p>Details: Print the county name and number of cases in that particular county. Sort the counties by the number of cases in descending order, and break ties by ordering them in ascending order with respect to the county name. Report only the top <code>3</code> counties with the maximum number of cases. The search string for the appropriate column is <code>%RECKLESS%</code>. Ensure that you only fetch the cases whose county name is not empty.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ca.violation_county, <span class="keyword">count</span>(ca.case_id) <span class="keyword">as</span> num_cases</span><br><span class="line"><span class="keyword">from</span> cases ca, charges ch</span><br><span class="line"><span class="keyword">where</span> ca.case_id = ch.case_id <span class="keyword">and</span></span><br><span class="line">      ch.description <span class="keyword">like</span> <span class="string">'%RECKLESS%'</span> <span class="keyword">and</span></span><br><span class="line">      ca.violation_county != <span class="string">''</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> ca.violation_county</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num_cases <span class="keyword">desc</span>, cases.violation_county <span class="keyword">asc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--- Count the number of cases related to reckless endangerment in each county: </span></span><br><span class="line"><span class="comment">--- Print county name and number of cases</span></span><br><span class="line"><span class="comment">--- Sort by number of cases (descending),</span></span><br><span class="line"><span class="comment">--- and break ties by county name (ascending),</span></span><br><span class="line"><span class="comment">--- and report only the top 3 counties.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> cases.violation_county, <span class="keyword">count</span>(cases.case_id) <span class="keyword">as</span> cnt </span><br><span class="line"><span class="keyword">from</span> cases, charges</span><br><span class="line"><span class="keyword">where</span> cases.case_id = charges.case_id</span><br><span class="line">      <span class="keyword">and</span> cases.violation_county &lt;&gt; <span class="string">''</span></span><br><span class="line">      <span class="keyword">and</span> charges.description <span class="keyword">like</span> <span class="string">'%RECKLESS%'</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cases.violation_county</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> cnt <span class="keyword">desc</span>, cases.violation_county <span class="keyword">asc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q4"><a href="#Q4" class="headerlink" title="Q4"></a>Q4</h1><p>Let’s now go back in time and look at the cases filed in the 1950s. The output should look like this:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">CASE1|1950-03-12</span><br><span class="line">CASE2|1951-01-01</span><br><span class="line">CASE3|1952-01-01</span><br></pre></td></tr></tbody></table></figure>
<p>Details: Print the case id and filing date for the cases filed in the 1950s. List the oldest cases first, and report only the earliest <code>3</code> cases.</p>
<p>有用的链接：　<span class="exturl" data-url="aHR0cHM6Ly93d3cuc3FsaXRlLm9yZy9sYW5nX2RhdGVmdW5jLmh0bWw=" title="https://www.sqlite.org/lang_datefunc.html">https://www.sqlite.org/lang_datefunc.html<i class="fa fa-external-link"></i></span></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> case_id, filing_date</span><br><span class="line"><span class="keyword">from</span> cases</span><br><span class="line"><span class="keyword">where</span> strftime(<span class="string">'%Y'</span>, filing_date) <span class="keyword">between</span> strftime(<span class="string">'%Y'</span>, <span class="built_in">date</span>(<span class="string">'1950-01-01'</span>)) <span class="keyword">and</span> strftime(<span class="string">'%Y'</span>, <span class="built_in">date</span>(<span class="string">'1959-01-01'</span>))</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> filing_date <span class="keyword">asc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--- Cases filed in the 1950s</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> case_id, filing_date</span><br><span class="line"><span class="keyword">from</span> cases</span><br><span class="line"><span class="keyword">where</span> filing_date &gt;= <span class="string">'1950-01-01'</span> <span class="keyword">and</span> filing_date &lt; <span class="string">'1960-01-01'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> filing_date</span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q5"><a href="#Q5" class="headerlink" title="Q5"></a>Q5</h1><p>It looks like a lot of cases got filed in the 1950s. In which decades did the most number of cases get filed? The output should look like this:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">10000|1970s</span><br><span class="line">5000|2000s</span><br><span class="line">1000|1980s</span><br></pre></td></tr></tbody></table></figure>
<p>Details: Print the number of cases and the relevant decade. We will print the relevant decade in a fancier format by constructing a string that looks like this <code>1970s</code>. Sort the decades in decreasing order with respect to the number of cases. Report only the top <code>3</code> decades wherein the most number of cases got filed. Ensure that you only fetch the cases whose filing date is not empty.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(case_decade.case_id) <span class="keyword">as</span> num_cases, <span class="keyword">cast</span> (case_decade.decade <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">3</span>)) || <span class="string">'0s'</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> case_id, <span class="keyword">cast</span>(strftime(<span class="string">'%Y'</span>, filing_date) <span class="keyword">as</span> <span class="built_in">integer</span>) / <span class="number">10</span> <span class="keyword">as</span> decade</span><br><span class="line">    <span class="keyword">from</span> cases</span><br><span class="line">    <span class="keyword">where</span> filing_date != <span class="string">''</span>) <span class="keyword">as</span> case_decade</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> case_decade.decade</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num_cases <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--- In which 3 decades did the most number of cases get filed?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(case_id) <span class="keyword">as</span> case_count,</span><br><span class="line"><span class="keyword">substr</span>(filing_date, <span class="number">1</span>, <span class="number">3</span>) || <span class="string">'0s'</span> <span class="keyword">as</span> decade <span class="keyword">from</span> cases</span><br><span class="line"><span class="keyword">where</span> filing_date &lt;&gt; <span class="string">''</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> decade</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> case_count <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>思路类似这一题　<a href="https://cakebytheoceanluo.github.io/2020/03/07/CMU-15445-HomeWork1-19Fall/#Q4">Fall19 Homework1 Q4</a></p>
<ul>
<li>我的解法: cast into integer</li>
<li>答案: cast into string</li>
<li>这两个解法看起来性能差距不大</li>
</ul>
<h1 id="Q6"><a href="#Q6" class="headerlink" title="Q6"></a>Q6</h1><p>Cases can often be closed for bizzare reasons. One such reason is statistics. Determine the percentage of cases that were statistically closed. The output should look like this:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">5.123456789</span><br></pre></td></tr></tbody></table></figure>
<p>Details: Print the percentage of cases. To compute the percentage, you will need to multiply the numerator of the fraction by <code>100.0</code>. While searching the case’s status, use the following string: <code>Case Closed Statistically</code>. To keep things simple, there is no need to truncate or round numbers. To compute the percentage, simply multiply the numerator by <code>100.0</code> and divide by the appropriate denominator.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">100.0</span> * <span class="keyword">count</span>(*) / (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> cases)</span><br><span class="line"><span class="keyword">from</span> cases</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">status</span> = <span class="string">'Case Closed Statistically'</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--- Fraction of cases closed statistically</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> statistically_closed_cases.cnt * <span class="number">100.0</span> / all_cases.cnt <span class="keyword">as</span> percentage </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(case_id) <span class="keyword">as</span> cnt</span><br><span class="line">    <span class="keyword">from</span> cases</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">status</span> = <span class="string">'Case Closed Statistically'</span> ) <span class="keyword">as</span> statistically_closed_cases,</span><br><span class="line">    (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(case_id) <span class="keyword">as</span> cnt</span><br><span class="line">    <span class="keyword">from</span> cases</span><br><span class="line">    ) <span class="keyword">as</span> all_cases;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q7"><a href="#Q7" class="headerlink" title="Q7"></a>Q7</h1><p>Let’s look at some prolific defendants. List the top 3 parties who have been charged in the most number of distinct counties. The output should look like this:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">A|100</span><br><span class="line">B|50</span><br><span class="line">C|10</span><br></pre></td></tr></tbody></table></figure>
<p>Details: Print the name of the party along with the number of distinct counties. Sort the parties by the number of distinct counties in descending order, and report only the top <code>3</code> parties. Ensure that you only fetch the parties who are defendants (<code>Defendant</code>) and whose name is not empty.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> p.name, <span class="keyword">count</span>(<span class="keyword">distinct</span> c.violation_county) <span class="keyword">as</span> num_vc</span><br><span class="line"><span class="keyword">from</span> parties p, cases c</span><br><span class="line"><span class="keyword">where</span> p.case_id = c.case_id <span class="keyword">and</span></span><br><span class="line">      p.name != <span class="string">''</span> <span class="keyword">and</span></span><br><span class="line">      p.type = <span class="string">'Defendant'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> p.name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num_vc <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--- List the top 3 parties who have been</span></span><br><span class="line"><span class="comment">--- charged in the most number of distinct counties.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> parties.name, <span class="keyword">count</span>(<span class="keyword">distinct</span>(cases.violation_county)) <span class="keyword">as</span> cnt</span><br><span class="line"><span class="keyword">from</span> cases, parties</span><br><span class="line"><span class="keyword">where</span> cases.case_id = parties.case_id</span><br><span class="line"><span class="keyword">and</span> parties.type = <span class="string">'Defendant'</span></span><br><span class="line"><span class="keyword">and</span> parties.name &lt;&gt; <span class="string">''</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> parties.name </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> cnt <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q8"><a href="#Q8" class="headerlink" title="Q8"></a>Q8</h1><p>How does the average age of guilty criminals vary over time? The output should look like this:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">2017|50.123456789</span><br><span class="line">2016|55.123456789</span><br><span class="line">2015|60.123456789</span><br><span class="line">2014|55.123456789</span><br><span class="line">2013|50.123456789</span><br></pre></td></tr></tbody></table></figure>
<p>Details: Print the filing year and the average age of the criminals that were found guilty in cases filed in that particular year. To compute the average age, first determine the age of the criminal by using the case’s filing date and the party’s date of birth. Use the <code>strftime('%Y.%m%d',...)</code> function for this purpose. To determine the filing year from the filing date, again make use of the <code>strftime('%Y',...)</code> function. Look at the disposition to pick only <code>Guilty</code> parties (<code>charges.disposition = 'Guilty'</code>). Ensure that you only fetch the cases whose filing date is not empty. Also, ensure that you only fetch the parties who are defendants (<code>parties.type = Defendant</code>), whose name is not empty, whose date of birth is not empty, and whose computed age is greater than <code>0</code> and less than <code>100</code> years. List the tuples in descending order with respect to the filing year and only display <code>5</code> tuples. You might want to leverage common table expressions (CTEs) in this query. Here’s more information on <span class="exturl" data-url="aHR0cHM6Ly9zcWxpdGUub3JnL2xhbmdfd2l0aC5odG1s" title="https://sqlite.org/lang_with.html">using CTEs in SQLite<i class="fa fa-external-link"></i></span>.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> strftime(<span class="string">'%Y'</span>, ca.filing_date) <span class="keyword">as</span> filing_year,</span><br><span class="line">       <span class="keyword">avg</span>(strftime(<span class="string">'%Y.%m%d'</span>, ca.filing_date) - strftime(<span class="string">'%Y.%m%d'</span>, p.dob)) <span class="keyword">as</span> avg_age</span><br><span class="line"><span class="keyword">from</span> parties p, charges ch, cases ca</span><br><span class="line"><span class="keyword">where</span> p.case_id = ca.case_id <span class="keyword">and</span></span><br><span class="line">      ch.case_id = ca.case_id <span class="keyword">and</span></span><br><span class="line">      ch.disposition = <span class="string">'Guilty'</span> <span class="keyword">and</span></span><br><span class="line">      ca.filing_date != <span class="string">''</span> <span class="keyword">and</span></span><br><span class="line">      p.name != <span class="string">''</span> <span class="keyword">and</span></span><br><span class="line">      p.type = <span class="string">'Defendant'</span> <span class="keyword">and</span></span><br><span class="line">      p.dob <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">and</span></span><br><span class="line">      (strftime(<span class="string">'%Y.%m%d'</span>, ca.filing_date) - strftime(<span class="string">'%Y.%m%d'</span>, p.dob)) &gt; <span class="number">0</span> <span class="keyword">and</span></span><br><span class="line">      (strftime(<span class="string">'%Y.%m%d'</span>, ca.filing_date) - strftime(<span class="string">'%Y.%m%d'</span>, p.dob)) &lt; <span class="number">100</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> filing_year</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> filing_year <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--- Average age of guilty criminals over time</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> filing_year_table <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> cases.case_id, strftime(<span class="string">'%Y'</span>, filing_date) <span class="keyword">as</span> filing_year</span><br><span class="line">    <span class="keyword">from</span> cases, charges</span><br><span class="line">    <span class="keyword">where</span> cases.case_id = charges.case_id</span><br><span class="line">    <span class="keyword">and</span> charges.disposition = <span class="string">'Guilty'</span></span><br><span class="line">    <span class="keyword">and</span> cases.filing_date &lt;&gt; <span class="string">''</span></span><br><span class="line">), age_table <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> cases.case_id,</span><br><span class="line">    strftime(<span class="string">'%Y.%m%d'</span>, cases.filing_date) - strftime(<span class="string">'%Y.%m%d'</span>, parties.dob) <span class="keyword">as</span> age </span><br><span class="line">    <span class="keyword">from</span> cases, parties</span><br><span class="line">    <span class="keyword">where</span> cases.case_id = parties.case_id</span><br><span class="line">    <span class="keyword">and</span> parties.type = <span class="string">'Defendant'</span></span><br><span class="line">    <span class="keyword">and</span> parties.name &lt;&gt; <span class="string">''</span></span><br><span class="line">    <span class="keyword">and</span> parties.dob <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">and</span> age &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">and</span> age &lt; <span class="number">100</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> filing_year_table.filing_year, <span class="keyword">avg</span>(age_table.age) <span class="keyword">as</span> average_age</span><br><span class="line"><span class="keyword">from</span> cases, filing_year_table, age_table</span><br><span class="line"><span class="keyword">where</span> cases.case_id = filing_year_table.case_id</span><br><span class="line">      <span class="keyword">and</span> cases.case_id = age_table.case_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> filing_year_table.filing_year</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> filing_year <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q9"><a href="#Q9" class="headerlink" title="Q9"></a>Q9</h1><p>Let’s next look at case disposition by race to see if there is any inherent bias in the system. The output should look like this:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">African American|Guilty|60.000</span><br><span class="line">African American|Not Guilty|40.000</span><br><span class="line">Caucasian|Guilty|50.000</span><br><span class="line">Caucasian|Not Guilty|50.000</span><br></pre></td></tr></tbody></table></figure>
<p>Details: Print the race, the case disposition, and the percentage of cases disposed with that verdict. Let’s restrict our focus to <code>2</code> races (<code>African American</code>, <code>Caucasian</code>), and 2 types of case disposition (<code>Guilty</code>, <code>Not Guilty</code>). To compute the percentage, you will need to multiply the numerator of the fraction by <code>100.0</code>. Ensure that the race of the party is not empty. You might want to leverage common table expressions (CTEs) in this query. <span class="exturl" data-url="aHR0cHM6Ly9zcWxpdGUub3JnL2xhbmdfd2l0aC5odG1s" title="https://sqlite.org/lang_with.html">using CTEs in SQLite<i class="fa fa-external-link"></i></span>.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> temp <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> p.race, c.disposition</span><br><span class="line">    <span class="keyword">from</span> parties p, charges c</span><br><span class="line">    <span class="keyword">where</span> p.case_id = c.case_id <span class="keyword">and</span></span><br><span class="line">          p.race &lt;&gt; <span class="string">''</span> <span class="keyword">and</span></span><br><span class="line">          p.race <span class="keyword">in</span> (<span class="string">'African American'</span>, <span class="string">'Caucasian'</span>) <span class="keyword">and</span></span><br><span class="line">          c.disposition <span class="keyword">in</span> (<span class="string">'Guilty'</span>, <span class="string">'Not Guilty'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="string">'African American'</span>, t.disposition, <span class="number">100.0</span> * <span class="keyword">count</span>(*) / (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> temp t_ <span class="keyword">where</span> t_.disposition = t.disposition)</span><br><span class="line"><span class="keyword">from</span> temp t</span><br><span class="line"><span class="keyword">where</span> t.race = <span class="string">'African American'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t.disposition</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'Caucasian'</span>, t.disposition, <span class="number">100.0</span> * <span class="keyword">count</span>(*) / (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> temp t_ <span class="keyword">where</span> t_.disposition = t.disposition)</span><br><span class="line"><span class="keyword">from</span> temp t</span><br><span class="line"><span class="keyword">where</span> t.race = <span class="string">'Caucasian'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t.disposition;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--- Disposition by race</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> disposition_table <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> race, charges.disposition, parties.case_id <span class="keyword">as</span> case_id</span><br><span class="line">    <span class="keyword">from</span> charges, parties</span><br><span class="line">    <span class="keyword">where</span> charges.case_id = parties.case_id</span><br><span class="line">    <span class="keyword">and</span> race &lt;&gt; <span class="string">''</span></span><br><span class="line">    <span class="keyword">and</span> disposition <span class="keyword">in</span> (<span class="string">'Guilty'</span>, <span class="string">'Not Guilty'</span>)</span><br><span class="line">    <span class="keyword">and</span> race <span class="keyword">in</span> (<span class="string">'African American'</span>, <span class="string">'Caucasian'</span>)</span><br><span class="line">),</span><br><span class="line">disposition_aggregate_table <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> disposition, <span class="keyword">count</span>(case_id) <span class="keyword">as</span> case_count</span><br><span class="line">    <span class="keyword">from</span> disposition_table</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> disposition</span><br><span class="line">),</span><br><span class="line">race_aggregate_table <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> race, disposition, <span class="keyword">count</span>(case_id) <span class="keyword">as</span> case_count</span><br><span class="line">    <span class="keyword">from</span> disposition_table</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> race, disposition</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> race,</span><br><span class="line">       race_aggregate_table.disposition,</span><br><span class="line">       (race_aggregate_table.case_count * <span class="number">100.0</span>) / disposition_aggregate_table.case_count</span><br><span class="line"><span class="keyword">from</span> race_aggregate_table, disposition_aggregate_table</span><br><span class="line"><span class="keyword">where</span> race_aggregate_table.disposition = disposition_aggregate_table.disposition;</span><br></pre></td></tr></tbody></table></figure>
<p>这题的结果还是挺难看懂</p>
<ul>
<li>我的解法　由两个小表格组成，　execution time较短，fetching time较长</li>
<li>答案就是相对直接的思路，直接生产对应的分子分母相除。</li>
</ul>
<h1 id="Q10"><a href="#Q10" class="headerlink" title="Q10"></a>Q10</h1><p>Certain zip codes might have — ahem — more interesting citizens than Squirrel Hill. Retrieve the top 3 zip codes in Maryland where the most number of cases were filed. The output should look like this:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">21000|500</span><br><span class="line">21001|400</span><br><span class="line">21002|300</span><br></pre></td></tr></tbody></table></figure>
<p>Details: Print the zip code along with the number of cases filed in that particular zip code. List them in decreasing order with respect to the number of cases. Display only the top <code>3</code> zip codes. Ensure that the zip code is not empty.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> p.zip, <span class="keyword">count</span>(c.case_id) <span class="keyword">as</span> num_cases</span><br><span class="line"><span class="keyword">from</span> parties p, charges c</span><br><span class="line"><span class="keyword">where</span> p.case_id = c.case_id <span class="keyword">and</span> p.zip != <span class="string">''</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> p.zip</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num_cases <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--- Top zip codes with most criminals</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> parties.zip, <span class="keyword">count</span>(parties.case_id) <span class="keyword">as</span> case_count</span><br><span class="line"><span class="keyword">from</span> parties, charges</span><br><span class="line"><span class="keyword">where</span> parties.case_id = charges.case_id</span><br><span class="line"><span class="keyword">and</span> parties.zip &lt;&gt; <span class="string">''</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> parties.zip</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> case_count <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q11"><a href="#Q11" class="headerlink" title="Q11"></a>Q11</h1><p>Some attorneys are awesome at their job. List the top 5 attorneys in Maryland by examining the number of cases that an attorney handles and the percentage of cases wherein they were successful. The output should look like this:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">A|100|60.123</span><br><span class="line">B|200|45.123</span><br><span class="line">C|100|30.123</span><br><span class="line">D|500|20.123</span><br><span class="line">E|100|10.123</span><br></pre></td></tr></tbody></table></figure>
<p>Details: Print the attorney’s name, number of cases handled, and the percentage of cases won (i.e. the disposition was <code>Not Guilty</code>). Examine only attorneys who have handled more than <code>100</code> cases. List the attorneys in decreasing order with respect to their success percentage and number of cases handled, respectively. Display only the top <code>5</code> attorneys. Ensure that the attorney’s name is not empty. You might want to leverage common table expressions (CTEs) in this query. <span class="exturl" data-url="aHR0cHM6Ly9zcWxpdGUub3JnL2xhbmdfd2l0aC5odG1s" title="https://sqlite.org/lang_with.html">using CTEs in SQLite<i class="fa fa-external-link"></i></span>.</p>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--- Attorney performance</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> attorney_table <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> charges.case_id <span class="keyword">as</span> case_id, disposition, <span class="keyword">name</span> <span class="keyword">from</span> charges, attorneys</span><br><span class="line">    <span class="keyword">where</span> charges.case_id = attorneys.case_id</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">name</span> &lt;&gt; <span class="string">''</span></span><br><span class="line">), aggregate_table <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(case_id) <span class="keyword">as</span> total_count, <span class="keyword">name</span></span><br><span class="line">    <span class="keyword">from</span> attorney_table</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span></span><br><span class="line">), success_table <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(case_id) <span class="keyword">as</span> success_count, <span class="keyword">name</span></span><br><span class="line">    <span class="keyword">from</span> attorney_table</span><br><span class="line">    <span class="keyword">where</span> disposition = <span class="string">'Not Guilty'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> aggregate_table.name, total_count, (success_count * <span class="number">100.0</span>/total_count) <span class="keyword">as</span> success_percent</span><br><span class="line"><span class="keyword">from</span> aggregate_table, success_table</span><br><span class="line"><span class="keyword">where</span> aggregate_table.name = success_table.name <span class="keyword">and</span> total_count &gt; <span class="number">100</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> success_percent <span class="keyword">desc</span>, total_count <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q12"><a href="#Q12" class="headerlink" title="Q12"></a>Q12</h1><p>Find the attorney with the seventh highest success percentage (by extending the previous query). The output should look like this:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">G|50|5.123</span><br></pre></td></tr></tbody></table></figure>
<p>Details: Print the attorney’s name, number of cases handled, and the percentage of cases won (i.e. the disposition was Not Guilty). Examine only attorneys who have handled more than 100 cases. Ensure that the attorney’s name is not empty.</p>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">--- Attorney with seventh highest success percentage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> attorney_table <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> charges.case_id <span class="keyword">as</span> case_id, disposition, <span class="keyword">name</span></span><br><span class="line">    <span class="keyword">from</span> charges, attorneys</span><br><span class="line">    <span class="keyword">where</span> charges.case_id = attorneys.case_id</span><br><span class="line">          <span class="keyword">and</span> <span class="keyword">name</span> &lt;&gt; <span class="string">''</span></span><br><span class="line">), aggregate_table <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(case_id) <span class="keyword">as</span> total_count, <span class="keyword">name</span></span><br><span class="line">    <span class="keyword">from</span> attorney_table</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span></span><br><span class="line">    <span class="keyword">having</span> total_count &gt; <span class="number">100</span></span><br><span class="line">), success_table <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(case_id) <span class="keyword">as</span> success_count, <span class="keyword">name</span></span><br><span class="line">    <span class="keyword">from</span> attorney_table</span><br><span class="line">    <span class="keyword">where</span> disposition = <span class="string">'Not Guilty'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> aggregate_table.name, total_count, (success_count * <span class="number">100.0</span>/total_count) <span class="keyword">as</span> success_percent</span><br><span class="line"><span class="keyword">from</span> aggregate_table, success_table</span><br><span class="line"><span class="keyword">where</span> aggregate_table.name = success_table.name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> success_percent <span class="keyword">desc</span>, total_count <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">offset</span> <span class="number">6</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>Q11和Q12只有最后的<code>LIMIT</code>, <code>OFFSET</code>有区别。</p>
<p><code>LIMIT</code>, <code>OFFSET</code>: 见 <a href="https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part2/#LIMIT-OFFSET">https://cakebytheoceanluo.github.io/2020/03/06/CMU-15445-Lec02-part2/#LIMIT-OFFSET</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CMU-15445</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>SQLite</tag>
      </tags>
  </entry>
  <entry>
    <title>[CMU-15445]HomeWork1_18Fall</title>
    <url>/2020/03/08/CMU-15445-HomeWork1-18Fall/</url>
    <content><![CDATA[<p>2018 Fall: HOMEWORK #1 - SQL</p>
<p>Homework: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTgvaG9tZXdvcmsxLw==" title="https://15445.courses.cs.cmu.edu/fall2018/homework1/">https://15445.courses.cs.cmu.edu/fall2018/homework1/<i class="fa fa-external-link"></i></span><br>Solution: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTgvZmlsZXMvaHcxLXNvbHMudGFyLmd6" title="https://15445.courses.cs.cmu.edu/fall2018/files/hw1-sols.tar.gz">https://15445.courses.cs.cmu.edu/fall2018/files/hw1-sols.tar.gz<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>
<p>CMU推荐使用 SQLite: <span class="exturl" data-url="aHR0cHM6Ly93d3cuc3FsaXRlLm9yZy9pbmRleC5odG1s" title="https://www.sqlite.org/index.html">https://www.sqlite.org/index.html<i class="fa fa-external-link"></i></span></p>
<p>已检查过我的解法和答案生成的结果一样。</p>
<!-- TODO: link 文章 SQLITE 安装 和SQLITE数据集 -->
<h1 id="熟悉数据集"><a href="#熟悉数据集" class="headerlink" title="熟悉数据集"></a>熟悉数据集</h1><p><span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTgvaG9tZXdvcmsxLw==" title="https://15445.courses.cs.cmu.edu/fall2018/homework1/">https://15445.courses.cs.cmu.edu/fall2018/homework1/<i class="fa fa-external-link"></i></span>  -&gt; CHECK THE SCHEMA</p>
<p><img data-src="https://15445.courses.cs.cmu.edu/fall2018/files/schema.png" alt="schema"></p>
<blockquote>
<p>When calculating the duration of a bike trip, please use <code>trip.start_time</code> and <code>trip.end_time</code>. Please do NOT use <code>trip.duration</code>, there is inconsistency in <code>trip.duration</code> in the data we have.</p>
</blockquote>
<h1 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h1><p>Count the number of cities. The purpose of this query is to make sure that the formatting of your output matches exactly the formatting of our auto- grading script.</p>
<p>Details: Print the number of cities (eliminating duplicates).</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span>(city)) <span class="keyword">from</span> station;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h1><p>Count the number of stations in each city.</p>
<p>Details: Print city name and number of stations. Sort by number of stations (increasing), and break ties by city name (increasing).</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> city, <span class="keyword">count</span>(station_id) <span class="keyword">as</span> num_station</span><br><span class="line"><span class="keyword">from</span> station</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> city</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num_station <span class="keyword">asc</span>, city <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> city, <span class="keyword">count</span>(station_id) <span class="keyword">as</span> cnt <span class="keyword">from</span> station <span class="keyword">group</span> <span class="keyword">by</span> city <span class="keyword">order</span> <span class="keyword">by</span> cnt <span class="keyword">asc</span>, city <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h1><p>Find the percentage of trips in each city. A trip belongs to a city as long as its start station or end station is in the city. For example, if a trip started from station A in city P and ended in station B in city Q, then the trip belongs to both city P and city Q. If P equals to Q, the trip is only counted once.</p>
<p>Details: Print city name and ratio between the number of trips that belong to that city against the total number of trips (a decimal between 0-1, round to <code>four</code> decimal places using <code>ROUND()</code>). Sort by ratio (decreasing), and break ties by city name (increasing).</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> count_once <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> start_station_id</span><br><span class="line">    <span class="keyword">from</span> trip t, station s1, station s2</span><br><span class="line">    <span class="keyword">where</span> t.start_station_id = s1.station_id <span class="keyword">and</span> t.end_station_id = s2.station_id <span class="keyword">and</span> s1.city = s2.city</span><br><span class="line">    ),</span><br><span class="line">     count_twice <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> start_station_id, end_station_id</span><br><span class="line">    <span class="keyword">from</span> trip t, station s1, station s2</span><br><span class="line">    <span class="keyword">where</span> t.start_station_id = s1.station_id <span class="keyword">and</span> t.end_station_id = s2.station_id <span class="keyword">and</span> s1.city != s2.city</span><br><span class="line">     ),</span><br><span class="line">     occurrence (station_id) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> count_once</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> start_station_id <span class="keyword">from</span> count_twice</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> end_station_id <span class="keyword">from</span> count_twice</span><br><span class="line">      ),</span><br><span class="line">     num_occurrence (val) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> trip</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> s.city, <span class="keyword">ROUND</span>(<span class="number">1.0</span> * <span class="keyword">count</span>(o.station_id) / no.val, <span class="number">4</span>) <span class="keyword">as</span> precentage</span><br><span class="line"><span class="keyword">from</span> occurrence o, station s, num_occurrence <span class="keyword">no</span></span><br><span class="line"><span class="keyword">where</span> o.station_id = s.station_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.city</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> precentage <span class="keyword">desc</span>, s.city <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> city_trip_cnt.city, <span class="keyword">round</span>(city_trip_cnt.cnt * <span class="number">1.0</span> / trip_cnt.cnt, <span class="number">4</span>) <span class="keyword">as</span> ratio</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">     (<span class="keyword">select</span> city, <span class="keyword">count</span>(<span class="keyword">distinct</span>(<span class="keyword">id</span>)) <span class="keyword">as</span> cnt</span><br><span class="line">      <span class="keyword">from</span> trip, station</span><br><span class="line">      <span class="keyword">where</span> station_id = start_station_id <span class="keyword">or</span> station_id = end_station_id <span class="keyword">group</span> <span class="keyword">by</span> city) <span class="keyword">as</span> city_trip_cnt,</span><br><span class="line">     (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> cnt <span class="keyword">from</span> trip) <span class="keyword">as</span> trip_cnt</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> ratio <span class="keyword">desc</span>, city <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>注意：</p>
<ul>
<li><strong>the total number of trips</strong>指 <code>select count(*) from trip</code></li>
<li>答案这样分子分母其实不对应</li>
<li>我个人觉得<strong>the total number of trips</strong>应该对应 <code>select count(*) from occurrence</code>, 这样所有分子相加才等于分母，所有的百分比相加正好是1</li>
<li>我觉得答案不恰当，毕竟答案中所有的百分比相加是 <code>1.0016</code>, 已经大于1了。 <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></li>
</ul>
<h1 id="Q4"><a href="#Q4" class="headerlink" title="Q4"></a>Q4</h1><p>For each city, find the most popular station in that city. “Popular” means that the station has the highest count of visits. As above, either starting a trip or finishing a trip at a station, the trip is counted as one “visit” to that station. The trip is only counted once if the start station and the end station are the same.</p>
<p>Details: For each station, print city name, most popular station name and its visit count. Sort by city name, ascending.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> count_once <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> start_station_id</span><br><span class="line">    <span class="keyword">from</span> trip</span><br><span class="line">    <span class="keyword">where</span> start_station_id = end_station_id</span><br><span class="line">    ),</span><br><span class="line">     count_twice <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> start_station_id, end_station_id</span><br><span class="line">    <span class="keyword">from</span> trip</span><br><span class="line">    <span class="keyword">where</span> start_station_id != end_station_id</span><br><span class="line">     ),</span><br><span class="line">     occurrence (station_id) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> count_once</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> start_station_id <span class="keyword">from</span> count_twice</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> end_station_id <span class="keyword">from</span> count_twice</span><br><span class="line">      ),</span><br><span class="line">     popular_station <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> station_id, <span class="keyword">count</span>(*) <span class="keyword">as</span> num_visit</span><br><span class="line">    <span class="keyword">from</span> occurrence</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> station_id</span><br><span class="line">     ), popular_city_station <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.city, s.station_name, ps.num_visit</span><br><span class="line">    <span class="keyword">from</span> popular_station ps, station s</span><br><span class="line">    <span class="keyword">where</span> ps.station_id = s.station_id <span class="keyword">and</span> ps.num_visit =</span><br><span class="line">        (<span class="keyword">select</span> <span class="keyword">max</span>(ps_.num_visit) <span class="keyword">from</span> popular_station ps_, station s_ <span class="keyword">where</span> ps_.station_id = s_.station_id <span class="keyword">and</span> s.city = s_.city)</span><br><span class="line">     )</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> popular_city_station</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> city;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> visit(station_id, station_name, city, cnt) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> station_id, station_name, city, <span class="keyword">count</span>(<span class="keyword">id</span>) <span class="keyword">as</span> cnt</span><br><span class="line">    <span class="keyword">from</span> trip, station</span><br><span class="line">    <span class="keyword">where</span> station_id = start_station_id <span class="keyword">or</span> station_id = end_station_id</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> station_id</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> visit.city, visit.station_name, visit.cnt</span><br><span class="line"><span class="keyword">from</span> visit</span><br><span class="line"><span class="keyword">where</span> visit.cnt =</span><br><span class="line">      (<span class="keyword">select</span> <span class="keyword">max</span>(cnt)</span><br><span class="line">      <span class="keyword">from</span> visit <span class="keyword">as</span> max_visit</span><br><span class="line">      <span class="keyword">where</span> max_visit.city = visit.city)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> city;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q5"><a href="#Q5" class="headerlink" title="Q5"></a>Q5</h1><p>Find the top 10 days that have the highest average bike utilization. For simplicity, we only consider trips that use bikes with <code>id &lt;= 100</code>. The average bike utilization on date D is calculated as the sum of the durations of all the trips that happened on date D divided by the total number of bikes with <code>id &lt;= 100</code>, which is a <code>constant</code>. If a trip overlaps with date D, but starts before date D or ends after date D, then only the interval that overlaps with date D (from 0:00 to 24:00) will be counted when calculating the average bike utilization of date D. And we only calculate the average bike utilization for the date that has been either a start or an end date of a trip. You can assume that no trip has negative time (i.e., for all trips, start time &lt;= end time).</p>
<p>Details: For the dates with the top 10 average duration, print the date and the average bike duration on that date (in seconds, round to four decimal places using the <code>ROUND()</code> function). Sort by the average duration, decreasing. <code>Please refer to the updated note before Q1 when calculating the duration of a trip.</code></p>
<p>Hint: All timestamps are stored as text after loaded from csv in sqlite. You can use <code>datetime(timestamp string)</code> to get the timestamp out of the string and <code>date(timestamp string)</code> to get the date out of the string. You may also find the funtion <code>strftime()</code> helpful in computing the duration between two timestamps.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> dates <span class="keyword">as</span> ( <span class="comment">-- list all possible date</span></span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">date</span>(start_time) <span class="keyword">as</span> tdate</span><br><span class="line">    <span class="keyword">from</span> trip</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">date</span>(end_time) <span class="keyword">as</span> tdate</span><br><span class="line">    <span class="keyword">from</span> trip)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> tdate,</span><br><span class="line">       <span class="keyword">round</span>(</span><br><span class="line">           <span class="keyword">sum</span>(strftime(<span class="string">'%s'</span>, <span class="keyword">min</span>(datetime(end_time), datetime(tdate, <span class="string">'+1 day'</span>)))</span><br><span class="line">               - strftime(<span class="string">'%s'</span>, <span class="keyword">max</span>(datetime(start_time), datetime(tdate))))</span><br><span class="line">           * <span class="number">1.0</span> / (<span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span>(bike_id)) <span class="keyword">from</span> trip <span class="keyword">where</span> bike_id &lt;= <span class="number">100</span>),</span><br><span class="line">        <span class="number">4</span>) <span class="keyword">as</span> avg_duration</span><br><span class="line"><span class="keyword">from</span> trip, dates</span><br><span class="line"><span class="keyword">where</span> bike_id &lt;= <span class="number">100</span> <span class="keyword">and</span></span><br><span class="line">      <span class="comment">-- overlap with this date</span></span><br><span class="line">      datetime(start_time, <span class="string">'-1 day'</span>) &lt; datetime(tdate) <span class="keyword">and</span></span><br><span class="line">      datetime(end_time) &gt; datetime(tdate)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> tdate</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> avg_duration <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> dates <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">date</span>(start_time) <span class="keyword">as</span> tdate</span><br><span class="line">    <span class="keyword">from</span> trip</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">date</span>(end_time) <span class="keyword">as</span> tdate</span><br><span class="line">    <span class="keyword">from</span> trip)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> tdate,</span><br><span class="line">       <span class="keyword">round</span>(</span><br><span class="line">           <span class="keyword">sum</span>(strftime(<span class="string">'%s'</span>, <span class="keyword">min</span>(datetime(end_time), datetime(tdate, <span class="string">'+1 day'</span>)))</span><br><span class="line">               - strftime(<span class="string">'%s'</span>, <span class="keyword">max</span>(datetime(start_time), datetime(tdate))))</span><br><span class="line">           * <span class="number">1.0</span> / (<span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span>(bike_id)) <span class="keyword">from</span> trip <span class="keyword">where</span> bike_id &lt;= <span class="number">100</span>),</span><br><span class="line">        <span class="number">4</span>) <span class="keyword">as</span> avg_duration</span><br><span class="line"><span class="keyword">from</span> trip, dates</span><br><span class="line"><span class="keyword">where</span> bike_id &lt;= <span class="number">100</span> <span class="keyword">and</span></span><br><span class="line">      datetime(start_time) &lt; datetime(tdate, <span class="string">'+1 day'</span>) <span class="keyword">and</span></span><br><span class="line">      datetime(end_time) &gt; datetime(tdate)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> tdate</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> avg_duration <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>首先，数据集保证了一个 invariant不变量 ： $\forall \mathrm{trip t}: \mathrm{t.start_time} &lt; \mathrm{t.end_time}$</li>
<li>另外一个常识的 不变量 也很重要： $\forall \mathrm{tdate}: \mathrm{tdate} &lt; \mathrm{tdate + 1 day}$</li>
</ul>
<p><br></p>
<p><code>strftime('%s', min(datetime(end_time), datetime(tdate, '+1 day'))) - strftime('%s', max(datetime(start_time), datetime(tdate)))</code> ： 计算的是这个trip的<strong>在特定tdate这一天中的</strong>持续时间</p>
<ul>
<li>我们为了讲解，简化这个表达式：<code>min(end_time, tdate + 1 day) - max(start_time, tdate)</code></li>
<li>我们从<strong>减数，　被减数</strong>角度分析<code>start_time</code>, <code>end_time</code>的两种情况：<ul>
<li>被减数：<ul>
<li>这个trip <code>start_time</code>在<code>tdate</code>之前：$\mathrm{start_time} &lt; \mathrm{tdate}$:　被减数取<code>tdate</code></li>
<li>或　</li>
<li>这个trip <code>start_time</code>在<code>tdate</code>之后: $\mathrm{tdate} &lt; \mathrm{start_time}$:　被减数取<code>start_time</code></li>
<li>所以被减数总是<code>max(start_time, tdate)</code></li>
</ul>
</li>
<li>减数同理(我再啰嗦一会儿)：<ul>
<li>这个trip <code>end_time</code>在<code>tdate + 1 day</code>之前：$\mathrm{end_time} &lt; \mathrm{tdate + 1 day}$:　减数取<code>end_time</code></li>
<li>或　</li>
<li>这个trip <code>end_time</code>在<code>tdate + 1 day</code>之后: $\mathrm{tdate + 1 day} &lt; \mathrm{end_time}$:　减数取<code>tdate + 1 day</code></li>
<li>所以减数总是<code>min(end_time, tdate + 1 day)</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><br></p>
<p>接下来我们看两个可以替换的表达(这题的核心)：</p>
<ul>
<li><code>datetime(start_time, '-1 day') &lt; datetime(tdate) and datetime(end_time) &gt; datetime(tdate)</code> — 来自我的解法</li>
<li><code>datetime(start_time) &lt; datetime(tdate, '+1 day') and datetime(end_time) &gt; datetime(tdate)</code> — 来自答案</li>
</ul>
<p>然后我用下图来解释<strong>来自答案</strong>的表达，即我们观察四个时间点：</p>
<ul>
<li><code>tdate</code></li>
<li><code>tdate + 1 day</code></li>
<li><code>start_time</code></li>
<li><code>end_time</code></li>
</ul>
<p><img data-src="https://cakebytheoceanluo.github.io/images/CMU1544564/num_range.jpg" alt="num_range"></p>
<ul>
<li>$\forall \mathrm{tdate}: \mathrm{tdate} &lt; \mathrm{tdate + 1 day}$</li>
<li>但是　<code>end_time</code> 和　<code>start_time</code> 的差值不固定　</li>
<li>长数轴上方的四个小数值区间，是时间域和<code>tdate</code>重叠(ovelap)的所有可能性</li>
<li>在这所有的可能性中，均满足 $\mathrm{start_time} &lt; \mathrm{tdate + 1 day} \wedge \mathrm{end_time} &gt; \mathrm{tdate}$, 即 <code>datetime(start_time) &lt; datetime(tdate, '+1 day') and datetime(end_time) &gt; datetime(tdate)</code><br>— 来自答案的表达式</li>
<li>长数轴下方的红色小数值区间是一个反例，　前面提到的条件在这里没有被满足。</li>
</ul>
<h1 id="Q6"><a href="#Q6" class="headerlink" title="Q6"></a>Q6</h1><p>One of the possible data-entry errors is to record a bike as being used in two different trips, at the same time. Thus, we want to spot pairs of overlapping intervals (start time, end time). To keep the output manageable, we ask you to do this check for bikes with <code>id between 100 and 200 (both inclusive)</code>. Note: Assume that no trip has negative time, i.e., for all trips, start time &lt;= end time.</p>
<p>Details: For each conflict (a pair of conflict trips), print the bike id, former trip id, former start time, former end time, latter trip id, latter start time, latter end time. Sort by bike id (increasing), break ties with former trip id (increasing) and then latter trip id (increasing).</p>
<p>Hint: (1) Report each conflict pair only once, so that <code>former trip id &lt; latter trip id</code>. (2) We give you the (otherwise tricky) condition for conflicts: start1 &lt; end2 AND end1 &gt; start2</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.bike_id, t1.id, t1.start_time, t1.end_time, t2.id, t2.start_time, t2.end_time</span><br><span class="line"><span class="keyword">from</span> trip t1, trip t2</span><br><span class="line"><span class="keyword">where</span> t1.start_time &lt; t2.end_time <span class="keyword">and</span></span><br><span class="line">      t1.end_time &gt; t2.start_time <span class="keyword">and</span></span><br><span class="line">      t1.id &lt; t2.id <span class="keyword">and</span></span><br><span class="line">      t1.bike_id <span class="keyword">between</span> <span class="number">100</span> <span class="keyword">and</span> <span class="number">200</span> <span class="keyword">and</span></span><br><span class="line">      t1.bike_id = t2.bike_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t1.bike_id <span class="keyword">asc</span>, t1.id <span class="keyword">asc</span>, t2.id <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.bike_id, t1.id, t1.start_time, t1.end_time, t2.id, t2.start_time, t2.end_time </span><br><span class="line"><span class="keyword">from</span> trip <span class="keyword">as</span> t1, trip <span class="keyword">as</span> t2 </span><br><span class="line"><span class="keyword">where</span> t1.bike_id = t2.bike_id <span class="keyword">and</span> </span><br><span class="line">      t1.bike_id <span class="keyword">between</span> <span class="number">100</span> <span class="keyword">and</span> <span class="number">200</span> <span class="keyword">and</span> </span><br><span class="line">      t1.id &lt; t2.id <span class="keyword">and</span> t1.start_time &lt; t2.end_time <span class="keyword">and</span> </span><br><span class="line">      t2.start_time &lt; t1.end_time </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t1.bike_id <span class="keyword">asc</span>, t1.id <span class="keyword">asc</span>, t2.id <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q7"><a href="#Q7" class="headerlink" title="Q7"></a>Q7</h1><p>Find all the bikes that have been to more than one city. A bike has been to a city as long as the start station or end station in one of its trips is in that city.</p>
<p>Details: For each bike that has been to more than one city, print the bike id and the number of cities it has been to. Sort by the number of cities (decreasing), then bike id (increasing).</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> trip2cities (bike_id, city1, city2)<span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> t.bike_id, s1.city, s2.city</span><br><span class="line">    <span class="keyword">from</span> trip t, station s1, station s2</span><br><span class="line">    <span class="keyword">where</span> t.start_station_id = s1.station_id <span class="keyword">and</span></span><br><span class="line">          t.end_station_id = s2.station_id),</span><br><span class="line">     tripCity (bike_id, city) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> bike_id, city1</span><br><span class="line">    <span class="keyword">from</span> trip2cities</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> bike_id, city2</span><br><span class="line">    <span class="keyword">from</span> trip2cities</span><br><span class="line">     )</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> bike_id, <span class="keyword">count</span>(<span class="keyword">distinct</span> city) <span class="keyword">as</span> num_city</span><br><span class="line"><span class="keyword">from</span> tripCity</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> bike_id</span><br><span class="line"><span class="keyword">having</span> num_city &gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num_city <span class="keyword">desc</span>, bike_id <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> bike_id, <span class="keyword">count</span>(<span class="keyword">distinct</span>(city)) <span class="keyword">as</span> cnt </span><br><span class="line"><span class="keyword">from</span> trip, station </span><br><span class="line"><span class="keyword">where</span> start_station_id = station_id <span class="keyword">or</span> </span><br><span class="line">      end_station_id = station_id </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> bike_id </span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(<span class="keyword">distinct</span>(city)) &gt; <span class="number">1</span> </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> cnt <span class="keyword">desc</span>, bike_id <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>这次的答案总是用一个<code>or</code>来混合所有的start和end</li>
<li>我总是用<code>union all</code>或<code>union</code>, 我的目的是努力生成数量最小的中间结果，来加速SQL查询</li>
<li>绝大多数情况，我的解法比答案要快。(比如这一题)</li>
</ul>
<h1 id="Q8"><a href="#Q8" class="headerlink" title="Q8"></a>Q8</h1><p>Find what is the average number of trips made per day on each type of weather day. The type of weather on a day is specified by weather.events, such as ‘Rain’, ‘Fog’ and so on. For simplicity, we consider all days that does not have a weather event (<code>weather.events = '\N'</code>) as a single type of weather. Here a trip belongs to a date only if its start time is on that date. We use the weather at the starting position of that trip as its weather type as well. There are also ‘Rain’ and ‘rain’ in weather.events. For simplicity, we consider them as different types of weathers. When counting the total number of days for a weather, we consider a weather happened on a date as long as it happened in at least one region on that date.</p>
<p>Details: Print the name of the weather and the average number of trips made per day on that type of weather (round to <code>four</code> decimal places using <code>ROUND()</code>). Sort by the average number of trips (decreasing), then weather name (increasing).</p>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> weather_days(<span class="keyword">events</span>, cnt) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> w.events, <span class="keyword">count</span>(<span class="keyword">distinct</span> w.date) <span class="keyword">as</span> cnt </span><br><span class="line">    <span class="keyword">from</span> weather w </span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> w.events</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> w.events, <span class="keyword">round</span>(<span class="keyword">cast</span>(<span class="keyword">count</span>(<span class="keyword">distinct</span> t.id) <span class="keyword">as</span> <span class="built_in">float</span>)/<span class="keyword">cast</span>(wd.cnt <span class="keyword">as</span> <span class="built_in">float</span>), <span class="number">4</span>) <span class="keyword">as</span> <span class="keyword">avg</span> </span><br><span class="line"><span class="keyword">from</span> trip t, station s, weather w, weather_days wd</span><br><span class="line"><span class="keyword">where</span> t.start_station_id = s.station_id <span class="keyword">and</span> s.zip_code = w.zip_code <span class="keyword">and</span> <span class="built_in">date</span>(t.start_time) = w.date <span class="keyword">and</span> w.events = wd.events</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> w.events</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">avg</span> <span class="keyword">desc</span>, w.events <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>(我看完答案才理解这题的意思: When counting the total number of days for a weather, we consider a weather happened on a date as long as it happened in at least one region on that date.)</p>
<h1 id="Q9"><a href="#Q9" class="headerlink" title="Q9"></a>Q9</h1><p>A short trip is a trip whose duration is <code>&lt;= 60 seconds</code>. Compute the average temperature that a short trip starts versus the average temperature that a non-short trip starts. We use weather.mean_temp on the date of the start time as the Temperature measurement.</p>
<p>Details: Print the average temperature that a short trip starts and the average temperature that a non-short trip starts. (on the same row, and both round to <code>four</code> decimal places using <code>ROUND()</code>) <code>Please refer to the updated note before Q1 when calculating the duration of a trip.</code></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> shortT <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">avg</span>(w.mean_temp) <span class="keyword">as</span> <span class="keyword">avg</span></span><br><span class="line">    <span class="keyword">from</span> trip t, station s, weather w</span><br><span class="line">    <span class="keyword">where</span> <span class="built_in">date</span>(t.start_time) = w.date <span class="keyword">and</span></span><br><span class="line">          strftime(<span class="string">'%s'</span>, end_time) - strftime(<span class="string">'%s'</span>, start_time) &lt;= <span class="number">60</span> <span class="keyword">and</span></span><br><span class="line">          t.start_station_id = s.station_id <span class="keyword">and</span></span><br><span class="line">          s.zip_code = w.zip_code),</span><br><span class="line">     non_shortT <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">avg</span>(w.mean_temp) <span class="keyword">as</span> <span class="keyword">avg</span></span><br><span class="line">    <span class="keyword">from</span> trip t, station s, weather w</span><br><span class="line">    <span class="keyword">where</span> <span class="built_in">date</span>(t.start_time) = w.date <span class="keyword">and</span></span><br><span class="line">          strftime(<span class="string">'%s'</span>, end_time) - strftime(<span class="string">'%s'</span>, start_time) &gt; <span class="number">60</span> <span class="keyword">and</span></span><br><span class="line">          t.start_station_id = s.station_id <span class="keyword">and</span></span><br><span class="line">          s.zip_code = w.zip_code</span><br><span class="line">     )</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">ROUND</span>(s.avg, <span class="number">4</span>), <span class="keyword">ROUND</span>(ns.avg, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">from</span> shortT s, non_shortT ns;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">round</span>(x.avg, <span class="number">4</span>), <span class="keyword">round</span>(y.avg, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">avg</span>(mean_temp) <span class="keyword">as</span> <span class="keyword">avg</span></span><br><span class="line">    <span class="keyword">from</span> weather, station, trip</span><br><span class="line">    <span class="keyword">where</span> <span class="built_in">date</span>(start_time) = <span class="built_in">date</span> <span class="keyword">and</span></span><br><span class="line">          strftime(<span class="string">'%s'</span>, end_time) - strftime(<span class="string">'%s'</span>, start_time) &lt;= <span class="number">60</span> <span class="keyword">and</span></span><br><span class="line">          start_station_id = station_id <span class="keyword">and</span></span><br><span class="line">          station.zip_code = weather.zip_code) <span class="keyword">as</span> x,</span><br><span class="line">     (<span class="keyword">select</span> <span class="keyword">avg</span>(mean_temp) <span class="keyword">as</span> <span class="keyword">avg</span></span><br><span class="line">     <span class="keyword">from</span> weather, station, trip</span><br><span class="line">     <span class="keyword">where</span> <span class="built_in">date</span>(start_time) = <span class="built_in">date</span> <span class="keyword">and</span></span><br><span class="line">           strftime(<span class="string">'%s'</span>, end_time) - strftime(<span class="string">'%s'</span>, start_time) &gt; <span class="number">60</span> <span class="keyword">and</span></span><br><span class="line">           start_station_id = station_id <span class="keyword">and</span> station.zip_code = weather.zip_code) <span class="keyword">as</span> y;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q10"><a href="#Q10" class="headerlink" title="Q10"></a>Q10</h1><p>For each zip code that has experienced ‘Rain-Thunderstorm’ weather, find the station that has the most number of trips in that zip code under the storm weather. For simplicity, we only consider the start time of a trip when deciding the station and the weather for that trip.</p>
<p>Details: Print the zip code that has experienced the ‘Rain-Thunderstorm’ weather, the name of the station that has the most number of trips under the strom weather in that zip code, and the total number of trips that station has under the storm weather. Sort by the zip code (increasing). You do not need to print the zip code that has experienced ‘Rain-Thunderstorm’ weather but no trip happens on any storm day in that zip code.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.zip_code, s.station_name, <span class="keyword">count</span>(<span class="keyword">distinct</span> t.id) <span class="keyword">as</span> num_trips</span><br><span class="line"><span class="keyword">from</span> weather w, station s, trip t</span><br><span class="line"><span class="keyword">where</span> w.events = <span class="string">'Rain-Thunderstorm'</span> <span class="keyword">and</span></span><br><span class="line">      w.date = <span class="built_in">date</span>(t.start_time) <span class="keyword">and</span></span><br><span class="line">      s.station_id = t.start_station_id <span class="keyword">and</span></span><br><span class="line">      s.zip_code = w.zip_code</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.zip_code, s.station_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num_trips <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> storm_count(zip_code, station_id, station_name, cnt) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> station.zip_code, station_id, station_name, <span class="keyword">count</span>(*)</span><br><span class="line">    <span class="keyword">from</span> weather, station, trip</span><br><span class="line">    <span class="keyword">where</span> <span class="built_in">date</span>(start_time) = <span class="built_in">date</span> <span class="keyword">and</span></span><br><span class="line">          <span class="keyword">events</span> = <span class="string">'Rain-Thunderstorm'</span> <span class="keyword">and</span></span><br><span class="line">          start_station_id = station_id <span class="keyword">and</span></span><br><span class="line">          station.zip_code = weather.zip_code</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> station.zip_code, station_id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> zip_code, station_name, cnt</span><br><span class="line"><span class="keyword">from</span> storm_count</span><br><span class="line"><span class="keyword">where</span> cnt = (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">max</span>(max_count.cnt)</span><br><span class="line">    <span class="keyword">from</span> storm_count <span class="keyword">as</span> max_count</span><br><span class="line">    <span class="keyword">where</span> max_count.zip_code = storm_count.zip_code)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> zip_code <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>(我觉得答案过于复杂了，没有必要生成所有的中间结果，再最后和max join)</p>
<p><br><br><br></p>
<p>这次最难的题，肯定是第五题！</p>
<p>这里有别人的答案，也可以借鉴：　<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mNjg4ZjBhNGVhZjk=" title="https://www.jianshu.com/p/f688f0a4eaf9">https://www.jianshu.com/p/f688f0a4eaf9<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CMU-15445</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>SQLite</tag>
      </tags>
  </entry>
  <entry>
    <title>[CMU-15445]HomeWork1_19Fall</title>
    <url>/2020/03/07/CMU-15445-HomeWork1-19Fall/</url>
    <content><![CDATA[<p>2019 Fall: HOMEWORK #1 - SQL</p>
<p>Homework: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvaG9tZXdvcmsxLw==" title="https://15445.courses.cs.cmu.edu/fall2019/homework1/">https://15445.courses.cs.cmu.edu/fall2019/homework1/<i class="fa fa-external-link"></i></span><br>Solution: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvZmlsZXMvaHcxLXNvbHMudGFyLmd6" title="https://15445.courses.cs.cmu.edu/fall2019/files/hw1-sols.tar.gz">https://15445.courses.cs.cmu.edu/fall2019/files/hw1-sols.tar.gz<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>
<p>CMU推荐使用 SQLite: <span class="exturl" data-url="aHR0cHM6Ly93d3cuc3FsaXRlLm9yZy9pbmRleC5odG1s" title="https://www.sqlite.org/index.html">https://www.sqlite.org/index.html<i class="fa fa-external-link"></i></span></p>
<p>已检查过我的解法和答案生成的结果一样。</p>
<!-- TODO: link 文章 SQLITE 安装 和SQLITE数据集 -->
<h1 id="熟悉数据集"><a href="#熟悉数据集" class="headerlink" title="熟悉数据集"></a>熟悉数据集</h1><p><span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvaG9tZXdvcmsxLw==" title="https://15445.courses.cs.cmu.edu/fall2019/homework1/">https://15445.courses.cs.cmu.edu/fall2019/homework1/<i class="fa fa-external-link"></i></span>  -&gt; CHECK THE SCHEMA</p>
<h1 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h1><p>The purpose of this query is to make sure that the formatting of your output matches exactly the formatting of our auto-grading script.</p>
<p>Details: List all distinct types of titles ordered by type.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span>(<span class="keyword">type</span>) </span><br><span class="line"><span class="keyword">from</span> titles </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">type</span>;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h1><p>List the longest title of each type along with the runtime minutes.</p>
<p>Details: Find the titles which are the longest by runtime minutes. There might be cases where there is a tie for the longest titles - in that case return all of them. Display the types, primary titles and runtime minutes, and order it according to type (ascending) and use primary titles (ascending) as tie-breaker.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> longestINtype <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">max</span>(runtime_minutes) <span class="keyword">as</span> <span class="keyword">max</span>, <span class="keyword">type</span></span><br><span class="line">    <span class="keyword">from</span> titles</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">type</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> t.type, t.primary_title, t.runtime_minutes</span><br><span class="line"><span class="keyword">from</span> titles t, longestINtype l</span><br><span class="line"><span class="keyword">where</span> t.runtime_minutes = l.max <span class="keyword">and</span> t.type = l.type</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t.type <span class="keyword">asc</span>, t.primary_title <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> types(<span class="keyword">type</span>, runtime_minutes) <span class="keyword">AS</span> ( </span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">type</span>, <span class="keyword">MAX</span>(runtime_minutes)</span><br><span class="line">    <span class="keyword">FROM</span> titles</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">type</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> titles.type, titles.primary_title, titles.runtime_minutes</span><br><span class="line"><span class="keyword">FROM</span> titles</span><br><span class="line"><span class="keyword">JOIN</span> types</span><br><span class="line"><span class="keyword">ON</span> titles.runtime_minutes == types.runtime_minutes <span class="keyword">AND</span> titles.type == types.type</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> titles.type, titles.primary_title;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h1><p>List all types of titles along with the number of associated titles.<br>Details: Print type and number of associated titles. For example, <code>tvShort|4075</code>. Sort by number of titles in ascending order.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">type</span>, <span class="keyword">count</span>(*) <span class="keyword">as</span> counter</span><br><span class="line"><span class="keyword">from</span> titles</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">type</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> counter <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">type</span>, <span class="keyword">count</span>(*) <span class="keyword">AS</span> title_count <span class="keyword">FROM</span> titles <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">type</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> title_count <span class="keyword">ASC</span>;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q4"><a href="#Q4" class="headerlink" title="Q4"></a>Q4</h1><p>Which decades saw the most number of titles getting premiered? List the number of titles in every decade. Like <code>2010s|2789741</code>.</p>
<p>Details: Print all decades and the number of titles. Print the relevant decade in a fancier format by constructing a string that looks like this: <code>2010s</code>. Sort the decades in decreasing order with respect to the number of titles. Remember to exclude titles which have not been premiered (i.e. where <code>premiered</code> is <code>NULL</code>)</p>
<p>PS: Add this to your watchlist: <span class="exturl" data-url="aHR0cHM6Ly93d3cuaW1kYi5jb20vdGl0bGUvdHQ1MTc0NjQwLw==" title="https://www.imdb.com/title/tt5174640/">100 Years (2115)<i class="fa fa-external-link"></i></span></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> premieredASchar (title_id, pre) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> title_id, <span class="keyword">cast</span>(premiered <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">4</span>))</span><br><span class="line">    <span class="keyword">from</span> titles</span><br><span class="line">    <span class="keyword">where</span> premiered <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">    ),</span><br><span class="line">     premieredDecades (title_id, decade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> title_id, <span class="keyword">substr</span>(pre, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">from</span> premieredASchar</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> decade || <span class="string">'0s'</span> <span class="keyword">as</span> decade, <span class="keyword">count</span>(<span class="keyword">distinct</span> title_id) <span class="keyword">as</span> num_mov</span><br><span class="line"><span class="keyword">from</span> premieredDecades</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> decade</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num_mov <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>我的思路：<ul>
<li>将不是<code>NULL</code>的<code>premiered</code>视作一个固定长度为4的<code>CHAR</code></li>
<li>将这个<code>CHAR</code>的最后一个字符抹去</li>
<li>然后同一个decade的tuple会被 <code>GROUP BY</code> 进一个组 (例如<code>2015</code> -&gt; <code>201</code>, 这个<code>201</code>就是我们的Hash Key/Hash Bucket)</li>
<li>Hash Function: $f(char[0:3]) = char[0:2]$</li>
</ul>
</li>
</ul>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CAST</span>(premiered/<span class="number">10</span>*<span class="number">10</span> <span class="keyword">AS</span> <span class="built_in">TEXT</span>) || <span class="string">'s'</span> <span class="keyword">AS</span> decade,</span><br><span class="line"><span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_movies</span><br><span class="line"><span class="keyword">FROM</span> titles</span><br><span class="line"><span class="keyword">WHERE</span> premiered <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> decade</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> num_movies <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>答案思路类似，只是将<code>premiered</code>做<code>INTEGER</code>做数值运算</li>
</ul>
<h1 id="Q5"><a href="#Q5" class="headerlink" title="Q5"></a>Q5</h1><p>List the decades and the percentage of titles which premiered in the corresponding decade. Display like : <code>2010s|45.7042</code></p>
<p>Details: The percentage of titles for a decade is the number of titles which premiered that decade divided by the total number of titles. For the total number of titles, count all titles including ones that have not been premiered. Round the percentage to four decimal places using <code>ROUND()</code>.</p>
<p>(这题完全基于Q4)</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> premieredASchar (title_id, pre) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> title_id, <span class="keyword">cast</span>(premiered <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">4</span>))</span><br><span class="line">    <span class="keyword">from</span> titles</span><br><span class="line">    <span class="keyword">where</span> premiered <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">    ),</span><br><span class="line">     premieredDecades (title_id, decade) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> title_id, <span class="keyword">substr</span>(pre, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">from</span> premieredASchar</span><br><span class="line">    ),</span><br><span class="line">     num_title (<span class="keyword">num</span>) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*)</span><br><span class="line">    <span class="keyword">from</span> titles</span><br><span class="line">     )</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> p.decade || <span class="string">'0s'</span> <span class="keyword">as</span> decade,</span><br><span class="line">       <span class="keyword">ROUND</span>(<span class="number">100.0</span> * <span class="keyword">count</span>(<span class="keyword">distinct</span> p.title_id) / n.num, <span class="number">4</span>) <span class="keyword">as</span> percentage</span><br><span class="line"><span class="keyword">from</span> premieredDecades p, num_title n</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> p.decade</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> percentage <span class="keyword">desc</span>, p.decade <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CAST</span>(premiered/<span class="number">10</span>*<span class="number">10</span> <span class="keyword">AS</span> <span class="built_in">TEXT</span>) || <span class="string">'s'</span> <span class="keyword">AS</span> decade,</span><br><span class="line"><span class="keyword">ROUND</span>(<span class="keyword">CAST</span>(<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="built_in">REAL</span>) / (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> titles) * <span class="number">100.0</span>, <span class="number">4</span>) <span class="keyword">as</span> percentage</span><br><span class="line"><span class="keyword">FROM</span> titles</span><br><span class="line"><span class="keyword">WHERE</span> premiered <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> decade</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> percentage <span class="keyword">DESC</span>, decade <span class="keyword">ASC</span>;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q6"><a href="#Q6" class="headerlink" title="Q6"></a>Q6</h1><p>List the top 10 dubbed titles with the number of dubs.</p>
<p>Details: Count the number of titles in <code>akas</code> for each title in the <code>titles</code> table, and list only the top ten. Print the primary title and the number of corresponding dubbed movies.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> t.primary_title, <span class="keyword">count</span>(a.title) <span class="keyword">as</span> num_dubs</span><br><span class="line"><span class="keyword">from</span> akas a, titles t</span><br><span class="line"><span class="keyword">where</span> a.title_id = t.title_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t.title_id, t.primary_title</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num_dubs <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> translations <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> title_id, <span class="keyword">count</span>(*) <span class="keyword">as</span> num_translations</span><br><span class="line">    <span class="keyword">FROM</span> akas</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> title_id</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> num_translations <span class="keyword">DESC</span>, title_id</span><br><span class="line">    <span class="keyword">LIMIT</span> <span class="number">10</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> titles.primary_title, translations.num_translations</span><br><span class="line"><span class="keyword">FROM</span> translations</span><br><span class="line"><span class="keyword">JOIN</span> titles</span><br><span class="line"><span class="keyword">ON</span> titles.title_id == translations.title_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> translations.num_translations <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q7"><a href="#Q7" class="headerlink" title="Q7"></a>Q7</h1><p>List the IMDB Top 250 movies along with its weighted rating.</p>
<p>Details: The weighted rating of a movie is calculated according to the following formula:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Weighted rating (WR) = (v/(v+m)) * R + (m/(v+m)) * C</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>R = average rating for the movie (mean), i.e. ratings.rating</li>
<li>v = number of votes for the movie, i.e. ratings.votes</li>
<li>m = minimum votes required to be listed in the Top 250 (current 25000)</li>
<li>C = weighted average rating of all movies</li>
</ul>
<p>Print the movie name along with its weighted rating. For example: <code>The Shawshank Redemption|9.27408375213064</code>.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> C (val) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">sum</span>(r.rating * r.votes) / <span class="keyword">sum</span>(votes)</span><br><span class="line">    <span class="keyword">from</span> ratings r, titles t</span><br><span class="line">    <span class="keyword">where</span> t.title_id = r.title_id <span class="keyword">and</span> t.type = <span class="string">'movie'</span></span><br><span class="line">), WR (primary_title, val) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> t.primary_title,</span><br><span class="line">           (r.votes / (r.votes + <span class="number">25000.0</span>)) * r.rating + (<span class="number">25000.0</span> / (r.votes + <span class="number">25000.0</span>)) * c.val</span><br><span class="line">    <span class="keyword">from</span> ratings r, titles t, c</span><br><span class="line">    <span class="keyword">where</span> t.title_id = r.title_id <span class="keyword">and</span> t.type = <span class="string">'movie'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> WR</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> val <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">250</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">  av(average_rating) <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">SUM</span>(rating * votes) / <span class="keyword">SUM</span>(votes)</span><br><span class="line">      <span class="keyword">FROM</span> ratings</span><br><span class="line">      <span class="keyword">JOIN</span> titles</span><br><span class="line">      <span class="keyword">ON</span> titles.title_id == ratings.title_id <span class="keyword">AND</span> titles.type == <span class="string">"movie"</span></span><br><span class="line">  ),</span><br><span class="line">  mn(min_rating) <span class="keyword">AS</span> (<span class="keyword">SELECT</span> <span class="number">25000.0</span>)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">primary_title,</span><br><span class="line">(votes / (votes + min_rating)) * rating + (min_rating / (votes + min_rating)) * average_rating <span class="keyword">as</span> weighed_rating</span><br><span class="line"><span class="keyword">FROM</span> ratings, av, mn</span><br><span class="line"><span class="keyword">JOIN</span> titles</span><br><span class="line"><span class="keyword">ON</span> titles.title_id == ratings.title_id <span class="keyword">and</span> titles.type == <span class="string">"movie"</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> weighed_rating <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">250</span>;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q8"><a href="#Q8" class="headerlink" title="Q8"></a>Q8</h1><p>List the number of actors / actresses who have appeared in any title with Mark Hamill (born in 1951).</p>
<p>Details: Print only the total number of actors and actresses. The answer should include Mark Hamill himself.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> c.person_id)</span><br><span class="line"><span class="keyword">from</span> people mh, crew c_mh, crew c</span><br><span class="line"><span class="keyword">where</span> mh.name = <span class="string">'Mark Hamill'</span> <span class="keyword">and</span> mh.born = <span class="number">1951</span> <span class="keyword">and</span></span><br><span class="line">      mh.person_id = c_mh.person_id <span class="keyword">and</span></span><br><span class="line">      c_mh.title_id = c.title_id <span class="keyword">and</span></span><br><span class="line">      (c.category = <span class="string">'actor'</span> <span class="keyword">or</span> c.category = <span class="string">'actress'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> hamill_titles <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(crew.title_id)</span><br><span class="line">    <span class="keyword">FROM</span> people</span><br><span class="line">    <span class="keyword">JOIN</span> crew</span><br><span class="line">    <span class="keyword">ON</span> crew.person_id == people.person_id <span class="keyword">AND</span> people.name == <span class="string">"Mark Hamill"</span> <span class="keyword">AND</span> people.born == <span class="number">1951</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span>(crew.person_id))</span><br><span class="line"><span class="keyword">FROM</span> crew</span><br><span class="line"><span class="keyword">WHERE</span> (crew.category == <span class="string">"actor"</span> <span class="keyword">OR</span> crew.category == <span class="string">"actress"</span>) <span class="keyword">AND</span> crew.title_id <span class="keyword">in</span> hamill_titles;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Q9"><a href="#Q9" class="headerlink" title="Q9"></a>Q9</h1><p>List the number of actors / actresses who have appeared in any title with Mark Hamill (born in 1951).</p>
<p>Details: Print only the total number of actors and actresses. The answer should include Mark Hamill himself.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> t.primary_title</span><br><span class="line"><span class="keyword">from</span> people mh, crew c_mh, people gl, crew c_gl, titles t</span><br><span class="line"><span class="keyword">where</span> mh.name = <span class="string">'Mark Hamill'</span> <span class="keyword">and</span> mh.born = <span class="number">1951</span> <span class="keyword">and</span> mh.person_id = c_mh.person_id <span class="keyword">and</span></span><br><span class="line">      gl.name = <span class="string">'George Lucas'</span> <span class="keyword">and</span> gl.born = <span class="number">1944</span> <span class="keyword">and</span> gl.person_id = c_gl.person_id <span class="keyword">and</span></span><br><span class="line">      c_mh.title_id = t.title_id <span class="keyword">and</span></span><br><span class="line">      c_gl.title_id = t.title_id <span class="keyword">and</span></span><br><span class="line">      t.type = <span class="string">'movie'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t.primary_title <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> hamill_movies(title_id) <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> crew.title_id</span><br><span class="line">    <span class="keyword">FROM</span> crew</span><br><span class="line">    <span class="keyword">JOIN</span> people</span><br><span class="line">    <span class="keyword">ON</span> crew.person_id == people.person_id <span class="keyword">AND</span> people.name == <span class="string">"Mark Hamill"</span> <span class="keyword">AND</span> people.born == <span class="number">1951</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> titles.primary_title</span><br><span class="line"><span class="keyword">FROM</span> crew</span><br><span class="line"><span class="keyword">JOIN</span> people</span><br><span class="line"><span class="keyword">ON</span> crew.person_id == people.person_id <span class="keyword">AND</span> people.name == <span class="string">"George Lucas"</span> <span class="keyword">AND</span> people.born == <span class="number">1944</span> <span class="keyword">AND</span> crew.title_id <span class="keyword">IN</span> hamill_movies</span><br><span class="line"><span class="keyword">JOIN</span> titles</span><br><span class="line"><span class="keyword">ON</span> crew.title_id == titles.title_id <span class="keyword">AND</span> titles.type == <span class="string">"movie"</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> titles.primary_title;</span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="https://upload.wikimedia.org/wikipedia/en/3/3c/SW_-_Empire_Strikes_Back.jpg" alt="The Empire Strikes Back"><br>— <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVGhlX0VtcGlyZV9TdHJpa2VzX0JhY2sjL21lZGlhL0ZpbGU6U1dfLV9FbXBpcmVfU3RyaWtlc19CYWNrLmpwZw==" title="https://en.wikipedia.org/wiki/The_Empire_Strikes_Back#/media/File:SW_-_Empire_Strikes_Back.jpg">https://en.wikipedia.org/wiki/The_Empire_Strikes_Back#/media/File:SW_-_Empire_Strikes_Back.jpg<i class="fa fa-external-link"></i></span></p>
<h1 id="Q10"><a href="#Q10" class="headerlink" title="Q10"></a>Q10</h1><p>List all distinct genres and the number of titles associated with them.</p>
<p>Details: The <code>titles</code> table contains the titles with their genres. Each title is associated with zero or more genres stored in the <code>genres</code> column as comma-separated values (like “Documentary,Short”). Count the number of titles associated with each genre, and list the genres and the counts, and order it according to the counts (greatest to least). Don’t forget to filter empty genres (where <code>genres</code> is blank).</p>
<p>Hint: You might find <span class="exturl" data-url="aHR0cHM6Ly9zcWxpdGUub3JnL2xhbmdfd2l0aC5odG1s" title="https://sqlite.org/lang_with.html">CTEs<i class="fa fa-external-link"></i></span> useful.</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> genres <span class="keyword">as</span>(</span><br><span class="line">    <span class="keyword">select</span> genres <span class="keyword">as</span> g</span><br><span class="line">    <span class="keyword">from</span> titles</span><br><span class="line">    <span class="keyword">where</span> genres != <span class="string">'\N'</span></span><br><span class="line">    ),</span><br><span class="line">     <span class="keyword">split</span>(word, <span class="keyword">str</span>) <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="string">''</span>, g || <span class="string">','</span></span><br><span class="line">    <span class="keyword">from</span> genres</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="keyword">substr</span>(<span class="keyword">str</span>, <span class="number">0</span>, <span class="keyword">instr</span>(<span class="keyword">str</span>, <span class="string">','</span>)),</span><br><span class="line">        <span class="keyword">substr</span>(<span class="keyword">str</span>, <span class="keyword">instr</span>(<span class="keyword">str</span>, <span class="string">','</span>) + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">from</span> <span class="keyword">split</span></span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">str</span> != <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> word, <span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="keyword">count</span></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">split</span></span><br><span class="line"><span class="keyword">where</span> word != <span class="string">''</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> word</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span> <span class="keyword">desc</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>答案：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> <span class="keyword">split</span>(genre, rest) <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="string">''</span>, genres || <span class="string">','</span> <span class="keyword">FROM</span> titles <span class="keyword">WHERE</span> genres != <span class="string">"\N"</span></span><br><span class="line">   <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">substr</span>(rest, <span class="number">0</span>, <span class="keyword">instr</span>(rest, <span class="string">','</span>)),</span><br><span class="line">         <span class="keyword">substr</span>(rest, <span class="keyword">instr</span>(rest, <span class="string">','</span>)+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">FROM</span> <span class="keyword">split</span></span><br><span class="line">   <span class="keyword">WHERE</span> rest != <span class="string">''</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> genre, <span class="keyword">count</span>(*) <span class="keyword">as</span> genre_count</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">split</span> </span><br><span class="line"><span class="keyword">WHERE</span> genre != <span class="string">''</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> genre</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> genre_count <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>这个最后一题花了我半个小时，因为SQLite 没有<code>string split</code>类型的库函数，我参考了：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjQyNTg4NzgvaG93LXRvLXNwbGl0LWNvbW1hLXNlcGFyYXRlZC12YWx1ZS1pbi1zcWxpdGU=" title="https://stackoverflow.com/questions/24258878/how-to-split-comma-separated-value-in-sqlite">https://stackoverflow.com/questions/24258878/how-to-split-comma-separated-value-in-sqlite<i class="fa fa-external-link"></i></span></p>
<p>我很怀疑答案也参考这个页面，因为结构完全类似 <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span></p>
<p>另外实名diss这个表格不符合 <code>1NF: 第一范式</code>： <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JTk1JUIwJUU2JThEJUFFJUU1JUJBJTkzJUU4JUE3JTg0JUU4JThDJTgzJUU1JThDJTk2" title="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83%E5%8C%96">https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83%E5%8C%96<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CMU-15445</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>SQLite</tag>
      </tags>
  </entry>
  <entry>
    <title>[CMU-15445]Lec02_part2 Advanced SQL - 高级SQL</title>
    <url>/2020/03/06/CMU-15445-Lec02-part2/</url>
    <content><![CDATA[<p>Advanced SQL 高级SQL</p>
<p>Slide: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzAyLWFkdmFuY2Vkc3FsLnBkZg==" title="https://15445.courses.cs.cmu.edu/fall2019/slides/02-advancedsql.pdf">https://15445.courses.cs.cmu.edu/fall2019/slides/02-advancedsql.pdf<i class="fa fa-external-link"></i></span><br>Note: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDItYWR2YW5jZWRzcWwucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/02-advancedsql.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/02-advancedsql.pdf<i class="fa fa-external-link"></i></span><br>Reading: Chapters 3-5</p>
<p>这节课，我们会了解高级的SQL句法。(但是实际上这门课对SQL的要求很低，大量其他的SQL练习依旧可以在我的博客中找到)</p>
<p>如果大家的目的是为了学习SQL，我建议使用PostgreSQL，它出自于学术界，整体行为相对MySQL和SQLite更合理。另外TUM和CMU在SQL教学上都采用PostgreSQL。</p>
<p>我将这次笔记分成前后两个部分，这是第二部分。</p>
<!-- 对应的练习　TODO:我的博客 -->
<a id="more"></a>
<h1 id="OUTPUT-REDIRECTION"><a href="#OUTPUT-REDIRECTION" class="headerlink" title="OUTPUT REDIRECTION"></a>OUTPUT REDIRECTION</h1><p><img data-src="/images/CMU1544564/Lec02/29.jpg" alt="29.jpg"></p>
<ul>
<li><code>INTO</code> 相当于 <code>create table</code> on the fly (指该SQL查询执行的过程中)</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec02/30.jpg" alt="30.jpg"></p>
<p><br></p>
<h1 id="OUTPUT-CONTROL"><a href="#OUTPUT-CONTROL" class="headerlink" title="OUTPUT CONTROL"></a>OUTPUT CONTROL</h1><h2 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a><code>ORDER BY</code></h2><p><img data-src="/images/CMU1544564/Lec02/32.jpg" alt="32.jpg"></p>
<h2 id="LIMIT-OFFSET"><a href="#LIMIT-OFFSET" class="headerlink" title="LIMIT OFFSET"></a><code>LIMIT</code> <code>OFFSET</code></h2><p><img data-src="/images/CMU1544564/Lec02/34.jpg" alt="34.jpg"></p>
<ul>
<li><code>LIMIT 10</code>: 得到前$[1, 10]$个tuple</li>
<li><code>LIMIT 20 OFFSET 10</code>: 得到前$[10 + 1, 10 + 20]$个tuple, 即前$[11, 30]$个tuple, 共20个tuple。</li>
</ul>
<p>这里需要注意：<code>LIMIT</code>能保证给出对应的tuple数量，但是不能保证运行<strong>同一条</strong>带<code>LIMIT</code>而不带<code>ORDER BY</code>的SQL多次，总能得到同样的结果。</p>
<p><strong>注意<code>LIMIT</code>并不是SQL Standard，但是有SQL Standard的等价语句去做同一件事情。<code>LIMIT</code>也被大部分DBMSs所采用。</strong></p>
<!-- TODO: -->
<p><br></p>
<h1 id="NESTED-QUERIES"><a href="#NESTED-QUERIES" class="headerlink" title="NESTED QUERIES"></a>NESTED QUERIES</h1><p>我在我的博客中所有 <a href="https://cakebytheoceanluo.github.io/categories/SQL/">中级SQL</a> 的文章都和Nested Query有关，你可以获得大量的练习。</p>
<p><img data-src="/images/CMU1544564/Lec02/35.jpg" alt="35.jpg"></p>
<h2 id="例子：-Get-the-names-of-students-in-‘15-445’"><a href="#例子：-Get-the-names-of-students-in-‘15-445’" class="headerlink" title="例子： Get the names of students in ‘15-445’"></a>例子： Get the names of students in ‘15-445’</h2><p><img data-src="/images/CMU1544564/Lec02/36.jpg" alt="36.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/37.jpg" alt="37.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/39.jpg" alt="39.jpg"></p>
<p>我们一步一步地用Nested Query完成了这个例子。</p>
<p>实际上它会被处理成一个Join: </p>
<ul>
<li>Outer Query有<code>sid</code>这个字段, 传递给Inner Query</li>
<li>Inner Query接受Outer Query的<code>sid</code>字段，然后在<code>enrolled</code>这个表格里面检查。</li>
<li>很显然，我们发现Outer Query 和 Inner Query有着某种依赖，我们称这样的为 Dependent Join.</li>
<li>数据库如何高效处理这种　Dependent Join：　见一篇论文解读　<a href="https://cakebytheoceanluo.github.io/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/">[Paper]BTW 2015 | Unnesting Arbitrary Queries</a></li>
</ul>
<h3 id="ALL-ANY-IN-EXISTS"><a href="#ALL-ANY-IN-EXISTS" class="headerlink" title="ALL, ANY, IN, EXISTS"></a><code>ALL</code>, <code>ANY</code>, <code>IN</code>, <code>EXISTS</code></h3><p><img data-src="/images/CMU1544564/Lec02/40.jpg" alt="40.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/41.jpg" alt="41.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/42.jpg" alt="42.jpg"></p>
<p><br></p>
<h2 id="例子：-Student-record-with-the-highest-id-that-is-enrolled-in-at-least-one-course"><a href="#例子：-Student-record-with-the-highest-id-that-is-enrolled-in-at-least-one-course" class="headerlink" title="例子： Student record with the highest id that is enrolled in at least one course"></a>例子： Student record with the highest id that is enrolled in at least one course</h2><p><img data-src="/images/CMU1544564/Lec02/44.jpg" alt="44.jpg"></p>
<ul>
<li>MySQL (v5.7 with strict mode) 指　<code>set session sql_mode = 'ansi';</code> (我们在这次课的上一部分笔记提到过)</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec02/45.jpg" alt="45.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/46.jpg" alt="46.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/47.jpg" alt="47.jpg"></p>
<p>上面课件这条SQL有句法错误</p>
<!-- 
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sid</span>, <span class="keyword">name</span> <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">sid</span> =&gt; <span class="keyword">ALL</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sid</span> <span class="keyword">FROM</span> enrolled</span><br><span class="line">)</span><br><span class="line"><span class="string">``</span><span class="string">` --&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">![48.jpg](/images/CMU1544564/Lec02/48.jpg)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">![49.jpg](/images/CMU1544564/Lec02/49.jpg)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">另外一种使用`</span>=<span class="string">`解法:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="keyword">sql</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sid</span>, <span class="keyword">name</span> <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">sid</span> = (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="keyword">sid</span>) <span class="keyword">FROM</span> enrolled</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="例子：Find-all-courses-that-has-no-students-enrolled"><a href="#例子：Find-all-courses-that-has-no-students-enrolled" class="headerlink" title="例子：Find all courses that has no students enrolled"></a>例子：Find all courses that has no students enrolled</h2><p>这个例子实际上是在问　关系代数中的 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUmVsYXRpb25hbF9hbGdlYnJhI0FudGlqb2luXyglRTIlOTYlQjc=" title="https://en.wikipedia.org/wiki/Relational_algebra#Antijoin_(%E2%96%B7">Anti Join<i class="fa fa-external-link"></i></span>)。它对应的SQL实现是<code>NOT EXISTS</code>和<code>NOT INT</code></p>
<p><img data-src="/images/CMU1544564/Lec02/50.jpg" alt="50.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/51.jpg" alt="51.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/53.jpg" alt="53.jpg"></p>
<p>另外一种使用<code>NOT IN</code>解法:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> course</span><br><span class="line"><span class="keyword">WHERE</span> cid <span class="keyword">NOT</span> <span class="keyword">IN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> enrolled</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h1 id="WINDOW-FUNCTIONS-窗口函数"><a href="#WINDOW-FUNCTIONS-窗口函数" class="headerlink" title="WINDOW FUNCTIONS 窗口函数"></a>WINDOW FUNCTIONS 窗口函数</h1><!-- TODO: 见我的高级SQL + FDE + LEETCODE 居多练习 FDE -->
<p>窗口函数是我们在OLAP中非常有力的助手。它很像 aggregation聚合函数，在其之上结合了 sliding window，　并且不聚合结果。大家可以很快从具体的例子找到手感，另外建议使用PostgreSQL去使用窗口函数。</p>
<p>在窗口函数中，我们称之前的<code>group</code>为<code>frame</code>，即在<code>PARTITION BY</code>之后有同一个特征的tuple集合：</p>
<p><img data-src="/images/CMU1544564/Lec02/55.jpg" alt="55.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/57.jpg" alt="57.jpg"></p>
<ul>
<li>上页中我们将整个表格看做一个frame　(因为没有<code>PARTITION BY</code>)</li>
</ul>
<p><br></p>
<p><img data-src="/images/CMU1544564/Lec02/59.jpg" alt="59.jpg"></p>
<ul>
<li>上页中我们将每一个<code>cid</code>看做一个frame</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec02/60.jpg" alt="60.jpg"></p>
<h2 id="例子：-Find-the-student-with-the-highest-grade-for-each-course"><a href="#例子：-Find-the-student-with-the-highest-grade-for-each-course" class="headerlink" title="例子： Find the student with the highest grade for each course"></a>例子： Find the student with the highest grade for each course</h2><p><img data-src="/images/CMU1544564/Lec02/62.jpg" alt="62.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/63.jpg" alt="63.jpg"></p>
<p>中间过程：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> *,</span><br><span class="line">        <span class="keyword">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> cid</span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span> grade <span class="keyword">ASC</span>) <span class="keyword">AS</span> <span class="keyword">rank</span></span><br><span class="line">    <span class="keyword">FROM</span> enrolled) <span class="keyword">AS</span> ranking;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  sid  |  cid   | grade | rank </span><br><span class="line"><span class="comment">-------+--------+-------+------</span></span><br><span class="line"> 53655 | 15-445 | B     |    1</span><br><span class="line"> 53666 | 15-445 | C     |    2</span><br><span class="line"> 53688 | 15-721 | A     |    1</span><br><span class="line"> 53666 | 15-721 | C     |    2</span><br><span class="line"> 53666 | 15-826 | B     |    1</span><br><span class="line">(5 rows)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h3 id="如果没有-ORDER-BY"><a href="#如果没有-ORDER-BY" class="headerlink" title="如果没有 ORDER BY"></a>如果没有 <code>ORDER BY</code></h3><p>如果没有 <code>ORDER BY</code>，即frame内没有排序，<strong>人人都是一个名次，人人都是第一名</strong>：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# SELECT *, RANK() OVER (PARTITION BY cid) AS rank FROM enrolled;</span><br><span class="line"></span><br><span class="line">  sid  |  cid   | grade | rank </span><br><span class="line">-------+--------+-------+------</span><br><span class="line"> <span class="number">53666</span> | <span class="number">15</span><span class="number">-445</span> | C     |    <span class="number">1</span></span><br><span class="line"> <span class="number">53655</span> | <span class="number">15</span><span class="number">-445</span> | B     |    <span class="number">1</span></span><br><span class="line"> <span class="number">53688</span> | <span class="number">15</span><span class="number">-721</span> | A     |    <span class="number">1</span></span><br><span class="line"> <span class="number">53666</span> | <span class="number">15</span><span class="number">-721</span> | C     |    <span class="number">1</span></span><br><span class="line"> <span class="number">53666</span> | <span class="number">15</span><span class="number">-826</span> | B     |    <span class="number">1</span></span><br><span class="line">(<span class="number">5</span> rows)</span><br></pre></td></tr></tbody></table></figure>
<h1 id="COMMON-TABLE-EXPRESSIONS-CTEs"><a href="#COMMON-TABLE-EXPRESSIONS-CTEs" class="headerlink" title="COMMON TABLE EXPRESSIONS (CTEs)"></a>COMMON TABLE EXPRESSIONS (CTEs)</h1><p>实际上CTE中的<code>with</code>从句非常类似Nested Query，也就是一个暂时的辅助表格(anxiliary statement):</p>
<p><img data-src="/images/CMU1544564/Lec02/65.jpg" alt="65.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/66.jpg" alt="66.jpg"></p>
<h2 id="例子-Find-student-record-with-the-highest-id-that-is-enrolled-in-at-least-one-course"><a href="#例子-Find-student-record-with-the-highest-id-that-is-enrolled-in-at-least-one-course" class="headerlink" title="例子: Find student record with the highest id that is enrolled in at least one course"></a>例子: Find student record with the highest id that is enrolled in at least one course</h2><p><img data-src="/images/CMU1544564/Lec02/68.jpg" alt="68.jpg"></p>
<p><br></p>
<h1 id="RECURSION-递归"><a href="#RECURSION-递归" class="headerlink" title="RECURSION 递归"></a>RECURSION 递归</h1><p>CTE的能力比Nested Query更大，它可以完成　SQL 中的递归语句。　我个人觉得这个很重要，因为如果我们的数据集是一个图的抽象，我们需要用递归的语句去完成图论中的算法，或者去遍历这个图。更多的练习可以在我的　<a href="https://cakebytheoceanluo.github.io/categories/SQL/">高级SQL-递归</a> 中找到。</p>
<p><img data-src="/images/CMU1544564/Lec02/69.jpg" alt="69.jpg"></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> <span class="keyword">source</span>(counter) <span class="keyword">as</span> (</span><br><span class="line">    (<span class="keyword">select</span> <span class="number">1</span>) </span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">    (<span class="keyword">select</span> counter + <span class="number">1</span> </span><br><span class="line">     <span class="keyword">from</span> <span class="keyword">source</span> </span><br><span class="line">     <span class="keyword">where</span> counter &lt; <span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> <span class="keyword">source</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> counter </span><br><span class="line"><span class="comment">---------</span></span><br><span class="line">       1</span><br><span class="line">       2</span><br><span class="line">       3</span><br><span class="line">       4</span><br><span class="line">       5</span><br><span class="line">       6</span><br><span class="line">       7</span><br><span class="line">       8</span><br><span class="line">       9</span><br><span class="line">      10</span><br><span class="line">(10 rows)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>另外PostgreSQL中有库函数 <code>GENERATE_SERIES</code> ：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# select GENERATE_SERIES(<span class="number">1</span>, <span class="number">10</span>) as counter;</span><br><span class="line"></span><br><span class="line"> counter </span><br><span class="line">---------</span><br><span class="line">       <span class="number">1</span></span><br><span class="line">       <span class="number">2</span></span><br><span class="line">       <span class="number">3</span></span><br><span class="line">       <span class="number">4</span></span><br><span class="line">       <span class="number">5</span></span><br><span class="line">       <span class="number">6</span></span><br><span class="line">       <span class="number">7</span></span><br><span class="line">       <span class="number">8</span></span><br><span class="line">       <span class="number">9</span></span><br><span class="line">      <span class="number">10</span></span><br><span class="line">(<span class="number">10</span> rows)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="UNION-ALL-vs-UNION"><a href="#UNION-ALL-vs-UNION" class="headerlink" title="UNION ALL vs UNION"></a><code>UNION ALL</code> vs <code>UNION</code></h2><ul>
<li><code>UNION ALL</code> 采用包语义 (Bag Semantics)，它不会消除重复 (duplicates)。</li>
<li><code>UNION</code> 采用集合语义 (Set Semantics)，它会消除重复。</li>
</ul>
<p><code>UNION ALL</code> 可能会导致<strong>不能终止</strong>:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# set statement_timeout = '10s';</span><br><span class="line">SET</span><br><span class="line"></span><br><span class="line">testdb=# \timing</span><br><span class="line">Timing is on.</span><br><span class="line"></span><br><span class="line">testdb=# with recursive source(counter) as ((select <span class="number">1</span>) <span class="keyword">union</span> all (select counter + <span class="number">1</span> from source)) select * from source;</span><br><span class="line">ERROR:  canceling statement due to statement timeout</span><br><span class="line">Time: <span class="number">10223.416</span> ms (<span class="number">00</span>:<span class="number">10.223</span>)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>set statement_timeout = '10s';</code> 设置每个SQL的 timeout, 即最长允许运行时间</li>
<li><code>\timing</code> 打开计时器，能对每个SQL的运行时间进行计时。</li>
</ul>
<p><br></p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p><img data-src="/images/CMU1544564/Lec02/70.jpg" alt="70.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/71.jpg" alt="71.jpg"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CMU-15445</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Window Function</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>[CMU-15445]Lec02_part1 Advanced SQL - 高级SQL</title>
    <url>/2020/03/06/CMU-15445-Lec02-part1/</url>
    <content><![CDATA[<p>Advanced SQL - 高级SQL</p>
<p>Slide: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzAyLWFkdmFuY2Vkc3FsLnBkZg==" title="https://15445.courses.cs.cmu.edu/fall2019/slides/02-advancedsql.pdf">https://15445.courses.cs.cmu.edu/fall2019/slides/02-advancedsql.pdf<i class="fa fa-external-link"></i></span><br>Note: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDItYWR2YW5jZWRzcWwucGRm" title="https://15445.courses.cs.cmu.edu/fall2019/notes/02-advancedsql.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/02-advancedsql.pdf<i class="fa fa-external-link"></i></span><br>Reading: Chapters 3-5</p>
<p>这节课，我们会了解高级的SQL句法。(但是实际上这门课对SQL的要求很低，大量其他的SQL练习依旧可以在我的博客中找到)</p>
<p>如果大家的目的是为了学习SQL，我建议使用PostgreSQL，它出自于学术界，整体行为相对MySQL和SQLite更合理。另外TUM和CMU在SQL教学上都采用PostgreSQL。</p>
<p>我将这次笔记分成前后两个部分，这是第一部分。</p>
<!-- 对应的练习　TODO:我的博客 -->
<a id="more"></a>
<p><img data-src="/images/CMU1544564/Lec02/1.jpg" alt="1.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/2.jpg" alt="2.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/3.jpg" alt="3.jpg"></p>
<p>SQL(a.k.a. Strutured Query Language)并不是这门语言一开始名字，IBM给这个语言的最初的名字是　SEQUEL。所有现在大部分人依旧将　SQL 读作　SEQUEL。</p>
<p>最好能讲上面几个概念记住，我们学校在本科生的数据库课中考SQL的全称，百分之九十的同学回答错误。</p>
<p><img data-src="/images/CMU1544564/Lec02/4.jpg" alt="4.jpg"></p>
<p>Comparison of different SQL implementations：　<span class="exturl" data-url="aHR0cDovL3Ryb2Vscy5hcnZpbi5kay9kYi9yZGJtcy8=" title="http://troels.arvin.dk/db/rdbms/">http://troels.arvin.dk/db/rdbms/<i class="fa fa-external-link"></i></span> <!-- TODO: --></p>
<p>最好大致对SQL的标准有一定的印象，因为各个RDBMS对SQL标准的支持都不一样，大有百花齐放之势，我们会在这节课后面的部分见到。</p>
<p><img data-src="/images/CMU1544564/Lec02/5.jpg" alt="5.jpg"></p>
<p><strong>这里要注意: SQL使用的是bag semantic，即允许重复值出现。</strong></p>
<p><img data-src="/images/CMU1544564/Lec02/6.jpg" alt="6.jpg"></p>
<h1 id="EXAMPLE-DATABASE"><a href="#EXAMPLE-DATABASE" class="headerlink" title="EXAMPLE DATABASE"></a>EXAMPLE DATABASE</h1><p>我使用一个很小的<strong>流行歌手</strong>数据集(我并不觉得Bieber是一个rapper<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>)</p>
<p><img data-src="/images/CMU1544564/Lec02/7.jpg" alt="7.jpg"></p>
<p>对应的SQL语句　<a href="https://cakebytheoceanluo.github.io/download/CMU15445/lec02_schema.sql">下载</a>：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> student <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> course <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> enrolled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student </span><br><span class="line">   (<span class="keyword">sid</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">16</span>), </span><br><span class="line">    login <span class="built_in">varchar</span>(<span class="number">32</span>), </span><br><span class="line">    age <span class="built_in">smallint</span>, </span><br><span class="line">    gpa <span class="built_in">numeric</span>(<span class="number">2</span>, <span class="number">1</span>) <span class="keyword">check</span> (gpa <span class="keyword">between</span> <span class="number">0.0</span> <span class="keyword">and</span> <span class="number">4.0</span>)</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course </span><br><span class="line">   (cid <span class="built_in">varchar</span>(<span class="number">32</span>) primary <span class="keyword">key</span>, </span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> enrolled </span><br><span class="line">   (<span class="keyword">sid</span> <span class="built_in">int</span> <span class="keyword">references</span> student (<span class="keyword">sid</span>) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>, </span><br><span class="line">    cid <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">references</span> course (cid) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>, </span><br><span class="line">    grade <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">check</span> (grade <span class="keyword">in</span> (<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>)),</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="keyword">sid</span>, cid)</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (<span class="keyword">sid</span>, <span class="keyword">name</span>, login, age, gpa) <span class="keyword">values</span> (<span class="number">53666</span>, <span class="string">'Kanye'</span>, <span class="string">'kanye@cs'</span>, <span class="number">39</span>, <span class="number">4.0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (<span class="keyword">sid</span>, <span class="keyword">name</span>, login, age, gpa) <span class="keyword">values</span> (<span class="number">53688</span>, <span class="string">'Bieber'</span>, <span class="string">'jbieber@cs'</span>, <span class="number">22</span>, <span class="number">3.9</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (<span class="keyword">sid</span>, <span class="keyword">name</span>, login, age, gpa) <span class="keyword">values</span> (<span class="number">53655</span>, <span class="string">'Tupac'</span>, <span class="string">'shakur@cs'</span>, <span class="number">26</span>, <span class="number">3.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course (cid, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'15-445'</span>, <span class="string">'Database Systems'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course (cid, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'15-721'</span>, <span class="string">'Advanced Database Systems'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course (cid, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'15-826'</span>, <span class="string">'Data Mining'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course (cid, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">'15-823'</span>, <span class="string">'Advanced Topics in Databases'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53666</span>, <span class="string">'15-445'</span>, <span class="string">'C'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53688</span>, <span class="string">'15-721'</span>, <span class="string">'A'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53666</span>, <span class="string">'15-826'</span>, <span class="string">'B'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53655</span>, <span class="string">'15-445'</span>, <span class="string">'B'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> enrolled (<span class="keyword">sid</span>, cid, grade) <span class="keyword">values</span> (<span class="number">53666</span>, <span class="string">'15-721'</span>, <span class="string">'C'</span>);</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>可以在PostgreSQL, MySQL, SQLite中使用</li>
</ul>
<h2 id="check"><a href="#check" class="headerlink" title="check"></a><code>check</code></h2><p><code>check</code>是确认insert指是否满足我们规定的不变量(invariant):</p>
<ul>
<li><code>gpa numeric(2, 1) check (gpa between 0.0 and 4.0)</code></li>
<li><code>grade char(1) check (grade in ('A', 'B', 'C')</code></li>
</ul>
<p>我们尝试在PostgreSQL中，insert一个违背这个不变量的tuple,　我们就能看到对应的ERROR:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# insert into enrolled (sid, cid, grade) values (53666, '15-445', 'Z');</span><br><span class="line">ERROR:  <span class="keyword">new</span> row <span class="keyword">for</span> relation <span class="string">"enrolled"</span> violates check constraint <span class="string">"enrolled_grade_check"</span></span><br><span class="line">DETAIL:  Failing row contains (<span class="number">53666</span>, <span class="number">15</span><span class="number">-445</span>, Z).</span><br></pre></td></tr></tbody></table></figure>
<h2 id="on-delete-cascade"><a href="#on-delete-cascade" class="headerlink" title="on delete cascade"></a><code>on delete cascade</code></h2><p><code>cascade</code>: 很象征地描述了一种像瀑布一样的连锁效应。这个词在西方语境下比较常用，对应我们可以理解成<strong>连锁效应</strong>即可。(这个词这个门课最后的事务transaction还会出现。)</p>
<p><code>enrolled</code>这个表格的字段都是来自<code>student</code>和<code>course</code>的外键，因此这个表格依赖于其他两个表格。让我们想象一下，如果我们删去一个<code>student</code>或<code>course</code>，如果删去的tuple在<code>enrolled</code>拥有外键，那么对应在<code>enrolled</code>的tuple也需要被删除。不然<code>enrolled</code>中就出现了一个<strong>僵尸</strong>：对应不到<code>student</code>或<code>course</code>。</p>
<p>我们尝试在PostgreSQL中，删除<code>student Bieber</code>, 看看他的<code>enrolled</code>怎么变化：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# select * from enrolled;</span><br><span class="line">  sid  |  cid   | grade </span><br><span class="line">-------+--------+-------</span><br><span class="line"> <span class="number">53666</span> | <span class="number">15</span><span class="number">-445</span> | C</span><br><span class="line"> <span class="number">53688</span> | <span class="number">15</span><span class="number">-721</span> | A</span><br><span class="line"> <span class="number">53666</span> | <span class="number">15</span><span class="number">-826</span> | B</span><br><span class="line"> <span class="number">53655</span> | <span class="number">15</span><span class="number">-445</span> | B</span><br><span class="line"> <span class="number">53666</span> | <span class="number">15</span><span class="number">-721</span> | C</span><br><span class="line">(<span class="number">5</span> rows)</span><br><span class="line"></span><br><span class="line">testdb=# delete from student where name = 'Bieber';</span><br><span class="line">DELETE <span class="number">1</span></span><br><span class="line"></span><br><span class="line">testdb=# select * from enrolled;</span><br><span class="line">  sid  |  cid   | grade </span><br><span class="line">-------+--------+-------</span><br><span class="line"> <span class="number">53666</span> | <span class="number">15</span><span class="number">-445</span> | C</span><br><span class="line"> <span class="number">53666</span> | <span class="number">15</span><span class="number">-826</span> | B</span><br><span class="line"> <span class="number">53655</span> | <span class="number">15</span><span class="number">-445</span> | B</span><br><span class="line"> <span class="number">53666</span> | <span class="number">15</span><span class="number">-721</span> | C</span><br><span class="line">(<span class="number">4</span> rows)</span><br></pre></td></tr></tbody></table></figure>
<p>我们可以用删除前后<code>enrollled</code>表格，发现<code>Bieber</code>对应的<code>sid 53688</code>也被删除了。</p>
<p>(注意再重新将加入删除的tuple或者重新<code>drop table ... create table ... insert</code>，我们后面的练习以及需要<code>Bieber</code>)</p>
<p><br><br><br></p>
<h1 id="AGGREGATES-聚合函数"><a href="#AGGREGATES-聚合函数" class="headerlink" title="AGGREGATES　聚合函数"></a>AGGREGATES　聚合函数</h1><p><img data-src="/images/CMU1544564/Lec02/8.jpg" alt="8.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/9.jpg" alt="9.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/11.jpg" alt="11.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/12.jpg" alt="12.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/13.jpg" alt="13.jpg"></p>
<ul>
<li>上图中结果表格错误, 应为：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">        avg         | count </span><br><span class="line"><span class="comment">--------------------+-------</span></span><br><span class="line"> 3.8000000000000000 |     3</span><br><span class="line">(1 row)</span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="/images/CMU1544564/Lec02/14.jpg" alt="14.jpg"></p>
<h2 id="Undefined-e-cid-select-not-from-group-by"><a href="#Undefined-e-cid-select-not-from-group-by" class="headerlink" title="Undefined e.cid: select not from group by"></a>Undefined <code>e.cid</code>: select not from group by</h2><p><img data-src="/images/CMU1544564/Lec02/15.jpg" alt="15.jpg"></p>
<p>上图中，我们选择了一个字段<code>e.cid</code>，它并不出现在<code>group by</code>从句中(根本没有任何<code>group by</code>从句), 这违反了SQL  syntax句法。但是这个行为在不同的DBMS, 有不一样的作用：</p>
<h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">testdb=#  select avg(s.gpa), e.cid from enrolled as e, student as s where e.sid = s.sid;</span><br><span class="line">ERROR:  column <span class="string">"e.cid"</span> must appear in the GROUP BY clause <span class="keyword">or</span> be used in an aggregate function</span><br><span class="line">LINE 1: select avg(s.gpa), e.cid from enrolled as e, student as s wh...</span><br></pre></td></tr></tbody></table></figure>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>MySQL 区分　两种模式mode:</p>
<ul>
<li>ANSI: <code>set session sql_mode = 'ansi';</code> 即SQL Standard</li>
<li>traditional: <code>set session sql_mode = 'traditional';</code>　</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; set session sql_mode = 'ansi';</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select avg(s.gpa), e.cid from enrolled as e, student as s where e.sid = s.sid;</span><br><span class="line">ERROR 1140 (42000): In aggregated query without GROUP BY, expression <span class="comment">#2 of SELECT list contains nonaggregated column 'test_db.e.cid'; this is incompatible with sql_mode=only_full_group_by</span></span><br><span class="line"></span><br><span class="line">mysql&gt; set session sql_mode = 'traditional';</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select avg(s.gpa), e.cid from enrolled as e, student as s where e.sid = s.sid;</span><br><span class="line">+<span class="comment">------------+--------+</span></span><br><span class="line">| avg(s.gpa) | cid    |</span><br><span class="line">+<span class="comment">------------+--------+</span></span><br><span class="line">|    3.88000 | 15-445 |</span><br><span class="line">+<span class="comment">------------+--------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">sqlite&gt; select avg(s.gpa), e.cid from enrolled as e, student as s where e.sid = s.sid;</span><br><span class="line">3.88|</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a><code>GROUP BY</code></h1><p><img data-src="/images/CMU1544564/Lec02/18.jpg" alt="18.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/19.jpg" alt="19.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/20.jpg" alt="20.jpg"></p>
<h2 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a><code>HAVING</code></h2><p><img data-src="/images/CMU1544564/Lec02/21.jpg" alt="21.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/22.jpg" alt="22.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/23.jpg" alt="23.jpg"></p>
<p><code>HAVING</code>从句可以说是<code>WHERE</code>从句带聚合函数的版本。它们俩都在对tuple做一些筛选的工作。后面我们会在query optimization中提到logical plan中的selection pushdown / early filtering。这个优化就是尽可能早得对提前筛选出符合<code>WHERE</code>和<code>HAVING</code>从句条件的tuple，尽量让查询中间结果的集合尽可能小。</p>
<h3 id="PostgreSQL-1"><a href="#PostgreSQL-1" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><p>上面这个例子，不适用于PostgreSQL:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# select avg(s.gpa) as avg_gpa, e.cid from enrolled e, student s where e.sid = s.sid group by e.cid having avg_gpa &gt; <span class="number">3.9</span>;</span><br><span class="line">ERROR:  column <span class="string">"avg_gpa"</span> does <span class="keyword">not</span> exist</span><br><span class="line">LINE <span class="number">1</span>: ...udent s where e.sid = s.sid group by e.cid having avg_gpa &gt; ...</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# select avg(s.gpa) as avg_gpa, e.cid from enrolled e, student s where e.sid = s.sid group by e.cid having avg(s.gpa) &gt; <span class="number">3.9</span>;</span><br><span class="line">      avg_gpa       |  cid   </span><br><span class="line">--------------------+--------</span><br><span class="line"> <span class="number">4.0000000000000000</span> | <span class="number">15</span><span class="number">-826</span></span><br><span class="line"> <span class="number">3.9500000000000000</span> | <span class="number">15</span><span class="number">-721</span></span><br><span class="line">(<span class="number">2</span> rows)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="MySQL-1"><a href="#MySQL-1" class="headerlink" title="MySQL"></a>MySQL</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select avg(s.gpa) as avg_gpa, e.cid from enrolled e, student s where e.sid = s.sid group by e.cid having avg_gpa &gt; 3.9;</span><br><span class="line">+<span class="comment">---------+--------+</span></span><br><span class="line">| avg_gpa | cid    |</span><br><span class="line">+<span class="comment">---------+--------+</span></span><br><span class="line">| 3.95000 | 15-721 |</span><br><span class="line">| 4.00000 | 15-826 |</span><br><span class="line">+<span class="comment">---------+--------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="SQLite-1"><a href="#SQLite-1" class="headerlink" title="SQLite"></a>SQLite</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">sqlite&gt; select avg(s.gpa) as avg_gpa, e.cid from enrolled e, student s where e.sid = s.sid group by e.cid having avg(s.gpa) &gt; 3.9;</span><br><span class="line">4|15-826</span><br><span class="line">3.95|15-721</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="STRING-OPERATIONS"><a href="#STRING-OPERATIONS" class="headerlink" title="STRING OPERATIONS"></a>STRING OPERATIONS</h1><p>在字符串的处理上，各个数据库开始放飞自我，点名MySQL, SQLite不遵守SQL Standard</p>
<p><img data-src="/images/CMU1544564/Lec02/24.jpg" alt="24.jpg"></p>
<h2 id="PostgreSQL-2"><a href="#PostgreSQL-2" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">testdb=<span class="comment"># select * from student where upper(name) = upper('KaNyE');</span></span><br><span class="line">  sid  | name  |  login   | age | gpa </span><br><span class="line"><span class="comment">-------+-------+----------+-----+-----</span></span><br><span class="line"> 53666 | Kanye | kanye@cs |  39 | 4.0</span><br><span class="line">(1 row)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="MySQL-2"><a href="#MySQL-2" class="headerlink" title="MySQL"></a>MySQL</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; set session sql_mode = 'traditional';</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student where name = 'KaNyE';</span><br><span class="line">+<span class="comment">-------+-------+----------+------+------+</span></span><br><span class="line">| sid   | name  | login    | age  | gpa  |</span><br><span class="line">+<span class="comment">-------+-------+----------+------+------+</span></span><br><span class="line">| 53666 | Kanye | kanye@cs |   39 |  4.0 |</span><br><span class="line">+<span class="comment">-------+-------+----------+------+------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">set</span> <span class="keyword">session</span> sql_mode = <span class="string">'ansi'</span>;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from student where name = 'KaNyE';</span><br><span class="line">+<span class="comment">-------+-------+----------+------+------+</span></span><br><span class="line">| sid   | name  | login    | age  | gpa  |</span><br><span class="line">+<span class="comment">-------+-------+----------+------+------+</span></span><br><span class="line">| 53666 | Kanye | kanye@cs |   39 |  4.0 |</span><br><span class="line">+<span class="comment">-------+-------+----------+------+------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select 'An' 'Dy' ' Pavlo';</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| An         |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| AnDy Pavlo |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="/images/CMU1544564/Lec02/25.jpg" alt="25.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/26.jpg" alt="26.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec02/27.jpg" alt="27.jpg"></p>
<p><br></p>
<h1 id="DATE-TIME-OPERATIONS"><a href="#DATE-TIME-OPERATIONS" class="headerlink" title="DATE/TIME OPERATIONS"></a>DATE/TIME OPERATIONS</h1><p>在时间日期的处理上，各个数据库真正都不太一样了：</p>
<p><img data-src="/images/CMU1544564/Lec02/28.jpg" alt="28.jpg"></p>
<h2 id="Get-the-of-days-since-the-beginning-of-the-year"><a href="#Get-the-of-days-since-the-beginning-of-the-year" class="headerlink" title="Get the # of days since the beginning of the year."></a>Get the # of days since the beginning of the year.</h2><h3 id="PostgreSQL-3"><a href="#PostgreSQL-3" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><ul>
<li><code>now()</code>: a function</li>
<li><code>current_timestamp</code>: a keyword</li>
</ul>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">testdb=# select now();</span><br><span class="line">              now              </span><br><span class="line">-------------------------------</span><br><span class="line"> <span class="number">2020</span><span class="number">-03</span><span class="number">-04</span> <span class="number">14</span>:<span class="number">02</span>:<span class="number">08.170335</span>+<span class="number">01</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# select current_timestamp;</span><br><span class="line">       current_timestamp       </span><br><span class="line">-------------------------------</span><br><span class="line"> <span class="number">2020</span><span class="number">-03</span><span class="number">-04</span> <span class="number">14</span>:<span class="number">03</span>:<span class="number">04.507685</span>+<span class="number">01</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# select extract(day from (select now()));</span><br><span class="line"> date_part </span><br><span class="line">-----------</span><br><span class="line">         <span class="number">4</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# select extract(day from (now()));</span><br><span class="line"> date_part </span><br><span class="line">-----------</span><br><span class="line">         <span class="number">4</span></span><br><span class="line">(<span class="number">1</span> row)</span><br><span class="line"></span><br><span class="line">testdb=# select date(now()) - date('2020-01-01') as days;</span><br><span class="line"> days </span><br><span class="line">------</span><br><span class="line">   <span class="number">63</span></span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="MySQL-3"><a href="#MySQL-3" class="headerlink" title="MySQL"></a>MySQL</h3><ul>
<li><code>now()</code>: a function</li>
<li><code>current_timestamp</code>: a keyword</li>
<li><code>unix_timestamp</code>: use unix timestamp in seconds</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; select now();</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| now()               |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| 2020-03-04 14:03:41 |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">current_timestamp</span>;</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| current_timestamp   |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| 2020-03-04 14:04:22 |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">extract</span>(<span class="keyword">day</span> <span class="keyword">from</span> (<span class="keyword">now</span>()));</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">| extract(day from (now())) |</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">|                         4 |</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- wrong answer!!!</span></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="built_in">date</span>(<span class="keyword">now</span>()) - <span class="built_in">date</span>(<span class="string">'2020-01-01'</span>) <span class="keyword">as</span> <span class="keyword">days</span>;</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| days |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">|  203 |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">round</span>((<span class="keyword">unix_timestamp</span>(<span class="built_in">date</span>(<span class="keyword">now</span>())) - <span class="keyword">unix_timestamp</span>(<span class="built_in">date</span>(<span class="string">'2020-01-01'</span>))) / (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>), <span class="number">0</span>) <span class="keyword">as</span> <span class="keyword">days</span>;</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| days |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">|   63 |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">datediff</span>(<span class="built_in">date</span>(<span class="keyword">now</span>()), <span class="built_in">date</span>(<span class="string">'2020-01-01'</span>)) <span class="keyword">as</span> <span class="keyword">days</span>;</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| days |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">|   63 |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="SQLite-2"><a href="#SQLite-2" class="headerlink" title="SQLite"></a>SQLite</h3><ul>
<li>julianday: <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSnVsaWFuX2RheQ==" title="https://en.wikipedia.org/wiki/Julian_day">https://en.wikipedia.org/wiki/Julian_day<i class="fa fa-external-link"></i></span></li>
<li>儒略日: <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTg0JTkyJUU3JTk1JUE1JUU2JTk3JUE1" title="https://zh.wikipedia.org/wiki/%E5%84%92%E7%95%A5%E6%97%A5">https://zh.wikipedia.org/wiki/%E5%84%92%E7%95%A5%E6%97%A5<i class="fa fa-external-link"></i></span></li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- To return the current date and time in UTC, you use the following statement:</span></span><br><span class="line">sqlite&gt; SELECT datetime('now');</span><br><span class="line">2020-03-04 13:26:51</span><br><span class="line"></span><br><span class="line">sqlite&gt; SELECT datetime('now','localtime');</span><br><span class="line">2020-03-04 14:26:53</span><br><span class="line"></span><br><span class="line">sqlite&gt; SELECT strftime('%d', datetime('now','localtime'));</span><br><span class="line">04</span><br><span class="line"></span><br><span class="line"><span class="comment">-- wrong answer!!!</span></span><br><span class="line">sqlite&gt; SELECT date('now') - date('2020-01-01') as days;</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">sqlite&gt; SELECT julianday(date('now')) - julianday('2020-01-01') as days;</span><br><span class="line">63</span><br></pre></td></tr></tbody></table></figure><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CMU-15445</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>SQLite</tag>
        <tag>DBMS</tag>
        <tag>PostgreSQL</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[CMU-15445]Lec01 The Relational Model - 关系代数</title>
    <url>/2020/03/05/CMU-15445-Lec01/</url>
    <content><![CDATA[<p>The Relational Model - 关系代数</p>
<p>Slide: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvc2xpZGVzLzAxLWludHJvZHVjdGlvbi5wZGY=" title="https://15445.courses.cs.cmu.edu/fall2019/slides/01-introduction.pdf">https://15445.courses.cs.cmu.edu/fall2019/slides/01-introduction.pdf<i class="fa fa-external-link"></i></span><br>Note: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkvbm90ZXMvMDEtaW50cm9kdWN0aW9uLnBkZg==" title="https://15445.courses.cs.cmu.edu/fall2019/notes/01-introduction.pdf">https://15445.courses.cs.cmu.edu/fall2019/notes/01-introduction.pdf<i class="fa fa-external-link"></i></span><br>Reading: Chapters 1-2, 6</p>
<p>这节课，我们会了解数据库的概况，然后同时了解一下关系代数和基础的SQL。</p>
<p>更多的基础SQL练习可以在我之前的博客找到：　见 <a href="https://cakebytheoceanluo.github.io/2020/02/22/SQL-%E5%9F%BA%E7%A1%80SQL/">[SQL]基础SQL</a></p>
<a id="more"></a>
<p><img data-src="/images/CMU1544564/Lec01/1.jpg" alt="1.jpg"></p>
<h1 id="DBMS-数据库管理系统"><a href="#DBMS-数据库管理系统" class="headerlink" title="DBMS 数据库管理系统"></a>DBMS 数据库管理系统</h1><p>这一部分我们粗略的去了解，DBMSs的意义。它是System Program(或System Programming)最有特征的代表，因为High End的DBMSs始终以运行在服务器的操作系统上，同时它又需要向普通的用户的User Program提供服务。从某种程度上说，数据库的确是存在于操作系统和普通应用的一层介质，它的最主要功能是高效快速且安全地向普通应用提供数据借口和服务，因此普通应用的开发者只需要注意对应的借口，而不需要自己花很多时间去实现数据库的功能。</p>
<p>(当然存在一个学术方向是数据库的总体统一: 数据库运行在专属的芯片和操作系统上，它们都对大数据处理(large scaled data processing)作了最大程度的优化。　见 <span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL2dpY2V2YS9tYXRlcmlhbHMvcmVzZWFyY2gucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/people/sites/giceva/materials/research.pdf?lang=de">https://db.in.tum.de/people/sites/giceva/materials/research.pdf?lang=de<i class="fa fa-external-link"></i></span> )</p>
<p><img data-src="/images/CMU1544564/Lec01/16.jpg" alt="16.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/17.jpg" alt="17.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/18.jpg" alt="18.jpg"></p>
<h2 id="FLAT-FILE-STRAWMAN-纯文本稻草人"><a href="#FLAT-FILE-STRAWMAN-纯文本稻草人" class="headerlink" title="FLAT FILE STRAWMAN 纯文本稻草人"></a>FLAT FILE STRAWMAN 纯文本稻草人</h2><p>Flat File：　一种包含没有相对关系结构的记录的文件。 这个类型通常用来描述文字处理、其他结构字符或标记被移除了的文本</p>
<p><img data-src="/images/CMU1544564/Lec01/19.jpg" alt="19.jpg"></p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>假设我们没有任何数据库，我们以纯文本文件(这里用<code>.csv</code>表格文件)来存储我们需要的数据：</p>
<ul>
<li><a href="https://cakebytheoceanluo.github.io/download/CMU15445/Lec01_album.csv">lec01_album.csv　下载</a></li>
<li><a href="https://cakebytheoceanluo.github.io/download/CMU15445/Lec01_artist.csv">lec01_artist.csv　下载</a></li>
</ul>
<p><img data-src="/images/CMU1544564/Lec01/20.jpg" alt="20.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/21.jpg" alt="21.jpg"></p>
<p>如果我们在开发一个普通应用，而不使用任何数据库。我们可以使用在我们的应用中使用高级语言去代替SQL查询。这当然让开发过程变得艰难，因为我们不仅需要完成我们自己应用的开发，甚至还需要完成一个类似数据库的应用。不止开发任务的加重，我们继续看这种纯文本存储的作法其他的缺点。这些缺点就是我们使用数据库管理系统的论点。</p>
<h3 id="纯文本存储的缺点！"><a href="#纯文本存储的缺点！" class="headerlink" title="纯文本存储的缺点！"></a>纯文本存储的缺点！</h3><h4 id="DATA-INTEGRITY-数据完整性"><a href="#DATA-INTEGRITY-数据完整性" class="headerlink" title="DATA INTEGRITY 数据完整性"></a>DATA INTEGRITY 数据完整性</h4><p><img data-src="/images/CMU1544564/Lec01/22.jpg" alt="22.jpg"></p>
<blockquote>
<ul>
<li>我们该如何确保这个音乐家对每个专辑 都是同样的那个音乐家呢？</li>
<li>如果有人在出道日期上写了个‘哈哈哈’，怎么办呢</li>
<li>我们要如何存储多个音乐家合作发布的专辑呢？</li>
</ul>
</blockquote>
<p><br></p>
<ul>
<li>我们或者其他用户在有文件操作权限的情况下，可以任意修改这个文件。这样这个文件依旧是一个纯文本文件，但是我们的普通应用不再能理解这个纯文本文件：比如课件中的三个情况</li>
</ul>
<h4 id="IMPLEMENTATION-实现"><a href="#IMPLEMENTATION-实现" class="headerlink" title="IMPLEMENTATION 实现"></a>IMPLEMENTATION 实现</h4><p><img data-src="/images/CMU1544564/Lec01/23.jpg" alt="23.jpg"></p>
<ul>
<li>第一点：我们只能每次读取整个文件去找其中的一个record，这样是没有效率的。</li>
<li>第二点：我们之前提到了，开发效率很低。</li>
</ul>
<h4 id="DURABILITY-持久性"><a href="#DURABILITY-持久性" class="headerlink" title="DURABILITY 持久性"></a>DURABILITY 持久性</h4><p><img data-src="/images/CMU1544564/Lec01/24.jpg" alt="24.jpg"></p>
<ul>
<li>第一点: 如果在写文件的时候机器宕机，那正在进行的文件修改就会消失。事务 transaction</li>
<li>第二点: 如何对这个文件支持分布式的情况? Scale Out</li>
</ul>
<h2 id="DATABASE-MANAGEMENT-SYSTEM"><a href="#DATABASE-MANAGEMENT-SYSTEM" class="headerlink" title="DATABASE MANAGEMENT SYSTEM"></a>DATABASE MANAGEMENT SYSTEM</h2><p><img data-src="/images/CMU1544564/Lec01/25.jpg" alt="25.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/26.jpg" alt="26.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/27.jpg" alt="27.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/28.jpg" alt="28.jpg"></p>
<p>Edgar F. Codd (Ted Codd.): <span class="exturl" data-url="aHR0cHM6Ly93d3cubmFwLmVkdS9yZWFkLzEyNDczL2NoYXB0ZXIvMTUjODI=" title="https://www.nap.edu/read/12473/chapter/15#82">https://www.nap.edu/read/12473/chapter/15#82<i class="fa fa-external-link"></i></span></p>
<p>Edgar F. Codd (Ted Codd.)是数据库中关系代数的奠基人，因此他获得了<span class="exturl" data-url="aHR0cHM6Ly9hbXR1cmluZy5hY20ub3JnL2F3YXJkX3dpbm5lcnMvY29kZF8xMDAwODkyLmNmbQ==" title="https://amturing.acm.org/award_winners/codd_1000892.cfm">1981年的图灵奖<i class="fa fa-external-link"></i></span>。</p>
<ul>
<li>A relational model of data for large shared data banks: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS8xMC4xMTQ1LzM2MjM4NC4zNjI2ODU=" title="https://dl.acm.org/doi/10.1145/362384.362685">https://dl.acm.org/doi/10.1145/362384.362685<i class="fa fa-external-link"></i></span></li>
<li>Derivability, redundancy and consistency of relations stored in large data banks: <span class="exturl" data-url="aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS8xMC4xMTQ1LzE1NTgzMzQuMTU1ODMzNg==" title="https://dl.acm.org/doi/10.1145/1558334.1558336">https://dl.acm.org/doi/10.1145/1558334.1558336<i class="fa fa-external-link"></i></span></li>
</ul>
<p>当时是数据库的蛮荒年代，甚至没有relation关系一说。IBM在开发当时的数据库时，经常需要浪费时间去重写重构以前的代码。这就是Ted Codd.提出关系代数的原因，运用关系这个数学模型，能对数据很好进行建模，减少不必要的开发时间浪费：</p>
<ul>
<li>Store database in simple data structures: 即关系relation，它是对表格的数学抽象表达。</li>
<li>Access data through high-level language: 我们可以理解成SQL (Ted Codd.当时用是不是SQL, 但是在几十年的发展中，只有SQL存活了下来。)</li>
<li>Physical storage left up to implementation: 我们称 关系模型relation model为逻辑模型 logical model, 它和真正的实现 physical storage 没有很大关系。正是因为这个logical 和 physical 的解耦，IBM当时才能避免不断重构代码而去节省时间。</li>
</ul>
<h2 id="DATA-MODELS"><a href="#DATA-MODELS" class="headerlink" title="DATA MODELS"></a>DATA MODELS</h2><p><img data-src="/images/CMU1544564/Lec01/29.jpg" alt="29.jpg"></p>
<ul>
<li>data model: High level abstraction of relation</li>
<li>schema架构: 对应SQL<code>create table</code>语句，关系数据库中每一个表格中每一个字段的字段名和字段值的数据类型需要一开始就被指定，不能更改。 </li>
</ul>
<p><img data-src="/images/CMU1544564/Lec01/30.jpg" alt="30.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/31.jpg" alt="31.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/32.jpg" alt="32.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/33.jpg" alt="33.jpg"><br>最后的 Hierachical 和　Network属于 遗产系统 Legacy system。</p>
<p><img data-src="/images/CMU1544564/Lec01/34.jpg" alt="34.jpg"></p>
<p><br><br><br></p>
<h1 id="RELATIONAL-MODEL-关系模型"><a href="#RELATIONAL-MODEL-关系模型" class="headerlink" title="RELATIONAL MODEL 关系模型"></a>RELATIONAL MODEL 关系模型</h1><p><img data-src="/images/CMU1544564/Lec01/35.jpg" alt="35.jpg"></p>
<p>关系模型有三个部分：</p>
<ul>
<li>Structure: table schema</li>
<li>Integrity: 确保数据库的内容满足限制，也包含table schema 和 <code>create table</code>中的指令, 比如<code>check</code></li>
<li>Manipulation: SQL</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec01/36.jpg" alt="36.jpg"></p>
<ul>
<li><strong>关系代数的关系是一个不带顺序的集合</strong></li>
<li><code>NULL</code> 是一个未定义　未知的值，它在数据库的的表达和具体实现相关。</li>
</ul>
<h2 id="PRIMARY-KEYS-主键"><a href="#PRIMARY-KEYS-主键" class="headerlink" title="PRIMARY KEYS 主键"></a>PRIMARY KEYS 主键</h2><p><img data-src="/images/CMU1544564/Lec01/37.jpg" alt="37.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/38.jpg" alt="38.jpg"></p>
<h2 id="FOREIGN-KEYS-外键"><a href="#FOREIGN-KEYS-外键" class="headerlink" title="FOREIGN KEYS　外键"></a>FOREIGN KEYS　外键</h2><p><img data-src="/images/CMU1544564/Lec01/39.jpg" alt="39.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/40.jpg" alt="40.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/41.jpg" alt="41.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/42.jpg" alt="42.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/43.jpg" alt="43.jpg"></p>
<ul>
<li>Cascade Deletion: 如果一个表的一个tuple(元组)被删除，对应的其他表中的外键相关联的tuple也会被删除</li>
<li><code>ArtistAlbum</code>表格的存在：<ul>
<li>允许一个Artist对应多个Album (<code>1:N</code>的关系)</li>
<li>允许一个Album对应多个Artist (<code>1:N</code>的关系)</li>
</ul>
</li>
</ul>
<h2 id="DATA-MANIPULATION-LANGUAGES-DML"><a href="#DATA-MANIPULATION-LANGUAGES-DML" class="headerlink" title="DATA MANIPULATION LANGUAGES (DML)"></a>DATA MANIPULATION LANGUAGES (DML)</h2><p><img data-src="/images/CMU1544564/Lec01/44.jpg" alt="44.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/45.jpg" alt="45.jpg"></p>
<p>我们在这门课中只学习 relation algebra关系代数。</p>
<p><br><br><br></p>
<h1 id="RELATIONAL-ALGEBRA-关系代数"><a href="#RELATIONAL-ALGEBRA-关系代数" class="headerlink" title="RELATIONAL ALGEBRA 关系代数"></a>RELATIONAL ALGEBRA 关系代数</h1><p><img data-src="/images/CMU1544564/Lec01/46.jpg" alt="46.jpg"></p>
<p>关系代数基于集合代数(set algebra)，但是拥有更多的运算符号。</p>
<h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><p><img data-src="/images/CMU1544564/Lec01/47.jpg" alt="47.jpg"></p>
<p>SELECT起到一个对谓词判断(predicate)的筛选作用： 运用条件，筛选得到满足条件的tuple，但是不改变这些tuple。、</p>
<p>这里需要注意：<strong>关系代数中的SELECT运算符　对应　SQL中的WHERE从句</strong></p>
<h2 id="PROJECTION"><a href="#PROJECTION" class="headerlink" title="PROJECTION"></a>PROJECTION</h2><p><img data-src="/images/CMU1544564/Lec01/48.jpg" alt="48.jpg"></p>
<p>PROJECTION是对原tuple进行操作，投影出所需要的字段，去掉不需要的字段</p>
<p>这里需要注意：<strong>关系代数中的PROJECTION运算符　对应　SQL中的SELECT从句</strong></p>
<h2 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h2><p><img data-src="/images/CMU1544564/Lec01/49.jpg" alt="49.jpg"></p>
<h2 id="INTERSECTION"><a href="#INTERSECTION" class="headerlink" title="INTERSECTION"></a>INTERSECTION</h2><p><img data-src="/images/CMU1544564/Lec01/50.jpg" alt="50.jpg"></p>
<h2 id="DIFFERENCE"><a href="#DIFFERENCE" class="headerlink" title="DIFFERENCE"></a>DIFFERENCE</h2><p><img data-src="/images/CMU1544564/Lec01/51.jpg" alt="51.jpg"></p>
<!-- TODO: union all, intersection all, except all -->
<h2 id="PRODUCT"><a href="#PRODUCT" class="headerlink" title="PRODUCT"></a>PRODUCT</h2><p><img data-src="/images/CMU1544564/Lec01/52.jpg" alt="52.jpg"></p>
<h2 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h2><p><img data-src="/images/CMU1544564/Lec01/53.jpg" alt="53.jpg"></p>
<p>这里需要注意： <code>NATURAL JOIN</code>只是join的一种情况，指两个表格的<strong>相同名字，相同数据类型</strong>的字段进行连接(Join)。我们任然有很多很多途径去完成join, 见 <a href="https://cakebytheoceanluo.github.io/2020/02/22/SQL-%E5%9F%BA%E7%A1%80SQL/">[SQL]基础SQL</a></p>
<h2 id="EXTRA-OPERATORS"><a href="#EXTRA-OPERATORS" class="headerlink" title="EXTRA OPERATORS"></a>EXTRA OPERATORS</h2><p><img data-src="/images/CMU1544564/Lec01/54.jpg" alt="54.jpg"></p>
<p>其他课上没有讲的运算符依然很重要，需要自己去看书了解。这些符号经常会在数据库论文中出现。</p>
<!-- TODO: 关系代数符号 -->
<p><br></p>
<h1 id="结论和其他"><a href="#结论和其他" class="headerlink" title="结论和其他"></a>结论和其他</h1><p><img data-src="/images/CMU1544564/Lec01/55.jpg" alt="55.jpg"></p>
<ul>
<li>我们可以看到，对于一个查询，可以有不同的途径(关系代数表达式)去完成。这些途径的复杂度很可能不一样，这个是数据库SQL的一个优化点。　(logical plan)</li>
<li>SQL是属于<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGVjbGFyYXRpdmVfcHJvZ3JhbW1pbmc=" title="https://en.wikipedia.org/wiki/Declarative_programming">声明式编程 Declarative programming<i class="fa fa-external-link"></i></span>，就是我们只是指定我们想得到什么数据，而不指定通过什么形式去获得它。这个给了数据库去找出最佳的(最快速的)途径去解决SQL查询。也映照了上一点提到的<strong>优化点</strong>。</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec01/56.jpg" alt="56.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/57.jpg" alt="57.jpg"> </p>
<h1 id="Last-Word-joy"><a href="#Last-Word-joy" class="headerlink" title="Last Word (:joy:)"></a>Last Word (<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>)</h1><blockquote>
<p>The most important thing you need to understand about databases throughout this, through the rest of your life is the following: when you look back at the 36 Chambers, understand who were the original 9 involved in it. You have the RZA, the GZA, Inspectah Deck, Ghostface Killah, Masta Killa, U-God, Method Man, Ol’ Dirty Bastard, Raekwon. But, the other important thing too is Cappadonna was in jail at the time, so he was actually an original member of the clan. But because he was in jail, he couldn’t be on the 36 Chambers. So, that’s the most important thing you need to understand throughout this entire semester.</p>
</blockquote>
<p>引用：</p>
<p>CMU 15445 1.关系模型 - 西部小笼包: <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kZDRlNDgwYjRjODQ=" title="https://www.jianshu.com/p/dd4e480b4c84">https://www.jianshu.com/p/dd4e480b4c84<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CMU-15445</category>
        <category>SQL</category>
        <category>Relation Algebra</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Relation Algebra</tag>
      </tags>
  </entry>
  <entry>
    <title>[CMU-15445]Lec00</title>
    <url>/2020/03/05/CMU-15445-Lec00/</url>
    <content><![CDATA[<p>CMU 15-445/645 Intro to Database Systems 是一门非常优秀的<strong>关系数据库管理系统</strong>入门的课。它从系统的角度，对关系数据库管理系统的各个组成部分进行介绍。它帮助我注意到了很多我之前疏漏的地方，是一个很好对所有数据库概念查漏补缺的机会。这里我以2019 Fall学期的内容为主，分享我的笔记。</p>
<a id="more"></a>
<h1 id="教授"><a href="#教授" class="headerlink" title="教授"></a>教授</h1><p>大名鼎鼎的<span class="exturl" data-url="aHR0cHM6Ly93d3cuY3MuY211LmVkdS9+cGF2bG8v" title="https://www.cs.cmu.edu/~pavlo/">Andy Pavlo<i class="fa fa-external-link"></i></span></p>
<p>我很有幸在他来TUM的时候，听了一次他的 guest lecture。</p>
<h1 id="课程页面"><a href="#课程页面" class="headerlink" title="课程页面"></a>课程页面</h1><p>在课程页面中可以找到课件，作业(以及答案)，实验(Assignment)等等材料：</p>
<ul>
<li>2019: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTkv" title="https://15445.courses.cs.cmu.edu/fall2019/">https://15445.courses.cs.cmu.edu/fall2019/<i class="fa fa-external-link"></i></span></li>
<li>2018: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTgv" title="https://15445.courses.cs.cmu.edu/fall2018/">https://15445.courses.cs.cmu.edu/fall2018/<i class="fa fa-external-link"></i></span></li>
<li>2017: <span class="exturl" data-url="aHR0cHM6Ly8xNTQ0NS5jb3Vyc2VzLmNzLmNtdS5lZHUvZmFsbDIwMTcv" title="https://15445.courses.cs.cmu.edu/fall2017/">https://15445.courses.cs.cmu.edu/fall2017/<i class="fa fa-external-link"></i></span></li>
</ul>
<p>2018和2019很像，但是2017年的内容不太一样。</p>
<h1 id="课程视频录像"><a href="#课程视频录像" class="headerlink" title="课程视频录像"></a>课程视频录像</h1><h2 id="YouTube"><a href="#YouTube" class="headerlink" title="YouTube"></a>YouTube</h2><ul>
<li>2019: <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1vZVlCZGdoYUlqYyZhbXA7bGlzdD1QTFNFOE9EaGpaWGpib2hrTkJXUXNfb3RUckJUcmp5b2hp" title="https://www.youtube.com/watch?v=oeYBdghaIjc&amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi">https://www.youtube.com/watch?v=oeYBdghaIjc&amp;list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi<i class="fa fa-external-link"></i></span></li>
<li>2018: <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj12eVZHbV8yaUZ3VSZhbXA7bGlzdD1QTFNFOE9EaGpaWGphM2hnbXV3aGY4OXFib1Yxa094TXg3" title="https://www.youtube.com/watch?v=vyVGm_2iFwU&amp;list=PLSE8ODhjZXja3hgmuwhf89qboV1kOxMx7">https://www.youtube.com/watch?v=vyVGm_2iFwU&amp;list=PLSE8ODhjZXja3hgmuwhf89qboV1kOxMx7<i class="fa fa-external-link"></i></span></li>
<li>2017: <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj14amhRMGU5SGxkcyZhbXA7bGlzdD1QTFNFOE9EaGpaWGpZdXRWelRlQWRzOHhVdDFyY215VDd4" title="https://www.youtube.com/watch?v=xjhQ0e9Hlds&amp;list=PLSE8ODhjZXjYutVzTeAds8xUt1rcmyT7x">https://www.youtube.com/watch?v=xjhQ0e9Hlds&amp;list=PLSE8ODhjZXjYutVzTeAds8xUt1rcmyT7x<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="哔哩哔哩"><a href="#哔哩哔哩" class="headerlink" title="哔哩哔哩"></a>哔哩哔哩</h2><p>课程视频是应用Creative Commons版权协议，见　<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20veW91dHViZS9hbnN3ZXIvMjc5NzQ2OA==" title="https://support.google.com/youtube/answer/2797468">https://support.google.com/youtube/answer/2797468<i class="fa fa-external-link"></i></span> 。因此我们在B站也可以看到如下：</p>
<ul>
<li>2019: <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2OTE5MTkzMjk/ZnJvbT1zZWFyY2gmYW1wO3NlaWQ9MTU5ODIyNTc4MDMxODkyNDIxNjY=" title="https://www.bilibili.com/video/av91919329?from=search&amp;seid=15982257803189242166">https://www.bilibili.com/video/av91919329?from=search&amp;seid=15982257803189242166<i class="fa fa-external-link"></i></span></li>
<li>2018: <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2Mzk3MzExODU/ZnJvbT1zZWFyY2gmYW1wO3NlaWQ9MTU5ODIyNTc4MDMxODkyNDIxNjY=" title="https://www.bilibili.com/video/av39731185?from=search&amp;seid=15982257803189242166">https://www.bilibili.com/video/av39731185?from=search&amp;seid=15982257803189242166<i class="fa fa-external-link"></i></span></li>
<li>2017: 无</li>
</ul>
<h1 id="音乐-joy"><a href="#音乐-joy" class="headerlink" title="音乐 (:joy:)"></a>音乐 (<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span>)</h1><ul>
<li>2018开场音乐:<br>　A Tribe Called Quest - Vibes and Stuff <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0yZmtiZ1IyRnN3aw==" title="https://www.youtube.com/watch?v=2fkbgR2Fswk">https://www.youtube.com/watch?v=2fkbgR2Fswk<i class="fa fa-external-link"></i></span></li>
<li>2018结束音乐:<br>　Geto Boys &amp; Ice Cube - 5th Ward South Central Malt <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1WRERQOUozR2Y4cw==" title="https://www.youtube.com/watch?v=VDDP9J3Gf8s">https://www.youtube.com/watch?v=VDDP9J3Gf8s<i class="fa fa-external-link"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1aZDd3alJDR2otUQ==" title="https://www.youtube.com/watch?v=Zd7wjRCGj-Q">https://www.youtube.com/watch?v=Zd7wjRCGj-Q<i class="fa fa-external-link"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly9nZW5pdXMuY29tL0dldG8tYm95cy01dGgtd2FyZC1zb3V0aC1jZW50cmFsLW1hbHQtbHlyaWNz" title="https://genius.com/Geto-boys-5th-ward-south-central-malt-lyrics">https://genius.com/Geto-boys-5th-ward-south-central-malt-lyrics<i class="fa fa-external-link"></i></span></li>
<li>2019开场音乐:<br>　Dan Le Sac &amp; Scroobius Pip - Thou Shalt Always Kill <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1DV3JNR1h3aEZMaw==" title="https://www.youtube.com/watch?v=CWrMGXwhFLk">https://www.youtube.com/watch?v=CWrMGXwhFLk<i class="fa fa-external-link"></i></span></li>
<li>2019结束音乐:<br>　Wu-Tang Clan - Shaolin Brew <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1WcmhZMHFSXzdVMA==" title="https://www.youtube.com/watch?v=VrhY0qR_7U0">https://www.youtube.com/watch?v=VrhY0qR_7U0<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="SYLLABUS-COURSE-INFORMATION"><a href="#SYLLABUS-COURSE-INFORMATION" class="headerlink" title="SYLLABUS -  COURSE INFORMATION"></a>SYLLABUS -  COURSE INFORMATION</h1><blockquote>
<p>This course is on the design and implementation of database management systems. Topics include data models (relational, document, key/value), storage models (n-ary, decomposition), query languages (SQL, stored procedures), storage architectures (heaps, log-structured), indexing (order preserving trees, hash tables), transaction processing (ACID, concurrency control), recovery (logging, checkpoints), query processing (joins, sorting, aggregation, optimization), and parallel architectures (multi-core, distributed). Case studies on open-source and commercial database systems are used to illustrate these techniques and trade-offs. The course is appropriate for students with lit systems programming skills.</p>
</blockquote>
<h1 id="课程要求"><a href="#课程要求" class="headerlink" title="课程要求"></a>课程要求</h1><p>这部分是我<strong>主观</strong>的想法和经验，我基本看过整个课内容，抽象出这门课内容上的要求：</p>
<ul>
<li>本科生基础课程度的 计算机组成 <ul>
<li>CPU中指令的执行</li>
<li>存储层次(<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWVtb3J5X2hpZXJhcmNoeQ==" title="https://en.wikipedia.org/wiki/Memory_hierarchy">Memory hierarchy<i class="fa fa-external-link"></i></span>)</li>
<li>指令流水线，分支预测(<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUHJlZGljYXRpb25fKGNvbXB1dGVyX2FyY2hpdGVjdHVyZQ==" title="https://en.wikipedia.org/wiki/Predication_(computer_architecture">Predication<i class="fa fa-external-link"></i></span>))</li>
<li>单指令流多数据流 Single instruction, multiple data (SIMD)</li>
</ul>
</li>
<li>本科生基础课程度的 操作系统<ul>
<li>线程与进程关联和通信</li>
<li>内存管理，虚拟内存</li>
<li>文件系统</li>
</ul>
</li>
<li>本科生基础课程度的　数据库课程<ul>
<li>了解理论概念即可</li>
</ul>
</li>
<li>超过本科生基础课程度的　现代C++编程能力<ul>
<li>C++11 和 C++17</li>
<li>线程安全</li>
<li>C++项目管理<ul>
<li>git</li>
<li>CMake</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>反而单纯数据库中理论的东西不再重要，如Function Dependency, Normal Form, Tuple Calculus, Domain Calculus。(2019 Fall)这门课舍弃了这些东西，来有更多时间花在数据库操作系统内部的架构和实现。我个人建议最好同时也上过本科生程度的数据库课程，这样能将所有理论概念和实现联系在一起。但是总体上，对系统方向的要求远远高于对理论的要求。</p>
<h1 id="其他人的笔记"><a href="#其他人的笔记" class="headerlink" title="其他人的笔记"></a>其他人的笔记</h1><h2 id="完整笔记"><a href="#完整笔记" class="headerlink" title="完整笔记"></a>完整笔记</h2><p>数据库设计 - 西部小笼包 <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vbmIvMzYyNjU4NDE=" title="https://www.jianshu.com/nb/36265841">https://www.jianshu.com/nb/36265841<i class="fa fa-external-link"></i></span></p>
<p>Database - fxjwind　<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZnhqd2luZC9jYXRlZ29yeS8xNDkzODMzLmh0bWw=" title="https://www.cnblogs.com/fxjwind/category/1493833.html">https://www.cnblogs.com/fxjwind/category/1493833.html<i class="fa fa-external-link"></i></span></p>
<h2 id="非完整笔记"><a href="#非完整笔记" class="headerlink" title="非完整笔记"></a>非完整笔记</h2><p>Gexrior的博客 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dleHJpb3I=" title="https://blog.csdn.net/Gexrior">https://blog.csdn.net/Gexrior<i class="fa fa-external-link"></i></span></p>
<p>CMU数据库系统总结 - liu-jianhao’s Blog <span class="exturl" data-url="aHR0cHM6Ly9saXUtamlhbmhhby5naXRodWIuaW8vMjAxOC8xMC9jbXUlRTYlOTUlQjAlRTYlOEQlQUUlRTUlQkElOTMlRTclQjMlQkIlRTclQkIlOUYlRTYlODAlQkIlRTclQkIlOTMv" title="https://liu-jianhao.github.io/2018/10/cmu%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BB%93/">https://liu-jianhao.github.io/2018/10/cmu%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BB%93/<i class="fa fa-external-link"></i></span></p>
<p><br><br><br></p>
<hr>
<h1 id="ADMINISTRIVIA"><a href="#ADMINISTRIVIA" class="headerlink" title="ADMINISTRIVIA"></a>ADMINISTRIVIA</h1><p>第一次课的时候提到这门课的结构等事项，我们移步到这一次笔记中：</p>
<p><img data-src="/images/CMU1544564/Lec01/6.jpg" alt="6.jpg"></p>
<p><img data-src="/images/CMU1544564/Lec01/8.jpg" alt="8.jpg"></p>
<ul>
<li>第六版：<span class="exturl" data-url="aHR0cHM6Ly9kYi1ib29rLmNvbS9kYjYvaW5kZXguaHRtbA==" title="https://db-book.com/db6/index.html">https://db-book.com/db6/index.html<i class="fa fa-external-link"></i></span></li>
<li>第七版：<span class="exturl" data-url="aHR0cHM6Ly9kYi1ib29rLmNvbS9kYjcvaW5kZXguaHRtbA==" title="https://db-book.com/db7/index.html">https://db-book.com/db7/index.html<i class="fa fa-external-link"></i></span></li>
<li>这一门课主要介绍的内容都是几十年前成熟的技术。所有两版书对我们学生都一样。</li>
<li>这个书我推荐英文版的：　<span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yNjA0NTkzMS8=" title="https://book.douban.com/subject/26045931/">https://book.douban.com/subject/26045931/<i class="fa fa-external-link"></i></span>　高等教育出版社出版了影印版，适合国内喜欢实体纸质书的同学。</li>
</ul>
<p><img data-src="/images/CMU1544564/Lec01/12.jpg" alt="12.jpg"></p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NtdS1kYi9idXN0dWI=" title="https://github.com/cmu-db/bustub">https://github.com/cmu-db/bustub<i class="fa fa-external-link"></i></span></li>
</ul>
<p><img data-src="/images/CMU1544564/Lec01/15.jpg" alt="15.jpg"></p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5jcy5jbXUuZWR1Lw==" title="https://db.cs.cmu.edu/">https://db.cs.cmu.edu/<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NtdS1kYi90ZXJyaWVy" title="https://github.com/cmu-db/terrier">https://github.com/cmu-db/terrier<i class="fa fa-external-link"></i></span></li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CMU-15445</category>
      </categories>
  </entry>
  <entry>
    <title>[Security]GPG管理和文件加密</title>
    <url>/2020/03/03/Security-GPG-encrypt/</url>
    <content><![CDATA[<p>我们在前两篇文章中认识了GPG和它在GitHub中安全签名的作用。见<a href="https://cakebytheoceanluo.github.io/2020/03/02/Security-GPG-intro/">[Security] GPG 介绍与密钥生成</a> 和 <a href="https://cakebytheoceanluo.github.io/2020/03/02/Security-GPG-intro/">[Security] GPG 介绍与密钥生成</a>。</p>
<p>除了上面提到的用途以外，gpg还有许多作用，这篇文章主要介绍gpg的管理和文件加密。</p>
<a id="more"></a>
<p><br></p>
<h1 id="密钥管理"><a href="#密钥管理" class="headerlink" title="密钥管理"></a>密钥管理</h1><h2 id="列出密钥"><a href="#列出密钥" class="headerlink" title="列出密钥"></a>列出密钥</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --list-keys</span><br><span class="line"></span><br><span class="line">/home/jigao/.gnupg/pubring.kbx</span><br><span class="line">------------------------------</span><br><span class="line">pub   rsa4096 2020-03-02 [SC]</span><br><span class="line">      704A75374771234881B10559F98069D551217BFD</span><br><span class="line">uid           [ultimate] Jigao Luo &lt;luojigao@outlook.com&gt;</span><br><span class="line">sub   rsa4096 2020-03-02 [E]</span><br></pre></td></tr></tbody></table></figure>
<p>第一行显示公钥文件名(pubring.gpg)，第二行显示公钥特征(4096位，Hash字符串和生成时间)，第三行显示”用户ID uid”，第四行显示私钥特征。<sup><a href="#myfootnote1">1</a></sup></p>
<p>或者可以使用如下命令，去列出密钥：<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --list-secret-keys --keyid-format LONG</span><br></pre></td></tr></tbody></table></figure><p></p>
<p><br></p>
<h2 id="获得完整公钥"><a href="#获得完整公钥" class="headerlink" title="获得完整公钥"></a>获得完整公钥</h2><p>公钥(public key)文件(.gnupg/pubring.gpg)以二进制形式储存，<code>--armor参数</code>可以将其转换为ASCII码显示。</p>
<ul>
<li>我们需要以standard out的方式输出我们的公钥: <code>gpg --armor --export [Key ID]</code></li>
<li>或者我们加上<code>--output &lt;filename&gt;</code>参数，可以将这个公钥写入一个输出文件: <code>gpg --armor --output public-key.txt --export [Key ID]</code></li>
</ul>
<p>实际上的输出如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --armor --<span class="built_in">export</span> 704A75374771234881B10559F98069D551217BFD</span><br><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line"><span class="comment"># ...............</span></span><br><span class="line"><span class="comment"># .....已删去.....</span></span><br><span class="line"><span class="comment"># ...............</span></span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----</span><br></pre></td></tr></tbody></table></figure>
<p>事实上public key可以公开，这里我们节省文章空间将其删去。</p>
<p><br></p>
<h2 id="获得完整私钥"><a href="#获得完整私钥" class="headerlink" title="获得完整私钥"></a>获得完整私钥</h2><p>完全类似公钥的获取，我们可以用如下的命令获取私钥(private key)：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --armor --<span class="built_in">export</span>-secret-keys 704A75374771234881B10559F98069D551217BFD</span><br><span class="line">-----BEGIN PGP PRIVATE KEY BLOCK-----</span><br><span class="line"><span class="comment"># ...............</span></span><br><span class="line"><span class="comment"># .....已删去.....</span></span><br><span class="line"><span class="comment"># ...............</span></span><br><span class="line">-----END PGP PRIVATE KEY BLOCK-----</span><br></pre></td></tr></tbody></table></figure>
<p><strong>私钥是绝对不可以公开的，需要注意安全。</strong></p>
<p><br></p>
<h2 id="上传公钥-1"><a href="#上传公钥-1" class="headerlink" title="上传公钥 1"></a>上传公钥 <sup><a href="#myfootnote1">1</a></sup></h2><p>公钥服务器是网络上专门储存用户公钥的服务器。send-keys参数可以将公钥上传到服务器。(另外其他的中文教程这部分gpg指令已经过时)</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --send-keys [Key ID]</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --send-keys 704A75374771234881B10559F98069D551217BFD</span><br><span class="line">gpg: sending key F98069D551217BFD to hkps://hkps.pool.sks-keyservers.net</span><br></pre></td></tr></tbody></table></figure>
<p>使用上面的命令，你的公钥就被传到了服务器 hkps://hkps.pool.sks-keyservers.net ，然后通过交换机制，所有的公钥服务器最终都会包含你的公钥。</p>
<p><br></p>
<p>由于公钥服务器没有检查机制，任何人都可以用你的名义上传公钥，所以没有办法保证服务器上的公钥的可靠性。通常，你可以在网站上公布一个公钥指纹，让其他人核对下载到的公钥是否为真。</p>
<p><code>--fingerprint</code>参数生成公钥指纹。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --fingerprint [Key ID]</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --fingerprint 704A75374771234881B10559F98069D551217BFD</span><br><span class="line">pub   rsa4096 2020-03-02 [SC]</span><br><span class="line">      704A 7537 4771 2348 81B1  0559 F980 69D5 5121 7BFD</span><br><span class="line">uid           [ultimate] Jigao Luo &lt;luojigao@outlook.com&gt;</span><br><span class="line">sub   rsa4096 2020-03-02 [E]</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="输入密钥-1"><a href="#输入密钥-1" class="headerlink" title="输入密钥 1"></a>输入密钥 <sup><a href="#myfootnote1">1</a></sup></h2><p>除了生成自己的密钥，还需要将他人的公钥或者你的其他密钥输入系统。这时可以使用import参数。</p>
<blockquote>
<pre><code> --import                import/merge keys
</code></pre></blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --import [密钥文件]</span><br></pre></td></tr></tbody></table></figure>
<p>为了获得他人的公钥，可以让对方直接发给你，或者到公钥服务器上寻找。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --search-keys [Key ID]</span><br></pre></td></tr></tbody></table></figure>
<p>作为例子，我搜了一下自己的key:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --search-keys F98069D551217BFD</span><br><span class="line">gpg: data <span class="built_in">source</span>: https://209.244.105.201:443</span><br><span class="line">(1)	Jigao Luo &lt;luojigao@outlook.com&gt;</span><br><span class="line">	  4096 bit RSA key F98069D551217BFD, created: 2020-03-02</span><br><span class="line">Keys 1-1 of 1 <span class="keyword">for</span> <span class="string">"F98069D551217BFD"</span>.  Enter number(s), N)ext, or Q)uit &gt; 1</span><br><span class="line">gpg: key F98069D551217BFD: <span class="string">"Jigao Luo &lt;luojigao@outlook.com&gt;"</span> not changed</span><br><span class="line">gpg: Total number processed: 1</span><br><span class="line">gpg:              unchanged: 1</span><br></pre></td></tr></tbody></table></figure>
<p>正如前面提到的，我们无法保证服务器上的公钥是否可靠，下载后还需要用fingerprint验证。</p>
<p><br></p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>比如我们想把下列这个key pair给删除：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --list-keys</span><br><span class="line">/home/jigao/.gnupg/pubring.kbx</span><br><span class="line">------------------------------</span><br><span class="line">pub   rsa3072 2020-03-03 [SC] [expires: 2022-03-03]</span><br><span class="line">      35BF00DD4737307A75C0E7A2C8C3592484FDBAD9</span><br><span class="line">uid           [ultimate] Abc Def &lt;abc.def@domain.com&gt;</span><br><span class="line">sub   rsa3072 2020-03-03 [E] [expires: 2022-03-03]</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>需要使用<code>gpg --delete-secret-keys [Key ID]</code>去删除密钥：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --delete-secret-keys 35BF00DD4737307A75C0E7A2C8C3592484FDBAD9</span><br><span class="line">gpg (GnuPG) 2.2.4; Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sec  rsa3072/C8C3592484FDBAD9 2020-03-03 Abc Def &lt;abc.def@domain.com&gt;</span><br><span class="line"></span><br><span class="line">Delete this key from the keyring? (y/N) y</span><br><span class="line">This is a secret key! - really delete? (y/N) y</span><br><span class="line"></span><br><span class="line">$ gpg --list-keys</span><br><span class="line">/home/jigao/.gnupg/pubring.kbx</span><br><span class="line">------------------------------</span><br><span class="line">pub   rsa3072 2020-03-03 [SC] [expires: 2022-03-03]</span><br><span class="line">      35BF00DD4737307A75C0E7A2C8C3592484FDBAD9</span><br><span class="line">uid           [ultimate] Abc Def &lt;abc.def@domain.com&gt;</span><br><span class="line">sub   rsa3072 2020-03-03 [E] [expires: 2022-03-03]</span><br></pre></td></tr></tbody></table></figure>
<p>但是我们发现<code>gpg --list-keys</code>命令后依旧能看见这个key。这是因为我们之删去了密钥，但是对应的公钥还存在。</p>
<p><br></p>
<p>需要使用<code>gpg --delete-keys [Key ID]</code>去删除公钥，之后这个key pair就真正消失了：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --delete-keys 35BF00DD4737307A75C0E7A2C8C3592484FDBAD9</span><br><span class="line">gpg (GnuPG) 2.2.4; Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">pub  rsa3072/C8C3592484FDBAD9 2020-03-03 Abc Def &lt;abc.def@domain.com&gt;</span><br><span class="line"></span><br><span class="line">Delete this key from the keyring? (y/N) y</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h1 id="加密和解密"><a href="#加密和解密" class="headerlink" title="加密和解密"></a>加密和解密</h1><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>我们假设一种实验，某人想发一个文件给我。他想用我的public key去加密这个文件， 来保证这个传输的安全性并且这个文件只能被我所阅读。</p>
<p>TA创建一个文件<code>file.txt</code>作为例子：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ touch file.txt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"This is a message."</span> &gt; file.txt </span><br><span class="line"></span><br><span class="line">$ cat file.txt </span><br><span class="line">This is a message.</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><p><code>--r [Key ID]</code>或<code>--recipient [Key ID]</code>参数：指定使用接受者的公钥</p>
<blockquote>
<p> -r, —recipient USER-ID     encrypt for USER-ID</p>
</blockquote>
</li>
<li><p><code>-e</code>或<code>--encrypt</code>参数： 指定加密数据</p>
<blockquote>
<p> -e, —encrypt               encrypt data</p>
</blockquote>
</li>
<li><p><code>-o</code> 或 <code>--outpu</code>参数: 指定输出文件</p>
<blockquote>
<p> -o, —output FILE           write output to FILE</p>
</blockquote>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --recipient [Key ID] --output file_encrypted.txt  --encrypt file.txt</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>继续我们的例子:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --recipient F98069D551217BFD --output file_encrypted.txt  --encrypt file.txt </span><br><span class="line"></span><br><span class="line">$ file file_encrypted.txt </span><br><span class="line">file_encrypted.txt: PGP RSA encrypted session key - keyid: E2067632 AA759BAE RSA (Encrypt or Sign) 4096b .</span><br><span class="line"></span><br><span class="line">$ xxd file_encrypted.txt </span><br><span class="line">00000000: 8502 0c03 3276 06e2 ae9b 75aa 0110 00ab  ....2v....u.....</span><br><span class="line">00000010: 442a 4ce4 a044 50e3 c769 e287 5e7d 3b22  D*L..DP..i..^};<span class="string">"</span></span><br><span class="line"><span class="string">00000020: 7d32 ff25 ff99 2297 ec62 b2ed e9f2 4635  }2.%.."</span>..b....F5</span><br><span class="line">00000030: b6e4 76b1 f2dc 7f1a bbf1 c2c7 0ba7 7978  ..v...........yx</span><br><span class="line">00000040: f2b5 5821 fa1b 6dbe f1b3 4b9e e82c de32  ..X!..m...K..,.2</span><br><span class="line">00000050: e6bd ff1c 7655 9708 edb6 95aa e55d f858  ....vU.......].X</span><br><span class="line">00000060: 3a99 c823 f132 0b61 2b6d 41d6 5a13 9ca1  :..<span class="comment">#.2.a+mA.Z...</span></span><br><span class="line">00000070: f0b2 8530 ae43 6bbb 97b9 2e0f 16d3 4ae3  ...0.Ck.......J.</span><br><span class="line">00000080: 7048 3f7b ead6 bd9e e147 e503 3d54 937c  pH?{.....G..=T.|</span><br><span class="line">00000090: f7d7 9b44 a197 f10a 71de 9333 da37 bbd4  ...D....q..3.7..</span><br><span class="line">000000a0: de3e ceaf 90e7 d555 69be 8e11 8655 5dfb  .&gt;.....Ui....U].</span><br><span class="line">000000b0: c0ac 7eaa 4389 6bcc 3da3 ecc7 dd45 8a03  ..~.C.k.=....E..</span><br><span class="line">000000c0: a124 acd1 a082 21d6 81f1 79d3 d8a0 ce7c  .$....!...y....|</span><br><span class="line">000000d0: 9433 5a43 140b 84e1 b814 4184 577d 1485  .3ZC......A.W}..</span><br><span class="line">000000e0: 9f49 82ba 83dd 1419 8c29 cf6d de09 4373  .I.......).m..Cs</span><br><span class="line">000000f0: e1b9 e1a3 3f65 e2c5 5642 4a5d eec9 862e  ....?e..VBJ]....</span><br><span class="line">00000100: 41cf d68b ef93 8c2e b29b 5ac4 a415 c6d0  A.........Z.....</span><br><span class="line">00000110: d80b 4bda 0f4a 03e2 6342 64e1 9382 0dc5  ..K..J..cBd.....</span><br><span class="line">00000120: b74c d8da c0d1 ea94 2553 705b 18e1 f82e  .L......%Sp[....</span><br><span class="line">00000130: cbaa df9a 6b4c fa5e 7db6 f5fa 13e9 635c  ....kL.^}.....c\</span><br><span class="line">00000140: 92a0 3cc6 e74f eba7 340c 7bff 2d09 6dcf  ..&lt;..O..4.{.-.m.</span><br><span class="line">00000150: 7315 caef e6e2 c0a5 8bf2 c562 5b52 b146  s..........b[R.F</span><br><span class="line">00000160: a7a1 ef0f 15f4 1b9c 2faa 5667 f0d9 4aee  ......../.Vg..J.</span><br><span class="line">00000170: 6e63 e2bc b819 5599 d9f9 ee42 4762 29e1  nc....U....BGb).</span><br><span class="line">00000180: 49ec 5974 95ba 8ecb 2304 b9f0 4649 a23c  I.Yt....<span class="comment">#...FI.&lt;</span></span><br><span class="line">00000190: 0ba5 cb75 e7f6 b725 939a 26d5 251a 3d8e  ...u...%..&amp;.%.=.</span><br><span class="line">000001a0: f2b5 829c c428 3083 0be3 edb0 d5d2 3574  .....(0.......5t</span><br><span class="line">000001b0: eb16 c2e4 987b 46b8 4080 e252 f94c fafe  .....{F.@..R.L..</span><br><span class="line">000001c0: 5655 e273 ee86 7fa9 7814 4c2a b62b 4c86  VU.s....x.L*.+L.</span><br><span class="line">000001d0: 1e69 6dab 7ded 7385 bca1 cc43 ae4b 19f0  .im.}.s....C.K..</span><br><span class="line">000001e0: f43e 4b4c fafd aa10 6a5f ac5e 32a1 0c69  .&gt;KL....j_.^2..i</span><br><span class="line">000001f0: fe69 36fb a76f 3b34 2dd8 3e15 c5c4 7aaf  .i6..o;4-.&gt;...z.</span><br><span class="line">00000200: cc8f bfc4 e916 3e00 49c5 477e cbd8 43d2  ......&gt;.I.G~..C.</span><br><span class="line">00000210: 5401 dccd 617c 7104 4982 0286 72d8 a48f  T...a|q.I...r...</span><br><span class="line">00000220: 06f6 e1a8 a64e cffd 1120 b732 87e3 5683  .....N... .2..V.</span><br><span class="line">00000230: 5137 445a adae c261 8701 c5e2 42ed 4950  Q7DZ...a....B.IP</span><br><span class="line">00000240: 168c 5d3a ae9d f810 85fb f37e 0620 613f  ..]:.......~. a?</span><br><span class="line">00000250: 58ef ae75 886e fc72 2e86 eda6 44b8 b163  X..u.n.r....D..c</span><br><span class="line">00000260: 0d2f 41f4 97</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>file_encrypted.txt</code>即我们的加密过后的文件，它是以二进制来保存的。</li>
<li><code>file</code> 命令行工具：查看文件类型。</li>
<li><code>xxd</code> 命令行工具： 以十六进制<code>hex</code>的形式查看一个二进制文件。类似<code>hexdump</code>命令行工具。</li>
</ul>
<p>总之我们加密过后，这个文件已经成为面目全非的二进制文件，文件格式也变成了<code>PGP RSA encrypted session key</code>。</p>
<p><br></p>
<h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>TA进行加密以后，并且成功发送给了我。现在需要我去解密，这需要我的private key。因此这个文件只能被我所读。</p>
<p>这里提一下，解密一个文件是<code>gpg</code> 默认的行为, 我们可以不用任何flag, 直接指定我们需要解密的文件即可：</p>
<blockquote>
<p> -d, —decrypt               decrypt data (default)</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg file_encrypted.txt</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>继续我们的例子:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg file_encrypted.txt </span><br><span class="line">gpg: WARNING: no <span class="built_in">command</span> supplied.  Trying to guess what you mean ...</span><br><span class="line">gpg: encrypted with 4096-bit RSA key, ID 327606E2AE9B75AA, created 2020-03-02</span><br><span class="line">      <span class="string">"Jigao Luo &lt;luojigao@outlook.com&gt;"</span></span><br><span class="line">gpg: file_encrypted.txt: unknown suffix</span><br><span class="line">Enter new filename [file.txt]: file_decrypted.txt</span><br><span class="line"></span><br><span class="line">$ cat file_decrypted.txt </span><br><span class="line">This is a message.</span><br></pre></td></tr></tbody></table></figure>
<p>这样我(a.k.a.对应密钥的拥有者)就可以读取这个加密的文件。</p>
<p>这个过程同时可以应用于邮件发送接受，网络消息的发送接收，总之广义信息交互中需要验证于安全的场合。</p>
<p><br></p>
<h1 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h1><h2 id="文件签名成二进制文件"><a href="#文件签名成二进制文件" class="headerlink" title="文件签名成二进制文件"></a>文件签名成二进制文件</h2><p>如果我不需要加密文件，但只需要对文件签名来表示这个文件确实是我本人发出的。 这种情况下我们需要<code>--sign</code>参数：</p>
<blockquote>
<p>-s, —sign                  make a signature</p>
</blockquote>
<p><br></p>
<p>我们继续以那个文件<code>file.txt</code>作为例子：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --sign file.txt</span><br><span class="line"></span><br><span class="line">$ file file.txt.gpg </span><br><span class="line">file.txt.gpg: data</span><br><span class="line"></span><br><span class="line">$ xxd file.txt.gpg </span><br><span class="line">00000000: a301 01e8 0117 fe90 0d03 000a 01c4 794a  ..............yJ</span><br><span class="line">00000010: 7a8d cff1 6d01 ac21 6208 6669 6c65 2e74  z...m..!b.file.t</span><br><span class="line">00000020: 7874 5e5e 7fa6 5468 6973 2069 7320 6120  xt^^..This is a </span><br><span class="line">00000030: 6d65 7373 6167 652e 0a89 01b3 0400 010a  message.........</span><br><span class="line">00000040: 001d 1621 04d7 9c54 1d63 6bbb aeed 16b2  ...!...T.ck.....</span><br><span class="line">00000050: e5c4 794a 7a8d cff1 6d05 025e 5e7f a600  ..yJz...m..^^...</span><br><span class="line">00000060: 0a09 10c4 794a 7a8d cff1 6d9e 870b fd1f  ....yJz...m.....</span><br><span class="line">00000070: 0f84 a7e0 f5d6 50c8 5b0f 1948 ad44 e0a1  ......P.[..H.D..</span><br><span class="line">00000080: 1d52 21f9 26df 7d18 6f85 0323 39e5 0335  .R!.&amp;.}.o..<span class="comment">#9..5</span></span><br><span class="line">00000090: 057b 6887 f8d6 6d0f fa84 b2bf 3384 6536  .{h...m.....3.e6</span><br><span class="line">000000a0: 6737 352c 7019 defe fed3 3a8e 44b8 75c3  g75,p.....:.D.u.</span><br><span class="line">000000b0: bb4f 3df8 89c1 ccad 1aef 260d e6c4 99d3  .O=.......&amp;.....</span><br><span class="line">000000c0: 976f 5b22 707e 2a29 3e61 2a19 ea4e fc89  .o[<span class="string">"p~*)&gt;a*..N..</span></span><br><span class="line"><span class="string">000000d0: 89e2 18bc cf53 0dba 6d5d cc4e f9bf 3641  .....S..m].N..6A</span></span><br><span class="line"><span class="string">000000e0: 6097 1334 9296 d99e 2229 774b a129 172b  `..4...."</span>)wK.).+</span><br><span class="line">000000f0: 856c 0558 8940 54af 934c 198c d603 bcff  .l.X.@T..L......</span><br><span class="line">00000100: ad1e 9fc6 2f57 3ec9 0641 6207 37b2 27eb  ..../W&gt;..Ab.7.<span class="string">'.</span></span><br><span class="line"><span class="string">00000110: 9a67 388d 8dc2 02a2 cf6e 6bb3 35c9 3e90  .g8......nk.5.&gt;.</span></span><br><span class="line"><span class="string">00000120: 2c3b f224 4ade 01a6 a4fb 9a4d c751 43a6  ,;.$J......M.QC.</span></span><br><span class="line"><span class="string">00000130: ce9a 10ae f234 76ee 50fb 5cd4 7cc0 22f7  .....4v.P.\.|.".</span></span><br><span class="line"><span class="string">00000140: 52ce 17d0 1893 3952 8817 f193 c42e 72f1  R.....9R......r.</span></span><br><span class="line"><span class="string">00000150: 180f 797b 8199 8f10 ce5b bbb0 a822 9e02  ..y{.....[..."..</span></span><br><span class="line"><span class="string">00000160: 98df 775e 3592 469f 6cb0 41e9 fb25 de19  ..w^5.F.l.A..%..</span></span><br><span class="line"><span class="string">00000170: 5f01 b317 7c5b c1e2 9e48 9ed0 84c3 d22c  _...|[...H.....,</span></span><br><span class="line"><span class="string">00000180: f3e0 c2ad f20b 3363 0c9d c6a6 5823 6579  ......3c....X#ey</span></span><br><span class="line"><span class="string">00000190: 78ba 62cd 6534 e5c6 14f8 89cb dbdc 0238  x.b.e4.........8</span></span><br><span class="line"><span class="string">000001a0: 048e 876a f927 4ecd bad4 dd8a 6785 d783  ...j.'</span>N.....g...</span><br><span class="line">000001b0: c4b7 4dd5 014a 47df a6bc 2314 2db8 a289  ..M..JG...<span class="comment">#.-...</span></span><br><span class="line">000001c0: b690 a328 f5b0 006e f1c8 fc6b 3952 4261  ...(...n...k9RBa</span><br><span class="line">000001d0: 03eb f184 da0c 0dcd db99 600e 97b2 2ac5  ..........`...*.</span><br><span class="line">000001e0: 1386 47dd 58f1 185f b99b c316 3045 d7    ..G.X.._....0E.</span><br></pre></td></tr></tbody></table></figure>
<p>对应的命令会在同一个目录下生成<code>file.txt.gpg</code>文件，这就是签名后的文件。这个文件默认采用二进制储存。</p>
<h2 id="文件签名成ASCII形式"><a href="#文件签名成ASCII形式" class="headerlink" title="文件签名成ASCII形式"></a>文件签名成ASCII形式</h2><p>如果想生成<code>ASCII</code>形式的文件于签名，可以使用<code>--clear-sign</code>参数。</p>
<blockquote>
<pre><code> --clear-sign            make a clear text signature
</code></pre></blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --clear-sign file.txt </span><br><span class="line"></span><br><span class="line">$ file file.txt</span><br><span class="line">file.txt      file.txt.asc  file.txt.gpg  </span><br><span class="line"></span><br><span class="line">$ file file.txt.asc </span><br><span class="line">file.txt.asc: ASCII text</span><br><span class="line"></span><br><span class="line">$ cat file.txt.asc</span><br><span class="line">-----BEGIN PGP SIGNED MESSAGE-----</span><br><span class="line">Hash: SHA512</span><br><span class="line"></span><br><span class="line">This is a message.</span><br><span class="line">-----BEGIN PGP SIGNATURE-----</span><br><span class="line"></span><br><span class="line">iQGzBAEBCgAdFiEE15xUHWNru67tFrLlxHlKeo3P8W0FAl5egKQACgkQxHlKeo3P</span><br><span class="line">8W2nqQwAn3YbhunmFuYvMWL4mxnJlpRK5XuAFPP5rU7MqvW6YM4qSyQ/UeGuEpqj</span><br><span class="line">veJCl2VI2Dx02wnh16EbVgDBolkwuC7QkIddWBSU8e6R1pL/kopLAdIbmE+HdnCr</span><br><span class="line">ggjWg7MgkhBmxKfOa+MHHaNgBfHepiWhor4J3EwqqWhzfRl1CL392Gqe7jJ+SEp1</span><br><span class="line">I5QOpkOsFEQQhQEVmiqPDeHRcIj9qKPA47z4WMujuP78c0Zr2rOdlUSnuv7Ly/1G</span><br><span class="line">5EqjCAc+ATNZO+SgUW5xXOalSGodDfUcK57ATORS3tztBDlTHn5zgaHxcoWaqsov</span><br><span class="line">5d68lxx75Q9nLr3MaMyRtMYtbN0Llef9DA3QAKd+bx3TWsB0HbXmrBXW0KxDh3oD</span><br><span class="line">F2IJ5vT1NrqvwqH2qzLZStqfGwcuyVQzmrfgSDnfhIViLk/tTiioJyBNqnU697L9</span><br><span class="line">1Xz2tZXXCqA+TgPLupd60bswpkVvg0DDCvEM2NvjhfwRATQ3iO1j7IDap1lzCiP1</span><br><span class="line">l/pjf/Su</span><br><span class="line">=Klzn</span><br><span class="line">-----END PGP SIGNATURE-----</span><br></pre></td></tr></tbody></table></figure>
<p>对应的命令会在同一个目录下生成<code>file.txt.asc</code>文件，这就是签名后的文件。这个文件是被<code>ASCII</code>形式存储的。我们可以发现，对应文件没有被加密，而是在文件中加入了证明发送者身份的签名。</p>
<h2 id="文件与签名分离"><a href="#文件与签名分离" class="headerlink" title="文件与签名分离"></a>文件与签名分离</h2><p>如果想生成单独的签名文件，与文件内容分开存放，可以使用<code>-b</code>或<code>--用detach-sign</code>参数。</p>
<blockquote>
<p> -b, —detach-sign           make a detached signature</p>
</blockquote>
<p>同样的，依旧有二进制签名和<code>ASCII</code>形式签名两种情况：</p>
<h3 id="二进制签名"><a href="#二进制签名" class="headerlink" title="二进制签名"></a>二进制签名</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --detach-sign file.txt</span><br><span class="line"></span><br><span class="line">$ file file.txt.sig </span><br><span class="line">file.txt.sig: data</span><br><span class="line"></span><br><span class="line">$ xxd file.txt.sig</span><br><span class="line">00000000: 8901 b304 0001 0a00 1d16 2104 d79c 541d  ..........!...T.</span><br><span class="line">00000010: 636b bbae ed16 b2e5 c479 4a7a 8dcf f16d  ck.......yJz...m</span><br><span class="line">00000020: 0502 5e5e 8209 000a 0910 c479 4a7a 8dcf  ..^^.......yJz..</span><br><span class="line">00000030: f16d 6726 0bff 4300 4721 eaef 002e 883d  .mg&amp;..C.G!.....=</span><br><span class="line">00000040: f4de c34a 39c5 2626 7c7b bddd 5bfc 2012  ...J9.&amp;&amp;|{..[. .</span><br><span class="line">00000050: 170a 90ec 37df 51e3 743e bbab 50b3 bfd1  ....7.Q.t&gt;..P...</span><br><span class="line">00000060: af2c d068 e99f ec59 8283 b812 a6a8 3a20  .,.h...Y......: </span><br><span class="line">00000070: e8a2 3701 c742 e24b d088 5b58 5df5 d6f4  ..7..B.K..[X]...</span><br><span class="line">00000080: b955 96fb 2c8e e006 4c6f 5de9 7dfb f625  .U..,...Lo].}..%</span><br><span class="line">00000090: 8f3c d254 b107 30b2 e6da 57c2 d986 d821  .&lt;.T..0...W....!</span><br><span class="line">000000a0: b8f7 4cdb aeb6 caa3 9bca a4de 62fd 5887  ..L.........b.X.</span><br><span class="line">000000b0: 5013 a1c8 d8f9 d7dd 67ee e104 f7c7 60b1  P.......g.....`.</span><br><span class="line">000000c0: 4145 8ea5 6950 66da 3718 66e2 6334 f0a0  AE..iPf.7.f.c4..</span><br><span class="line">000000d0: 3deb a604 9447 ef3d 3176 a831 fb7c 95d2  =....G.=1v.1.|..</span><br><span class="line">000000e0: 3289 4569 f6c2 8187 0550 d69e e6a8 325a  2.Ei.....P....2Z</span><br><span class="line">000000f0: 3194 f972 dfc1 1e76 9f44 19a2 3d69 74a2  1..r...v.D..=it.</span><br><span class="line">00000100: c52d 3d69 823d c799 41c1 a529 b02b 5143  .-=i.=..A..).+QC</span><br><span class="line">00000110: 9ecb 3560 a66b 32a6 f601 bb7d 05cf c1ed  ..5`.k2....}....</span><br><span class="line">00000120: 2652 bbfb 9d13 ffef d63a a417 905a 47b7  &amp;R.......:...ZG.</span><br><span class="line">00000130: c815 3125 b497 89a6 e72f a9bb 2513 57b4  ..1%...../..%.W.</span><br><span class="line">00000140: 1aa7 f527 1333 c4d8 8f80 d9bf f9b5 5686  ...<span class="string">'.3........V.</span></span><br><span class="line"><span class="string">00000150: 376c 39a2 1d09 7408 9c81 97d7 8fea 610a  7l9...t.......a.</span></span><br><span class="line"><span class="string">00000160: 54eb 1eed 8501 6b63 ea18 6a4d e4b0 b7cc  T.....kc..jM....</span></span><br><span class="line"><span class="string">00000170: fd79 c2dc 7c36 db97 b159 7f1c d994 3918  .y..|6...Y....9.</span></span><br><span class="line"><span class="string">00000180: f2f0 52e2 0b0f eaeb eead a851 df40 77ac  ..R........Q.@w.</span></span><br><span class="line"><span class="string">00000190: d19c b06a 9c9f 5bc2 1069 6854 6b1b acfd  ...j..[..ihTk...</span></span><br><span class="line"><span class="string">000001a0: 28c3 428c b7c8 a7d6 0b25 48c2 c608 29eb  (.B......%H...).</span></span><br><span class="line"><span class="string">000001b0: e3fd 9fd2 c9e0                           ......</span></span><br></pre></td></tr></tbody></table></figure>
<p>对应的命令会在同一个目录下生成<code>file.txt.sig</code>文件，这就是单独的二进制签名文件。</p>
<h3 id="ASCII形式签名"><a href="#ASCII形式签名" class="headerlink" title="ASCII形式签名"></a><code>ASCII</code>形式签名</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --armor --detach-sign file.txt</span><br><span class="line"></span><br><span class="line">$ file file.txt.asc </span><br><span class="line">file.txt.asc: PGP signature Signature (old)</span><br><span class="line"></span><br><span class="line">$ cat file.txt.asc </span><br><span class="line">-----BEGIN PGP SIGNATURE-----</span><br><span class="line"></span><br><span class="line">iQGzBAABCgAdFiEE15xUHWNru67tFrLlxHlKeo3P8W0FAl5egiwACgkQxHlKeo3P</span><br><span class="line">8W2I8gv/SDRWfH+up0JYEsrT/JG9MhyVw8Bc0nK11pJTfpIq12Pph0KA3h60Wa2U</span><br><span class="line">C2X+j1yNhaw8ajCAxMzZzpup2iwx5C1bRmKPxGfnKopM8Z531SRCan/GkDrPD0Sj</span><br><span class="line">NeBW/UzADhden+lKqRrEhGfuoCUr64XBJERA2gGZqcLqzIKKOf53nKKMox2MfLGa</span><br><span class="line">wTVT1tXEA6yBREdirq0w3ZKzcil+qSRUpaaHzvg2ohIn9M5V6eTVESciyIvD9L+D</span><br><span class="line">eVsnHlcKal4iVZNkISFmoJN9Krqdsjcnpxpu+QEyfbQ1jZL6mIvaz/OQLI/FJThh</span><br><span class="line">HwjUaCQqphlVQGGZhFyCbn+KHYMRttcvrXo482kadaLYGXMl8WVtFPTU0U+GDUOm</span><br><span class="line">vg6rZPm8q9LwFLNHhkajk0ebN0zqv3MDSnopI0PJEV0rzDd1M6ggdX5I9fbLOI/t</span><br><span class="line">RciB1za54BWvXZzgtHO5qJUCNlt0Cz1VGZnTqH3VFzwa3N9zzzMBWikpohgiw9df</span><br><span class="line">w6iUgMVs</span><br><span class="line">=gmx8</span><br><span class="line">-----END PGP SIGNATURE-----</span><br></pre></td></tr></tbody></table></figure>
<p>加上<code>--armor</code>参数的对应命令会在同一个目录下生成<code>file.txt.asc</code> 文件，这就是单独的<code>ASCII</code>形式签名文件。</p>
<h2 id="签名并加密"><a href="#签名并加密" class="headerlink" title="签名并加密"></a>签名并加密</h2><p>我们之前讲的都只是签名或加密中的一种。但更安全的是两者同时使用：</p>
<ul>
<li>发送者用自己的private key来对自己发送的文件进行签名。</li>
<li>发送者用接受者public key来对自己的发送进行加密。</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --<span class="built_in">local</span>-user [发信者 Key ID] --recipient [接收者 Key ID] --armor --sign --encrypt file.txt</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>--local-user</code>参数指定用发信者的私钥签名</li>
<li><code>--recipient</code>参数指定用接收者的公钥加密</li>
<li><code>--armor</code>参数表示采用ASCII码形式显示</li>
<li><code>--sign</code>参数表示需要签名</li>
<li><code>--encrypt</code>参数表示加密指定文件</li>
</ul>
<h2 id="验证签名"><a href="#验证签名" class="headerlink" title="验证签名"></a>验证签名</h2><p>我们收到别人签名后的文件，需要用对方的公钥验证签名是否为真。<code>--verify</code>参数用来验证。</p>
<p>我们最后验证之前生成的例子签名：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --verify file.txt.asc file.txt</span><br><span class="line">gpg: Signature made Tue 03 Mar 2020 05:13:32 PM CET</span><br><span class="line">gpg:                using RSA key D79C541D636BBBAEED16B2E5C4794A7A8DCFF16D</span><br><span class="line">gpg: Good signature from <span class="string">"Jigao &lt;jigao.luo@tum.de&gt;"</span> [ultimate]</span><br><span class="line"></span><br><span class="line">$ gpg --verify file.txt.sig file.txt</span><br><span class="line">gpg: Signature made Tue 03 Mar 2020 05:12:57 PM CET</span><br><span class="line">gpg:                using RSA key D79C541D636BBBAEED16B2E5C4794A7A8DCFF16D</span><br><span class="line">gpg: Good signature from <span class="string">"Jigao &lt;jigao.luo@tum.de&gt;"</span> [ultimate]</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>引用：</p>
<p><a name="myfootnote1">1</a>:　GPG入门教程 阮一峰 <span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTMvMDcvZ3BnLmh0bWw=" title="http://www.ruanyifeng.com/blog/2013/07/gpg.html">http://www.ruanyifeng.com/blog/2013/07/gpg.html<i class="fa fa-external-link"></i></span></p>
<p><br></p>
<p>推荐的阅读：</p>
<p>Paul Heinlein, GPG Quick Start <span class="exturl" data-url="aHR0cHM6Ly93d3cubWFkYm9hLmNvbS9nZWVrL2dwZy1xdWlja3N0YXJ0Lw==" title="https://www.madboa.com/geek/gpg-quickstart/">https://www.madboa.com/geek/gpg-quickstart/<i class="fa fa-external-link"></i></span></p>
<p>Ubuntu help，GnuPrivacyGuardHowto <span class="exturl" data-url="aHR0cHM6Ly9oZWxwLnVidW50dS5jb20vY29tbXVuaXR5L0dudVByaXZhY3lHdWFyZEhvd3Rv" title="https://help.ubuntu.com/community/GnuPrivacyGuardHowto">https://help.ubuntu.com/community/GnuPrivacyGuardHowto<i class="fa fa-external-link"></i></span></p>
<p>Reading OpenPGP E-mail - Ubuntu help <span class="exturl" data-url="aHR0cHM6Ly9oZWxwLnVidW50dS5jb20vY29tbXVuaXR5L0dudVByaXZhY3lHdWFyZEhvd3RvI1JlYWRpbmdfT3BlblBHUF9FLW1haWw=" title="https://help.ubuntu.com/community/GnuPrivacyGuardHowto#Reading_OpenPGP_E-mail">https://help.ubuntu.com/community/GnuPrivacyGuardHowto#Reading_OpenPGP_E-mail<i class="fa fa-external-link"></i></span></p>
<p>Alan Eliasen. GPG Tutorial <span class="exturl" data-url="aHR0cHM6Ly9mdXR1cmVib3kudXMvcGdwLmh0bWw=" title="https://futureboy.us/pgp.html">https://futureboy.us/pgp.html<i class="fa fa-external-link"></i></span></p>
<p>GnuPG 袖珍 HOWTO (中文版) <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ251cGcub3JnL2hvd3Rvcy96aC9pbmRleC5odG1s" title="https://www.gnupg.org/howtos/zh/index.html">https://www.gnupg.org/howtos/zh/index.html<i class="fa fa-external-link"></i></span></p>
<p>The GNU Privacy Handbook <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ251cGcub3JnL2dwaC9lbi9tYW51YWwuaHRtbA==" title="https://www.gnupg.org/gph/en/manual.html">https://www.gnupg.org/gph/en/manual.html<i class="fa fa-external-link"></i></span></p>
<p>Symmetric-Key Message Encryption - RFC 4880， OpenPGP Message Format <span class="exturl" data-url="aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQ4ODAjc2VjdGlvbi0zLjcuMi4y" title="https://tools.ietf.org/html/rfc4880#section-3.7.2.2">https://tools.ietf.org/html/rfc4880#section-3.7.2.2<i class="fa fa-external-link"></i></span></p>
<!-- 
该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Operating System</category>
      </categories>
      <tags>
        <tag>Security</tag>
        <tag>GPG</tag>
      </tags>
  </entry>
  <entry>
    <title>[Security]GPG在github的应用</title>
    <url>/2020/03/02/Security-GPG-github/</url>
    <content><![CDATA[<p>在本地的 git 仓库中，我们需要设置用户名和邮箱地址才能提交新的更改。值得注意的是，这并不需要跟你的 GitHub 账号相同。这带来了一个很严重的问题：任何人都可以设置用户名和邮箱地址来伪装成你，由于 GitHub 会自动根据用户名和邮箱地址关联单次的提交为注册的 GitHub 的账户，所以别人可以仿冒你的身份进行提交更改。<sup><a href="#myfootnote1">1</a></sup></p>
<p>另外你是否见过别人的github commit出现一个<code>verified</code>小标签：<br><img data-src="https://help.github.com/assets/images/help/commits/gpg-signed-commit-verified-without-details.png" alt="verified_commit"></p>
<p>上述这两件事情和我们之前的一篇文章息息相关：<a href="https://cakebytheoceanluo.github.io/2020/03/02/Security-GPG-intro/">[Security] GPG 介绍与密钥生成</a>。</p>
<a id="more"></a>
<p><br></p>
<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>在本地的 git 仓库中，我们需要设置用户名和邮箱地址才能提交新的更改。<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL3Yy" title="https://git-scm.com/book/en/v2">Pro Git<i class="fa fa-external-link"></i></span>这本书中提到：设置用户名和邮件地址是我们下载完<code>git</code>这个软件后必须做的第一件事情。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Abc Def"</span></span><br><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></tbody></table></figure>
<p>值得注意的是，这并不需要跟你的 GitHub 账号相同。这带来了一个很严重的问题：任何人都可以设置用户名和邮箱地址来伪装成你，由于 GitHub 会自动根据用户名和邮箱地址关联单次的提交为注册的 GitHub 的账户，所以别人可以仿冒你的身份进行提交更改。这带来了一个很严重的问题：任何人都可以设置用户名和邮箱地址来伪装成你，由于 GitHub 会自动根据用户名和邮箱地址关联单次的提交为注册的 GitHub 的账户，所以别人可以仿冒你的身份进行提交更改。<sup><a href="#myfootnote1">1</a></sup></p>
<p>GitHub使用GPG这个加密方法来对commit进行验证，来确定本次commit的标签(tag)是由<code>gpg</code>密钥所有者所提交的。这种被验证过的commit会带有一个很<strong>酷</strong>同时<strong>很安全</strong>的<code>verfified</code>标签：</p>
<p><img data-src="https://help.github.com/assets/images/help/commits/gpg-signed-commit-verified-without-details.png" alt="verified_commit"></p>
<p>而没有该<code>verified</code>标签未必是本人提交，因为github的提交log中的提交人可以随意修改。</p>
<p><br></p>
<h1 id="GPG简介"><a href="#GPG简介" class="headerlink" title="GPG简介"></a>GPG简介</h1><p>这里不再赘述，请移步至： <a href="https://cakebytheoceanluo.github.io/2020/03/02/Security-GPG-intro/">[Security] GPG 介绍与密钥生成</a>。</p>
<p>正如我们在引入部分中提到的： <strong>密钥生成时需要注意，邮箱需要和GitHub对应的邮箱相同。</strong></p>
<p><br></p>
<h1 id="列出密钥"><a href="#列出密钥" class="headerlink" title="列出密钥"></a>列出密钥</h1><p>当我们完成秘钥的生成后，我们可以用如下命令对本机所拥有的<code>gpg</code>秘钥进行查看:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --list-keys</span><br><span class="line"></span><br><span class="line">/home/jigao/.gnupg/pubring.kbx</span><br><span class="line">------------------------------</span><br><span class="line">pub   rsa4096 2020-03-02 [SC]</span><br><span class="line">      704A75374771234881B10559F98069D551217BFD</span><br><span class="line">uid           [ultimate] Jigao Luo &lt;luojigao@outlook.com&gt;</span><br><span class="line">sub   rsa4096 2020-03-02 [E]</span><br></pre></td></tr></tbody></table></figure>
<p>第一行显示公钥文件名(pubring.gpg)，第二行显示公钥特征(4096位，Hash字符串和生成时间)，第三行显示”用户ID uid”，第四行显示私钥特征。<sup><a href="#myfootnote1">1</a></sup></p>
<p>或者可以使用如下命令，去列出密钥：<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --list-secret-keys --keyid-format LONG</span><br></pre></td></tr></tbody></table></figure><br><br><p></p>
<h1 id="添加-public-key-到-GitHub"><a href="#添加-public-key-到-GitHub" class="headerlink" title="添加 public key 到 GitHub"></a>添加 public key 到 GitHub</h1><p>公钥(public key)文件().gnupg/pubring.gpg)以二进制形式储存，<code>--armor参数</code>可以将其转换为ASCII码显示。</p>
<ul>
<li>我们需要以standard out的方式输出我们的公钥: <code>gpg --armor --export [Key ID]</code></li>
<li>或者我们加上<code>--output &lt;filename&gt;</code>参数，可以将这个公钥写入一个输出文件: <code>gpg --armor --output public-key.txt --export [Key ID]</code></li>
</ul>
<p>实际上的输出如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --armor --<span class="built_in">export</span> 704A75374771234881B10559F98069D551217BFD</span><br><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line"><span class="comment"># ...............</span></span><br><span class="line"><span class="comment"># .....已删去.....</span></span><br><span class="line"><span class="comment"># ...............</span></span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----</span><br></pre></td></tr></tbody></table></figure>
<p>事实上public key可以公开，这里我们节省文章空间将其删去。</p>
<p>我们需要复制从<code>-----BEGIN PGP PUBLIC KEY BLOCK-----</code>(含) 开始，到 <code>-----END PGP PUBLIC KEY BLOCK-----</code>结束(含)到我们GitHub的setting下：</p>
<p><img data-src="https://help.github.com/assets/images/help/settings/userbar-account-settings.png" alt="setting"></p>
<p><br></p>
<p><img data-src="https://help.github.com/assets/images/help/settings/settings-sidebar-ssh-keys.png" alt="ssh_gpg"></p>
<p><br></p>
<p><img data-src="https://help.github.com/assets/images/help/settings/gpg-add-gpg-key.png" alt="new_gpg_ket"></p>
<p><br></p>
<p><img data-src="https://help.github.com/assets/images/help/settings/gpg-key-paste.png" alt="copy_key"></p>
<p><br></p>
<h1 id="设置本地-Git-2"><a href="#设置本地-Git-2" class="headerlink" title="设置本地 Git 2:"></a>设置本地 Git <sup><a href="#myfootnote2">2</a></sup>:</h1><p>如果我们已经成功在GitHub上提交我们的公钥，我们只离那个很<strong>酷</strong>同时<strong>很安全</strong>的<code>verfified</code>标签只剩最后一步: 设置本地 Git。</p>
<p>我们需要运行如下的命令： </p>
<ul>
<li>设置 git GPG 命令。  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git config --global gpg.program gpg</span><br></pre></td></tr></tbody></table></figure></li>
<li>设置 git GPG key。我的GPG key ID 是 704A75374771234881B10559F98069D551217BFD，你自己做的时候需要替换成自己的GPG key ID。  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git config --global user.signingkey 704A75374771234881B10559F98069D551217BFD</span><br></pre></td></tr></tbody></table></figure></li>
<li>强制每次提交都自动使用 GPG 签名。  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git config --global commit.gpgsign <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>讲GPG key加入我们的<code>.profile</code>文件 <sup><a href="#myfootnote3">3</a></sup>：  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">test</span> -r ~/.bash_profile &amp;&amp; <span class="built_in">echo</span> <span class="string">'export GPG_TTY=$(tty)'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'export GPG_TTY=$(tty)'</span> &gt;&gt; ~/.profile</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<p>当我们提交新的 commit 的时候，git 就会帮我们自动使用 GPG 来签名。然也可以在提交的时候使用<code>git commit -S</code>参数来显式启用验证。然后我们就可以看见那个很<strong>酷</strong>同时<strong>很安全</strong>的<code>verfified</code>标签了。</p>
<p><br></p>
<h1 id="补充注释"><a href="#补充注释" class="headerlink" title="补充注释"></a>补充注释</h1><p><a name="myfootnote2">2</a>: </p>
<p>这里我们使用的前提是<code>git config --global</code>，即对当前用户 <strong>进行设置</strong>。如果你的想法<strong>只是在一个当前项目中使用gpg key来验证</strong>，那就在当前项目的文件夹中，输入以上命令不带<code>--global</code>。比如<code>git config commit.gpgsign true</code>。</p>
<p>这里我主观地多一句嘴，<code>gpg</code>是一个很安全可靠的工具，它值得我们使用<code>--global</code>这个flag。</p>
<p>然后我们复习一下<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL3Yy" title="https://git-scm.com/book/en/v2">Pro Git<i class="fa fa-external-link"></i></span>中的一点有关内容：</p>
<p>git配置保存在3处，对应着三个级别。配置优先级为: 本项目 &gt; 当前用户 &gt; 系统全局: </p>
<div class="table-container">
<table>
<thead>
<tr>
<th>作用范围</th>
<th>配置文件</th>
<th>git config选项</th>
</tr>
</thead>
<tbody>
<tr>
<td>系统全局</td>
<td><code>/etc/gitconfig</code></td>
<td><code>--system</code></td>
</tr>
<tr>
<td>当前用户</td>
<td><code>~/.gitconfig</code>或<code>~/.config/git/config</code></td>
<td><code>--global</code></td>
</tr>
<tr>
<td>本项目</td>
<td><code>项目目录/.git/config</code></td>
<td>无flag</td>
</tr>
</tbody>
</table>
</div>
<p><br></p>
<p><a name="myfootnote3">3</a>: </p>
<ul>
<li><code>test</code>命令行工具：它检查一个文件是否存在，它没有standard out，而是返回一个bool值。</li>
<li><code>test -r</code> 看文件是否存在并是否有读的权限：  <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">-r FILE</span><br><span class="line">       FILE exists and read permission is granted</span><br></pre></td></tr></tbody></table></figure></li>
<li><code>test -r ~/.bash_profile &amp;&amp; (...)</code>: 查看<code>~/.bash_profile</code>这个文件是否存在。如果它存在并且当前用户有读权限，就执行<code>(...)</code>这一条命令。</li>
</ul>
<p><br></p>
<p>引用：</p>
<p><a name="myfootnote1">1</a>:　GitHub 使用 GPG 简介 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZXJjdG8uY29tL2EvNDk3MTEuaHRtbA==" title="https://www.codercto.com/a/49711.html">https://www.codercto.com/a/49711.html<i class="fa fa-external-link"></i></span></p>
<p>图片来自： Adding a new GPG key to your GitHub account: <span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vZW4vZ2l0aHViL2F1dGhlbnRpY2F0aW5nLXRvLWdpdGh1Yi9hZGRpbmctYS1uZXctZ3BnLWtleS10by15b3VyLWdpdGh1Yi1hY2NvdW50" title="https://help.github.com/en/github/authenticating-to-github/adding-a-new-gpg-key-to-your-github-account">https://help.github.com/en/github/authenticating-to-github/adding-a-new-gpg-key-to-your-github-account<i class="fa fa-external-link"></i></span></p>
<p>Telling Git about your signing key： <span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vZW4vZ2l0aHViL2F1dGhlbnRpY2F0aW5nLXRvLWdpdGh1Yi90ZWxsaW5nLWdpdC1hYm91dC15b3VyLXNpZ25pbmcta2V5" title="https://help.github.com/en/github/authenticating-to-github/telling-git-about-your-signing-key">https://help.github.com/en/github/authenticating-to-github/telling-git-about-your-signing-key<i class="fa fa-external-link"></i></span></p>
<p>图片来自： Signing commits： <span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vZW4vZ2l0aHViL2F1dGhlbnRpY2F0aW5nLXRvLWdpdGh1Yi9zaWduaW5nLWNvbW1pdHM=" title="https://help.github.com/en/github/authenticating-to-github/signing-commits">https://help.github.com/en/github/authenticating-to-github/signing-commits<i class="fa fa-external-link"></i></span></p>
<p>Pro Git: <span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL3Yy" title="https://git-scm.com/book/en/v2">https://git-scm.com/book/en/v2<i class="fa fa-external-link"></i></span></p>
<p><br></p>
<p>推荐的阅读:</p>
<p>Managing Commit Signature Verification GitHub <span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vZW4vZ2l0aHViL2F1dGhlbnRpY2F0aW5nLXRvLWdpdGh1Yi9tYW5hZ2luZy1jb21taXQtc2lnbmF0dXJlLXZlcmlmaWNhdGlvbg==" title="https://help.github.com/en/github/authenticating-to-github/managing-commit-signature-verification">https://help.github.com/en/github/authenticating-to-github/managing-commit-signature-verification<i class="fa fa-external-link"></i></span></p>
<p>Paul Heinlein, GPG Quick Start <span class="exturl" data-url="aHR0cHM6Ly93d3cubWFkYm9hLmNvbS9nZWVrL2dwZy1xdWlja3N0YXJ0Lw==" title="https://www.madboa.com/geek/gpg-quickstart/">https://www.madboa.com/geek/gpg-quickstart/<i class="fa fa-external-link"></i></span></p>
<p>Ubuntu help，GnuPrivacyGuardHowto <span class="exturl" data-url="aHR0cHM6Ly9oZWxwLnVidW50dS5jb20vY29tbXVuaXR5L0dudVByaXZhY3lHdWFyZEhvd3Rv" title="https://help.ubuntu.com/community/GnuPrivacyGuardHowto">https://help.ubuntu.com/community/GnuPrivacyGuardHowto<i class="fa fa-external-link"></i></span></p>
<p>Alan Eliasen. GPG Tutorial <span class="exturl" data-url="aHR0cHM6Ly9mdXR1cmVib3kudXMvcGdwLmh0bWw=" title="https://futureboy.us/pgp.html">https://futureboy.us/pgp.html<i class="fa fa-external-link"></i></span></p>
<p>GnuPG 袖珍 HOWTO (中文版) <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ251cGcub3JnL2hvd3Rvcy96aC9pbmRleC5odG1s" title="https://www.gnupg.org/howtos/zh/index.html">https://www.gnupg.org/howtos/zh/index.html<i class="fa fa-external-link"></i></span></p>
<p>The GNU Privacy Handbook <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ251cGcub3JnL2dwaC9lbi9tYW51YWwuaHRtbA==" title="https://www.gnupg.org/gph/en/manual.html">https://www.gnupg.org/gph/en/manual.html<i class="fa fa-external-link"></i></span></p>
<!-- 
该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 -->
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Operating System</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Security</tag>
        <tag>GPG</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>[Security]GPG介绍与密钥生成</title>
    <url>/2020/03/02/Security-GPG-intro/</url>
    <content><![CDATA[<p>公开密钥密码学(Public-key cryptography)或非对称式密码学(Asymmetric cryptography)是一种非常流行的加密算法，它应用于去中心化的信任网络以及操作系统中。这个算法在现实中对信息加密和解密，可以用到GnuPG软件(简称GPG)，它是目前最流行的加密工具之一。本文主要介绍gpg软件的使用和生产密钥对。本文的使用环境为Linux Ubuntu命令行。另外在这篇文章中我使用的是<code>gpg (GnuPG) 2.2.4. libgcrypt 1.8.1.　Copyright (C) 2017 Free Software Foundation, Inc.</code>的英文版本。</p>
<p><img data-src="https://gnupg.org/share/logo-gnupg-light-purple-bg.png" alt="GnuPG"></p>
<a id="more"></a>
<p><br></p>
<h1 id="GPG介绍"><a href="#GPG介绍" class="headerlink" title="GPG介绍"></a>GPG介绍</h1><p>要了解什么是GPG，就要先了解<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUHJldHR5X0dvb2RfUHJpdmFjeQ==" title="https://en.wikipedia.org/wiki/Pretty_Good_Privacy">PGP<i class="fa fa-external-link"></i></span>(Pretty Good Privacy)。</p>
<p>1991年，程序员Phil Zimmermann为了避开政府监视，开发了加密软件PGP。这个软件非常好用，迅速流传开来，成了许多程序员的必备工具。但是，它是商业软件，不能自由使用。所以，自由软件基金会决定，开发一个PGP的替代品，取名为GnuPG。这就是GPG的由来。<sup><a href="#myfootnote1">1</a></sup></p>
<p><br></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>有多种途径：</p>
<ul>
<li>从<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ251cGcub3JnL2Rvd25sb2FkLw==" title="https://www.gnupg.org/download/">GPG网站下载<i class="fa fa-external-link"></i></span>，然后自己编译安装。  <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure></li>
<li>从软件源安装编译好的二进制包：<code>sudo apt-get install gnupg</code></li>
</ul>
<p><br></p>
<p>然后我们来用<code>gpg --help</code>检验一下软件是否成功安装:<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --<span class="built_in">help</span></span><br><span class="line">gpg (GnuPG) 2.2.4</span><br><span class="line">libgcrypt 1.8.1</span><br><span class="line">Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;https://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"><span class="comment">## ........................</span></span><br><span class="line"><span class="comment">## ........太长　略去........</span></span><br><span class="line"><span class="comment">## ........................</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<p><br></p>
<h1 id="生成密钥对key-pair"><a href="#生成密钥对key-pair" class="headerlink" title="生成密钥对key pair"></a>生成密钥对key pair</h1><p>在这一步我提一下，这篇文章所引用的其他中文教程使用的<code>gpg</code>都是2.1.17之前的版本。这些老版本的命令行有些不一样。不再建议参考这些老的中文教程。也不再建议使用老版本的<code>gpg</code>。本文不再关注老版本的<code>gpg</code>，针对老版本的操作可以参考　<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vZW4vZ2l0aHViL2F1dGhlbnRpY2F0aW5nLXRvLWdpdGh1Yi9nZW5lcmF0aW5nLWEtbmV3LWdwZy1rZXk=" title="https://help.github.com/en/github/authenticating-to-github/generating-a-new-gpg-key">https://help.github.com/en/github/authenticating-to-github/generating-a-new-gpg-key<i class="fa fa-external-link"></i></span>　。</p>
<p>如果我们<code>gpg</code>的版本是2.1.17或它之后的新版本，我们用如下的命令去生成GPG key pair：<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --full-generate-key</span><br><span class="line">gpg (GnuPG) 2.2.4; Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Please select what kind of key you want:</span><br><span class="line">   (1) RSA and RSA (default)</span><br><span class="line">   (2) DSA and Elgamal</span><br><span class="line">   (3) DSA (sign only)</span><br><span class="line">   (4) RSA (sign only)</span><br><span class="line">Your selection?</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>这个问题是让用户自己选择加密算法。可以直接按<code>Enter回车键</code>选择默认第一个选项，表示加密和签名都使用RSA算法。</p>
<p><br></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">RSA keys may be between 1024 and 4096 bits long.</span><br><span class="line">What keysize <span class="keyword">do</span> you want? (3072)</span><br></pre></td></tr></tbody></table></figure>
<p>然后出现一个问题，问用户密钥的长度。最好我们输入最长的<code>4096</code>，然后按<code>Enter回车键</code>。</p>
<p><br></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Please specify how long the key should be valid.</span><br><span class="line">         0 = key does not expire</span><br><span class="line">      &lt;n&gt;  = key expires <span class="keyword">in</span> n days</span><br><span class="line">      &lt;n&gt;w = key expires <span class="keyword">in</span> n weeks</span><br><span class="line">      &lt;n&gt;m = key expires <span class="keyword">in</span> n months</span><br><span class="line">      &lt;n&gt;y = key expires <span class="keyword">in</span> n years</span><br><span class="line">Key is valid <span class="keyword">for</span>? (0)</span><br></pre></td></tr></tbody></table></figure>
<p>接着我出现一个问题，要求设置密钥的有效期(valid time length)。如果密钥只是个人使用，并且确认可以有效保管私钥，建议选择第一个选项，即永不过期(expire)。输入<code>0</code>，然后按<code>Enter回车键</code>。</p>
<p><br></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Is this correct? (y/N)</span><br></pre></td></tr></tbody></table></figure>
<p>回答完上面三个问题以后，需要确认。在确认以后，输入<code>y</code>，然后按<code>Enter回车键</code>。</p>
<p><br></p>
<p>然后我们需要输入自己的名字和邮箱。如果我们需要密钥给GitHub使用的话，这里需要注意邮箱需要和GitHub对应的邮箱相同。</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vZW4vZ2l0aHViL2dldHRpbmctc3RhcnRlZC13aXRoLWdpdGh1Yi92ZXJpZnlpbmcteW91ci1lbWFpbC1hZGRyZXNz" title="https://help.github.com/en/github/getting-started-with-github/verifying-your-email-address">https://help.github.com/en/github/getting-started-with-github/verifying-your-email-address<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vZW4vZ2l0aHViL3NldHRpbmctdXAtYW5kLW1hbmFnaW5nLXlvdXItZ2l0aHViLXVzZXItYWNjb3VudC9zZXR0aW5nLXlvdXItY29tbWl0LWVtYWlsLWFkZHJlc3M=" title="https://help.github.com/en/github/setting-up-and-managing-your-github-user-account/setting-your-commit-email-address">https://help.github.com/en/github/setting-up-and-managing-your-github-user-account/setting-your-commit-email-address<i class="fa fa-external-link"></i></span></li>
</ul>
<p>输入完之后的输出类似如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">GnuPG needs to construct a user ID to identify your key.</span><br><span class="line"></span><br><span class="line">Real name: Jigao Luo</span><br><span class="line">Email address: luojigao@outlook.com</span><br><span class="line">Comment: </span><br><span class="line">You selected this USER-ID:</span><br><span class="line">    <span class="string">"Jigao Luo &lt;luojigao@outlook.com&gt;"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit?</span><br></pre></td></tr></tbody></table></figure>
<p>如果我们都确认的话，输入<code>o</code>，然后按<code>Enter回车键</code>。</p>
<p>这之后系统会要求我们设定一个给密钥的密码。这是为了防止误操作，或者系统被侵入时有人擅自动用私钥。</p>
<p>最后<code>gpg</code>开始生产密钥对。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (<span class="built_in">type</span> on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br></pre></td></tr></tbody></table></figure>
<p>生成完以后我们可以看到：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gpg: key F98069D551217BFD marked as ultimately trusted</span><br><span class="line">gpg: revocation certificate stored as <span class="string">'&lt;存储路径已删去&gt;'</span></span><br><span class="line">public and secret key created and signed.</span><br><span class="line"></span><br><span class="line">pub   rsa4096 2020-03-02 [SC]</span><br><span class="line">      704A75374771234881B10559F98069D551217BFD</span><br><span class="line">uid                      Jigao Luo &lt;luojigao@outlook.com&gt;</span><br><span class="line">sub   rsa4096 2020-03-02 [E]</span><br></pre></td></tr></tbody></table></figure>
<p><code>F98069D551217BFD</code>这个字符串很重要，这个是我们这个密钥对的Hash字符串，它对应我们输入的邮箱。</p>
<p><br></p>
<h1 id="生成密钥对的撤销证书"><a href="#生成密钥对的撤销证书" class="headerlink" title="生成密钥对的撤销证书"></a>生成密钥对的撤销证书</h1><p>到这里为止，我们的pgp密钥对已经生成完成。但是最好我们现在再生产一张撤销证书(revocation certificate)，以备以后密钥作废时，可以请求外部的公钥服务器撤销你的公钥。<sup><a href="#myfootnote1">1</a></sup></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --gen-revoke [Key ID]</span><br></pre></td></tr></tbody></table></figure>
<p>上面的”Key ID”部分，可以填入你的邮件地址或者Hash字符串。之后我们会看到如下输出：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line">Comment: This is a revocation certificate</span><br><span class="line"></span><br><span class="line">&lt;............................................&gt;</span><br><span class="line">&lt;............................................&gt;</span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----</span><br></pre></td></tr></tbody></table></figure>
<p>然后把这块stanard output输出保存！</p>
<p>或者:<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --output revoke.asc --gen-revoke</span><br></pre></td></tr></tbody></table></figure><br>这样对应的撤销证书被保存在<code>revoke.asc</code>文件中。<p></p>
<p><br></p>
<p>最重要的一点:　这个撤销证书不能给别人！</p>
<blockquote>
<p>Please move it to a medium which you can hide away; if Mallory gets<br>access to this certificate he can use it to make your key unusable.<br>It is smart to print this certificate and store it away, just in case<br>your media become unreadable.  But have some caution:  The print system of<br>your machine might store the data and make it available to others!</p>
</blockquote>
<p><br></p>
<h1 id="列出密钥"><a href="#列出密钥" class="headerlink" title="列出密钥"></a>列出密钥</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --list-keys</span><br><span class="line"></span><br><span class="line">/home/jigao/.gnupg/pubring.kbx</span><br><span class="line">------------------------------</span><br><span class="line">pub   rsa4096 2020-03-02 [SC]</span><br><span class="line">      704A75374771234881B10559F98069D551217BFD</span><br><span class="line">uid           [ultimate] Jigao Luo &lt;luojigao@outlook.com&gt;</span><br><span class="line">sub   rsa4096 2020-03-02 [E]</span><br></pre></td></tr></tbody></table></figure>
<p>第一行显示公钥文件名(pubring.gpg)，第二行显示公钥特征(4096位，Hash字符串和生成时间)，第三行显示”用户ID uid”，第四行显示私钥特征。。<sup><a href="#myfootnote1">1</a></sup></p>
<p>或者可以使用如下命令，去列出密钥：<br></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ gpg --list-secret-keys --keyid-format LONG</span><br></pre></td></tr></tbody></table></figure><p></p>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><a name="myfootnote1">1</a>:　GPG入门教程 阮一峰 <span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTMvMDcvZ3BnLmh0bWw=" title="http://www.ruanyifeng.com/blog/2013/07/gpg.html">http://www.ruanyifeng.com/blog/2013/07/gpg.html<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vZW4vZ2l0aHViL2F1dGhlbnRpY2F0aW5nLXRvLWdpdGh1Yi9nZW5lcmF0aW5nLWEtbmV3LWdwZy1rZXk=" title="https://help.github.com/en/github/authenticating-to-github/generating-a-new-gpg-key">https://help.github.com/en/github/authenticating-to-github/generating-a-new-gpg-key<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ251cGcub3JnL2dwaC9lbi9tYW51YWwvYzE0Lmh0bWw=" title="https://www.gnupg.org/gph/en/manual/c14.html">https://www.gnupg.org/gph/en/manual/c14.html<i class="fa fa-external-link"></i></span></p>
<p><br></p>
<p>Paul Heinlein, GPG Quick Start <span class="exturl" data-url="aHR0cHM6Ly93d3cubWFkYm9hLmNvbS9nZWVrL2dwZy1xdWlja3N0YXJ0Lw==" title="https://www.madboa.com/geek/gpg-quickstart/">https://www.madboa.com/geek/gpg-quickstart/<i class="fa fa-external-link"></i></span></p>
<p>Ubuntu help，GnuPrivacyGuardHowto <span class="exturl" data-url="aHR0cHM6Ly9oZWxwLnVidW50dS5jb20vY29tbXVuaXR5L0dudVByaXZhY3lHdWFyZEhvd3Rv" title="https://help.ubuntu.com/community/GnuPrivacyGuardHowto">https://help.ubuntu.com/community/GnuPrivacyGuardHowto<i class="fa fa-external-link"></i></span></p>
<p>Alan Eliasen. GPG Tutorial <span class="exturl" data-url="aHR0cHM6Ly9mdXR1cmVib3kudXMvcGdwLmh0bWw=" title="https://futureboy.us/pgp.html">https://futureboy.us/pgp.html<i class="fa fa-external-link"></i></span></p>
<p>GnuPG 袖珍 HOWTO (中文版) <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ251cGcub3JnL2hvd3Rvcy96aC9pbmRleC5odG1s" title="https://www.gnupg.org/howtos/zh/index.html">https://www.gnupg.org/howtos/zh/index.html<i class="fa fa-external-link"></i></span></p>
<p>The GNU Privacy Handbook <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ251cGcub3JnL2dwaC9lbi9tYW51YWwuaHRtbA==" title="https://www.gnupg.org/gph/en/manual.html">https://www.gnupg.org/gph/en/manual.html<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Operating System</category>
      </categories>
      <tags>
        <tag>Security</tag>
        <tag>GPG</tag>
      </tags>
  </entry>
  <entry>
    <title>[Shell]RegEx 正则表达式</title>
    <url>/2020/02/25/Shell-RegEx/</url>
    <content><![CDATA[<h1 id="正则表达式-Regular-Expression"><a href="#正则表达式-Regular-Expression" class="headerlink" title="正则表达式 Regular Expression"></a>正则表达式 Regular Expression</h1><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>正则表达式出现于理论计算机科学的自动控制理论和形式化语言理论中。在这些领域中有对计算（自动控制）的模型和对形式化语言描述与分类的研究。<sup><a href="#myfootnote1">1</a></sup><br>它可以转化成形式化语言或者确定型自动机。它们是语义上等价的，可以描述同一种语言。</p>
<p><br></p>
<h2 id="Unix-RegEx介绍"><a href="#Unix-RegEx介绍" class="headerlink" title="Unix RegEx介绍"></a>Unix RegEx介绍</h2><p>这篇文章基于　<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ppaXNoYW5lZC9sZWFybi1yZWdleA==" title="https://github.com/ziishaned/learn-regex">https://github.com/ziishaned/learn-regex<i class="fa fa-external-link"></i></span><br></p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">版权: https://github.com/ziishaned/learn-regex</span><br><span class="line">版权方式: MIT ©  </span><br><span class="line">https://github.com/ziishaned/learn-regex/blob/master/LICENSE.md</span><br><span class="line">作者: Zeeshan Ahmad, https://twitter.com/ziishaned</span><br></pre></td></tr></tbody></table></figure><p></p>
<a id="more"></a>
<p><br><br></p>
<h2 id="什么是正则表达式？"><a href="#什么是正则表达式？" class="headerlink" title="什么是正则表达式？"></a>什么是正则表达式？</h2><blockquote>
<p>正则表达式是一组由字母和符号组成的特殊文本，它可以用来从文本中找出满足你想要的格式的句子。</p>
</blockquote>
<p>一个正则表达式是一种从左到右匹配主体字符串的模式。<br>“Regular expression”可被缩写为“regex”或“regexp”。<br>正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等。</p>
<p>想象你正在写一个应用，然后你想设定一个用户命名的规则，让用户名包含字符、数字、下划线和连字符，以及限制字符的个数，好让名字看起来没那么丑。<br>我们使用以下正则表达式来验证一个用户名：</p>
<p><br><br></p>
<p><img data-src="https://raw.githubusercontent.com/ziishaned/learn-regex/master/img/regexp-cn.png" alt="RegEx"></p>
<p>以上的正则表达式可以接受 <code>john_doe</code>、<code>jo-hn_doe</code>、<code>john12_as</code>。</p>
<p>但不匹配<code>Jo</code>，因为：</p>
<ul>
<li>它包含了大写的字母<code>J</code></li>
<li>长度小于３</li>
</ul>
<h2 id="1-基本匹配"><a href="#1-基本匹配" class="headerlink" title="1. 基本匹配"></a>1. 基本匹配</h2><p>正则表达式其实就是在执行搜索时的格式，它由一些字母和数字组合而成。<br>例如：一个正则表达式 <code>the</code>，它表示一个规则：由字母<code>t</code>开始，接着是<code>h</code>，再接着是<code>e</code>。</p>
<pre>"the" =&gt; The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9kbVJ5Z1QvMQ==" title="https://regex101.com/r/dmRygT/1">在线练习<i class="fa fa-external-link"></i></span></p>
<p>正则表达式<code>123</code>匹配字符串<code>123</code>。它逐个字符的与输入的正则表达式做比较。</p>
<p>正则表达式是<strong>大小写敏感</strong>的，所以<code>The</code>不会匹配<code>the</code>。</p>
<pre>"The" =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci8xcGFYc3kvMQ==" title="https://regex101.com/r/1paXsy/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h2 id="2-元字符-Meta-Characters"><a href="#2-元字符-Meta-Characters" class="headerlink" title="2. 元字符 Meta Characters"></a>2. 元字符 Meta Characters</h2><p>正则表达式主要依赖于元字符。<br>元字符不代表他们本身的字面意思，他们都有特殊的含义。一些元字符写在方括号中的时候有一些特殊的意思。以下是一些元字符的介绍：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">.</td>
<td>句号匹配任意单个字符除了换行符。</td>
</tr>
<tr>
<td style="text-align:center">[ ]</td>
<td>字符种类。匹配方括号内的任意字符。</td>
</tr>
<tr>
<td style="text-align:center"><sup><a href="#fn_ " id="reffn_ "> </a></sup></td>
<td>否定的字符种类。匹配除了方括号里的任意字符</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td>匹配&gt;=0个重复的在*号之前的字符。</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td>匹配&gt;=1个重复的+号前的字符。</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td>标记?之前的字符为可选.</td>
</tr>
<tr>
<td style="text-align:center">{n}</td>
<td>匹配n个大括号之间的字符.</td>
</tr>
<tr>
<td style="text-align:center">{n,m}</td>
<td>匹配num个大括号之间的字符 (n &lt;= num &lt;= m).</td>
</tr>
<tr>
<td style="text-align:center">{n,}</td>
<td>匹配num个大括号之间的字符 (n &lt;= num).</td>
</tr>
<tr>
<td style="text-align:center">(xyz)</td>
<td>字符集，匹配与 xyz 完全相等的字符串.</td>
</tr>
<tr>
<td style="text-align:center">|</td>
<td>或运算符，匹配符号前或后的字符.</td>
</tr>
<tr>
<td style="text-align:center">\</td>
<td>转义字符,用于匹配一些保留的字符 <code>[ ] ( ) { } . * + ? ^ $ \ |</code></td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td>从开始行开始匹配.</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td>从末端开始匹配.</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2-1-点运算符-Full-stop"><a href="#2-1-点运算符-Full-stop" class="headerlink" title="2.1 点运算符 . Full stop"></a>2.1 点运算符 <code>.</code> Full stop</h2><p><strong><code>.</code>匹配任意单个字符，但不匹配换行符。</strong><br>例如，表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串。</p>
<pre>".ar" =&gt; The <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci94YzlHa1UvMQ==" title="https://regex101.com/r/xc9GkU/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h2 id="2-2-字符集-Character-set"><a href="#2-2-字符集-Character-set" class="headerlink" title="2.2 字符集 Character set"></a>2.2 字符集 Character set</h2><p>字符集也叫做字符类。<br>方括号用来指定一个字符集。<br>在方括号中使用连字符来指定字符集的范围。<br>在方括号中的字符集不关心顺序。<br>例如，表达式<code>[Tt]he</code> 匹配 <code>the</code> 和 <code>The</code>。</p>
<pre>"[Tt]he" =&gt; <a href="#learn-regex"><strong>The</strong></a> car parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci8ySVRMUTQvMQ==" title="https://regex101.com/r/2ITLQ4/1">在线练习<i class="fa fa-external-link"></i></span></p>
<p><strong>方括号的句号就表示句号, 而不是点运算符。</strong><br>例如，表达式 <code>ar[.]</code> 匹配 <code>ar.</code>字符串</p>
<pre>"ar[.]" =&gt; A garage is a good place to park a c<a href="#learn-regex"><strong>ar.</strong></a>
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci93TDN4dEUvMQ==" title="https://regex101.com/r/wL3xtE/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h3 id="2-2-1-否定字符集-Negated-character-set"><a href="#2-2-1-否定字符集-Negated-character-set" class="headerlink" title="2.2.1 否定字符集 Negated character set"></a>2.2.1 否定字符集 Negated character set</h3><p>一般来说 <code>^</code> 表示一个字符串的开头，但它用在一个方括号的开头的时候，它表示这个字符集是否定的。<br>例如，表达式<code>[^c]ar</code> 匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符。</p>
<pre>"[^c]ar" =&gt; The car <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9uTk5scTMvMQ==" title="https://regex101.com/r/nNNlq3/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h2 id="2-3-重复次数-Repetitions"><a href="#2-3-重复次数-Repetitions" class="headerlink" title="2.3 重复次数 Repetitions"></a>2.3 重复次数 Repetitions</h2><p>后面跟着元字符 <code>+</code>，<code>*</code> or <code>?</code> 的，用来指定匹配子模式的次数。<br>这些元字符在不同的情况下有着不同的意思。</p>
<h3 id="2-3-1-号-The-Star"><a href="#2-3-1-号-The-Star" class="headerlink" title="2.3.1 * 号 The Star"></a>2.3.1 <code>*</code> 号 The Star</h3><p><code>*</code>号匹配 在<code>*</code>之前的字符出现<code>大于等于0</code>次。<br>例如，表达式 <code>a*</code> 匹配0或更多个以a开头的字符。表达式<code>[a-z]*</code> 匹配一个行中所有以小写字母开头的字符串。下面例子中是从<code>he</code>到<code>garage</code>都被匹配，<strong>不包括其中的空格</strong>。</p>
<pre>"[a-z]*" =&gt; T<a href="#learn-regex"><strong>he</strong></a> <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>parked</strong></a> <a href="#learn-regex"><strong>in</strong></a> <a href="#learn-regex"><strong>the</strong></a> <a href="#learn-regex"><strong>garage</strong></a> #21.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci83bThtZTUvMQ==" title="https://regex101.com/r/7m8me5/1">在线练习<i class="fa fa-external-link"></i></span></p>
<p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>。</p>
<p><code>*</code>和表示<strong>匹配空格的符号<code>\s</code></strong>连起来用，如表达式<code>\s*cat\s*</code>匹配<strong>0或更多个空格开头和0或更多个空格结尾的cat字符串</strong>。下面例子中是从<code>\scat\s</code>到<code>cat</code>都被匹配。</p>
<pre>"\s*cat\s*" =&gt; The fat<a href="#learn-regex"><strong> cat </strong></a>sat on the con<a href="#learn-regex"><strong>cat</strong></a>enation.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9nR3J3dXovMQ==" title="https://regex101.com/r/gGrwuz/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h3 id="2-3-2-号-The-Plus"><a href="#2-3-2-号-The-Plus" class="headerlink" title="2.3.2 + 号 The Plus"></a>2.3.2 <code>+</code> 号 The Plus</h3><p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;=1 次。<br>例如表达式<code>c.+t</code> 匹配以首字母<code>c</code>开头以<code>t</code>结尾，中间跟着至少一个字符的字符串。下面例子中是从<code>cat\s</code>到<code>\smat</code>都被匹配，<strong>包括其中的空格</strong>。</p>
<pre>"c.+t" =&gt; The fat <a href="#learn-regex"><strong>cat sat on the mat</strong></a>.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9EemY5QWEvMQ==" title="https://regex101.com/r/Dzf9Aa/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h3 id="2-3-3-号-The-Question-Mark"><a href="#2-3-3-号-The-Question-Mark" class="headerlink" title="2.3.3 ? 号 The Question Mark"></a>2.3.3 <code>?</code> 号 The Question Mark</h3><p>在正则表达式中元字符 <code>?</code> 标记在符号前面的字符为可选，即出现 0 或 1 次。<br>例如，表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>。</p>
<pre>"[T]he" =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9jSWc5em0vMQ==" title="https://regex101.com/r/cIg9zm/1">在线练习<i class="fa fa-external-link"></i></span></p>
<pre>"[T]?he" =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in t<a href="#learn-regex"><strong>he</strong></a> garage.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9rUHBPMngvMQ==" title="https://regex101.com/r/kPpO2x/1">在线练习<i class="fa fa-external-link"></i></span></p>
<p>也等价于：</p>
<pre>"T?he" =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in t<a href="#learn-regex"><strong>he</strong></a> garage.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9rUHBPMngvMjk=" title="https://regex101.com/r/kPpO2x/29">在线练习<i class="fa fa-external-link"></i></span></p>
<h2 id="2-4-号-Braces"><a href="#2-4-号-Braces" class="headerlink" title="2.4 {} 号 Braces"></a>2.4 <code>{}</code> 号 Braces</h2><p>在正则表达式中 <code>{}</code> 是一个量词，常用来一个或一组字符可以重复出现的次数。<br>例如， 表达式 <code>[0-9]{2,3}</code> 匹配最少 2 位最多 3 位 0~9 的数字。</p>
<pre>"[0-9]{2,3}" =&gt; The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9qdU04NnMvMQ==" title="https://regex101.com/r/juM86s/1">在线练习<i class="fa fa-external-link"></i></span></p>
<p>我们可以省略第二个参数。<br>例如，<code>[0-9]{2,}</code> 匹配至少两位 0~9 的数字。</p>
<pre>"[0-9]{2,}" =&gt; The number was 9.<a href="#learn-regex"><strong>9997</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9HZHk0dzUvMQ==" title="https://regex101.com/r/Gdy4w5/1">在线练习<i class="fa fa-external-link"></i></span></p>
<p>如果逗号也省略掉则表示重复固定的次数。<br>例如，<code>[0-9]{3}</code> 匹配3位数字</p>
<pre>"[0-9]{3}" =&gt; The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to 10.0.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9TaXZ1MzAvMQ==" title="https://regex101.com/r/Sivu30/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h2 id="2-5-捕获组-特征标群-Capturing-Group"><a href="#2-5-捕获组-特征标群-Capturing-Group" class="headerlink" title="2.5 (...) 捕获组 特征标群 Capturing Group"></a>2.5 <code>(...)</code> 捕获组 特征标群 Capturing Group</h2><p>特征标群是一组写在 <code>(...)</code> 中的子模式。例如之前说的 <code>{}</code> 是用来表示前面一个字符出现指定次数。但如果在 <code>{}</code> 前加入特征标群则表示整个标群内的字符重复 N 次。例如，表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>。</p>
<p>我们还可以在 <code>()</code> 中用或字符 <code>|</code> 表示或。例如，<code>(c|g|p)ar</code> 匹配 <code>car</code> 或 <code>gar</code> 或 <code>par</code>.</p>
<pre>"(c|g|p)ar" =&gt; The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci90VXhyQkcvMQ==" title="https://regex101.com/r/tUxrBG/1">在线练习<i class="fa fa-external-link"></i></span></p>
<p>我们需要注意特征标群不仅可以匹配，而已可以捕获源编程语言的字符。源编程语言 (the parent language)可以是Python，Javascript或者任意其他实现了正则表达式的编程语言。</p>
<h3 id="2-5-1-非特征标群-非捕获组-Non-capturing-group"><a href="#2-5-1-非特征标群-非捕获组-Non-capturing-group" class="headerlink" title="2.5.1 非特征标群 非捕获组 Non capturing group"></a>2.5.1 非特征标群 非捕获组 Non capturing group</h3><p>非捕获组是一个仅仅匹配字符的捕获组，但是它不捕获任意组。非捕获组可以由被<code>:</code>跟着的<code>?</code>所表示，整个表达被<code>(...)</code>囊括。例如，正则表达式<code>(?:c|g|p)ar</code>与<code>(c|g|p)ar</code>相似，它们匹配相同的字符串，但是前者并不会捕获任意一个组。</p>
<pre>"(?:c|g|p)ar" =&gt; The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9SbTdNZTgvMQ==" title="https://regex101.com/r/Rm7Me8/1">在线练习<i class="fa fa-external-link"></i></span></p>
<p>非捕获组在“查找和替换”的情况(find-and-replace functionality)下会很有帮助。<br>另外，如果非捕获组和捕获组被混合的时候，非捕获组可以帮助我们去得到一个匹配的概况。<br>另请参阅<a href="#4-零宽度断言">4. 零宽度断言</a>。</p>
<h2 id="2-6-或运算符-Alternation"><a href="#2-6-或运算符-Alternation" class="headerlink" title="2.6 | 或运算符 Alternation"></a>2.6 <code>|</code> 或运算符 Alternation</h2><p>或运算符就表示或，用作判断条件。</p>
<p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或 <code>car</code>。</p>
<pre>"(T|t)he|car" =&gt; <a href="#learn-regex"><strong>The</strong></a> <a href="#learn-regex"><strong>car</strong></a> is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9mQlh5WDAvMQ==" title="https://regex101.com/r/fBXyX0/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h2 id="2-7-转码特殊字符-Escaping-special-character"><a href="#2-7-转码特殊字符-Escaping-special-character" class="headerlink" title="2.7 转码特殊字符 Escaping special character"></a>2.7 转码特殊字符 Escaping special character</h2><p>反斜线 <code>\</code> 在表达式中用于转码紧跟其后的字符。用于指定 <code>{ } [ ] / \ + * . $ ^ | ?</code> 这些特殊字符。如果想要匹配这些特殊字符则要在其前面加上反斜线 <code>\</code>。</p>
<p>例如 <code>.</code> 是用来匹配除换行符外的所有字符的。如果想要匹配句子中的 <code>.</code> 则要写成 <code>\.</code> 以下这个例子 <code>\.?</code>是选择性匹配<code>.</code></p>
<pre>"(f|c|m)at\.?" =&gt; The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> sat on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9ET2M1TnUvMQ==" title="https://regex101.com/r/DOc5Nu/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h2 id="2-8-锚点-Anchors"><a href="#2-8-锚点-Anchors" class="headerlink" title="2.8 锚点 Anchors"></a>2.8 锚点 Anchors</h2><p>在正则表达式中，想要匹配指定开头或结尾的字符串就要使用到锚点。<strong><code>^</code> 指定开头，<code>$</code> 指定结尾。</strong></p>
<h3 id="2-8-1-号-Caret"><a href="#2-8-1-号-Caret" class="headerlink" title="2.8.1 ^ 号 Caret"></a>2.8.1 <code>^</code> 号 Caret</h3><p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头。</p>
<p>例如，在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果 <code>a</code>。但如果使用 <code>^b</code> 将匹配不到任何结果。因为在字符串 <code>abc</code> 中并不是以 <code>b</code> 开头。</p>
<p>例如，<code>^(T|t)he</code> 匹配以 <code>The</code> 或 <code>the</code> 开头的字符串。</p>
<pre>"(T|t)he" =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci81bGpqZ0IvMQ==" title="https://regex101.com/r/5ljjgB/1">在线练习<i class="fa fa-external-link"></i></span></p>
<pre>"^(T|t)he" =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9qWHJLbmUvMQ==" title="https://regex101.com/r/jXrKne/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h3 id="2-8-2-号-Dollar"><a href="#2-8-2-号-Dollar" class="headerlink" title="2.8.2 $ 号 Dollar"></a>2.8.2 <code>$</code> 号 Dollar</h3><p>同理于 <code>^</code> 号，<code>$</code> 号用来匹配字符是否是最后一个。</p>
<p>例如，<code>(at\.)$</code> 匹配以 <code>at.</code> 结尾的字符串。</p>
<pre>"(at\.)" =&gt; The fat c<a href="#learn-regex"><strong>at.</strong></a> s<a href="#learn-regex"><strong>at.</strong></a> on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci95NEF1NEQvMQ==" title="https://regex101.com/r/y4Au4D/1">在线练习<i class="fa fa-external-link"></i></span></p>
<pre>"(at\.)$" =&gt; The fat cat. sat. on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci90MEFrT2QvMQ==" title="https://regex101.com/r/t0AkOd/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h2 id="3-简写字符集-Shorthand-Character-Sets"><a href="#3-简写字符集-Shorthand-Character-Sets" class="headerlink" title="3. 简写字符集 Shorthand Character Sets"></a>3. 简写字符集 Shorthand Character Sets</h2><p>正则表达式提供一些常用的字符集简写。如下:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">简写</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">.</td>
<td>除换行符外的所有字符</td>
</tr>
<tr>
<td style="text-align:center">\w</td>
<td>匹配所有字母数字，等同于 <code>[a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td style="text-align:center">\W</td>
<td>匹配所有非字母数字，即符号，等同于： <code>[^\w]</code></td>
</tr>
<tr>
<td style="text-align:center">\d</td>
<td>匹配数字： <code>[0-9]</code></td>
</tr>
<tr>
<td style="text-align:center">\D</td>
<td>匹配非数字： <code>[^\d]</code></td>
</tr>
<tr>
<td style="text-align:center">\s</td>
<td>匹配所有空格字符，等同于： <code>[\t\n\f\r\p{Z}]</code></td>
</tr>
<tr>
<td style="text-align:center">\S</td>
<td>匹配所有非空格字符： <code>[^\s]</code></td>
</tr>
<tr>
<td style="text-align:center">\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td style="text-align:center">\r</td>
<td>匹配一个回车符</td>
</tr>
<tr>
<td style="text-align:center">\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td style="text-align:center">\v</td>
<td>匹配一个垂直制表符</td>
</tr>
<tr>
<td style="text-align:center">\p</td>
<td>匹配 CR/LF（等同于 <code>\r\n</code>），用来匹配 DOS 行终止符</td>
</tr>
<tr>
<td style="text-align:center">\b</td>
<td>匹配一个词的边界，不会消耗任何字符只匹配一个位置</td>
</tr>
<tr>
<td style="text-align:center">\B</td>
<td>匹配不是单词开头或结束的位置</td>
</tr>
</tbody>
</table>
</div>
<p>可以观察到，大写字母往往是小写字母的反义。</p>
<p><code>\b</code>: <span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci90MEFrT2QvMzM=" title="https://regex101.com/r/t0AkOd/33">在线练习<i class="fa fa-external-link"></i></span></p>
<p>匹配有abc开头的字符串：　<code>\babc</code>或者<code>^abc</code></p>
<h2 id="4-零宽度断言（前后预查）-Lookaround"><a href="#4-零宽度断言（前后预查）-Lookaround" class="headerlink" title="4. 零宽度断言（前后预查） Lookaround"></a>4. 零宽度断言（前后预查） Lookaround</h2><p>先行断言和后发断言都属于<strong>非捕获簇 non-capturing groups</strong>（不捕获文本 ，也不针对组合计进行计数）。<br>先行断言用于判断所匹配的格式是否在另一个确定的格式之前，匹配结果不包含该确定格式（仅作为约束）。</p>
<p>例如，我们想要获得所有跟在 <code>$</code> 符号后的数字，我们可以使用正后发断言 <code>(?&lt;=\$)[0-9\.]*</code>。<br>这个表达式匹配 <code>$</code> 开头，之后跟着 <code>0,1,2,3,4,5,6,7,8,9,.</code> 这些字符可以出现大于等于 0 次。</p>
<p>零宽度断言如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">?=</td>
<td>正先行断言-存在 Positive Lookahead</td>
</tr>
<tr>
<td style="text-align:center">?!</td>
<td>负先行断言-排除 Negative Lookahead</td>
</tr>
<tr>
<td style="text-align:center">?&lt;=</td>
<td>正后发断言-存在 Positive Lookbehind</td>
</tr>
<tr>
<td style="text-align:center">?&lt;!</td>
<td>负后发断言-排除 Negative Lookbehind</td>
</tr>
</tbody>
</table>
</div>
<p>更多例子：<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzQ4MjE5NDAxL2Fuc3dlci83NDI0NDQzMjY=" title="https://www.zhihu.com/question/48219401/answer/742444326">https://www.zhihu.com/question/48219401/answer/742444326<i class="fa fa-external-link"></i></span></p>
<h3 id="4-1-正先行断言-Positive-Lookahead"><a href="#4-1-正先行断言-Positive-Lookahead" class="headerlink" title="4.1 ?=... 正先行断言 Positive Lookahead"></a>4.1 <code>?=...</code> 正先行断言 Positive Lookahead</h3><p><code>?=...</code> 正先行断言，表示第一部分表达式之后必须跟着 <code>?=...</code>定义的表达式。</p>
<p>返回结果只包含满足匹配条件的第一部分表达式。<br>定义一个正先行断言要使用 <code>()</code>。在括号内部使用一个问号和等号： <code>(?=...)</code>。</p>
<p>正先行断言的内容写在括号中的等号后面。<br>例如，表达式 <code>(T|t)he(?=\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，在括号中我们又定义了正先行断言 <code>(?=\sfat)</code> ，即 <code>The</code> 和 <code>the</code> 后面紧跟着 <code>(空格)fat</code>。</p>
<pre>"(T|t)he(?=\sfat)" =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9JRERBUnQvMQ==" title="https://regex101.com/r/IDDARt/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h3 id="4-2-负先行断言-Negative-Lookahead"><a href="#4-2-负先行断言-Negative-Lookahead" class="headerlink" title="4.2 ?!... 负先行断言 Negative Lookahead"></a>4.2 <code>?!...</code> 负先行断言 Negative Lookahead</h3><p>负先行断言 <code>?!</code> 用于筛选所有匹配结果，筛选条件为 其后不跟随着断言中定义的格式。<br><code>正先行断言</code>  定义和 <code>负先行断言</code> 一样，区别就是 <code>=</code> 替换成 <code>!</code> 也就是 <code>(?!...)</code>。</p>
<p>表达式 <code>(T|t)he(?!\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，且其后不跟着 <code>(空格)fat</code>。</p>
<pre>"(T|t)he(?!\sfat)" =&gt; The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9WMzJOcGcvMQ==" title="https://regex101.com/r/V32Npg/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h3 id="4-3-lt-正后发断言-Positive-Lookbehind"><a href="#4-3-lt-正后发断言-Positive-Lookbehind" class="headerlink" title="4.3 ?<= ... 正后发断言 Positive Lookbehind"></a>4.3 <code>?&lt;= ...</code> 正后发断言 Positive Lookbehind</h3><p>正后发断言 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果，筛选条件为 其前跟随着断言中定义的格式。<br>例如，表达式 <code>(?&lt;=(T|t)he\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>，且其前跟着 <code>The</code> 或 <code>the</code>。</p>
<pre>"(?&lt;=(T|t)he\s)(fat|mat)" =&gt; The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the <a href="#learn-regex"><strong>mat</strong></a>.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9hdkgxNjUvMQ==" title="https://regex101.com/r/avH165/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h3 id="4-4-lt-负后发断言-Negative-Lookbehind"><a href="#4-4-lt-负后发断言-Negative-Lookbehind" class="headerlink" title="4.4 ?<!... 负后发断言 Negative Lookbehind"></a>4.4 <code>?&lt;!...</code> 负后发断言 Negative Lookbehind</h3><p>负后发断言 记作 <code>(?&lt;!...)</code> 用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。<br>例如，表达式 <code>(?&lt;!(T|t)he\s)(cat)</code> 匹配 <code>cat</code>，且其前不跟着 <code>The</code> 或 <code>the</code>。</p>
<pre>"(?&lt;!(T|t)he\s)(cat)" =&gt; The cat sat on <a href="#learn-regex"><strong>cat</strong></a>.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci84RWZ4NUcvMQ==" title="https://regex101.com/r/8Efx5G/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h2 id="5-标志-Flags"><a href="#5-标志-Flags" class="headerlink" title="5. 标志 Flags"></a>5. 标志 Flags</h2><p>标志也叫模式修正符，因为它可以用来修改表达式的搜索结果。<br>这些标志可以任意的组合使用，它也是整个正则表达式的一部分。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">标志</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">i</td>
<td>忽略大小写。</td>
</tr>
<tr>
<td style="text-align:center">g</td>
<td>全局搜索。</td>
</tr>
<tr>
<td style="text-align:center">m</td>
<td>多行修饰符：锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="5-1-忽略大小写-Case-Insensitive"><a href="#5-1-忽略大小写-Case-Insensitive" class="headerlink" title="5.1 忽略大小写 Case Insensitive"></a>5.1 忽略大小写 Case Insensitive</h3><p>修饰语 <code>i</code> 用于忽略大小写。<br>例如，表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>，在后面的 <code>i</code> 将其条件修改为忽略大小写，则变成搜索 <code>the</code> 和 <code>The</code>，<code>g</code> 表示全局搜索。</p>
<pre>"The" =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9kcFF5ZjkvMQ==" title="https://regex101.com/r/dpQyf9/1">在线练习<i class="fa fa-external-link"></i></span></p>
<pre>"/The/gi" =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9haGZpdWgvMQ==" title="https://regex101.com/r/ahfiuh/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h3 id="5-2-全局搜索-Global-search"><a href="#5-2-全局搜索-Global-search" class="headerlink" title="5.2 全局搜索 Global search"></a>5.2 全局搜索 Global search</h3><p>修饰符 <code>g</code> 常用于执行一个全局搜索匹配，即（不仅仅返回第一个匹配的，而是返回全部）。<br>例如，表达式 <code>/.(at)/g</code> 表示搜索 任意字符（除了换行）+ <code>at</code>，并返回全部结果。</p>
<pre>"/.(at)/" =&gt; The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the mat.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9qbms2Z00vMQ==" title="https://regex101.com/r/jnk6gM/1">在线练习<i class="fa fa-external-link"></i></span></p>
<pre>"/.(at)/g" =&gt; The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> <a href="#learn-regex"><strong>sat</strong></a> on the <a href="#learn-regex"><strong>mat</strong></a>.
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9kTzFuZWYvMQ==" title="https://regex101.com/r/dO1nef/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h3 id="5-3-多行修饰符-Multiline"><a href="#5-3-多行修饰符-Multiline" class="headerlink" title="5.3 多行修饰符 Multiline"></a>5.3 多行修饰符 Multiline</h3><p>多行修饰符 <code>m</code> 常用于执行一个多行匹配。</p>
<p>像之前介绍的 <code>(^,$)</code> 用于检查格式是否是在待检测字符串的开头或结尾。但我们如果想要它在每行的开头和结尾生效，我们需要用到多行修饰符 <code>m</code>。</p>
<p>例如，表达式 <code>/at(.)?$/gm</code> 表示小写字符 <code>a</code> 后跟小写字符 <code>t</code> ，末尾可选除换行符外任意字符。根据 <code>m</code> 修饰符，现在表达式匹配每行的结尾。</p>
<pre>"/.at(.)?$/" =&gt; The fat
                cat sat
                on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9ob0dNa1AvMQ==" title="https://regex101.com/r/hoGMkP/1">在线练习<i class="fa fa-external-link"></i></span></p>
<pre>"/.at(.)?$/gm" =&gt; The <a href="#learn-regex"><strong>fat</strong></a>
                  cat <a href="#learn-regex"><strong>sat</strong></a>
                  on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9FODhXRTIvMQ==" title="https://regex101.com/r/E88WE2/1">在线练习<i class="fa fa-external-link"></i></span></p>
<h3 id="6-贪婪匹配与惰性匹配（Greedy-vs-lazy-matching）"><a href="#6-贪婪匹配与惰性匹配（Greedy-vs-lazy-matching）" class="headerlink" title="6. 贪婪匹配与惰性匹配（Greedy vs lazy matching）"></a>6. 贪婪匹配与惰性匹配（Greedy vs lazy matching）</h3><p>正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 <code>?</code> 将贪婪匹配模式转化为惰性匹配模式。</p>
<blockquote>
<p>贪婪匹配：当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符，这匹配方式叫做贪婪匹配。特性：一次性读入整个字符串进行匹配，每当不匹配就舍弃最右边一个字符，继续匹配，依次匹配和舍弃（这种匹配-舍弃的方式也叫做回溯），直到匹配成功或者把整个字符串舍弃完为止，因此它是一种最大化的数据返回，能多不会少。<sup><a href="#myfootnote2">2</a></sup>　</p>
</blockquote>
<pre>"/(.*at)/" =&gt; <a href="#learn-regex"><strong>The fat cat sat on the mat</strong></a>. </pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9BeUFkZ0ovMQ==" title="https://regex101.com/r/AyAdgJ/1">在线练习<i class="fa fa-external-link"></i></span></p>
<blockquote>
<p>懒惰匹配：当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能少的字符，这匹配方式叫做懒惰匹配。特性：从左到右，从字符串的最左边开始匹配，每次试图不读入字符匹配，匹配成功，则完成匹配，否则读入一个字符再匹配，依此循环（读入字符、匹配）直到匹配成功或者把字符串的字符匹配完为止。懒惰量词是在贪婪量词后面加个“？”。<sup><a href="#myfootnote2">2</a></sup></p>
</blockquote>
<pre>"/(.*?at)/" =&gt; <a href="#learn-regex"><strong>The fat</strong></a> cat sat on the mat. </pre>

<p><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vci9BeUFkZ0ovMg==" title="https://regex101.com/r/AyAdgJ/2">在线练习<i class="fa fa-external-link"></i></span></p>
<h2 id="额外补充-3"><a href="#额外补充-3" class="headerlink" title="额外补充 3"></a>额外补充 <sup><a href="#myfootnote3">3</a></sup></h2><ul>
<li><em>整数</em>: <code>^-?\d+$</code></li>
<li><em>数字</em>：<code>^[0-9]*$</code></li>
<li><em>n位的数字</em>：<code>^\d{n}$</code></li>
<li><em>至少n位的数字</em>：<code>^\d{n,}$</code></li>
<li><em>m-n位的数字</em>：<code>^\d{m,n}$</code></li>
<li><em>零和非零开头的数字</em>：<code>^(0|[1-9][0-9]*)$</code></li>
<li><em>非零开头的最多带两位小数的数字</em>：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></li>
<li><em>带1-2位小数的正数或负数</em>：<code>^(\-)?\d+(\.\d{1,2})?$</code></li>
<li><em>正数、负数、和小数</em>：<code>^(\-|\+)?\d+(\.\d+)?$</code></li>
<li><em>有两位小数的正实数</em>：<code>^[0-9]+(.[0-9]{2})?$</code></li>
<li><em>有1~3位小数的正实数</em>：<code>^[0-9]+(.[0-9]{1,3})?$</code></li>
<li><em>正整数</em>: <code>^\d+$</code></li>
<li><em>负整数</em>: <code>^-\d+$</code></li>
<li><em>非零的正整数</em>：<code>^[1-9]\d*$</code> 或 <code>^([1-9][0-9]*){1,3}$</code> 或 <code>^\+?[1-9][0-9]*$</code></li>
<li><em>非零的负整数</em>：<code>^\-[1-9][]0-9"*$</code> 或 <code>^-[1-9]\d*$</code></li>
<li><em>非负整数</em>：<code>^\d+$</code> 或 <code>^[1-9]\d*|0$</code></li>
<li><em>非正整数</em>：<code>^-[1-9]\d*|0$</code> 或 <code>^((-\d+)|(0+))$</code></li>
<li><em>非负浮点数</em>：<code>^\d+(\.\d+)?$</code> 或 <code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</code></li>
<li><em>非正浮点数</em>：<code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$</code> 或 <code>^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</code></li>
<li><em>正浮点数</em>：<code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$</code> 或 <code>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></li>
<li><em>负浮点数</em>：<code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$</code> 或 <code>^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code></li>
<li><em>浮点数</em>：<code>^(-?\d+)(\.\d+)?$</code> 或 <code>^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></li>
</ul>
<p><br></p>
<ul>
<li><em>纯小写字母</em>: <code>^([a-z])*$</code></li>
<li><em>纯大写字母</em>: <code>^([A-Z])*$</code></li>
<li><em>中文字符的正则表达式</em>：<code>[\u4e00-\u9fa5]</code></li>
<li><em>汉字 中文字符</em>：<code>^[\u4e00-\u9fa5]{0,}$</code></li>
<li><em>英文和数字</em>：<code>^[A-Za-z0-9]+$</code> 或 <code>^[A-Za-z0-9]{4,40}$</code></li>
<li><em>长度为3-20的所有字符</em>：<code>^.{3,20}$</code></li>
<li><em>数字和英文字母</em>: <code>^[a-zA-Z0-9]*$</code></li>
<li><em>数字和应为字母和空格</em>: <code>^[a-zA-Z0-9 ]*$</code></li>
<li><em>由26个英文字母组成的字符串</em>：<code>^[A-Za-z]+$</code></li>
<li><em>由26个大写英文字母组成的字符串</em>：<code>^[A-Z]+$</code></li>
<li><em>由26个小写英文字母组成的字符串</em>：<code>^[a-z]+$</code></li>
<li><em>由数字和26个英文字母组成的字符串</em>：<code>^[A-Za-z0-9]+$</code></li>
<li><em>由数字、26个英文字母或者下划线组成的字符串</em>：<code>^\w+$</code> 或 <code>^\w{3,20}$</code></li>
<li><em>中文、英文、数字包括下划线</em>：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></li>
<li><em>中文、英文、数字但不包括下划线等符号</em>：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$</code> 或 <code>^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</code></li>
<li><em>可以输入含有^%&amp;’,;=?$\”等字符</em>：<code>[^%&amp;',;=?$\x22]+</code></li>
<li><em>禁止输入含有~的字符</em>：<code>[^~\x22]+</code></li>
<li><em>双字节字符</em><code>：[^\x00-\xff]</code>   (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</li>
<li><em>空白行的正则表达式</em>：<code>\n\s*\r</code>    (可以用来删除空白行)</li>
<li><em>首尾空白字符的正则表达式</em>：<code>^\s*|\s*$或(^\s*)|(\s*$)</code>    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li>
</ul>
<p><br></p>
<ul>
<li><em>手机国家号</em>: <code>^+?[\d\s]{3,}$</code></li>
<li><em>手机号</em>: <code>^+?[\d\s]+(?[\d\s]{10,}$</code></li>
<li><em>中国国内手机号(以0开头前4位后7位，如0737-5686123)</em>: <code>^0\d\d\d-\d\d\d\d\d\d\d$</code> 或 <code>^\d{3}-\d{7}$</code> 或 <code>^(13[0-9]|14[0-9]|15[0-9]|166|17[0-9]|18[0-9]|19[8|9])\d{8}$</code></li>
<li><em>电话号码</em> (“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$</code></li>
<li><em>国内电话号码</em> (0511-4405222、021-87888822)：<code>\d{3}-\d{8}|\d{4}-\d{7}</code> </li>
<li><em>中国邮政编码</em>：<code>[1-9]\d{5}(?!\d)</code>    (中国邮政编码为6位数字)</li>
<li><em>8位数字的QQ号码</em>: <code>^\d\d\d\d\d\d\d\d$</code> 或 <code>^\d{8}$</code></li>
<li><em>腾讯QQ号</em>：<code>[1-9][0-9]{4,}</code>    (腾讯QQ号从10000开始)</li>
<li><em>18位身份证号码(数字、字母x结尾)</em>：<code>^((\d{18})|([0-9x]{18})|([0-9X]{18}))$</code></li>
<li><em>用户名</em>: <code>^[\w\d_.]{4,16}$</code></li>
<li><em>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)</em>：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></li>
<li><em>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)</em>：<code>^[a-zA-Z]\w{5,17}$</code></li>
<li><em>密码</em>: <code>^(?=^.{6,}$)((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.*$</code></li>
<li><em>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)</em>：<code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</code>  </li>
<li><em>邮箱</em>: <code>^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4})*$</code> 或 <code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></li>
<li><em>IP4 地址</em>: <code>^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$</code> 或　<code>\d+\.\d+\.\d+\.\d+</code> 或　<code>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></li>
<li><em>URL</em>: <code>^(((http|https|ftp):\/\/)?([[a-zA-Z0-9]\-\.])+(\.)([[a-zA-Z0-9]]){2,4}([[a-zA-Z0-9]\/+=%&amp;_\.~?\-]*))*$</code> 或　<code>[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code></li>
<li><em>域名</em>：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></li>
<li><em>VISA 信用卡号</em>: <code>^(4[0-9]{12}(?:[0-9]{3})?)*$</code></li>
<li><em>一年的12个月(01～09和1～12)</em>：<code>^(0?[1-9]|1[0-2])$</code></li>
<li><em>一个月的31天(01～09和1～31)</em>：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code> </li>
<li><em>日期 (MM/DD/YYYY)</em>: <code>^(0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)?[0-9]{2}$</code></li>
<li><em>日期 (YYYY/MM/DD)</em>: <code>^(19|20)?[0-9]{2}[- /.](0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])$</code></li>
<li><em>MasterCard 信用卡号</em>: <code>^(5[1-5][0-9]{14})*$</code></li>
<li><em>xml文件</em>：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</code></li>
<li><em>HTML标记的正则表达式</em>：<code>&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;</code>    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</li>
</ul>
<p><br></p>
<ul>
<li><em>钱的输入格式</em>：<ol>
<li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[1-9][0-9]*$</code></li>
<li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code></li>
<li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code></li>
<li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code> </li>
<li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]{2})?$</code></li>
<li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code> </li>
<li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</code></li>
<li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</code></li>
</ol>
<ul>
<li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li>
</ul>
</li>
</ul>
<p><br></p>
<p>引用: </p>
<p><a name="myfootnote1">1</a>:　正则表达式 维基百科. <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JUFEJUEzJUU1JTg4JTk5JUU4JUExJUE4JUU4JUJFJUJFJUU1JUJDJThG" title="https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F<i class="fa fa-external-link"></i></span><br><a name="myfootnote2">2</a>: 这次不会说我的正则教程没写全了吧？？.  <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjllN2I2Y2U1MWQ0NTBlOGE2NWVkNmI=" title="https://juejin.im/post/5b9e7b6ce51d450e8a65ed6b">https://juejin.im/post/5b9e7b6ce51d450e8a65ed6b<i class="fa fa-external-link"></i></span><br><a name="myfootnote3">3</a>: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20venhpbi9hcmNoaXZlLzIwMTMvMDEvMjYvMjg3Nzc2NS5odG1s" title="https://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html">https://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html<i class="fa fa-external-link"></i></span> 最全的常用正则表达式大全——包括校验数字、字符、一些特殊的需求等等</p>
<p><br></p>
<p>有用的链接:   </p>
<ul>
<li>正则表达式真的很骚，可惜你不会写！！！: <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Yjk2YThlMmU1MWQ0NTBlNmEyZGUxMTU=" title="https://juejin.im/post/5b96a8e2e51d450e6a2de115">https://juejin.im/post/5b96a8e2e51d450e6a2de115<i class="fa fa-external-link"></i></span></li>
<li>Python正则表达式: <span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvODk3NjkyODg4NzI1MzQ0LzkyMzA1NjEyODEyODg2NA==" title="https://www.liaoxuefeng.com/wiki/897692888725344/923056128128864">https://www.liaoxuefeng.com/wiki/897692888725344/923056128128864<i class="fa fa-external-link"></i></span></li>
<li>读懂正则表达式就这么简单: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vemVyeS9wLzM0Mzg4NDUuaHRtbA==" title="https://www.cnblogs.com/zery/p/3438845.html">https://www.cnblogs.com/zery/p/3438845.html<i class="fa fa-external-link"></i></span></li>
<li>正则表达式 - 教程: <span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9yZWdleHAvcmVnZXhwLXR1dG9yaWFsLmh0bWw=" title="https://www.runoob.com/regexp/regexp-tutorial.html">https://www.runoob.com/regexp/regexp-tutorial.html<i class="fa fa-external-link"></i></span></li>
</ul>
<p><br></p>
<p>在线匹配工具：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20v" title="https://regex101.com/">https://regex101.com/<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5yZWdleHBhbC5jb20v" title="http://www.regexpal.com/">http://www.regexpal.com/<i class="fa fa-external-link"></i></span> </li>
<li><span class="exturl" data-url="aHR0cDovL3J1YnVsYXIuY29tLw==" title="http://rubular.com/">http://rubular.com/<i class="fa fa-external-link"></i></span> </li>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZWdleHBlci5jb20v" title="https://regexper.com/">https://regexper.com/<i class="fa fa-external-link"></i></span></li>
</ul>
<!-- 该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>Regular Expression</tag>
      </tags>
  </entry>
  <entry>
    <title>[Paper]BTW 2015 | Unnesting Arbitrary Queries</title>
    <url>/2020/02/25/Paper-BTW-2015-Unnesting-Arbitrary-Queries/</url>
    <content><![CDATA[<pre><code>  - 论文： Unnesting Arbitrary Queries
  - 作者： Thomas Neumann and Alfons Kemper
  - 年份： 2015
  - 会议： Datenbanksysteme für Business, Technologie und Web (BTW 2015)
  - https://dl.gi.de/handle/20.500.12116/2418;jsessionid=6988827FF07E4B508A0C50DC4367E1FA
  - http://www.btw-2015.de/res/proceedings/Hauptband/Wiss/Neumann-Unnesting_Arbitrary_Querie.pdf
</code></pre><!-- TODO:看对应的课件slide pdf -->
<p>SQL-99标准中运行子查询(subquery)几乎可以出现在query的任何地方。<br>这个特性可以让我们完成很多复杂的查询，但是往往这样的query的运行时间(runtime)需要很长。<br>原因是大部分数据库查询优化器(query optimizer)只能用nested subquery的方式去进行求职，这样的时间复杂度(time complexity)往往是暴力的<code>O(n^2)</code>。<br>这篇论文的目的就像它名字所说，对任意的SQL query进行解除关联(de-corrleation), 来获得一个更好的run time。<br>这篇论文的前提要求是：关系代数(relation algebra)和逻辑计划(logical plan)。  </p>
<p>这一篇论文提到的内容，已经在HyPer数据库中实现：<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbCM=" title="https://hyper-db.de/interface.html#">https://hyper-db.de/interface.html#<i class="fa fa-external-link"></i></span><br>同时这个网页接口提供了对Query Plan的查看。</p>
<a id="more"></a>
<hr>
<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>我们用一个大学schema，包括了<em>学生student</em>和<em>考试exams</em>这两个表格：</p>
<ul>
<li>$students: \{[id, name, major, year, \dots]\}$</li>
<li>$exams: \{[sid, course, curriculum, date, \dots]\}$</li>
</ul>
<p><strong>这里需要提到，(德国大学成绩)grade数值越小，成绩越好。</strong></p>
<h2 id="Q1-对每个同学搜索Ta的最好成绩"><a href="#Q1-对每个同学搜索Ta的最好成绩" class="headerlink" title="Q1: 对每个同学搜索Ta的最好成绩"></a>Q1: 对每个同学搜索Ta的最好成绩</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- Q1</span></span><br><span class="line"><span class="keyword">select</span> s.name,e.course</span><br><span class="line"><span class="keyword">from</span> students s,exams e</span><br><span class="line"><span class="keyword">where</span> s.id=e.sid <span class="keyword">and</span></span><br><span class="line">      e.grade=(<span class="keyword">select</span> <span class="keyword">min</span>(e2.grade)</span><br><span class="line">      <span class="keyword">from</span> exams e2</span><br><span class="line">      <span class="keyword">where</span> s.id=e2.sid)</span><br></pre></td></tr></tbody></table></figure>
<p>我们可以发现对于subquery，它需要依赖一个外部元组(tupel)<code>students s</code>的<code>id</code>字段。<br>这个SQL为了得到一个最终结果中的tupel，都需要对subquery根据对应的<code>students s</code>进行求值。<br>这样的subquery，我们称为corelated subquery(关联子查询)。<br>这样的join我们称之为<em>dependent join</em>，指一个nested loop join中，一侧的求值依赖于另外一侧。</p>
<blockquote>
<p>A dependent join, i.e., a nested loop join where the evaluation of the right hand side depends on the current value of the left-hand side.</p>
</blockquote>
<p>这样的dependent join往往是非常低效的，时间复杂度在平方阶等级。</p>
<p><br></p>
<p>对于这个<code>Q1</code>，我们可以很快思考出一个uncorelated subquery(无关联子查询):</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- Q1'</span></span><br><span class="line"><span class="keyword">select</span> s.name,e.course</span><br><span class="line"><span class="keyword">from</span> students s,exams e,</span><br><span class="line">     (<span class="keyword">select</span> e2.sid <span class="keyword">as</span> <span class="keyword">id</span>, <span class="keyword">min</span>(e2.grade) <span class="keyword">as</span> best</span><br><span class="line">     <span class="keyword">from</span> exams e2</span><br><span class="line">     <span class="keyword">group</span> <span class="keyword">by</span> e2.sid) m</span><br><span class="line"><span class="keyword">where</span> s.id=e.sid <span class="keyword">and</span> m.id=s.id <span class="keyword">and</span> e.grade=m.best</span><br></pre></td></tr></tbody></table></figure>
<p>这个改善过的<code>Q1'</code>中，我们增加了一个暂时的表格<code>m</code>，对它的求值不依赖于外界的tupel。<br>我们用一个完全内部变量<strong>取代(substitue)</strong> 了原来来自outer query的<code>students s</code>的<code>id</code>字段。<br>因此这里的join不再是depedent join，而是一个regular join。这样我们就完成了一次unnesting或者de-correlation(去关联)。  </p>
<h2 id="Q2-搜索CS或Games-Engineering专业的学生和Ta的科目，成绩比自己考试或者学长学姐成绩的平均值差-大"><a href="#Q2-搜索CS或Games-Engineering专业的学生和Ta的科目，成绩比自己考试或者学长学姐成绩的平均值差-大" class="headerlink" title="Q2: 搜索CS或Games Engineering专业的学生和Ta的科目，成绩比自己考试或者学长学姐成绩的平均值差(大)"></a>Q2: 搜索CS或Games Engineering专业的学生和Ta的科目，成绩比自己考试或者学长学姐成绩的平均值差(大)</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.name, e.course</span><br><span class="line"><span class="keyword">from</span> students s, exams e</span><br><span class="line"><span class="keyword">where</span> s.id=e.sid <span class="keyword">and</span> (s.major = ’CS’ <span class="keyword">or</span> s.major = ’Games Eng’) <span class="keyword">and</span></span><br><span class="line">      e.grade&gt;=(<span class="keyword">select</span> <span class="keyword">avg</span>(e2.grade)+<span class="number">1</span> <span class="comment">--one grade worse</span></span><br><span class="line">                <span class="keyword">from</span> exams e2 <span class="comment">--than the average grade</span></span><br><span class="line">                <span class="keyword">where</span> s.id=e2.sid <span class="keyword">or</span> <span class="comment">--of exams taken by</span></span><br><span class="line">                (e2.curriculum=s.major <span class="keyword">and</span> <span class="comment">--him/her or taken</span></span><br><span class="line">                s.year&gt;e2.date)) <span class="comment">--by elder peers</span></span><br></pre></td></tr></tbody></table></figure>
<p>这个复杂的例子让我们很难直接<strong>很快思考出</strong>一个对应的unnested版本。<br>我们很难去进行一次<strong>取代(substitution)</strong>，来替换<code>s.year</code>和<code>s.major</code>。</p>
<hr>
<h1 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h1><h2 id="The-Dependent-Join"><a href="#The-Dependent-Join" class="headerlink" title="The Dependent Join"></a>The Dependent Join</h2><p><img data-src="/images/Paper/Unnesting/dep_join.png" alt="dep_join"></p>
<p>这里对$T_1$的每一个tupel，都需要对所有$T_2$的tupel进行求值(evaluated)。</p>
<ul>
<li>$\mathcal{A}(T)$: 指表达式T(expression)所产生的字段(attributes)</li>
<li>$\mathcal{F}(T)$: 指出现在表达式T(expression)自由变量(free variables)</li>
</ul>
<p>对于The Dependent Join，如下一定成立：$\mathcal{F}(T_2) \subseteq \mathcal{A}(T_1)$</p>
<ul>
<li>即：$T_2$所需要的字段必须先被$T_1$所产生，这里体现了<strong>关联性</strong>。</li>
</ul>
<h2 id="Group-By"><a href="#Group-By" class="headerlink" title="Group By"></a>Group By</h2><p><img data-src="/images/Paper/Unnesting/group_by.png" alt="group_by"></p>
<ul>
<li>$e$: 输入的关系(表格)，它的部分字段被聚合，剩下的字段被留下来</li>
<li>$A$: 被聚合的字段，即 <code>group by A</code></li>
<li>$x$: 被聚合的字段($A$)对应的表格内容，自然是$e$的一部分</li>
<li>$y$: 是一个集合，元素是所有不被聚合的字段(即不出现在<code>group by</code>后面的字段)，它们在$A$中的字段中拥有相同的值，所以被分到一组(group)。</li>
<li>$f$: 聚合函数，它的输入是一个集合(常常是多个元素)。<code>sum, avg, median, min, max</code>都是常见的聚合函数。</li>
<li>$a$: 即一个(或一些)新的字段，提供给$f(y)$的输出。</li>
</ul>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><img data-src="/images/Paper/Unnesting/map.png" alt="map"></p>
<ul>
<li>$f$: 映射函数，它的输入是$x$，即$e$表格中的tupel</li>
<li>$a$: 即一个新的字段，提供给$f(x)$的输出。</li>
<li><code>map</code>很类似SQL中的<code>case ... when ... else ... end</code>。</li>
</ul>
<h2 id="Sets-of-attributes-comparison"><a href="#Sets-of-attributes-comparison" class="headerlink" title="Sets of attributes comparison"></a>Sets of attributes comparison</h2><p><img data-src="/images/Paper/Unnesting/comparison.png" alt="comparison"></p>
<ul>
<li>$A$: 是一个字段的集合</li>
</ul>
<hr>
<h1 id="去关联-Unnesting-Decorrelation"><a href="#去关联-Unnesting-Decorrelation" class="headerlink" title="去关联(Unnesting, Decorrelation)"></a>去关联(Unnesting, Decorrelation)</h1><h2 id="Simple-Unnesting"><a href="#Simple-Unnesting" class="headerlink" title="Simple Unnesting"></a>Simple Unnesting</h2><p>有一些Subquery的依赖只是出于句法(syntactic)原因，这样的subquery我们往往可以直接看出去关联的版本。</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- a fragment from TPC-H Query 21</span></span><br><span class="line"><span class="keyword">select</span> ...</span><br><span class="line"><span class="keyword">from</span> lineitem l1 ...</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> *</span><br><span class="line">              <span class="keyword">from</span> lineitem l2</span><br><span class="line">              <span class="keyword">where</span> l2.l_orderkey = l1.l_orderkey)</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure>
<p>对应的关系代数：</p>
<p><img data-src="/images/Paper/Unnesting/Q21_1.png" alt="Q21_1"></p>
<p>我们可以说这个<code>exists</code>其实是多余的，因为两侧的表格是一致的，另外也是比较同一个字段的相等。这个<code>exists</code>肯定成立。我们可以<strong>把selection向上提</strong>，使这个dependent join转化成一个带条件的left semi join:</p>
<p><img data-src="/images/Paper/Unnesting/Q21_2.png" alt="Q21_2"></p>
<p>Simple Unnesting:</p>
<ul>
<li>将所有有依赖的判断谓词(dependent predicates)尽可能提高(pull up in the algebra tree)，比如高于join, selection, group by等等运算符，只到提高至依赖消失。</li>
<li>按照上面的做法，可以使一个dependent join变成regular join。</li>
<li>这里要说明：这个predicate pull-up的目的是为了去关联。我们得到结果之后，可以再使用logical plan的优化方式，比如selection push down。这是优化的前后步骤，并不相互冲突。</li>
</ul>
<h2 id="General-Unnesting"><a href="#General-Unnesting" class="headerlink" title="General Unnesting"></a>General Unnesting</h2><p>如果上面的Simple Unnesting行不通，我们可以尝试General Unnesting，它总体上分为两步：</p>
<ul>
<li>现将dependent join改写成一个<strong>适合转化的dependent join</strong>，</li>
<li>再将上一步生成的dependent join向下推(push down)，为了获得一个regular join。</li>
</ul>
<h3 id="适合转化的dependent-join"><a href="#适合转化的dependent-join" class="headerlink" title="适合转化的dependent join"></a>适合转化的dependent join</h3><p><img data-src="/images/Paper/Unnesting/euivalence_dependent_join.png" alt="euivalence_dependent_join"></p>
<ul>
<li>左侧是我们一直提到的dependent join: 对每一个$T_1$的tupel，我们都需要对所有$T_2$的tupel进行求值。</li>
<li>右侧是一个等价表达：  <ul>
<li>$D$: 指所有的变量(variable bindings)的域(Domain)，它是一个集合，不含重复的指。  </li>
<li>$T_1 =_{\mathcal{A}(D)} D$: $T_1$和$D$在$\mathcal{A}(D)$字段中，都相等。  </li>
<li>现在<strong>只需要</strong>对$T_2$针对D中的每一个不同变量(distinct variable binding)进行求值。  </li>
<li>最后用一个regular join和左侧的$T_1$连接。  </li>
<li>如果$T_1$有很多重复值，那么集合中$D$元素个数就不多，$T_2$的求值次数会大大降低。  </li>
</ul>
</li>
</ul>
<h3 id="最终目标"><a href="#最终目标" class="headerlink" title="最终目标"></a>最终目标</h3><p><img data-src="/images/Paper/Unnesting/aim.png" alt="aim"></p>
<p>我们目标是两个：</p>
<ul>
<li>获得一个regular join，$T$不再依赖于$D$。</li>
<li>甚至用已存在的字段取代regular join。这一步我们会在<a href="#优化">优化</a>部分中讨论。</li>
</ul>
<h3 id="Push-Down-下推"><a href="#Push-Down-下推" class="headerlink" title="Push Down(下推)"></a>Push Down(下推)</h3><p>这部分我们讨论关系代数运算符的下推dependent join规则。这里需要注意我们讲的一直是：<strong>下推dependent join</strong>。</p>
<h4 id="Selection"><a href="#Selection" class="headerlink" title="Selection"></a>Selection</h4><p><img data-src="/images/Paper/Unnesting/selection.png" alt="selection"></p>
<h4 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h4><p><img data-src="/images/Paper/Unnesting/join.png" alt="join"></p>
<ul>
<li>首先这里右侧$T_1\bowtie_p T_2$作为以整体，依赖$D$中的tupel。</li>
<li>我们在这些需要进行一些情况判断：<ul>
<li>如果对$T_2$的join不依赖于$D$，即$\mathcal{F}(T_2) \cap \mathcal{A}(D) = \emptyset$，我们使用regular join去连接$T_2$  </li>
<li>如果对$T_1$的join不依赖于$D$: 类似上面这种情况  </li>
<li>如果对$T_1$，$T_2$的join都依赖于$D$: 只能应用类似乘法分配律(FOIL method)的原则，注意从$D$开始的dependent join会出现两次(replication)。  这并不会变得低效。在转化前情况和转化后，这两种情况均需要对$T_1$和$T_2$进行$|D|$次求值。  </li>
</ul>
</li>
<li>这里的转化是悲观的(perssimistic)，更好的方式我们会在<a href="#优化">优化</a>部分中讨论。</li>
</ul>
<h4 id="Outer-Join"><a href="#Outer-Join" class="headerlink" title="Outer Join"></a>Outer Join</h4><p><img data-src="/images/Paper/Unnesting/outer_join.png" alt="outer_join"></p>
<p>对于left outer join：</p>
<ul>
<li>如果对$T_2$的join不依赖于$D$，我们使用left outer join去连接$T_2$</li>
<li>如果对$T_2$的join依赖于$D$，我们只能replication，使用两次从$D$开始的dependent join。</li>
</ul>
<h4 id="Semi-Join-amp-Anti-Join"><a href="#Semi-Join-amp-Anti-Join" class="headerlink" title="Semi Join &amp; Anti Join"></a>Semi Join &amp; Anti Join</h4><p><img data-src="/images/Paper/Unnesting/SemiJoin_AntiJoin.png" alt="SemiJoin_AntiJoin"></p>
<h4 id="Group-By-1"><a href="#Group-By-1" class="headerlink" title="Group By"></a>Group By</h4><p><img data-src="/images/Paper/Unnesting/Group_By.png" alt="Group_By"></p>
<p>我们可以观察这个等式左右两侧：</p>
<ul>
<li>左侧肯定是带有$D$中的字段$\mathcal{A}(D)$</li>
<li>右侧需要对于$D$中的字段，所以需要将$\mathcal{A}(D)$加入对应的<code>group by</code>的位置，确保这些字段在group by之后还会出现。</li>
</ul>
<h4 id="Projection"><a href="#Projection" class="headerlink" title="Projection"></a>Projection</h4><p><img data-src="/images/Paper/Unnesting/Projection.png" alt="Projection"></p>
<p>我们使用同上的观察方法。</p>
<h4 id="Set-Operation"><a href="#Set-Operation" class="headerlink" title="Set Operation"></a>Set Operation</h4><p><img data-src="/images/Paper/Unnesting/Set_Operation.png" alt="Set_Operation"></p>
<h2 id="实现相关"><a href="#实现相关" class="headerlink" title="实现相关"></a>实现相关</h2><p>集合$D$的元素个数会很大吗？<br>这个问题当然取决实际情况(实际表格和实际SQL查询)。</p>
<p>首先: $|D| \leq |T_1|$这个等式一直成立。<br>然后我们假设最高处的是一个hash join，这个哈希表中保存了$T_1$的tupel。</p>
<ul>
<li><strong>worst case</strong>: 我们需要额外存储$D$，而它的大小和$T_1$一样。比如我们需要另外一个哈希集合(hashset)去构建$D$这个集合。这个所需要的哈希集合大小应该和之前的哈希表处于同一量级，它们合在一起的空间复杂度是$O(2n)$</li>
<li><strong>best case</strong>: 如果我们能预先知道$T_1$是一个不带重复的集合，比如我们可以从schema看出它是key。那么我们就不必实体化(materialization)$D$，只需要遍历(iterate, probe)一遍我们的哈希表。这时候我们没有额外存储的花销，只用了一个哈希表给hash join，空间复杂度是$O(n)$。</li>
</ul>
<p>最后，即使是上述的worst case也是值得去实现这个<strong>去关联</strong>功能，因为它能将时间复杂度$O(n^2)$降至$O(n)$。即使有内存花销(memory overhead)，线性的时间复杂度能很大改善运行时间。</p>
<h2 id="例子：Q1"><a href="#例子：Q1" class="headerlink" title="例子：Q1"></a>例子：Q1</h2><p>直接对应的关系代数：<br><img data-src="/images/Paper/Unnesting/Q1_relation_algebra.png" alt="Q1_relation_algebra"></p>
<p>对应适合转化的dependent join：</p>
<p><img data-src="/images/Paper/Unnesting/Q1'_relation_algebra.png" alt="Q1'_relation_algebra"></p>
<ul>
<li>从<em>直接对应的关系代数</em>中可以看出来，dependent join右侧只需要<code>s.id</code>这个字段。</li>
<li>因此<em>适合转化的dependent join</em>中，dependent join只提供了必须的<code>s.id</code>这个字段。我们增加了一个投影Projection去除了其他没有必要的字段。</li>
</ul>
<p>对应的关系代数树：</p>
<p><img data-src="/images/Paper/Unnesting/Q1_Step1.png" alt="Q1_Step1"></p>
<p>1.我们消去了重复(eliminate redundancy)，同时也把join右侧(right or inner)需要的字段从join左侧(left or outer)传递了过去。<br>更重要的是，我们把一个最高的通用(generic)dependent join转化成了一个regular join和一个<strong>通过集合</strong>$D$的dependent join，强调一下集合$D$中自然没有任何重复的元素。 <a href="#link">对应的假设</a></p>
<p><img data-src="/images/Paper/Unnesting/Q1_Step2.png" alt="Q1_Step2"></p>
<p>2.我们将dependent join推到group by下面。注意需要将$D$中的字段$\mathcal{A}(D)$加入group by。</p>
<p><img data-src="/images/Paper/Unnesting/Q1_Step3.png" alt="Q1_Step3"></p>
<p>3.我们将dependent join推到selection下面。</p>
<p><img data-src="/images/Paper/Unnesting/Q1_Step4.png" alt="Q1_Step4"></p>
<p>4.这时候我们可以用regular join代替dependent join。Unnesting结束。</p>
<p><img data-src="/images/Paper/Unnesting/Q1_Step5.png" alt="Q1_Step5"></p>
<p>5.selection push down</p>
<p><img data-src="/images/Paper/Unnesting/Q1_Step6.png" alt="Q1_Step6"></p>
<p>6.去除嵌套(decoupling)，并且去除没有必要的部分。上一步右侧的对$D$的join被消除。因为我们观察join之后，$d.id=e2.sid$成立。这个目标可以很快用一个<code>map</code>然后<code>selection</code>完成。<a href="#link2">对应的假设</a>， <a href="#优化">更多的解释</a></p>
<h2 id="例子：Q2"><a href="#例子：Q2" class="headerlink" title="例子：Q2"></a>例子：Q2</h2><p><img data-src="/images/Paper/Unnesting/Q2.png" alt="Q2"></p>
<p>对于$Q2$，$D$不能被消去，因为这里是一个对$D$的non-euqi join，这种情况不能使用消去或代替(substitution)。去除嵌套(decoupling)也是不允许的，因为$s.year$不是和$e2.date$进行equi join。</p>
<p>这里必须要提到一下原论文的错误：最上面的join的条件应该为<code>e.grade &gt; m + 1 and d.id = s.id  and d.year = e.date and e.curriculum = d.major</code>。这个在我和一个博士生的讨论中被确认。</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><ul>
<li>Simple Unnesting可以将查询中的关联去除很干净。  </li>
<li>General Unnesting必须一个投影去获得集合$D$，再和它join。对应的花销比Simple Unnesting大。当然集合$D$是值得的，因为我们只需要进行<strong>一次</strong>对$D$的求值和<strong>一次</strong>和$D$的join，这比关联query中的$O(n^2)$时间复杂度要优化的多。另外在一些情况，我们可以完全消去集合$D$，例子是<a href="#q1">Q1</a>的最后一步。</li>
</ul>
<p>现在我们来讨论一下，如何在一般情况下，用一个已经存在在字段来代替(substitute)集合$D$。</p>
<ul>
<li>首先这个代替的情况只能发生在equi-join的情况，即比较两个字段是否相等。 比如 $D\bowtie_{D.a=R.b} R$。我们可以让$D$对应字段是数据成为join的结果。当然这部分数据可能包含了$R.b$中没有的元素，但是这样的元素自然也不会出现在join的结果中。所以这样会导致中间步骤结果偏多，包含了一些本不应该出现的元素。</li>
<li><p>另外我们还需要找到被join的判断谓词和filter的判断谓词造成的等价类(equivalence classes)。比如 $\sigma_{a=b}$意味 $a$ 和 $b$属于同一个等价类，它们有同样的数值，所以我们可以用 $b$ 来代替 $a$。<a href="#link3">一点补充</a></p>
</li>
<li><p>找到等价类$C$后，下面的等式成立(前提是$D$是一个集合)：<br><img data-src="/images/Paper/Unnesting/substitution.png" alt="substitution"></p>
<ul>
<li>$B$: $T$表格中的一些字段。($T$表格的所有字段$\mathcal{A}(T)$的一个子集)</li>
<li>$\mathcal{A}(D)$: 指集合$D$对应的字段，也是在$T$表格中$B$映射对应(map)的新字段。</li>
<li>$\mathcal{A}(D)$和$B$共属于同一个等价类$C$。</li>
</ul>
</li>
<li>上面的等式意味：我们不必对$D$的join求值，而是可以用<code>map</code>运算符，扩展$T$表格，然后通过等价字段(equivalent attributes)再计算$D$对应的字段值(attribute value)。我们的生成的中间步骤的值可能偏多，因为我们没有真正的对join的条件进行判断和过滤，导致一些<strong>不应该被join</strong>出现在我们中间步骤的结果中。对于这些多生成的tupel，我们需要在这个<code>map</code>运算符之上，比如使用一个<code>selection</code>运算符去过滤掉这些多余并错误的tupel，或者使用一个带筛选条件的join。</li>
<li>基于上面的所有点，代替(substitute)在与$D$集合join筛选度很低(unselective，因此$D$有很多元素)的情况下是值得的，比如Q1的情况。但是一般情况下，是否值得用代替的方式，这个决定需要查询优化器在比较各种情况下的code model以后，才能真正下结论。</li>
</ul>
<hr>
<h1 id="另外的话"><a href="#另外的话" class="headerlink" title="另外的话"></a>另外的话</h1><ul>
<li><h7 id="link"> 我们假设$D$是一个集合，即不包含任何重复元素。这篇文章已经对应论文中，dependent join的左侧是一个集合，被提供给右侧。这个优化仅仅在$D$没有保留SQL的包语义(bag semantics)，在query的其余地方以及是保留包语义的。当然如果query应用了`distinct`的话，我们自然可以下推(push down)对应字段。</h7>
</li>
<li><h7 id="link2"> 我们假设$e2.sid$可以是NULL值，这时候我们需要保留这个`selection`。如果我们看schema，发现$e2.sid$不可能是NULL值(not nullable)，那么在这个情况中的确可以去掉这个selection。</h7>
</li>
<li><h7 id="link3"> 有一个例外是outer join，如果没有对应的值，outer join会生成一个NULL。比如 $D\bowtie_{left outer\;D.a=R.b} R$: 如果$D.a$没有对应的值，它会和NULL连接。那自然$D.a$和NULL不相等。如果最上面的join如果拒绝NULL，那这个问题就被解决。</h7>
</li>
<li><p>Unnesting的重要步骤是dependent join push down。当我们完成unnesting之后，对结果的logical plan，当然可以继续进行优化，比如使用selection push down和join reordering。这些是对查询优化中两个存在先后顺序的步骤，并不冲突。</p>
</li>
<li><p>有一些非常小的情况中dependent join的nested evaluation有更好的runtime表现。比如outer query的表格非常小，而inner query(subquery)涉及的表格特别大，或者可以使用index look up。当然在应该会被查询优化器(cost-based optimizer)的cost model计算中意识到，如果unnesting的花费(cost)很高，对这样的查询就不进行unnesting转化。</p>
</li>
<li><p>Dependent Anti Join例子: $R: \{[A, \dots, X, \dots]\}$ 和 $S: \{[B, \dots, Y, \dots]\}$</p>
</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- Q3</span></span><br><span class="line"><span class="keyword">select</span> R.*</span><br><span class="line"><span class="keyword">from</span> R</span><br><span class="line"><span class="keyword">where</span> R.X = <span class="keyword">all</span> (<span class="keyword">select</span> S.Y</span><br><span class="line">                 <span class="keyword">from</span> S</span><br><span class="line">                 <span class="keyword">where</span> S.B = R.A)</span><br></pre></td></tr></tbody></table></figure>
<p>首先这个SQL查询不可能去unnesting。但是我们可以否定这个判断谓词，再用一个dependent anti join去表达这个SQL。然后再进行转化，见下图：<br><img data-src="/images/Paper/Unnesting/anti_join.png" alt="anti_join"></p>
<ul>
<li>Evaluation部分参见原论文。这一篇论文没有性能比较图表，仅仅列出了不同的runtime。</li>
</ul>
<hr>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>我们可以对任意query，应用push down的方法转化其中的dependent join。我们可以获得一个regular join或者直接用存在字段去代替join。<br>时间复杂度从$O(n^2)$被优化至$O(n)$。<br>对于大部分大数据query，这个查询优化器中进行的logical plan转化是完全值得的，在query的runtime我们可以把这转化所花的时间完全赢回来。<br>因为dependent join几乎只能用nested loop join(关系代数中的集合笛卡尔积)实现，时间复杂度在<code>O(n^2)</code>。<br>而转化后的版本的最好情况(best case)的时间复杂度是<code>O(n)</code>,在数据量大情况下，可以有多数量级的runtime加速。<br>另外从工程的角度，不相关的子查询完全可以使用有效的实现方式，比如无锁多线程或高效的join算法。<br>这大大提高了系统的可缩放性(Scalability)和对主流CPU的适应性。  </p>
<hr>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9kbC5naS5kZS9iaXRzdHJlYW0vaGFuZGxlLzIwLjUwMC4xMjExNi8yNDE4LzM4My5wZGY/c2VxdWVuY2U9MQ==" title="https://dl.gi.de/bitstream/handle/20.500.12116/2418/383.pdf?sequence=1">Unnesting Arbitrary Queries - Thomas Neumann and Alfons Kemper - (BTW 2015)<i class="fa fa-external-link"></i></span></li>
</ol>
<!-- 该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Paper</category>
        <category>Query Optimizer</category>
      </categories>
      <tags>
        <tag>Paper</tag>
        <tag>Query Optimizer</tag>
        <tag>Subquery Optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQL]高级SQL-递归(2)</title>
    <url>/2020/02/25/SQL-%E9%AB%98%E7%BA%A7SQL-%E9%80%92%E5%BD%92-2/</url>
    <content><![CDATA[<p>在这篇文章<strong>高级SQL</strong>中我们会遇到递归查询。这篇文章我们使用一个公共交通数据集，最后我们还是对<code>union</code>和<code>union all</code>在图论的例子中进行练习和区分。</p>
<a id="more"></a>
<h1 id="第二部分数据集-公共交通-Schema"><a href="#第二部分数据集-公共交通-Schema" class="headerlink" title="第二部分数据集 - 公共交通 Schema"></a>第二部分数据集 - 公共交通 Schema</h1><p>公共交通数据集<code>Fahrplan</code>在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p>
<p><strong>本地载入改数据集</strong>： <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMTYyMzY5MyNpdGVtLTMtMw==" title="https://segmentfault.com/a/1190000021623693#item-3-3">https://segmentfault.com/a/1190000021623693#item-3-3<i class="fa fa-external-link"></i></span></p>
<p>英文Schema： <script type="math/tex">Fahrplan = \{\underline{From\_, To\_, Line\_}, depart, arrival\}</script></p>
<p>德文Schema： <script type="math/tex">Fahrplan = \{\underline{Von, Nach, Linie}, Abfahrt, Ankunft\}</script></p>
<p>有关英文Schema：在<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMTYyMzY5MyNpdGVtLTMtMw==" title="https://segmentfault.com/a/1190000021623693#item-3-3">我的文章<i class="fa fa-external-link"></i></span>提到这一块内容。德文schema可以直接在HyPer网页接口运行。这里为了方便大家直接在网页上运行，我采用德文schema。<br><!-- TODO:链接到blog --></p>
<p>Schma和大部分SQL语句来自<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL2tlbXBlci8/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/kemper/?lang=de">Prof. Alfons Kemper, Ph.D.<i class="fa fa-external-link"></i></span>的课件和书。</p>
<p>课件：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></li>
</ul>
<p>书：　<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p>
<h2 id="熟悉数据集"><a href="#熟悉数据集" class="headerlink" title="熟悉数据集"></a>熟悉数据集</h2><p>首先我们先运行一些简单SQL，来认识一下这个数据集内之间的关系。</p>
<ul>
<li><code>von</code>这一行字符串(string)匹配：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> von</span><br><span class="line"><span class="keyword">from</span> fahrplan</span><br><span class="line"><span class="keyword">where</span> von <span class="keyword">like</span> <span class="string">'%Garching%'</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">             von             </span><br><span class="line">-----------------------------</span><br><span class="line">Garching</span><br><span class="line">Garching, Forschungszentrum</span><br><span class="line">Garching-Hochbrück</span><br><span class="line">(3 rows)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>case</code></li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> linie,</span><br><span class="line">       <span class="keyword">case</span></span><br><span class="line">           <span class="keyword">when</span> linie <span class="keyword">like</span> <span class="string">'U%'</span> <span class="keyword">then</span> <span class="string">'U-Bahn'</span></span><br><span class="line">           <span class="keyword">when</span> linie <span class="keyword">like</span> <span class="string">'S%'</span> <span class="keyword">then</span> <span class="string">'S-Bahn'</span></span><br><span class="line">           <span class="keyword">else</span> <span class="string">'Bus/Tram'</span></span><br><span class="line">           <span class="keyword">end</span> <span class="keyword">as</span> public_transportation</span><br><span class="line"><span class="keyword">from</span> fahrplan</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"> linie | public_transportation </span><br><span class="line">-------+-----------------------</span><br><span class="line"> U6    | U-Bahn</span><br><span class="line"> U6    | U-Bahn</span><br><span class="line"> U6    | U-Bahn</span><br><span class="line"> U6    | U-Bahn</span><br><span class="line"> U6    | U-Bahn</span><br><span class="line"> U6    | U-Bahn</span><br><span class="line"> 690   | Bus/Tram</span><br><span class="line">(7 rows)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>求从<code>Garching, Forschungszentrum</code>出发，我们现在(<code>current_time</code>)能赶上的交通工具：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> fahrplan</span><br><span class="line"><span class="keyword">where</span> abfahrt &gt; <span class="keyword">current_time</span> <span class="keyword">and</span> von = <span class="string">'Garching, Forschungszentrum'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> abfahrt</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>搜索两个车站，这俩之间需要3分钟到5分钟能够到达(注意第一天午夜发车，第二天凌晨到达的情况):</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">duration</span> <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *,</span><br><span class="line">    (<span class="keyword">case</span> <span class="keyword">when</span> ankunft &lt; abfahrt <span class="keyword">then</span> <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> - <span class="keyword">extract</span>(epoch <span class="keyword">from</span> abfahrt - ankunft)</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">extract</span>(epoch <span class="keyword">from</span> ankunft - abfahrt)</span><br><span class="line">    <span class="keyword">end</span>) <span class="keyword">as</span> duration_in_sec</span><br><span class="line">    <span class="keyword">from</span> fahrplan</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">duration</span></span><br><span class="line"><span class="keyword">where</span> duration_in_sec <span class="keyword">between</span> <span class="number">3</span>*<span class="number">60</span> <span class="keyword">and</span> <span class="number">5</span>*<span class="number">60</span></span><br></pre></td></tr></tbody></table></figure>
<p>或者</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">duration</span> <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *,</span><br><span class="line">    (<span class="keyword">case</span> <span class="keyword">when</span> ankunft &lt; abfahrt <span class="keyword">then</span> <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> - <span class="keyword">extract</span>(epoch <span class="keyword">from</span> abfahrt - ankunft)</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">extract</span>(<span class="keyword">minute</span> <span class="keyword">from</span> ankunft - abfahrt)</span><br><span class="line">    <span class="keyword">end</span>) <span class="keyword">as</span> duration_in_min</span><br><span class="line">    <span class="keyword">from</span> fahrplan</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">duration</span></span><br><span class="line"><span class="keyword">where</span> duration_in_min <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">5</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>很显然下面的写法会忽略<strong>第一天午夜发车，第二天凌晨到达的情况</strong>:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> fahrplan</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">extract</span>(epoch <span class="keyword">from</span> ankunft - abfahrt) <span class="keyword">between</span> <span class="number">3</span>*<span class="number">60</span> <span class="keyword">and</span> <span class="number">5</span>*<span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> fahrplan</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">extract</span>(<span class="keyword">minute</span> <span class="keyword">from</span> ankunft - abfahrt) <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">5</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="列出所有可能的公共交通连接："><a href="#列出所有可能的公共交通连接：" class="headerlink" title="列出所有可能的公共交通连接："></a>列出所有可能的公共交通连接：</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> fahrplan_rec <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- von -&gt; nach</span></span><br><span class="line">    <span class="keyword">select</span> von, nach, abfahrt, ankunft <span class="keyword">from</span> fahrplan</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="comment">-- fr. von -&gt; fr.nach = f.von -&gt; f.nach 多走一步</span></span><br><span class="line">    <span class="comment">-- 从fr.von到f.nach</span></span><br><span class="line">    <span class="keyword">select</span> fr.von, f.nach, fr.abfahrt, f.ankunft</span><br><span class="line">    <span class="keyword">from</span> fahrplan_rec fr, fahrplan f</span><br><span class="line">    <span class="keyword">where</span> fr.nach = f.von <span class="keyword">and</span> fr.ankunft &lt;= f.abfahrt <span class="keyword">and</span> fr.von != f.nach <span class="comment">-- 不能是环</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> fahrplan_rec</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>fr.ankunft &lt;= f.abfahrt</code>：我们的前提</li>
<li><code>fr.von != f.nach</code>: 排除我们从A到A(即成环的情况)。</li>
</ul>
<h2 id="列出所有可能的公共交通连接-乘车时间-＋-等车时间："><a href="#列出所有可能的公共交通连接-乘车时间-＋-等车时间：" class="headerlink" title="列出所有可能的公共交通连接 + 乘车时间 ＋ 等车时间："></a>列出所有可能的公共交通连接 + 乘车时间 ＋ 等车时间：</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> fahrplan_rec_linie <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- von -&gt; nach</span></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        von,</span><br><span class="line">        nach,</span><br><span class="line">        abfahrt,</span><br><span class="line">        ankunft,</span><br><span class="line">        ankunft - abfahrt <span class="keyword">as</span> fahrtzeit,</span><br><span class="line">        <span class="built_in">INTERVAL</span> <span class="string">'00:00:00'</span> <span class="keyword">as</span> wartezeit</span><br><span class="line">    <span class="keyword">from</span> fahrplan</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="comment">-- fr. von -&gt; fr.nach = f.von -&gt; f.nach 多走一步</span></span><br><span class="line">    <span class="comment">-- 从fr.von到f.nach</span></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        fr.von,</span><br><span class="line">        f.nach,</span><br><span class="line">        fr.abfahrt,</span><br><span class="line">        f.ankunft,</span><br><span class="line">        fr.fahrtzeit + (f.ankunft - f.abfahrt),</span><br><span class="line">        fr.wartezeit + (f.abfahrt - fr.ankunft)</span><br><span class="line">        <span class="keyword">from</span> fahrplan_rec_linie fr, fahrplan f</span><br><span class="line">    <span class="keyword">where</span> fr.nach = f.von <span class="keyword">and</span> fr.ankunft &lt;= f.abfahrt <span class="keyword">and</span> fr.von != f.nach</span><br><span class="line">), fahrplan_rec <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        von,</span><br><span class="line">        nach,</span><br><span class="line">        abfahrt,</span><br><span class="line">        ankunft,</span><br><span class="line">        fahrtzeit,</span><br><span class="line">        wartezeit,</span><br><span class="line">        fahrtzeit + wartezeit <span class="keyword">as</span> reisezeit</span><br><span class="line">    <span class="keyword">from</span> fahrplan_rec_linie</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> fahrplan_rec</span><br></pre></td></tr></tbody></table></figure>
<h2 id="列出所有可能的公共交通连接-乘车时间-＋-等车时间-转乘次数："><a href="#列出所有可能的公共交通连接-乘车时间-＋-等车时间-转乘次数：" class="headerlink" title="列出所有可能的公共交通连接 + 乘车时间 ＋ 等车时间 + 转乘次数："></a>列出所有可能的公共交通连接 + 乘车时间 ＋ 等车时间 + 转乘次数：</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> fahrplan_rec_linie <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- von -&gt; nach</span></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        von,</span><br><span class="line">        nach,</span><br><span class="line">        abfahrt,</span><br><span class="line">        ankunft,</span><br><span class="line">        linie <span class="keyword">as</span> aktuelle_linie,</span><br><span class="line">        <span class="number">0</span> <span class="keyword">as</span> umstiege,</span><br><span class="line">        ankunft - abfahrt <span class="keyword">as</span> fahrtzeit,</span><br><span class="line">        <span class="built_in">INTERVAL</span> <span class="string">'00:00:00'</span> <span class="keyword">as</span> wartezeit</span><br><span class="line">    <span class="keyword">from</span> fahrplan</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="comment">-- fr. von -&gt; fr.nach = f.von -&gt; f.nach 多走一步</span></span><br><span class="line">    <span class="comment">-- 从fr.von到f.nach</span></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        fr.von,</span><br><span class="line">        f.nach,</span><br><span class="line">        fr.abfahrt,</span><br><span class="line">        f.ankunft,</span><br><span class="line">        f.linie,</span><br><span class="line">        fr.umstiege +</span><br><span class="line">            <span class="keyword">case</span></span><br><span class="line">                <span class="keyword">when</span> f.linie != fr.aktuelle_linie <span class="keyword">or</span> f.abfahrt &gt; fr.ankunft <span class="keyword">then</span> <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">end</span>,</span><br><span class="line">        fr.fahrtzeit + (f.ankunft - f.abfahrt),</span><br><span class="line">        fr.wartezeit + (f.abfahrt - fr.ankunft)</span><br><span class="line">        <span class="keyword">from</span> fahrplan_rec_linie fr, fahrplan f</span><br><span class="line">    <span class="keyword">where</span> fr.nach = f.von <span class="keyword">and</span> fr.ankunft &lt;= f.abfahrt <span class="keyword">and</span> fr.von != f.nach</span><br><span class="line">), fahrplan_rec <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        von,</span><br><span class="line">        nach,</span><br><span class="line">        abfahrt,</span><br><span class="line">        ankunft,</span><br><span class="line">        umstiege,</span><br><span class="line">        fahrtzeit,</span><br><span class="line">        wartezeit,</span><br><span class="line">        fahrtzeit + wartezeit <span class="keyword">as</span> reisezeit</span><br><span class="line">    <span class="keyword">from</span> fahrplan_rec_linie</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> fahrplan_rec</span><br></pre></td></tr></tbody></table></figure>
<h2 id="10-30之前从Frottmaning到达Garching-Forschungszentrum"><a href="#10-30之前从Frottmaning到达Garching-Forschungszentrum" class="headerlink" title="10:30之前从Fröttmaning到达Garching, Forschungszentrum"></a>10:30之前从<code>Fröttmaning</code>到达<code>Garching, Forschungszentrum</code></h2><p>我们需要一次好的公共交通：最迟需要在10:30到达，而且没有任何一个另外的公共交通迟出发但是也能在10:30之前到, 而且总时间更少, 而且换乘数也更少：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> fahrplan_rec_linie <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- von -&gt; nach</span></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        von,</span><br><span class="line">        nach,</span><br><span class="line">        abfahrt,</span><br><span class="line">        ankunft,</span><br><span class="line">        linie <span class="keyword">as</span> aktuelle_linie,</span><br><span class="line">        <span class="number">0</span> <span class="keyword">as</span> umstiege,</span><br><span class="line">        ankunft - abfahrt <span class="keyword">as</span> fahrtzeit,</span><br><span class="line">        <span class="built_in">INTERVAL</span> <span class="string">'00:00:00'</span> <span class="keyword">as</span> wartezeit</span><br><span class="line">    <span class="keyword">from</span> fahrplan</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="comment">-- fr. von -&gt; fr.nach = f.von -&gt; f.nach 多走一步</span></span><br><span class="line">    <span class="comment">-- 从fr.von到f.nach</span></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        fr.von,</span><br><span class="line">        f.nach,</span><br><span class="line">        fr.abfahrt,</span><br><span class="line">        f.ankunft,</span><br><span class="line">        f.linie,</span><br><span class="line">        fr.umstiege +</span><br><span class="line">            <span class="keyword">case</span></span><br><span class="line">                <span class="keyword">when</span> f.linie != fr.aktuelle_linie <span class="keyword">or</span> f.abfahrt &gt; fr.ankunft <span class="keyword">then</span> <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">end</span>,</span><br><span class="line">        fr.fahrtzeit + (f.ankunft - f.abfahrt),</span><br><span class="line">        fr.wartezeit + (f.abfahrt - fr.ankunft)</span><br><span class="line">        <span class="keyword">from</span> fahrplan_rec_linie fr, fahrplan f</span><br><span class="line">    <span class="keyword">where</span> fr.nach = f.von <span class="keyword">and</span> fr.ankunft &lt;= f.abfahrt <span class="keyword">and</span> fr.von != f.nach</span><br><span class="line">), fahrplan_rec <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        von,</span><br><span class="line">        nach,</span><br><span class="line">        abfahrt,</span><br><span class="line">        ankunft,</span><br><span class="line">        umstiege,</span><br><span class="line">        fahrtzeit,</span><br><span class="line">        wartezeit,</span><br><span class="line">        fahrtzeit + wartezeit <span class="keyword">as</span> reisezeit</span><br><span class="line">    <span class="keyword">from</span> fahrplan_rec_linie</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> fahrplan_rec fr</span><br><span class="line"><span class="keyword">where</span> fr.von = <span class="string">'Fröttmaning'</span> <span class="keyword">and</span> fr.nach = <span class="string">'Garching, Forschungszentrum'</span></span><br><span class="line">      <span class="keyword">and</span> fr.ankunft &lt;= <span class="built_in">TIME</span> <span class="string">'10:30:00'</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">          <span class="keyword">select</span> * <span class="keyword">from</span> fahrplan_rec fr2</span><br><span class="line">          <span class="keyword">where</span> fr2.von = fr.von <span class="keyword">and</span> fr2.nach = fr.nach <span class="keyword">and</span> fr2.ankunft &lt;= <span class="built_in">TIME</span> <span class="string">'10:30:00'</span> <span class="keyword">and</span></span><br><span class="line">                fr2.abfahrt &gt; fr.abfahrt <span class="keyword">and</span> fr2.reisezeit &lt; fr.reisezeit <span class="keyword">and</span> fr2.umstiege &lt; fr.umstiege</span><br><span class="line">          )</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h2 id="union-vs-union-all"><a href="#union-vs-union-all" class="headerlink" title="　union vs. union all"></a>　<code>union</code> vs. <code>union all</code></h2><p>下面我们来研究一下图论(graph theory)来加强对<code>union</code>和<code>union all</code>的印象。</p>
<h3 id="求从Garching-Forschungszentrum能到达的所有地方-可到达性-st-connectivity-："><a href="#求从Garching-Forschungszentrum能到达的所有地方-可到达性-st-connectivity-：" class="headerlink" title="求从Garching, Forschungszentrum能到达的所有地方(可到达性(st-connectivity))："></a>求从<code>Garching, Forschungszentrum</code>能到达的所有地方(可到达性(st-connectivity))：</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> closure <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> von, nach</span><br><span class="line">    <span class="keyword">from</span> fahrplan</span><br><span class="line">    <span class="keyword">union</span> <span class="comment">-- Set(集合)</span></span><br><span class="line">    <span class="keyword">select</span> c.von, f.nach</span><br><span class="line">    <span class="keyword">from</span> closure c, fahrplan f</span><br><span class="line">    <span class="keyword">where</span> c.nach = f.von</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> von, nach</span><br><span class="line"><span class="keyword">from</span> closure</span><br><span class="line"><span class="keyword">where</span> von = <span class="string">'Garching, Forschungszentrum'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> nach</span><br></pre></td></tr></tbody></table></figure>
<p>这里只能是<code>union</code>，不能是<code>union all</code>。<br>比如有<code>A-&gt;B, B-&gt;A</code>在<code>union all</code>的情况下，不会终止。</p>
<h3 id="求从Garching从两个方向能到达的所有地方："><a href="#求从Garching从两个方向能到达的所有地方：" class="headerlink" title="求从Garching从两个方向能到达的所有地方："></a>求从<code>Garching</code>从两个方向能到达的所有地方：</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> closure <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> von, nach</span><br><span class="line">    <span class="keyword">from</span> fahrplan</span><br><span class="line">    <span class="keyword">union</span> <span class="comment">-- Set(集合)</span></span><br><span class="line">    <span class="keyword">select</span> f.von , c.nach</span><br><span class="line">    <span class="keyword">from</span> fahrplan f, closure c</span><br><span class="line">    <span class="keyword">where</span> f.nach = c.von</span><br><span class="line">) , connected_graph <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> von, nach</span><br><span class="line">    <span class="keyword">from</span> fahrplan</span><br><span class="line">    <span class="keyword">union</span> <span class="comment">-- Set(集合)</span></span><br><span class="line">    <span class="keyword">select</span> c.von , cg.nach</span><br><span class="line">    <span class="keyword">from</span> closure c , connected_graph cg</span><br><span class="line">    <span class="keyword">where</span> c.nach = cg.von</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> *</span><br><span class="line"><span class="keyword">from</span> connected_graph</span><br><span class="line"><span class="keyword">where</span> von = <span class="string">'Garching'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> von;</span><br></pre></td></tr></tbody></table></figure>
<p>引用：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQL]高级SQL-递归(1)</title>
    <url>/2020/02/25/SQL-%E9%AB%98%E7%BA%A7SQL-%E9%80%92%E5%BD%92-1/</url>
    <content><![CDATA[<p>在这篇文章<strong>高级SQL</strong>中我们会遇到递归查询。这篇文章我们对递归进行一个初步介绍，然后用SQL的递归实现一些编程语言中的递归函数，再对大学数据集进行递归的查询。</p>
<a id="more"></a>
<h1 id="递归-Recursion"><a href="#递归-Recursion" class="headerlink" title="递归 Recursion"></a>递归 Recursion</h1><p>我们这一篇文章采用并介绍PostgreSQL的SQL递归(Recursion)语法。<br>递归同时是一个数据库之内有语法syntax差异的地方，可能每一个数据库都实现了递归，但是关键词<code>key word</code>不一样。比如一个<code>Oracle</code>的SQL：使用<code>CONNECT BY</code>关键词去实现递归。</p>
<p>这篇文章(或者我的SQL文章系列)主要介绍如果使用SQL语句，而且重点在使用数据集来用SQL来解决一些查询问题。这一篇文章我们会先大致介绍一下SQL递归的结构，然后会用多种数据集进行练习，加深印象。</p>
<h2 id="SQL递归结构"><a href="#SQL递归结构" class="headerlink" title="SQL递归结构"></a>SQL递归结构</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> tmp_name (att1, att2, ...) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- basic case</span></span><br><span class="line">    <span class="keyword">union</span> <span class="comment">-- union / union all</span></span><br><span class="line">    <span class="comment">-- recursive case</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>
<p>可以再稍微仔细一些：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> tmp_name (att1, att2, ...) <span class="keyword">as</span> (</span><br><span class="line">    <span class="comment">-- basic case</span></span><br><span class="line">    <span class="keyword">select</span> ... <span class="keyword">from</span> ...</span><br><span class="line">    <span class="keyword">union</span> <span class="comment">-- union / union all</span></span><br><span class="line">    <span class="comment">-- recursive case</span></span><br><span class="line">    <span class="keyword">select</span> ... <span class="keyword">from</span> ..., tmp_name </span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>
<p>重点是<code>recursive case</code>中我们在使用<code>tmp_name</code>，而这个正是我们正在定义的表格。这个过程就是递归的核心(我们在定义这个表格的时候，也用到了这个表格自己)。<code>with recursive</code>这个关键词用递归的方式新建了一个暂时的表格<code>tmp_name</code>，我们可以在之后用。</p>
<p>这个定义其实和图论(Graph theory)中的<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVHJhbnNpdGl2ZV9jbG9zdXJl" title="https://en.wikipedia.org/wiki/Transitive_closure">传递闭包(Transitive closure)<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3QtY29ubmVjdGl2aXR5" title="https://en.wikipedia.org/wiki/St-connectivity">可到达性(st-connectivity)<i class="fa fa-external-link"></i></span>很类似。</p>
<h2 id="SQL递归内部处理"><a href="#SQL递归内部处理" class="headerlink" title="SQL递归内部处理"></a>SQL递归内部处理</h2><p>在SQL引擎内部，递归并不是真正的被”递归地处理”。”递归地处理”指：每一次新建一个call stack，然后继续进行同一个函数使用不同参数的运算。这个我们可以很<code>black box</code>地去测试：写一个不终止的递归，但是它最后仅仅只是不终止，而不是stack overflow。这可以间接的说明递归是被内部处理成一个类似<code>while</code>的循环。</p>
<h2 id="union-vs-union-all"><a href="#union-vs-union-all" class="headerlink" title="union vs. union all"></a><code>union</code> vs. <code>union all</code></h2><ul>
<li><p><code>union</code>: 对两个集合进行并集操作，除去重复行(即集合语义 Set Semantics)，同时进行默认规则(第一列升序)的排序。</p>
</li>
<li><p><code>union all</code>: 对两个集合进行并集操作，不除去重复行(即包语义 Bag Semantics)，不进行排序。</p>
</li>
</ul>
<p>很显然<code>union all</code>做的操作相对较少，所以它速度更快(如果数据量相同，也无重复生成的前提下)。但是<code>union all</code>很可能在递归的情况导致SQL无法终止，原因就是不断有(重复的)tuple被生成。这一点也和上一点有相关:<strong>递归其实是被处理成循环</strong>。</p>
<p>一个小小的例子是：<br>假设$A$已经在结果的集合里面，但是下一步又产生一个新的$A$。</p>
<ul>
<li>对于<code>union</code>，它可以发现这个集合并不会增加新元素，那么这个SQL引擎内部的循环就结束了。对于我们<code>top user</code>，这个递归的SQL也就结束了。</li>
<li>对于<code>union all</code>, 它可以发现这个包(Bag)又多了一个新元素$A$，再下一步又会新生成一个$A$，这个过程会一直进行下去。对于SQL引擎，这就变成了一个无止境的循环。对于我们<code>top user</code>，这个递归SQL无法终止。</li>
</ul>
<p>如果我们的数据库的行为是上述那样，这时候我们可以猜想：这个递归SQL会被内部处理成一个<code>while</code>循环，结束的条件是这个集合/包没有新的元素再被生成。</p>
<p>我们会在<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMTYyNTczNSNpdGVtLTI=" title="https://segmentfault.com/a/1190000021625735#item-2">下一篇文章<i class="fa fa-external-link"></i></span>会遇到真正的例子以及这方面很多练习。</p>
<h2 id="第一部分数据集-Uni-Schema"><a href="#第一部分数据集-Uni-Schema" class="headerlink" title="第一部分数据集 - Uni Schema"></a>第一部分数据集 - Uni Schema</h2><p>Uni Schema 数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p>
<p>架构 Schema:<br><img data-src="https://db.in.tum.de/teaching/ws1920/grundlagen/uni.png?lang=de" alt="schema_de"></p>
<p><img data-src="https://hyper-db.de/uniEngl.png" alt="schema_en"></p>
<p>下载:<br><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vdW5pX215c3FsLnNxbD9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de<i class="fa fa-external-link"></i></span></p>
<p>Schma和大部分SQL语句来自<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL2tlbXBlci8/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/kemper/?lang=de">Prof. Alfons Kemper, Ph.D.<i class="fa fa-external-link"></i></span>的课件和书。</p>
<p>课件：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></li>
</ul>
<p>书：　<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p>
<h3 id="前导课-voraussetzen"><a href="#前导课-voraussetzen" class="headerlink" title="前导课(voraussetzen)"></a>前导课(voraussetzen)</h3><ul>
<li><p>找Der Wiener Kreis这门课的前导课(voraussetzen)：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> vorgaenger</span><br><span class="line"><span class="keyword">from</span> voraussetzen, vorlesungen</span><br><span class="line"><span class="keyword">where</span> nachfolger = vorlnr <span class="keyword">and</span> titel = <span class="string">'Der Wiener Kreis'</span>;</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>找Der Wiener Kreis这门课的前导课(voraussetzen)的前导课(voraussetzen)：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> v1.vorgaenger</span><br><span class="line"><span class="keyword">from</span> voraussetzen v1, voraussetzen v2, vorlesungen vorl </span><br><span class="line"><span class="keyword">where</span> v1.nachfolger = v2.vorgaenger <span class="keyword">and</span> v2.nachfolger = vorl.vorlnr <span class="keyword">and</span> vorl.titel = <span class="string">'Der Wiener Kreis'</span>;</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>传递闭包(Transitive closure)</p>
</li>
</ul>
<script type="math/tex; mode=display">tran_{A, B}(R) = \{(a, b) | \exists k \in \mathbb{N} (\exists \Gamma 1, \dots, \Gamma k \in R \\ (\Gamma 1.A = \Gamma 2.B \wedge \dots \Gamma k-1.A = \Gamma k.B \wedge \Gamma 1.A=a \wedge \Gamma k.B = b))\}</script><p>也就是找出一条路径。</p>
<ul>
<li>Der Wiener Kreis是所有(直接和间接)前提们：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> transVorl (vorg, nachf) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> vorgaenger, nachfolger</span><br><span class="line">    <span class="keyword">from</span> voraussetzen</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> t.vorg, v.nachfolger</span><br><span class="line">    <span class="keyword">from</span> transVorl t, voraussetzen v</span><br><span class="line">    <span class="keyword">where</span> t.nachf = v.vorgaenger</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> titel</span><br><span class="line"><span class="keyword">from</span> vorlesungen</span><br><span class="line"><span class="keyword">where</span> vorlnr <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> vorg</span><br><span class="line">    <span class="keyword">from</span> transVorl</span><br><span class="line">    <span class="keyword">where</span> nachf <span class="keyword">in</span> (</span><br><span class="line">        <span class="keyword">select</span> nachf</span><br><span class="line">        <span class="keyword">from</span> vorlesungen</span><br><span class="line">        <span class="keyword">where</span> titel = <span class="string">'Der Wiener Kreis'</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<p>或者<br></p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> transVorl (vorg, nachf) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> vorgaenger, nachfolger</span><br><span class="line">    <span class="keyword">from</span> voraussetzen</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> t.vorg, v.nachfolger</span><br><span class="line">    <span class="keyword">from</span> transVorl t, voraussetzen v</span><br><span class="line">    <span class="keyword">where</span> t.nachf = v.vorgaenger</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> v1.titel</span><br><span class="line"><span class="keyword">from</span> vorlesungen v1, transVorl t, vorlesungen v2</span><br><span class="line"><span class="keyword">where</span> v1.vorlnr = t.vorg <span class="keyword">and</span> t.nachf = v2.vorlnr <span class="keyword">and</span> v2.titel = <span class="string">'Der Wiener Kreis'</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<ul>
<li>Bioethik是所有(直接和间接)前提们：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> voraussetzen_rec <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span> vorlnr</span><br><span class="line"><span class="keyword">from</span> vorlesungen v</span><br><span class="line"><span class="keyword">where</span> titel = <span class="string">'Bioethik'</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> vor.vorgaenger</span><br><span class="line"><span class="keyword">from</span> voraussetzen_rec v, voraussetzen vor</span><br><span class="line"><span class="keyword">where</span> v.vorlnr = vor.nachfolger</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> v.titel</span><br><span class="line"><span class="keyword">from</span> vorlesungen v, voraussetzen_rec vor</span><br><span class="line"><span class="keyword">where</span> v.vorlnr = vor.vorlnr <span class="keyword">and</span> v.titel != <span class="string">'Bioethik'</span></span><br></pre></td></tr></tbody></table></figure>
<p>这个也是换了另外一种思路去表达。</p>
<h3 id="前导课-voraussetzen-对路径长度计数"><a href="#前导课-voraussetzen-对路径长度计数" class="headerlink" title="前导课(voraussetzen), 对路径长度计数"></a>前导课(voraussetzen), 对路径长度计数</h3><ul>
<li>计算完成这些课至少需要多少学期：<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> transVorl (vorg, nachf, <span class="keyword">len</span>) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> vorgaenger, nachfolger, <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> voraussetzen</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> t.vorg, v.nachfolger, t.len + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> transVorl t, voraussetzen v</span><br><span class="line">    <span class="keyword">where</span> t.nachf = v.vorgaenger</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(t.len) + <span class="number">1</span> <span class="keyword">as</span> MinStudySemester</span><br><span class="line"><span class="keyword">from</span> transVorl t, vorlesungen v</span><br><span class="line"><span class="keyword">where</span> v.titel = <span class="string">'Der Wiener Kreis'</span>;</span><br></pre></td></tr></tbody></table></figure>
或者<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> transVorl (vorlnr, <span class="keyword">len</span>) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> vorlnr, <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> vorlesungen</span><br><span class="line">    <span class="keyword">where</span> titel = <span class="string">'Der Wiener Kreis'</span></span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> v.vorgaenger, t.len + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> transVorl t, voraussetzen v</span><br><span class="line">    <span class="keyword">where</span> t.vorlnr = v.nachfolger</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(<span class="keyword">len</span>) MinStudySemester</span><br><span class="line"><span class="keyword">from</span> transVorl;</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<hr>
<h2 id="画一颗树："><a href="#画一颗树：" class="headerlink" title="画一颗树："></a>画一颗树：</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> tree (step, <span class="built_in">text</span>) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">0</span>, <span class="string">'              *'</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> step + <span class="number">1</span>,</span><br><span class="line">        (<span class="keyword">case</span></span><br><span class="line">            <span class="keyword">when</span> step = <span class="keyword">length</span>(<span class="built_in">text</span>) / <span class="number">2</span> <span class="keyword">then</span> <span class="keyword">concat</span>(<span class="keyword">repeat</span>(<span class="string">' '</span>, <span class="keyword">length</span>(<span class="built_in">text</span>) / <span class="number">2</span>), <span class="string">'*'</span>)</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">concat</span>(</span><br><span class="line">                <span class="keyword">substring</span>(<span class="built_in">text</span> <span class="keyword">from</span> <span class="number">0</span> <span class="keyword">for</span> <span class="keyword">length</span>(<span class="built_in">text</span>) - (<span class="number">2</span> * step + <span class="number">1</span>)),</span><br><span class="line">                <span class="keyword">repeat</span>(<span class="string">'*'</span>, <span class="number">2</span> * step + <span class="number">3</span>))</span><br><span class="line">        <span class="keyword">end</span>)</span><br><span class="line">    <span class="keyword">from</span> tree</span><br><span class="line">    <span class="keyword">where</span> step &lt;= <span class="keyword">length</span>(<span class="built_in">text</span>) / <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> t.text</span><br><span class="line"><span class="keyword">from</span> tree t</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> step;</span><br></pre></td></tr></tbody></table></figure>
<p>输出(这里只建议用shell运行postgresql，用其他接口不一定看得出是树)：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">             text              </span><br><span class="line">-------------------------------</span><br><span class="line">               *</span><br><span class="line">              ***</span><br><span class="line">             *****</span><br><span class="line">            *******</span><br><span class="line">           *********</span><br><span class="line">          ***********</span><br><span class="line">         *************</span><br><span class="line">        ***************</span><br><span class="line">       *****************</span><br><span class="line">      *******************</span><br><span class="line">     *********************</span><br><span class="line">    ***********************</span><br><span class="line">   *************************</span><br><span class="line">  ***************************</span><br><span class="line"> *****************************</span><br><span class="line">               *</span><br><span class="line">(16 rows)</span><br></pre></td></tr></tbody></table></figure>
<p>这里用<code>||</code>代替<code>concate</code>：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> tree (step, <span class="built_in">text</span>) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">0</span>, <span class="string">'              *'</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> step + <span class="number">1</span>,</span><br><span class="line">        (<span class="keyword">case</span></span><br><span class="line">            <span class="keyword">when</span> step = <span class="keyword">length</span>(<span class="built_in">text</span>) / <span class="number">2</span> <span class="keyword">then</span> <span class="keyword">repeat</span>(<span class="string">' '</span>, <span class="keyword">length</span>(<span class="built_in">text</span>) / <span class="number">2</span>) || <span class="string">'*'</span></span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">substring</span>(<span class="built_in">text</span> <span class="keyword">from</span> <span class="number">0</span> <span class="keyword">for</span> <span class="keyword">length</span>(<span class="built_in">text</span>) - (<span class="number">2</span> * step + <span class="number">1</span>)) || <span class="keyword">repeat</span>(<span class="string">'*'</span>, <span class="number">2</span> * step + <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">end</span>)</span><br><span class="line">    <span class="keyword">from</span> tree</span><br><span class="line">    <span class="keyword">where</span> step &lt;= <span class="keyword">length</span>(<span class="built_in">text</span>) / <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> t.text</span><br><span class="line"><span class="keyword">from</span> tree t</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> step;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="求10的阶乘"><a href="#求10的阶乘" class="headerlink" title="求10的阶乘"></a>求10的阶乘</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> r (fac, counter) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> fac * (counter + <span class="number">1</span>), counter + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> r</span><br><span class="line">    <span class="keyword">where</span> counter &lt; <span class="number">10</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> fac</span><br><span class="line"><span class="keyword">from</span> r;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="求前20个的斐波那契数列元素"><a href="#求前20个的斐波那契数列元素" class="headerlink" title="求前20个的斐波那契数列元素"></a>求前20个的斐波那契数列元素</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> r (fibonacci, last_fibonacci, counter) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> fibonacci + last_fibonacci, fibonacci, counter + <span class="number">1</span></span><br><span class="line">    <span class="keyword">from</span> r</span><br><span class="line">    <span class="keyword">where</span> counter &lt; <span class="number">20</span></span><br><span class="line">    ),</span><br><span class="line">     <span class="keyword">result</span> (fibonacci, last_fibonacci, counter) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> r</span><br><span class="line">     )</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> fibonacci</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">result</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>引用：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p>
<!-- 该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 -->
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQL]中级SQL(4)</title>
    <url>/2020/02/25/SQL-%E4%B8%AD%E7%BA%A7SQL-4/</url>
    <content><![CDATA[<p>在这篇文章<strong>中级SQL</strong>中我们会遇到subquery。这篇文章我们使用一个新的体育比赛数据集，我们来查询比赛中的排名。实际上有部分查询可以使用window function来求解，但它不属于<strong>中级SQL</strong>的范畴。我们会在以后的文章<strong>高级SQL</strong>的部分重点讲window function。</p>
<a id="more"></a>
<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注<code>select...from...where</code>这种读操作，分析query　(analytical query)。<br>十项全能<code>ZehnkampfD</code>数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p>
<p><strong>本地载入改数据集</strong>： <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMTYyMzY5MyNpdGVtLTMtMg==" title="https://segmentfault.com/a/1190000021623693#item-3-2">https://segmentfault.com/a/1190000021623693#item-3-2<i class="fa fa-external-link"></i></span></p>
<p>英文Schema： <script type="math/tex">ZehnkampfD = \{\underline{Name, Discipline}, points\}</script></p>
<p>德文Schema： <script type="math/tex">ZehnkampfD = \{\underline{Name, Disziplin}, punkte\}</script></p>
<p>有关英文Schema：在<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMTYyMzY5MyNpdGVtLTMtMg==" title="https://segmentfault.com/a/1190000021623693#item-3-2">我的文章<i class="fa fa-external-link"></i></span>提到这一块内容。德文schema可以直接在HyPer网页接口运行。这里为了方便大家直接在网页上运行，我采用德文schema。</p>
<!-- TODO:链接到blog -->
<p>Schma和大部分SQL语句来自<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL2tlbXBlci8/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/kemper/?lang=de">Prof. Alfons Kemper, Ph.D.<i class="fa fa-external-link"></i></span>的课件和书。</p>
<p>课件：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></li>
</ul>
<p>书：　<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p>
<h1 id="中级SQL"><a href="#中级SQL" class="headerlink" title="中级SQL"></a>中级SQL</h1><ul>
<li>找出在所有<code>Diszipplin</code>都比<code>Bolt</code>好的运动员：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> z.name</span><br><span class="line"><span class="keyword">from</span> zehnkampfd <span class="keyword">as</span> z</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> zehnkampfd z2</span><br><span class="line">    <span class="keyword">where</span> z2.name = z.name <span class="keyword">and</span> <span class="keyword">exists</span>(</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> zehnkampfd z3</span><br><span class="line">        <span class="keyword">where</span> z2.punkte &lt;= z3.punkte <span class="keyword">and</span> z2.disziplin = z3.disziplin <span class="keyword">and</span> z3.name = <span class="string">'Bolt'</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<p>或者</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> a.name</span><br><span class="line"><span class="keyword">from</span> zehnkampfd a</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> zehnkampfd bolt</span><br><span class="line">    <span class="keyword">where</span> bolt.name = <span class="string">'Bolt'</span> <span class="keyword">and</span> <span class="keyword">exists</span>(</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> zehnkampfd b</span><br><span class="line">        <span class="keyword">where</span> bolt.disziplin = b.disziplin <span class="keyword">and</span> b.name = a.name <span class="keyword">and</span> bolt.punkte &gt;= b.punkte</span><br><span class="line">        )</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<p>用中文就是：不存在任意一个项目，这个项目存在<code>bolt</code>比当前运动员优秀。</p>
<p>我们来详细看看中间表格的结果是：<br></p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> zehnkampfd z2</span><br><span class="line">    <span class="keyword">where</span>  <span class="keyword">exists</span>(</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> zehnkampfd z3</span><br><span class="line">        <span class="keyword">where</span> z2.punkte &lt;= z3.punkte <span class="keyword">and</span> z2.disziplin = z3.disziplin <span class="keyword">and</span> z3.name = <span class="string">'Bolt'</span></span><br><span class="line">        )</span><br></pre></td></tr></tbody></table></figure><p></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">    name     | disziplin  | punkte </span><br><span class="line">-------------+------------+--------</span><br><span class="line"> Bolt        | 100m       |     50</span><br><span class="line"> Bolt        | Weitsprung |     50</span><br><span class="line"> Eaton       | 100m       |     40</span><br><span class="line"> Behrenbruch | 100m       |     30</span><br><span class="line"> Behrenbruch | Weitsprung |     50</span><br><span class="line">(5 rows)</span><br></pre></td></tr></tbody></table></figure>
<p><br><br><br></p>
<p>或者用<code>count</code>表达这个全部：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> better_as_bolt <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> z.name, z.disziplin</span><br><span class="line">    <span class="keyword">from</span> zehnkampfd z, zehnkampfd b</span><br><span class="line">    <span class="keyword">where</span> z.punkte &gt; b.punkte <span class="keyword">and</span> z.disziplin = b.disziplin <span class="keyword">and</span> b.name = <span class="string">'Bolt'</span></span><br><span class="line">), num_dis <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> disziplin) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">    <span class="keyword">from</span> zehnkampfd</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">name</span></span><br><span class="line"><span class="keyword">from</span> better_as_bolt</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span></span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(*) = (<span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> num_dis)</span><br></pre></td></tr></tbody></table></figure>
<p>这个题目很类似<a href="https://cakebytheoceanluo.github.io/2020/02/22/SQL-%E4%B8%AD%E7%BA%A7SQL-1/">中级SQL(1)</a>中的这一题<code>搜索听了所有sws=4 vorlesungen的学生：</code>。</p>
<ul>
<li>搜索<code>100m</code>的冠军(冠军定义为：没有人比这个运动员更好)：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- with correlated sub-query</span></span><br><span class="line"><span class="keyword">select</span> gold.name</span><br><span class="line"><span class="keyword">from</span> zehnkampfd gold</span><br><span class="line"><span class="keyword">where</span> gold.disziplin = <span class="string">'100m'</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> zehnkampfd other</span><br><span class="line">    <span class="keyword">where</span> other.disziplin = gold.disziplin  <span class="keyword">and</span> gold.punkte &lt; other.punkte</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<p>或者</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- with correlated sub-query</span></span><br><span class="line"><span class="keyword">select</span> gold.name</span><br><span class="line"><span class="keyword">from</span> zehnkampfd gold</span><br><span class="line"><span class="keyword">where</span> gold.disziplin = <span class="string">'100m'</span> <span class="keyword">and</span> gold.name <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">    <span class="comment">-- 存在有运动员比当前运动员更好的的情况</span></span><br><span class="line">    <span class="keyword">select</span> z1.name</span><br><span class="line">    <span class="keyword">from</span> zehnkampfd z1, zehnkampfd z2</span><br><span class="line">    <span class="keyword">where</span> z1.disziplin = z2.disziplin <span class="keyword">and</span> z1.disziplin = <span class="string">'100m'</span> <span class="keyword">and</span> z1.punkte &lt; z2.punkte</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<p>或者</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 与数字比较</span></span><br><span class="line"><span class="keyword">select</span> gold.name</span><br><span class="line"><span class="keyword">from</span> zehnkampfd gold</span><br><span class="line"><span class="keyword">where</span> gold.disziplin = <span class="string">'100m'</span> <span class="keyword">and</span> gold.punkte = (<span class="keyword">select</span> <span class="keyword">max</span>(punkte) <span class="keyword">from</span> zehnkampfd <span class="keyword">where</span> disziplin = <span class="string">'100m'</span>)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>搜索<code>100m</code>的亚军(亚军定义为：只存在一个运动员比当前运动员更好)：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> silver.name</span><br><span class="line"><span class="keyword">from</span> zehnkampfd silver</span><br><span class="line"><span class="keyword">where</span> silver.disziplin = <span class="string">'100m'</span> <span class="keyword">and</span> <span class="number">1</span> = (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*)</span><br><span class="line">    <span class="keyword">from</span> zehnkampfd gold <span class="comment">-- 这个是冠军，比我们想选的运动员更好，我们只允许这样的人出现一次</span></span><br><span class="line">    <span class="keyword">where</span> gold.disziplin = <span class="string">'100m'</span> <span class="keyword">and</span> gold.punkte &gt; silver.punkte</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> silver.name</span><br><span class="line"><span class="keyword">from</span> zehnkampfd silver</span><br><span class="line"><span class="keyword">where</span> silver.disziplin = <span class="string">'100m'</span> <span class="keyword">and</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> zehnkampfd gold <span class="comment">-- 这个是冠军，比我们想选的运动员更好，我们只允许这样的人出现一次</span></span><br><span class="line">    <span class="keyword">where</span> gold.disziplin = <span class="string">'100m'</span> <span class="keyword">and</span> gold.punkte &gt; silver.punkte <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> zehnkampfd nobody <span class="comment">-- 不再运行非冠军，比我们想选的运动员更好</span></span><br><span class="line">        <span class="keyword">where</span> nobody.disziplin = <span class="string">'100m'</span> <span class="keyword">and</span> gold.name != nobody.name <span class="keyword">and</span> nobody.punkte &gt; silver.punkte)</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>搜索<code>100m</code>的季军(季军定义为：只存在两个运动员比当前运动员更好)：<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> bronze.name</span><br><span class="line"><span class="keyword">from</span> zehnkampfd bronze</span><br><span class="line"><span class="keyword">where</span> bronze.disziplin = <span class="string">'100m'</span> <span class="keyword">and</span> <span class="number">2</span> = (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*)</span><br><span class="line">    <span class="keyword">from</span> zehnkampfd other</span><br><span class="line">    <span class="keyword">where</span> other.disziplin = <span class="string">'100m'</span> <span class="keyword">and</span> other.punkte &gt; bronze.punkte</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> bronze.name</span><br><span class="line"><span class="keyword">from</span> zehnkampfd bronze</span><br><span class="line"><span class="keyword">where</span> bronze.disziplin = <span class="string">'100m'</span> <span class="keyword">and</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> zehnkampfd gold, zehnkampfd silver</span><br><span class="line">    <span class="keyword">where</span> gold.disziplin = <span class="string">'100m'</span> <span class="keyword">and</span> gold.punkte &gt; bronze.punkte <span class="keyword">and</span></span><br><span class="line">          silver.disziplin = <span class="string">'100m'</span> <span class="keyword">and</span> silver.punkte &gt; bronze.punkte <span class="keyword">and</span></span><br><span class="line">          gold.name != silver.name <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> zehnkampfd nobody <span class="comment">-- 不再允许非冠军和亚军</span></span><br><span class="line">        <span class="keyword">where</span> nobody.disziplin = <span class="string">'100m'</span> <span class="keyword">and</span> gold.name != nobody.name <span class="keyword">and</span> silver.name != nobody.name <span class="keyword">and</span> nobody.punkte &gt; bronze.punkte)</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<p>引用：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p>
<!-- 该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQL]中级SQL(3)</title>
    <url>/2020/02/25/SQL-%E4%B8%AD%E7%BA%A7SQL-3/</url>
    <content><![CDATA[<p>在这篇文章<strong>中级SQL</strong>中我们会遇到subquery，它可以出现在<code>select子句</code>中或者<code>where子句</code>或者<code>from子句</code>中。这篇文章我们会练习稍微复杂的subquery。</p>
<a id="more"></a>
<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注<code>select...from...where</code>这种读操作，分析query　(analytical query)。<br>数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p>
<p>架构 Schema:<br><img data-src="https://db.in.tum.de/teaching/ws1920/grundlagen/uni.png?lang=de" alt="schema_de"></p>
<p><img data-src="https://hyper-db.de/uniEngl.png" alt="schema_en"></p>
<p>下载:<br><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vdW5pX215c3FsLnNxbD9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de<i class="fa fa-external-link"></i></span></p>
<p>Schma和大部分SQL语句来自<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL2tlbXBlci8/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/kemper/?lang=de">Prof. Alfons Kemper, Ph.D.<i class="fa fa-external-link"></i></span>的课件和书。</p>
<p>课件：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></li>
</ul>
<p>书：　<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p>
<h1 id="中级SQL"><a href="#中级SQL" class="headerlink" title="中级SQL"></a>中级SQL</h1><p><img data-src="/images/SQL/sql1.png" alt="sql1"></p>
<p>假设我们的schema变成上图(SQL不能直接运行　数据集不对应上图)。但是我们可以加入暂时的<code>view</code>进入：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> professorenF <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *,</span><br><span class="line">           (<span class="keyword">case</span> <span class="keyword">when</span> p.persnr <span class="keyword">in</span> (<span class="number">2125</span>, <span class="number">2126</span>, <span class="number">2133</span>, <span class="number">2137</span>) <span class="keyword">then</span> <span class="string">'Philosophie'</span></span><br><span class="line">                 <span class="keyword">when</span> p.persnr <span class="keyword">in</span> (<span class="number">2127</span>, <span class="number">2136</span>) <span class="keyword">then</span> <span class="string">'Physik'</span></span><br><span class="line">               <span class="keyword">else</span> <span class="string">'Theologie'</span></span><br><span class="line">           <span class="keyword">end</span>) <span class="keyword">as</span> fakname</span><br><span class="line">    <span class="keyword">from</span> professoren p</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> professorenF</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> studentenGF <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *,</span><br><span class="line">           (<span class="keyword">case</span> <span class="keyword">when</span> s.matrnr <span class="keyword">in</span> (<span class="number">24002</span>, <span class="number">26830</span>, <span class="number">27550</span>, <span class="number">29120</span>) <span class="keyword">then</span> <span class="string">'M'</span></span><br><span class="line">                 <span class="keyword">else</span> <span class="string">'W'</span></span><br><span class="line">           <span class="keyword">end</span>) <span class="keyword">as</span> geschlecht,</span><br><span class="line">           (<span class="keyword">case</span> <span class="keyword">when</span> s.matrnr <span class="keyword">in</span> (<span class="number">24002</span>, <span class="number">26120</span>, <span class="number">26830</span>, <span class="number">27550</span>) <span class="keyword">then</span> <span class="string">'Philosophie'</span></span><br><span class="line">                 <span class="keyword">when</span> s.matrnr <span class="keyword">in</span> (<span class="number">28106</span>, <span class="number">29120</span>) <span class="keyword">then</span> <span class="string">'Physik'</span></span><br><span class="line">               <span class="keyword">else</span> <span class="string">'Theologie'</span></span><br><span class="line">           <span class="keyword">end</span>) <span class="keyword">as</span> fakname</span><br><span class="line">    <span class="keyword">from</span> studenten s</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> studentenGF</span><br></pre></td></tr></tbody></table></figure>
<p>我们下面每一个query都需要加入上面两个<code>view</code>, 即如下模式:<br></p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> professorenF <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *,</span><br><span class="line">           (<span class="keyword">case</span> <span class="keyword">when</span> p.persnr <span class="keyword">in</span> (<span class="number">2125</span>, <span class="number">2126</span>, <span class="number">2133</span>, <span class="number">2137</span>) <span class="keyword">then</span> <span class="string">'Philosophie'</span></span><br><span class="line">                 <span class="keyword">when</span> p.persnr <span class="keyword">in</span> (<span class="number">2127</span>, <span class="number">2136</span>) <span class="keyword">then</span> <span class="string">'Physik'</span></span><br><span class="line">               <span class="keyword">else</span> <span class="string">'Theologie'</span></span><br><span class="line">           <span class="keyword">end</span>) <span class="keyword">as</span> fakname</span><br><span class="line">    <span class="keyword">from</span> professoren p</span><br><span class="line">), studentenGF <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *,</span><br><span class="line">           (<span class="keyword">case</span> <span class="keyword">when</span> s.matrnr <span class="keyword">in</span> (<span class="number">24002</span>, <span class="number">26830</span>, <span class="number">27550</span>, <span class="number">29120</span>) <span class="keyword">then</span> <span class="string">'M'</span></span><br><span class="line">                 <span class="keyword">else</span> <span class="string">'W'</span></span><br><span class="line">           <span class="keyword">end</span>) <span class="keyword">as</span> geschlecht,</span><br><span class="line">           (<span class="keyword">case</span> <span class="keyword">when</span> s.matrnr <span class="keyword">in</span> (<span class="number">24002</span>, <span class="number">26120</span>, <span class="number">26830</span>, <span class="number">27550</span>) <span class="keyword">then</span> <span class="string">'Philosophie'</span></span><br><span class="line">                 <span class="keyword">when</span> s.matrnr <span class="keyword">in</span> (<span class="number">28106</span>, <span class="number">29120</span>) <span class="keyword">then</span> <span class="string">'Physik'</span></span><br><span class="line">               <span class="keyword">else</span> <span class="string">'Theologie'</span></span><br><span class="line">           <span class="keyword">end</span>) <span class="keyword">as</span> fakname</span><br><span class="line">    <span class="keyword">from</span> studenten s</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 我们的query</span></span><br><span class="line"><span class="keyword">select</span> ...</span><br><span class="line"><span class="keyword">from</span> ...</span><br><span class="line"><span class="keyword">where</span> ...</span><br></pre></td></tr></tbody></table></figure><p></p>
<p><br></p>
<hr>
<ul>
<li>求每一个FakName对应的女性占比：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> anz(Fakname,AnzStudenten) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.FakName, <span class="keyword">count</span>(*)</span><br><span class="line">    <span class="keyword">from</span> StudentenGF s</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.FakNAme),</span><br><span class="line">     anzw(Fakname,AnzWeiblich) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> sw.FakName,<span class="keyword">count</span>(*) <span class="keyword">as</span> AnzWeiblich</span><br><span class="line">    <span class="keyword">from</span> StudentenGF sw</span><br><span class="line">    <span class="keyword">where</span> sw.Geschlecht =<span class="string">'W'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> sw.FakName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> anz.FakName, anz.AnzStudenten, anzw.AnzWeiblich, (<span class="keyword">cast</span>(anzw.AnzWeiblich <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">5</span>,<span class="number">2</span>))/anz.AnzStudenten * <span class="number">100</span>) <span class="keyword">as</span> ProzentWeiblich</span><br><span class="line"><span class="keyword">from</span> anz, anzw</span><br><span class="line"><span class="keyword">where</span> anz.FakName = anzw.FakName</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>求每一个FakName对应的男性占比：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> anz(Fakname, AnzStudenten) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.FakName, <span class="keyword">count</span>(*)</span><br><span class="line">    <span class="keyword">from</span> StudentenGF s</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.FakNAme),</span><br><span class="line">     anzm(Fakname, AnzMaenner) <span class="keyword">as</span> (</span><br><span class="line">         <span class="keyword">select</span> sw.FakName, <span class="keyword">count</span>(*) <span class="keyword">as</span> AnzWeiblich</span><br><span class="line">         <span class="keyword">from</span> StudentenGF sw</span><br><span class="line">         <span class="keyword">where</span> sw.Geschlecht = <span class="string">'M'</span></span><br><span class="line">         <span class="keyword">group</span> <span class="keyword">by</span> sw.FakName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> anz.FakName,</span><br><span class="line">       anz.AnzStudenten,</span><br><span class="line">       anzm.AnzMaenner,</span><br><span class="line">       (<span class="keyword">case</span> <span class="keyword">when</span> anzm.AnzMaenner <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="number">0</span> <span class="keyword">else</span> anzm.AnzMaenner <span class="keyword">end</span>) / anz.AnzStudenten * <span class="number">100.00</span> <span class="keyword">as</span> ProzentMaenner</span><br><span class="line"><span class="keyword">from</span> anz <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> anzm</span><br><span class="line"><span class="keyword">on</span> anz.FakName = anzm.FakName</span><br></pre></td></tr></tbody></table></figure>
<p>这里并不是女性版直接更改成男性。一个重点是:<strong>存在系没有任何男性</strong>。<br><code>case</code>也可以被替换为: <code>COALESCE(anzm.AnzMaenner, 0) / anz.AnzStudenten * 100.00 as ProzentMaenner</code></p>
<p>或者再换一种：<br></p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> fakname,</span><br><span class="line">       (<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> geschlecht = <span class="string">'M'</span> <span class="keyword">then</span> <span class="number">1.00</span> <span class="keyword">else</span> <span class="number">0.00</span> <span class="keyword">end</span>)) / <span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">from</span> studentenGF</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> fakname</span><br></pre></td></tr></tbody></table></figure><p></p>
<ul>
<li>搜索所有学生把自己系教授提供的课都听完了：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.*</span><br><span class="line"><span class="keyword">from</span> studentenGF s</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> vorlesungen v, professorenF p</span><br><span class="line">    <span class="keyword">where</span> v.gelesenvon = p.persnr <span class="keyword">and</span> p.fakname = s.fakname <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> hoeren h</span><br><span class="line">        <span class="keyword">where</span> h.vorlnr = v.vorlnr <span class="keyword">and</span> h.matrnr = s.matrnr</span><br><span class="line">        )</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<p>用中文就是：对这个学生，不存在一门他系里教授的课，这个学生没有听过。</p>
<p>或者</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.*</span><br><span class="line"><span class="keyword">from</span> studentenGF s</span><br><span class="line"><span class="keyword">where</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*)</span><br><span class="line">    <span class="keyword">from</span> vorlesungen v, professorenF p</span><br><span class="line">    <span class="keyword">where</span> v.gelesenvon = p.persnr <span class="keyword">and</span> p.fakname = s.fakname</span><br><span class="line">          )</span><br><span class="line">=</span><br><span class="line">      (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*)</span><br><span class="line">    <span class="keyword">from</span> hoeren h, vorlesungen v, professorenF p</span><br><span class="line">    <span class="keyword">where</span> h.matrnr = s.matrnr <span class="keyword">and</span> h.vorlnr = v.vorlnr <span class="keyword">and</span> p.persnr = v.gelesenvon <span class="keyword">and</span> p.fakname= s.fakname</span><br><span class="line">          )</span><br></pre></td></tr></tbody></table></figure>
<p>引用：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p>
<!-- 该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQL]中级SQL(2)</title>
    <url>/2020/02/25/SQL-%E4%B8%AD%E7%BA%A7SQL-2/</url>
    <content><![CDATA[<p>在这篇文章<strong>中级SQL</strong>中我们会遇到subquery，它可以出现在<code>select子句</code>中或者<code>where子句</code>或者<code>from子句</code>中。这篇文章我们会练习稍微复杂的subquery。</p>
<a id="more"></a>
<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注<code>select...from...where</code>这种读操作，分析query　(analytical query)。<br>数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p>
<p>架构 Schema:<br><img data-src="https://db.in.tum.de/teaching/ws1920/grundlagen/uni.png?lang=de" alt="schema_de"></p>
<p><img data-src="https://hyper-db.de/uniEngl.png" alt="schema_en"></p>
<p>下载:<br><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vdW5pX215c3FsLnNxbD9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de<i class="fa fa-external-link"></i></span></p>
<p>Schma和大部分SQL语句来自<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL2tlbXBlci8/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/kemper/?lang=de">Prof. Alfons Kemper, Ph.D.<i class="fa fa-external-link"></i></span>的课件和书。</p>
<p>课件：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></li>
</ul>
<p>书：　<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p>
<h1 id="中级SQL"><a href="#中级SQL" class="headerlink" title="中级SQL"></a>中级SQL</h1><ul>
<li>比较听课并考试的同学的成绩和不听课只考试的同学成绩：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> no_lec <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">avg</span>(note) <span class="keyword">as</span> avg_note</span><br><span class="line">    <span class="keyword">from</span> pruefen p</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> hoeren h</span><br><span class="line">        <span class="keyword">where</span> h.matrnr = p.matrnr</span><br><span class="line">        )),</span><br><span class="line">     with_lec <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">avg</span>(note) <span class="keyword">as</span> avg_note</span><br><span class="line">    <span class="keyword">from</span> pruefen p</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">exists</span> (</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> hoeren h</span><br><span class="line">        <span class="keyword">where</span> h.matrnr = p.matrnr</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> no_lec, with_lec;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<ul>
<li>计算权重的成绩(<code>sws</code>就是我们的权重)：<br>我们采用一个更大的表格：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> pruefenxl (matrnr, vorlnr, persnr, note) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">        (<span class="number">25403</span> , <span class="number">5049</span> , <span class="number">2126</span> , <span class="number">1</span>),</span><br><span class="line">        (<span class="number">26120</span> , <span class="number">5001</span> , <span class="number">2137</span> , <span class="number">1</span>),</span><br><span class="line">        (<span class="number">26120</span> , <span class="number">5043</span> , <span class="number">2126</span> , <span class="number">3</span>),</span><br><span class="line">        (<span class="number">26120</span> , <span class="number">5052</span> , <span class="number">2126</span> , <span class="number">4</span>),</span><br><span class="line">        (<span class="number">26120</span> , <span class="number">4630</span> , <span class="number">2137</span> , <span class="number">1</span>)</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> pruefenxl (matrnr, vorlnr, persnr, note) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">        (<span class="number">25403</span>, <span class="number">5049</span>, <span class="number">2126</span>, <span class="number">1</span>),</span><br><span class="line">        (<span class="number">26120</span>, <span class="number">5001</span>, <span class="number">2137</span>, <span class="number">1</span>),</span><br><span class="line">        (<span class="number">26120</span>, <span class="number">5043</span>, <span class="number">2126</span>, <span class="number">3</span>),</span><br><span class="line">        (<span class="number">26120</span>, <span class="number">5052</span>, <span class="number">2126</span>, <span class="number">4</span>),</span><br><span class="line">        (<span class="number">26120</span>, <span class="number">4630</span>, <span class="number">2137</span>, <span class="number">1</span>)</span><br><span class="line">), factorGrade <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.name, s.matrnr, v.titel, p.note, v.sws <span class="keyword">as</span> factor, (p.note * v.sws) <span class="keyword">as</span> finalGrade</span><br><span class="line">    <span class="keyword">from</span> studenten s, pruefenxl p, vorlesungen v</span><br><span class="line">    <span class="keyword">where</span> p.vorlnr = v.vorlnr <span class="keyword">and</span> s.matrnr = p.matrnr</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> matrnr, <span class="keyword">name</span>, <span class="keyword">sum</span>(finalGrade) / <span class="keyword">sum</span>(factor) <span class="keyword">as</span> finalAVG</span><br><span class="line"><span class="keyword">from</span> factorGrade</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> matrnr, <span class="keyword">name</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> matrnr</span><br></pre></td></tr></tbody></table></figure>
<p>或者</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> pruefenxl (matrnr, vorlnr, persnr, note) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> pruefen</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">        (<span class="number">25403</span> , <span class="number">5049</span> , <span class="number">2126</span> , <span class="number">1</span>),</span><br><span class="line">        (<span class="number">26120</span> , <span class="number">5001</span> , <span class="number">2137</span> , <span class="number">1</span>),</span><br><span class="line">        (<span class="number">26120</span> , <span class="number">5043</span> , <span class="number">2126</span> , <span class="number">3</span>),</span><br><span class="line">        (<span class="number">26120</span> , <span class="number">5052</span> , <span class="number">2126</span> , <span class="number">4</span>),</span><br><span class="line">        (<span class="number">26120</span> , <span class="number">4630</span> , <span class="number">2137</span> , <span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> s.matrnr, s.name, <span class="keyword">sum</span>(p.note * v.sws) / <span class="keyword">sum</span>(v.sws) <span class="keyword">as</span> <span class="keyword">avg</span></span><br><span class="line"><span class="keyword">from</span> studenten s, pruefenxl p, vorlesungen v</span><br><span class="line"><span class="keyword">where</span> s.matrnr = p.matrnr <span class="keyword">and</span> p.vorlnr = v.vorlnr</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.matrnr , s.name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> s.matrnr</span><br></pre></td></tr></tbody></table></figure>
<hr>
<p><br></p>
<p>1.搜索学生通过上课能认识的其他学生名字：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s1.name, s2.name</span><br><span class="line"><span class="keyword">from</span> studenten s1, hoeren h1, hoeren h2, studenten s2</span><br><span class="line"><span class="keyword">where</span> h1.vorlnr = h2.vorlnr <span class="keyword">and</span> h1.matrnr = s1.matrnr  <span class="keyword">and</span> h2.matrnr = s2.matrnr <span class="keyword">and</span> s1.matrnr != s2.matrnr</span><br></pre></td></tr></tbody></table></figure>
<p>2.对每一个同学认识的人进行计数：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> friend <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s1.matrnr <span class="keyword">as</span> student, s2.matrnr <span class="keyword">as</span> his_friend</span><br><span class="line">    <span class="keyword">from</span> studenten s1,</span><br><span class="line">        hoeren h1,</span><br><span class="line">        hoeren h2,</span><br><span class="line">        studenten s2</span><br><span class="line">    <span class="keyword">where</span> h1.vorlnr = h2.vorlnr</span><br><span class="line">    <span class="keyword">and</span> h1.matrnr = s1.matrnr</span><br><span class="line">    <span class="keyword">and</span> h2.matrnr = s2.matrnr</span><br><span class="line">    <span class="keyword">and</span> s1.matrnr != s2.matrnr</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> s.matrnr, s.name, <span class="keyword">count</span>(b.his_friend) <span class="keyword">as</span> num_friends</span><br><span class="line"><span class="keyword">from</span> studenten s, friend b</span><br><span class="line"><span class="keyword">where</span> s.matrnr = b.student</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, s.name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num_friends <span class="keyword">desc</span></span><br></pre></td></tr></tbody></table></figure>
<p>3.在2.的基础上再考虑：不上课(也就不认识同学)的人 </p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> friend <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s1.matrnr <span class="keyword">as</span> student, s2.matrnr <span class="keyword">as</span> his_friend</span><br><span class="line">    <span class="keyword">from</span> studenten s1,</span><br><span class="line">        hoeren h1,</span><br><span class="line">        hoeren h2,</span><br><span class="line">        studenten s2</span><br><span class="line">    <span class="keyword">where</span> h1.vorlnr = h2.vorlnr</span><br><span class="line">    <span class="keyword">and</span> h1.matrnr = s1.matrnr</span><br><span class="line">    <span class="keyword">and</span> h2.matrnr = s2.matrnr</span><br><span class="line">    <span class="keyword">and</span> s1.matrnr != s2.matrnr</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> s.matrnr, s.name, <span class="keyword">count</span>(b.his_friend) <span class="keyword">as</span> num_friends</span><br><span class="line"><span class="keyword">from</span> studenten s <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> friend b</span><br><span class="line"><span class="keyword">on</span> s.matrnr = b.student</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, s.name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num_friends <span class="keyword">desc</span></span><br></pre></td></tr></tbody></table></figure>
<p>这里用了一个<code>left outer join</code>。右边的表格<code>friend b</code>只含有上课的同学(即出现在<code>hoeren</code>表格中的同学)，但是左边的表格<code>studenten s</code>含有所有学生。</p>
<hr>
<p><br></p>
<p>1.求每个学生的选课数量的平均数，需要考虑不上课的学生：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(h.vorlnr), <span class="keyword">count</span>(<span class="keyword">distinct</span> s.matrnr) <span class="comment">-- 听课和不听课的学生都在</span></span><br><span class="line"><span class="keyword">from</span> studenten s <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> hoeren h <span class="keyword">on</span> s.matrnr = h.matrnr</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> hcount / (scount * <span class="number">1.00</span>)</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> hcount <span class="keyword">from</span> hoeren) h,</span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> scount <span class="keyword">from</span> studenten) s <span class="comment">-- 听课和不听课的学生都在</span></span><br></pre></td></tr></tbody></table></figure>
<p>2.搜索选课超过学生选课sws平均数的学生，需要考虑不上课的学生：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> num_stu <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> count_stu</span><br><span class="line">    <span class="keyword">from</span> studenten),</span><br><span class="line">    num_sws <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">sum</span>(vor.sws) <span class="keyword">as</span> count_sws</span><br><span class="line">    <span class="keyword">from</span> hoeren h, vorlesungen vor</span><br><span class="line">    <span class="keyword">where</span> h.vorlnr = vor.vorlnr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> s.*</span><br><span class="line"><span class="keyword">from</span> studenten s</span><br><span class="line"><span class="keyword">where</span> s.matrnr <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> h.matrnr</span><br><span class="line">    <span class="keyword">from</span> hoeren h, vorlesungen v</span><br><span class="line">    <span class="keyword">where</span> h.vorlnr = v.vorlnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> h.matrnr</span><br><span class="line">    <span class="keyword">having</span> <span class="keyword">sum</span>(sws) &gt; (<span class="keyword">select</span> <span class="keyword">cast</span>(num_sws.count_sws <span class="keyword">as</span> <span class="built_in">decimal</span> (<span class="number">5</span>, <span class="number">2</span>)) / num_stu.count_stu <span class="keyword">from</span> num_sws, num_stu)</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<p>或者</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> num_stu <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> count_stu</span><br><span class="line">    <span class="keyword">from</span> studenten),</span><br><span class="line">    num_sws <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">sum</span>(vor.sws) <span class="keyword">as</span> count_sws</span><br><span class="line">    <span class="keyword">from</span> hoeren h, vorlesungen vor</span><br><span class="line">    <span class="keyword">where</span> h.vorlnr = vor.vorlnr),</span><br><span class="line">    avg_sws <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">cast</span>(num_sws.count_sws <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">5</span>, <span class="number">2</span>)) / num_stu.count_stu <span class="keyword">as</span> sws</span><br><span class="line">    <span class="keyword">from</span> num_stu, num_sws),</span><br><span class="line">    stu_sws <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.matrnr, s.name, s.semester, <span class="keyword">sum</span>(v.sws) <span class="keyword">as</span> sum_sws</span><br><span class="line">    <span class="keyword">from</span> studenten s, hoeren h, vorlesungen v</span><br><span class="line">    <span class="keyword">where</span> s.matrnr = h.matrnr <span class="keyword">and</span> h.vorlnr = v.vorlnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, s.name, s.semester)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> s.*</span><br><span class="line"><span class="keyword">from</span> stu_sws s, avg_sws</span><br><span class="line"><span class="keyword">where</span> s.sum_sws &gt; avg_sws.sws</span><br></pre></td></tr></tbody></table></figure>
<p>或者</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> swsProStudent <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> s.matrnr, s.name,</span><br><span class="line">        <span class="keyword">cast</span>((<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">sum</span>(v.sws) <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="number">0</span></span><br><span class="line">                                <span class="keyword">else</span> <span class="keyword">sum</span>(v.sws) <span class="keyword">end</span>) <span class="keyword">as</span> <span class="built_in">real</span>) <span class="keyword">as</span> anzSWS</span><br><span class="line">    <span class="keyword">from</span> studenten s</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> hoeren h <span class="keyword">on</span> s.matrnr = h.matrnr</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> vorlesungen v <span class="keyword">on</span> h.vorlnr = v.vorlnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, s.name</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> s.*</span><br><span class="line"><span class="keyword">from</span> studenten s</span><br><span class="line"><span class="keyword">where</span> s.matrnr <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> sws.matrnr</span><br><span class="line">    <span class="keyword">from</span> swsProStudent sws</span><br><span class="line">    <span class="keyword">where</span> sws.anzSWS &gt; (</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">avg</span>(anzSWS)</span><br><span class="line">        <span class="keyword">from</span> swsProStudent</span><br><span class="line">        )</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<hr>
<p>1.确定一门的<code>semester</code>属性：</p>
<ul>
<li>这个根据听这门课中人数最多的一个学生<code>semester</code>组决定。</li>
<li>如果有很多组人数相同，取这些组们中<code>semester</code>最小的数值。</li>
<li>比如一门课被100第一学期的同学和100个第三学期的同学上，我们当这门课是属于第一学期的课(那100第三学期的被我们当做前一年挂科重修的人)。</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> vorl_semester_anz <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> h.vorlnr, s.semester, <span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">    <span class="keyword">from</span> hoeren h, studenten s</span><br><span class="line">    <span class="keyword">where</span> h.matrnr = s.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> h.vorlnr, s.semester</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> v.vorlnr, <span class="keyword">min</span>(v.semester) <span class="keyword">as</span> semester</span><br><span class="line"><span class="keyword">from</span> vorl_semester_anz v</span><br><span class="line"><span class="keyword">where</span> v.num = (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">max</span>(vhelp.num)</span><br><span class="line">    <span class="keyword">from</span> vorl_semester_anz vhelp</span><br><span class="line">    <span class="keyword">where</span> v.vorlnr = vhelp.vorlnr</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> v.vorlnr</span><br></pre></td></tr></tbody></table></figure>
<p>这个结构其实很难用<code>join</code>完成，但是也是可行的。另外一种间接的方式：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> vorl_semester_anz <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> h.vorlnr, s.semester, <span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">    <span class="keyword">from</span> hoeren h, studenten s</span><br><span class="line">    <span class="keyword">where</span> h.matrnr = s.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> h.vorlnr, s.semester</span><br><span class="line">), vorl_semester_maxanz <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> v.vorlnr, <span class="keyword">max</span>(<span class="keyword">num</span>) <span class="keyword">as</span> <span class="keyword">max</span> <span class="comment">-- 每一门课最多的人数是一个确定的数字，用这个数字可以找回semester</span></span><br><span class="line">    <span class="keyword">from</span> vorl_semester_anz v</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> v.vorlnr</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> v1.vorlnr, <span class="keyword">min</span>(v1.semester) <span class="keyword">as</span> semester</span><br><span class="line"><span class="keyword">from</span> vorl_semester_anz v1, vorl_semester_maxanz v2</span><br><span class="line"><span class="keyword">where</span> v1.vorlnr = v2.vorlnr <span class="keyword">and</span> v1.num = v2.max</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> v1.vorlnr</span><br></pre></td></tr></tbody></table></figure>
<p>2.搜索提前上课的同学(同学的<code>semester</code>比课程的<code>semester</code>要小)：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> vorl_semester_anz <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> h.vorlnr, s.semester, <span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">    <span class="keyword">from</span> hoeren h, studenten s</span><br><span class="line">    <span class="keyword">where</span> h.matrnr = s.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> h.vorlnr, s.semester</span><br><span class="line">), vorl_semester <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> v.vorlnr, <span class="keyword">min</span>(v.semester) <span class="keyword">as</span> semester</span><br><span class="line">    <span class="keyword">from</span> vorl_semester_anz v</span><br><span class="line">    <span class="keyword">where</span> v.num = (</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">max</span>(vhelp.num)</span><br><span class="line">        <span class="keyword">from</span> vorl_semester_anz vhelp</span><br><span class="line">        <span class="keyword">where</span> v.vorlnr = vhelp.vorlnr</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> v.vorlnr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> v.vorlnr, v.titel, <span class="keyword">count</span>(s.matrnr) <span class="keyword">as</span> num_advanced_stu</span><br><span class="line"><span class="keyword">from</span> vorlesungen v <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> vorl_semester vs <span class="keyword">on</span> v.vorlnr = vs.vorlnr</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> hoeren h <span class="keyword">on</span> v.vorlnr = h.vorlnr</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> studenten s <span class="keyword">on</span> h.matrnr = s.matrnr <span class="keyword">and</span> s.semester &lt; vs.semester</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> v.vorlnr, v.titel</span><br></pre></td></tr></tbody></table></figure>
<p>当然还有另一种：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> vorl_semester_anz <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> h.vorlnr, s.semester, <span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">    <span class="keyword">from</span> hoeren h, studenten s</span><br><span class="line">    <span class="keyword">where</span> h.matrnr = s.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> h.vorlnr, s.semester</span><br><span class="line">), vorl_semester_maxanz <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> v.vorlnr, <span class="keyword">max</span>(<span class="keyword">num</span>) <span class="keyword">as</span> <span class="keyword">max</span> <span class="comment">-- 每一门课最多的人数是一个确定的数字，用这个数字可以找回semester</span></span><br><span class="line">    <span class="keyword">from</span> vorl_semester_anz v</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> v.vorlnr</span><br><span class="line">), vorl_semester <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> v1.vorlnr, <span class="keyword">min</span>(v1.semester) <span class="keyword">as</span> semester</span><br><span class="line">    <span class="keyword">from</span> vorl_semester_anz v1, vorl_semester_maxanz v2</span><br><span class="line">    <span class="keyword">where</span> v1.vorlnr = v2.vorlnr <span class="keyword">and</span> v1.num = v2.max</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> v1.vorlnr</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> v.vorlnr, v.titel, <span class="keyword">count</span>(s.matrnr) <span class="keyword">as</span> num_advanced_stu</span><br><span class="line"><span class="keyword">from</span> vorlesungen v <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> vorl_semester vs <span class="keyword">on</span> v.vorlnr = vs.vorlnr</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> hoeren h <span class="keyword">on</span> v.vorlnr = h.vorlnr</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> studenten s <span class="keyword">on</span> h.matrnr = s.matrnr <span class="keyword">and</span> s.semester &lt; vs.semester</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> v.vorlnr, v.titel</span><br></pre></td></tr></tbody></table></figure>
<p>这里必须要提到一下:</p>
<ul>
<li><code>count(s.matrnr) as num_advanced_stu</code>不能写成<code>count(*)</code></li>
<li>原因是：<code>left outer join</code>会生成很多<code>null</code>，因为很多课没有人听，因此这些课也没有<code>semester</code>。<br>但是<code>count(*)</code>会将这些课计数，而<code>count(s.matrnr)</code>计的数字是<strong>真正</strong>上这个课学生人数，而不是<code>null</code>。</li>
</ul>
<p>引用：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p>
<!-- 该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQL]中级SQL(1)</title>
    <url>/2020/02/22/SQL-%E4%B8%AD%E7%BA%A7SQL-1/</url>
    <content><![CDATA[<p>在这篇文章<strong>中级SQL</strong>中我们会遇到subquery，它可以出现在<code>select子句</code>中或者<code>where子句</code>或者<code>from子句</code>中。它会产生一个对应的结果表格，我们可以给这个暂时的表示命名。</p>
<a id="more"></a>
<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注<code>select...from...where</code>这种读操作，分析型查询(analytical query)。<br>数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p>
<p>架构 Schema:<br><img data-src="https://db.in.tum.de/teaching/ws1920/grundlagen/uni.png?lang=de" alt="schema_de"></p>
<p><img data-src="https://hyper-db.de/uniEngl.png" alt="schema_en"></p>
<p>下载:<br><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vdW5pX215c3FsLnNxbD9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de<i class="fa fa-external-link"></i></span></p>
<p>Schma和大部分SQL语句来自<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL2tlbXBlci8/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/kemper/?lang=de">Prof. Alfons Kemper, Ph.D.<i class="fa fa-external-link"></i></span>的课件和书。</p>
<p>课件：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></li>
</ul>
<p>书：　<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p>
<h1 id="中级SQL"><a href="#中级SQL" class="headerlink" title="中级SQL"></a>中级SQL</h1><ul>
<li>在pruefen中搜索note小于平局值的：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> pruefen</span><br><span class="line"><span class="keyword">where</span> note &lt; (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">avg</span>(note)</span><br><span class="line">    <span class="keyword">from</span> pruefen</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<ul>
<li>对每一个professoren，对应的vorlesungen的sws求和：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- correlated sub-query</span></span><br><span class="line"><span class="keyword">select</span> p.persnr, p.name, (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">sum</span>(v.sws) <span class="keyword">as</span> lehrbelastung</span><br><span class="line">    <span class="keyword">from</span> vorlesungen v</span><br><span class="line">    <span class="keyword">where</span> v.gelesenvon = p.persnr</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">from</span> professoren p</span><br><span class="line"></span><br><span class="line"><span class="comment">-- no sub-query</span></span><br><span class="line"><span class="keyword">select</span> p.persnr, p.name, <span class="keyword">sum</span>(sws)</span><br><span class="line"><span class="keyword">from</span> professoren p <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> vorlesungen v <span class="keyword">on</span> p.persnr = v.gelesenvon</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> p.name, p.persnr</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<ul>
<li>搜索上课数大于２的学生：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> tmp.matrnr, tmp.name, tmp.vorlanzahl</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> s.matrnr, s.name, <span class="keyword">count</span>(*) <span class="keyword">as</span> vorlanzahl</span><br><span class="line">    <span class="keyword">from</span> studenten s, hoeren h</span><br><span class="line">    <span class="keyword">where</span> s.matrnr = h.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, s.name) tmp</span><br><span class="line"><span class="keyword">where</span> tmp.vorlanzahl &gt; <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure>
<p>这时候我们对这个subquery的结果表格进行命名<code>tmp</code>。当然我们可以用<code>with子句</code>来做同样的事情。我主观上更喜欢用<code>with</code>,它很清晰地把暂时需要的表格写在最上方，而且对debug也更加友好。当然两者是结果等价，运行时间也等价的。</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tmp <span class="keyword">as</span> (<span class="keyword">select</span> s.matrnr, s.name, <span class="keyword">count</span>(*) <span class="keyword">as</span> vorlanzahl</span><br><span class="line">    <span class="keyword">from</span> studenten s, hoeren h</span><br><span class="line">    <span class="keyword">where</span> s.matrnr = h.matrnr</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, s.name) </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> tmp.matrnr, tmp.name, tmp.vorlanzahl</span><br><span class="line"><span class="keyword">from</span> tmp</span><br><span class="line"><span class="keyword">where</span> tmp.vorlanzahl &gt; <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<ul>
<li>计算每一个vorlesungen的人数占比：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> h.vorlnr, h.anzProVorl, g.gesamtAnz, <span class="keyword">cast</span>(h.anzProVorl <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">6</span>, <span class="number">1</span>)) / g.gesamtAnz <span class="keyword">as</span> MarkAnteil</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> vorlnr, <span class="keyword">count</span>(*) <span class="keyword">as</span> anzProVorl</span><br><span class="line">    <span class="keyword">from</span> hoeren</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> vorlnr) <span class="keyword">as</span> h,</span><br><span class="line">     (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> gesamtAnz</span><br><span class="line">    <span class="keyword">from</span> studenten) g</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- with子句版本</span></span><br><span class="line"><span class="keyword">with</span> h <span class="keyword">as</span> (<span class="keyword">select</span> vorlnr, <span class="keyword">count</span>(*) <span class="keyword">as</span> anzProVorl</span><br><span class="line">    <span class="keyword">from</span> hoeren</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> vorlnr),</span><br><span class="line">     g <span class="keyword">as</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> gesamtAnz</span><br><span class="line">    <span class="keyword">from</span> studenten)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> h.vorlnr, h.anzProVorl, g.gesamtAnz, <span class="keyword">cast</span>(h.anzProVorl <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">6</span>, <span class="number">1</span>)) / g.gesamtAnz <span class="keyword">as</span> MarkAnteil</span><br><span class="line"><span class="keyword">from</span> h, g</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<ul>
<li>计算每一个professoren通过上课认识的studenten个数以及比例：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> kenntSich <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> v.gelesenvon <span class="keyword">as</span> profpersnr, h.matrnr <span class="keyword">as</span> studmatrnr</span><br><span class="line">    <span class="keyword">from</span> hoeren h <span class="keyword">join</span> vorlesungen v <span class="keyword">on</span> h.vorlnr =v.vorlnr</span><br><span class="line">    ),</span><br><span class="line">     kenntAnzahl <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> profpersnr, <span class="keyword">count</span>(*) <span class="keyword">as</span> anzstudenten</span><br><span class="line">    <span class="keyword">from</span> kenntSich</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> profpersnr),</span><br><span class="line">     wieviel <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> gesamtanz</span><br><span class="line">    <span class="keyword">from</span> studenten)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> k.profpersnr, p.name, k.anzstudenten, w.gesamtanz, <span class="number">1.00</span> * k.anzstudenten / w.gesamtanz <span class="keyword">as</span> bekanntheitsgard</span><br><span class="line"><span class="keyword">from</span> kenntAnzahl k, wieviel w, professoren p</span><br><span class="line"><span class="keyword">where</span> k.profpersnr = p.persnr</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> bekanntheitsgard <span class="keyword">desc</span></span><br></pre></td></tr></tbody></table></figure>
<hr>
<ul>
<li>搜索听了所有sws=4 vorlesungen的学生：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.*</span><br><span class="line"><span class="keyword">FROM</span> studenten s</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> vorlesungen v</span><br><span class="line">    <span class="keyword">where</span> v.sws = <span class="number">4</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> hoeren h</span><br><span class="line">        <span class="keyword">where</span> h.vorlnr = v.vorlnr <span class="keyword">and</span> h.matrnr = s.matrnr</span><br><span class="line">        )</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<p>SQL92中没有定义for all Quantifier(全称量词)。所以我们只能改写关系代数：</p>
<p>$ \{s|s\in studenten \wedge \forall v \in vorlesungen (v.sws = 4 \Rightarrow \\ \exists h \in hoeren (h.vorlnr = v.vorlnr \wedge h.matrnr = s.matrnr)) \} $</p>
<p>我们先把$\forall t \in R (P(t))$改写成$\neg (\exists t \in R(\neg P(t)))$:</p>
<script type="math/tex; mode=display">\{s|s\in studenten \wedge \neg (\exists v \in vorlesungen \; \neg (v.sws = 4 \Rightarrow \\ \exists h \in hoeren (h.vorlnr = v.vorlnr \wedge h.matrnr = s.matrnr))) \}</script><p>再把$R \Rightarrow T$改写成$\neg R \vee T$:</p>
<script type="math/tex; mode=display">\{s|s\in studenten \wedge \neg (\exists v \in vorlesungen \; \neg (\neg (v.sws = 4) \vee \\ \exists h \in hoeren (h.vorlnr = v.vorlnr \wedge h.matrnr = s.matrnr))) \}</script><p>再用DeMorgan律简化一下：</p>
<script type="math/tex; mode=display">\{s|s\in studenten \wedge \neg (\exists v \in vorlesungen (v.sws = 4) \wedge \\ \neg (\exists h \in hoeren (h.vorlnr = v.vorlnr \wedge h.matrnr = s.matrnr))) \}</script><p>用中文说：不存在一门sws=4的课，没有被这个学生听。这样我们可以对应关系代数到上面的SQL。</p>
<p><br></p>
<p>另外一种trick解法，使用<code>count</code>:<br></p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 先把hoeren变成sws=4hoeren: hoerenStudentenWith4SWS</span></span><br><span class="line"><span class="keyword">with</span> hoerenStudentenWith4SWS (matrnr,&nbsp;vorlnr) <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> h.matrnr, v.vorlnr</span><br><span class="line">    <span class="keyword">from</span> hoeren h, vorlesungen v</span><br><span class="line">    <span class="keyword">where</span> h.vorlnr = v.vorlnr <span class="keyword">and</span> v.sws = <span class="number">4</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 再看学生是不是听完了所有hoerenStudentenWith4SWS</span></span><br><span class="line"><span class="keyword">select</span> h.matrnr</span><br><span class="line"><span class="keyword">from</span> hoerenStudentenWith4SWS h</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> h.matrnr</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(*) = (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> vorlesungen v <span class="keyword">where</span> v.sws = <span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure><p></p>
<p><br></p>
<ul>
<li>(对上面的类似练习) 搜索学生所有考过的试对应的科目，都是这个同学所听过：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.*</span><br><span class="line"><span class="keyword">from</span> studenten s</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> pruefen p</span><br><span class="line">    <span class="keyword">where</span> p.matrnr = s.matrnr <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> hoeren h</span><br><span class="line">        <span class="keyword">where</span> h.vorlnr = p.vorlnr <span class="keyword">and</span> h.matrnr = s.matrnr</span><br><span class="line">        )</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<p>用中文说：没有一门被考过的科目，没有出现在对应学生hoeren表格中。</p>
<p>另外因为这个要求是独立得应用在每一个学生上，每一个学生因为考试不同，所有要求听的科目也不同。因此上面那题的<code>trick</code>不再适用。<code>trick</code>应用条件是对所有学生需要普遍性，而排除独立性 — <code>一视同仁</code>。</p>
<p><br></p>
<ul>
<li>(对上面的类似练习) 搜索学生所有听过的科目，都考试并通过(<code>note</code>&lt;=4)：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> Studenten s</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> hoeren h</span><br><span class="line">    <span class="keyword">where</span> h.MatrNr = s.MatrNr <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">        <span class="keyword">select</span> * </span><br><span class="line">        <span class="keyword">from</span> pruefen p</span><br><span class="line">        <span class="keyword">where</span> p.MatrNr = s.MatrNr <span class="keyword">and</span> p.VorlNr = h.VorlNr <span class="keyword">and</span> p.Note &lt;= <span class="number">4</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<p>用中文说：没有一门上过课的科目，没有出现在对应学生<code>pruefen</code>表格中并没有通过。</p>
<p>这个依旧很难用<code>trick</code>。</p>
<hr>
<p><br></p>
<ul>
<li>求至少听Sokrates一门课的学生们的平均学期数：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> vl_von_sokrates <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> vorlesungen v, professoren p</span><br><span class="line">    <span class="keyword">where</span> v.gelesenvon = p.persnr <span class="keyword">and</span> p.name = <span class="string">'Sokrates'</span></span><br><span class="line">), studenten_von_sokrates <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> s.name, s.matrnr, s.semester</span><br><span class="line">    <span class="keyword">from</span> studenten s, hoeren h, vl_von_sokrates v</span><br><span class="line">    <span class="keyword">where</span> s.matrnr = h.matrnr <span class="keyword">and</span> h.vorlnr = v.vorlnr</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(semester)</span><br><span class="line"><span class="keyword">from</span> studenten_von_sokrates;</span><br></pre></td></tr></tbody></table></figure>
<p>这题一定要注意,可能一个学生听了Sokrates的很多课，但是这种同学不能被重复计数。我们可以用<code>distinct</code>。</p>
<p>但是我们也有一种解法不需要<code>distinct</code>，它不用<code>join</code>,而是带<code>exists</code>的correlated subquery: </p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> vl_von_sokrates <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> vorlesungen v, professoren p</span><br><span class="line">    <span class="keyword">where</span> v.gelesenvon = p.persnr <span class="keyword">and</span> p.name = <span class="string">'Sokrates'</span></span><br><span class="line">), studenten_von_sokrates <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> studenten s</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">exists</span>(</span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> hoeren h, vl_von_sokrates vl</span><br><span class="line">        <span class="keyword">where</span> h.matrnr = s.matrnr <span class="keyword">and</span> h.vorlnr = vl.vorlnr</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(semester)</span><br><span class="line"><span class="keyword">from</span> studenten_von_sokrates;</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<ul>
<li>求每个学生听几节课，需要考虑不听任何课的学生：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> h <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> hcount</span><br><span class="line">    <span class="keyword">from</span> hoeren</span><br><span class="line">    ),</span><br><span class="line">     s <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> scount</span><br><span class="line">    <span class="keyword">from</span> studenten</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> hcount / (scount * <span class="number">1.00</span>) <span class="keyword">as</span> avg_vl</span><br><span class="line"><span class="keyword">from</span> h, s</span><br></pre></td></tr></tbody></table></figure>
<p>或者</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> h <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> hcount</span><br><span class="line">    <span class="keyword">from</span> hoeren</span><br><span class="line">    ),</span><br><span class="line">     s <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> scount</span><br><span class="line">    <span class="keyword">from</span> studenten</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> hcount / (<span class="keyword">cast</span>(scount <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">10</span>, <span class="number">4</span>))) <span class="keyword">as</span> avg_vl</span><br><span class="line"><span class="keyword">from</span> h, s</span><br></pre></td></tr></tbody></table></figure>
<p>引用：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span><br><!-- 
该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 --></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[SQL]基础SQL</title>
    <url>/2020/02/22/SQL-%E5%9F%BA%E7%A1%80SQL/</url>
    <content><![CDATA[<p>这篇文章中我们介绍SQL中最基础的语句。</p>
<a id="more"></a>
<h1 id="SQL简介"><a href="#SQL简介" class="headerlink" title="SQL简介"></a>SQL简介</h1><p>SQL是结构化查询语言(Structure Query Language)的缩写，它是使用关系模型的数据库(RDBMS)应用语言。</p>
<h1 id="SQL历史"><a href="#SQL历史" class="headerlink" title="SQL历史"></a>SQL历史</h1><blockquote>
<p>在1970年代初，由IBM公司San Jose,California研究实验室的Edgar Frank Codd(又称Ted Codd)发表将数据组成表格的应用原则（Codd’s Relational Algebra）。1974年，同一实验室的D.D.Chamberlin和R.F. Boyce对Codd’s Relational Algebra在研制关系数据库管理系统System R中，研制出一套规范语言-SEQUEL（Structured English Query Language），并在1976年11月的IBM Journal of R&amp;D上公布新版本的SQL（叫SEQUEL/2）。1980年改名为SQL。<br>1979年ORACLE公司首先提供商用的SQL，IBM公司在DB2和SQL/DS数据库系统中也实现了SQL。<sup><a href="#myfootnote1">1</a></sup></p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRWRnYXJfRi5fQ29kZA==" title="https://en.wikipedia.org/wiki/Edgar_F._Codd">Ted Codd<i class="fa fa-external-link"></i></span>是数据库开创者，以<code>relation model</code>获得1981年图灵奖。我们在关系模型中的<code>Boyce-Codd Normal From</code>(介于第三范式和第四范式)也来自于他的名字。</p>
<p><code>System R</code>在数据库历史上也非常重要。特别是看数据库书的时不断被提起。</p>
<h1 id="SQL标准"><a href="#SQL标准" class="headerlink" title="SQL标准"></a>SQL标准</h1><blockquote>
<p>1986年10月，美国ANSI采用SQL作为关系数据库管理系统的标准语言（ANSI X3. 135-1986），后为国际标准化组织（ISO）采纳为国际标准。<br>1989年，美国ANSI采纳在ANSI X3.135-1989报告中定义的关系数据库管理系统的SQL标准语言，称为ANSI SQL 89，该标准替代ANSI X3.135-1986版本。该标准为下列组织所采纳：<br>国际标准化组织（ISO），为ISO 9075-1989报告“Database Language SQL With Integrity Enhancement”<br>美国联邦政府，发布在The Federal Information Processing Standard Publication(FIPS PUB)127<br>当前，所有主要的关系数据库管理系统支持某些形式的SQL，大部分数据库至少遵守ANSI SQL89标准。<br>ANSI SQL92标准在交叉连接（cross join）和内部连接之上，新增加了外部连接，并支持在FROM子句中写连接表达式。支持集合的并运算、交运算。支持Case (SQL)表达式。支持CHECK约束。创建临时表。支持cursor。<br>支持事务隔离。<sup><a href="#myfootnote1">1</a></sup></p>
</blockquote>
<h1 id="关于此文章"><a href="#关于此文章" class="headerlink" title="关于此文章"></a>关于此文章</h1><p>我们这一篇文章采用PostgreSQL的SQL语法。重点我们关注<code>select...from...where</code>这种读操作，分析型查询(analytical query)。<br>数据集在　<span class="exturl" data-url="aHR0cHM6Ly9oeXBlci1kYi5kZS9pbnRlcmZhY2UuaHRtbA==" title="https://hyper-db.de/interface.html">https://hyper-db.de/interface.html<i class="fa fa-external-link"></i></span>　可以直接使用。另外在这个网页不允许进行写操作:<code>insert</code>, <code>update</code>, <code>delete</code>之类的transactional query。当然<code>create table</code>和<code>drop table</code>也不被允许。</p>
<p>架构 Schema:  </p>
<p><img data-src="https://db.in.tum.de/teaching/ws1920/grundlagen/uni.png?lang=de" alt="schema_de"></p>
<p><img data-src="https://hyper-db.de/uniEngl.png" alt="schema_en"></p>
<p>下载:<br><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvd3MxOTIwL2dydW5kbGFnZW4vdW5pX215c3FsLnNxbD9sYW5nPWRl" title="https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de">https://db.in.tum.de/teaching/ws1920/grundlagen/uni_mysql.sql?lang=de<i class="fa fa-external-link"></i></span></p>
<p>Schma和大部分SQL语句来自<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvcGVvcGxlL3NpdGVzL2tlbXBlci8/bGFuZz1kZQ==" title="https://db.in.tum.de/people/sites/kemper/?lang=de">Prof. Alfons Kemper, Ph.D.<i class="fa fa-external-link"></i></span>的课件和书。</p>
<p>课件：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></li>
</ul>
<p>书：　<span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p>
<h1 id="基础SQL"><a href="#基础SQL" class="headerlink" title="基础SQL"></a>基础SQL</h1><ul>
<li>搜索所有rang是C4的教授：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> persnr, <span class="keyword">name</span></span><br><span class="line"><span class="keyword">from</span> professoren</span><br><span class="line"><span class="keyword">where</span> rang = <span class="string">'C4'</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>对所有的教授先对rang倒序排序，再对name正序排序：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> persnr, <span class="keyword">name</span>, rang</span><br><span class="line"><span class="keyword">from</span> professoren</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> rang <span class="keyword">desc</span>, <span class="keyword">name</span> <span class="keyword">asc</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>得到professoren的rank的所有可能：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> rang</span><br><span class="line"><span class="keyword">from</span> professoren</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>搜索开Maeeutik这个课的教授：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> p.name, v.titel</span><br><span class="line"><span class="keyword">from</span> professoren p, vorlesungen v</span><br><span class="line"><span class="keyword">where</span> p.persnr = v.gelesenvon <span class="keyword">and</span> titel = <span class="string">'Maeeutik'</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>列出学生名字和该学生听过的课：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.name, v.titel</span><br><span class="line"><span class="keyword">from</span> studenten s, hoeren h, vorlesungen v</span><br><span class="line"><span class="keyword">where</span> s.matrnr = h.matrnr <span class="keyword">and</span> h.vorlnr = v.vorlnr</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>搜索每个课被多少学生听，考虑没有人听的课，进行倒序排序：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> v.vorlnr, v.titel, <span class="keyword">count</span>(h.matrnr) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span> vorlesungen v <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> hoeren h <span class="keyword">on</span> v.vorlnr = h.vorlnr</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> v.vorlnr, v.titel</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">num</span> <span class="keyword">desc</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>搜索assistenten的name和professoren的name的并集：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">(<span class="keyword">select</span> <span class="keyword">name</span></span><br><span class="line"><span class="keyword">from</span> assistenten)</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">name</span></span><br><span class="line"><span class="keyword">from</span> professoren)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>搜索没有任何课的教授：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- correlated sub-query</span></span><br><span class="line"><span class="keyword">select</span> p.name</span><br><span class="line"><span class="keyword">from</span> professoren p</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> vorlesungen v</span><br><span class="line">    <span class="keyword">where</span> v.gelesenvon = p.persnr</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment">-- un-correlated sub-query</span></span><br><span class="line"><span class="comment">-- not in:　集合的比较</span></span><br><span class="line"><span class="keyword">select</span> p.name</span><br><span class="line"><span class="keyword">from</span> professoren p</span><br><span class="line"><span class="keyword">where</span> p.persnr <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> v.gelesenvon</span><br><span class="line">    <span class="keyword">from</span> vorlesungen v</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>搜索不上任何课的学生：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- correlated sub-query</span></span><br><span class="line"><span class="keyword">select</span> s.name</span><br><span class="line"><span class="keyword">from</span> studenten s</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> hoeren h</span><br><span class="line">    <span class="keyword">where</span> h.matrnr = s.matrnr</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment">-- un-correlated sub-query</span></span><br><span class="line"><span class="comment">-- not in:　集合的比较</span></span><br><span class="line"><span class="keyword">select</span> s.name</span><br><span class="line"><span class="keyword">from</span> studenten s</span><br><span class="line"><span class="keyword">where</span> s.matrnr <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> h.matrnr</span><br><span class="line">    <span class="keyword">from</span> hoeren h</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>听大于等于3门课学生：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.matrnr, s.name</span><br><span class="line"><span class="keyword">from</span> studenten s, hoeren h</span><br><span class="line"><span class="keyword">where</span> s.matrnr = h.matrnr</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.matrnr, s.name</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(*) &gt;= <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>搜索semester最大的学生：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.name</span><br><span class="line"><span class="keyword">from</span> studenten s</span><br><span class="line"><span class="keyword">where</span> s.semester &gt;= <span class="keyword">all</span> (</span><br><span class="line">    <span class="keyword">select</span> semester</span><br><span class="line">    <span class="keyword">from</span> studenten</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>求得studenten的平均semester：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(semester)</span><br><span class="line"><span class="keyword">from</span> studenten</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>搜索sws&gt;=4并且作为至少其他两门课以上的vorgaenger:</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> v.vorlnr, v.titel</span><br><span class="line"><span class="keyword">from</span> vorlesungen v, voraussetzen vor</span><br><span class="line"><span class="keyword">where</span> v.vorlnr = vor.vorgaenger <span class="keyword">and</span> v.sws &gt;= <span class="number">4</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> v.vorlnr, v.titel</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(*) &gt;= <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>搜索每一个教授上的课的SWS的各自总和：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> v.gelesenvon, <span class="keyword">sum</span>(v.sws)</span><br><span class="line"><span class="keyword">from</span> vorlesungen v</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> v.gelesenvon</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>搜索有rank C4的professoren中上课总SWS超过３的professoren：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> v.gelesenvon, p.name, <span class="keyword">sum</span>(v.sws)</span><br><span class="line"><span class="keyword">from</span> vorlesungen v, professoren p</span><br><span class="line"><span class="keyword">where</span> v.gelesenvon = p.persnr <span class="keyword">and</span> rang = <span class="string">'C4'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> v.gelesenvon, p.name</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">avg</span>(v.sws) &gt;= <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure>
<p>这里需要注意一下aggregation operation。<br>对每一个group都会生成一个tuple。所以对于带有<code>group by</code>子句的<code>SQL</code>语句，<code>select</code>子句里面只能是<code>group by</code>子句提到的属性值和aggregation operation。</p>
<ul>
<li>比较的syntax sugar(语法糖)：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> studenten </span><br><span class="line"><span class="keyword">WHERE</span> semester &gt;= <span class="number">1</span> <span class="keyword">AND</span> semester &lt;= <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> studenten </span><br><span class="line"><span class="keyword">WHERE</span> semester <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> studenten </span><br><span class="line"><span class="keyword">WHERE</span> semester <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>字符串比较：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> studenten </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'T%eophrastos'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> s.name</span><br><span class="line"><span class="keyword">FROM</span> vorlesungen v, hoeren h, studenten s</span><br><span class="line"><span class="keyword">WHERE</span> s.matrnr = h.matrnr <span class="keyword">AND</span> h.vorlnr = v.vorlnr <span class="keyword">AND</span> v.titel <span class="keyword">LIKE</span> <span class="string">'%thik%'</span>;</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>case</code>：</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> matrnr, </span><br><span class="line">            (<span class="keyword">case</span> <span class="keyword">when</span> note &lt;= <span class="number">1.5</span> <span class="keyword">then</span> <span class="string">'sehr gut'</span></span><br><span class="line">               <span class="keyword">when</span> note &lt;= <span class="number">2.5</span> <span class="keyword">then</span> <span class="string">'gut'</span></span><br><span class="line">               <span class="keyword">when</span> note &lt;= <span class="number">3.5</span> <span class="keyword">then</span> <span class="string">'befriedigend'</span></span><br><span class="line">               <span class="keyword">when</span> note &lt;= <span class="number">4.0</span> <span class="keyword">then</span> <span class="string">'ausreichend'</span></span><br><span class="line">               <span class="keyword">else</span> <span class="string">'nicht bestanden'</span></span><br><span class="line">            <span class="keyword">end</span>)</span><br><span class="line"><span class="keyword">FROM</span> pruefen;</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>left outer join</code>:</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.persnr, p.name, f.persnr, f.note, f.matrnr, s.matrnr, s.name</span><br><span class="line"><span class="keyword">FROM</span> professoren p <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> pruefen f <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">JOIN</span> studenten s <span class="keyword">ON</span> f.matrnr = s.matrnr <span class="keyword">ON</span> p.persnr = f.persnr;</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>right outer join</code>:</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.persnr, p.name, pf.persnr, pf.note, pf.matrnr, s.matrnr, s.name</span><br><span class="line"><span class="keyword">FROM</span> professoren p <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">JOIN</span> pruefen pf <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">JOIN</span> studenten s <span class="keyword">ON</span> pf.matrnr = s.matrnr <span class="keyword">ON</span> p.persnr = pf.persnr;</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>full outer join</code>:</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.persnr, p.name, pf.persnr, pf.note, pf.matrnr, s.matrnr, s.name</span><br><span class="line"><span class="keyword">FROM</span> professoren p <span class="keyword">full</span> <span class="keyword">outer</span> <span class="keyword">JOIN</span> pruefen pf <span class="keyword">full</span> <span class="keyword">outer</span> <span class="keyword">JOIN</span> studenten s <span class="keyword">ON</span> pf.matrnr = s.matrnr <span class="keyword">ON</span> p.persnr = pf.persnr;</span><br></pre></td></tr></tbody></table></figure>
<p><br><br><br></p>
<ul>
<li>制作一个乘法表(<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTXVsdGlwbGljYXRpb25fdGFibGU=" title="https://en.wikipedia.org/wiki/Multiplication_table">Multiplication table<i class="fa fa-external-link"></i></span>)</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- precompute look up table</span></span><br><span class="line"><span class="keyword">with</span> mtable <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">( <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>),</span><br><span class="line">( <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">20</span>),</span><br><span class="line">( <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">27</span>, <span class="number">30</span>),</span><br><span class="line">( <span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">36</span>, <span class="number">40</span>),</span><br><span class="line">( <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>),</span><br><span class="line">( <span class="number">6</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">24</span>, <span class="number">30</span>, <span class="number">36</span>, <span class="number">42</span>, <span class="number">48</span>, <span class="number">54</span>, <span class="number">60</span>),</span><br><span class="line">( <span class="number">7</span>, <span class="number">14</span>, <span class="number">21</span>, <span class="number">28</span>, <span class="number">35</span>, <span class="number">42</span>, <span class="number">49</span>, <span class="number">56</span>, <span class="number">63</span>, <span class="number">70</span>),</span><br><span class="line">( <span class="number">8</span>, <span class="number">16</span>, <span class="number">24</span>, <span class="number">32</span>, <span class="number">40</span>, <span class="number">48</span>, <span class="number">56</span>, <span class="number">64</span>, <span class="number">72</span>, <span class="number">80</span>),</span><br><span class="line">( <span class="number">9</span>, <span class="number">18</span>, <span class="number">27</span>, <span class="number">36</span>, <span class="number">45</span>, <span class="number">54</span>, <span class="number">63</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">90</span>),</span><br><span class="line">( <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mtable</span><br></pre></td></tr></tbody></table></figure>
<p>或者</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> mtable_column(a, b, c, d, e, f, g, h, i, k) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>) <span class="comment">-- 其实被写成一行</span></span><br><span class="line">),</span><br><span class="line">mtable_row(x) <span class="keyword">as</span> (<span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>), (<span class="number">2</span>), (<span class="number">3</span>), (<span class="number">4</span>), (<span class="number">5</span>), (<span class="number">6</span>), (<span class="number">7</span>), (<span class="number">8</span>), (<span class="number">9</span>), (<span class="number">10</span>) <span class="comment">-- 其实被写成一列</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">a * x,</span><br><span class="line">b * x,</span><br><span class="line">c * x,</span><br><span class="line">d * x,</span><br><span class="line">e * x,</span><br><span class="line">f * x,</span><br><span class="line">g * x,</span><br><span class="line">h * x,</span><br><span class="line">i * x,</span><br><span class="line">k * x</span><br><span class="line"><span class="keyword">from</span> mtable_column, mtable_row</span><br></pre></td></tr></tbody></table></figure>
<p>引用：</p>
<p><a name="myfootnote1">1</a>:  SQL 维基百科. <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvU1FM" title="https://zh.wikipedia.org/wiki/SQL">https://zh.wikipedia.org/wiki/SQL<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi8/bGFuZz1kZQ==" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/?lang=de<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mL2ZvbGllbi9wZGYvS2FwaXRlbDQucGRmP2xhbmc9ZGU=" title="https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/folien/pdf/Kapitel4.pdf?lang=de<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYi5pbi50dW0uZGUvdGVhY2hpbmcvYm9va0RCTVNlaW5mLz9sYW5nPWRl" title="https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de">https://db.in.tum.de/teaching/bookDBMSeinf/?lang=de<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++中指针/数组的访问</title>
    <url>/2020/02/19/PL-C-pointer-access/</url>
    <content><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>我们的前提是下面几个变量：<br></p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line"><span class="keyword">int</span> var;</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>下面六种赋值之后，变量<code>var</code>的值是否相同？</p>
<ul>
<li><code>var = array[4]</code>  </li>
<li><code>var = *(array + 4)</code> </li>
<li><code>var = 4[array]</code> </li>
<li><code>p = &amp;[array4]; var = *p;</code></li>
<li><code>var = *(int *) ( (void *)array + 4 * (sizeof(int)))</code></li>
<li><code>p = &amp;var; *p = *(array + 4);</code>  </li>
</ul>
<p>当然看到这里，如果你已经有非常自信的答案，你当然可以无视这一篇文章后面的部分。</p>
<a id="more"></a>
<p><br></p>
<h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p><strong>上面六种赋值之后，变量<code>var</code>的值相同。</strong></p>
<p>我们来分析一下这个数组在程序的栈的布局　(这里<code>Address 10568</code>仅为<code>array</code>地址的例子)：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">+---------------------+-------------+---------+</span><br><span class="line">| Variable Name       | Address     | Value   | </span><br><span class="line">+---------------------+-------------+---------+</span><br><span class="line">| array               | 10568       | 0      |</span><br><span class="line">|                     |             +---------+</span><br><span class="line">|                     |             | 1      |</span><br><span class="line">|                     |             +---------+</span><br><span class="line">|                     |             | 2      |</span><br><span class="line">|                     |             +---------+</span><br><span class="line">|                     |             | 3      |</span><br><span class="line">|                     |             +---------+</span><br><span class="line">|                     |             | 4      |</span><br><span class="line">|                     |             +---------+</span><br><span class="line">|                     |             | 5      |</span><br><span class="line">|                     |             +---------+</span><br><span class="line">|                     |             | 6      |</span><br><span class="line">|                     |             +---------+</span><br><span class="line">|                     |             | 7      |</span><br><span class="line">|                     |             +---------+</span><br><span class="line">|                     |             | 8      |</span><br><span class="line">|                     |             +---------+</span><br><span class="line">|                     |             | 9      |</span><br><span class="line">+---------------------+-------------+---------+</span><br></pre></td></tr></tbody></table></figure>
<p><code>var = array[4]</code>，　<code>var = *(array + 4)</code> ，　<code>var = 4[array]</code>, <code>p = &amp;[array4]; var = *p;</code> ：<br>这四种其实非常类似，都是已知<code>array</code>是一个<code>int*</code>，在<code>array</code>这个基地址(例子中的10568)上进行四个元素的偏移，因此能落在４号元素的地址上，再讲这个地址视作<code>int*</code>读出int内容。</p>
<p><code>var = *(int *) ( (void *)array + 4 * (sizeof(int)))</code>：<br>这个写法虽然繁琐，但是非常像对应的汇编代码。<code>(void *)array</code>首先将<code>array</code>转成一个<code>void*</code>，也就是抹去了它<code>int*</code>的原身份。再对这个<code>void*</code>空类型指针进行偏移操作，注意这时候的<strong>偏移量</strong>不再是4，而是对应<strong>４个<code>int</code>对应的Byte量</strong>，即<code>4 * (sizeof(int)</code>。最后再将这个空类型指针转化成<code>int*</code>去读取数据。</p>
<p><code>p = &amp;var; *p = *(array + 4);</code>：<br>利用了另外一个指针<code>p</code>，使这个指针指向变量<code>var</code>。因此可以使用<code>*p</code>对<code>var</code>进行赋值。</p>
<p><br></p>
<h1 id="另一例子"><a href="#另一例子" class="headerlink" title="另一例子"></a>另一例子</h1><p>我们可以练习，考虑一下这个程序的输出。</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line"><span class="keyword">int</span> var;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) <span class="built_in">array</span>[i]=i;</span><br><span class="line"></span><br><span class="line">var = <span class="built_in">array</span>[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%i\n"</span>, var);</span><br><span class="line"></span><br><span class="line">var = <span class="number">5</span>[<span class="built_in">array</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%i\n"</span>, var);</span><br><span class="line"></span><br><span class="line">var = *(<span class="built_in">array</span> + <span class="number">6</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%i\n"</span>, var);</span><br><span class="line"></span><br><span class="line">p = &amp;<span class="built_in">array</span>[<span class="number">7</span>];</span><br><span class="line">var = *p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%i\n"</span>, var);</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">array</span>;</span><br><span class="line">var = *p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%i\n"</span>, var);</span><br><span class="line"></span><br><span class="line">p = &amp;var;</span><br><span class="line">*p = *(<span class="built_in">array</span> + <span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%i\n"</span>, var);</span><br></pre></td></tr></tbody></table></figure>
<p>输出：<br></p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<p>对应的代码：<br><a href="/download/code/pointer_access.c">点击下载</a></p>
<p><br></p>
<p>引用和推荐的阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc4NDQzNzQvODA0OTQwOA==" title="https://stackoverflow.com/a/7844374/8049408">https://stackoverflow.com/a/7844374/8049408<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudHV0b3JpYWxjdXAuY29tL2Nwcm9ncmFtbWluZy9hcnJheS1tZW1vcnktYWxsb2NhdGlvbi5odG0=" title="https://www.tutorialcup.com/cprogramming/array-memory-allocation.htm">https://www.tutorialcup.com/cprogramming/array-memory-allocation.htm<i class="fa fa-external-link"></i></span></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Programming languages</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Pointer</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++中指针类型声明: `*`的位置</title>
    <url>/2020/02/18/PL-C-pointer-declaration/</url>
    <content><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>我们用两个简单(?)的问题作为引入，当然我们整篇文章都会围绕这两个问题：</p>
<ol>
<li>下面四种类型声明等价吗？<ul>
<li><code>int* i;</code></li>
<li><code>int *i;</code></li>
<li><code>int * i;</code></li>
<li><code>int*i;</code></li>
</ul>
</li>
<li>下面四种类型声明中，<code>j</code>拥有哪一个数据类型？是<code>int</code>或者<code>int</code>的指针?<ul>
<li><code>int* i, j;</code></li>
<li><code>int *i, j;</code></li>
<li><code>int * i, j;</code></li>
<li><code>int*i, j;</code></li>
</ul>
</li>
</ol>
<p>当然看到这里，如果你已经有非常自信的答案，你当然可以无视这一篇文章后面的部分。</p>
<a id="more"></a>
<p><br></p>
<h1 id="第一个问题"><a href="#第一个问题" class="headerlink" title="第一个问题"></a>第一个问题</h1><p><strong>第一个问题的答案是:　四种指针的类型声明的等价的。</strong></p>
<p>很好，既然我们知道它们等价，或许已经足够了。但是我们数据库教授总是在课上提醒大家，知道区别并不足够，还需要问自己其中的哪一个更好，什么情况下用哪一种方式。</p>
<h2 id="哪一种写法更好呢？"><a href="#哪一种写法更好呢？" class="headerlink" title="哪一种写法更好呢？"></a>哪一种写法更好呢？</h2><p>C++之父在他的一篇文章：<span class="exturl" data-url="aHR0cDovL3d3dy5zdHJvdXN0cnVwLmNvbS9ic19mYXEyLmh0bWwjd2hpdGVzcGFjZQ==" title="http://www.stroustrup.com/bs_faq2.html#whitespace">Bjarne Stroustrup’s C++ Style and Technique FAQ<i class="fa fa-external-link"></i></span>中提到：</p>
<ul>
<li><blockquote>
<p>The choice between <code>int* p;</code> and <code>int *p;</code> is not about right and wrong, but about style and emphasis. C emphasized expressions; declarations were often considered little more than a necessary evil. C++, on the other hand, has a heavy emphasis on types.</p>
</blockquote>
</li>
<li><blockquote>
<p>A <code>typical C programmer</code> writes <code>int *p;</code> and explains it <code>*p is what is the int</code> emphasizing syntax, and may point to the C (and C++) declaration grammar to argue for the correctness of the style. Indeed, the * binds to the name p in the grammar.</p>
</blockquote>
</li>
<li><blockquote>
<p>A <code>typical C++ programmer</code> writes <code>int* p;</code> and explains it <code>p is a pointer to an int</code> emphasizing type. Indeed the type of p is int*. I clearly prefer that emphasis and see it as important for using the more advanced parts of C++ well.</p>
</blockquote>
</li>
</ul>
<p><br></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvRG9jdW1lbnRhdGlvbi9wcm9jZXNzL2NvZGluZy1zdHlsZS5yc3Q=" title="https://www.kernel.org/doc/Documentation/process/coding-style.rst">Linux kernel coding style<i class="fa fa-external-link"></i></span>中的习惯规则是：</p>
<blockquote>
<p>When declaring pointer data or a function that returns a pointer type, the<br>preferred use of <code>*</code> is adjacent to the data name or function name and not<br>adjacent to the type name.  Examples:<br></p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *linux_banner;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">memparse</span><span class="params">(<span class="keyword">char</span> *ptr, <span class="keyword">char</span> **retptr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">match_strdup</span><span class="params">(<span class="keyword">substring_t</span> *s)</span></span>;</span><br></pre></td></tr></tbody></table></figure><br>某种程度上它也拟合了C++之父Bjarne Stroustrup的想法。<p></p>
</blockquote>
<p><br></p>
<h1 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a>第二个问题</h1><p><strong>第二个问题的答案是:　<code>j</code>的类型是<code>int</code>。</strong></p>
<p>当然这问题是编译器的行为，或者语言自身的规定，很难去阐述行为或规定背后的为什么。</p>
<p>我们继续看<span class="exturl" data-url="aHR0cDovL3d3dy5zdHJvdXN0cnVwLmNvbS9ic19mYXEyLmh0bWwjd2hpdGVzcGFjZQ==" title="http://www.stroustrup.com/bs_faq2.html#whitespace">Bjarne Stroustrup’s C++ Style and Technique FAQ<i class="fa fa-external-link"></i></span>，这部分紧接问题一中对应的引用：</p>
<blockquote>
<p>The critical confusion comes (only) when people try to declare several pointers with a single declaration:<br>    <code>int* p, p1;    // probable error: p1 is not an int*</code><br>Placing the <em> closer to the name does not make this kind of error significantly less likely.<br>    `int </em>p, p1;    // probable error?<code>Declaring one name per declaration minimizes the problem - in particular when we initialize the variables. People are far less likely to write:</code>int<em> p = &amp;i;<code> </code>int p1 = p;    // error: int initialized by int</em>`<br>And if they do, the compiler will complain.</p>
</blockquote>
<p>从他的这一部分文字中，很容易可以看出我们这文章中的<strong>第一个问题</strong>和<strong>第二个问题</strong>完全是紧密结合。第二个问题中的四种写法的确是等价的，但是无一能让人轻松理解。从他的这一个观点中：<code>Declaring one name per declaration minimizes the problem</code>，我们可以对这篇文章下一个主观的结论。</p>
<p><br></p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>针对第二个问题，对我来说最好的方式是：<br></p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* i;</span><br><span class="line"><span class="keyword">int</span> j;</span><br></pre></td></tr></tbody></table></figure><br>这种写法更清晰，也是多个Stackoverflow提问中所提倡的。<p></p>
<p>最后一点声明是，无论怎么写对编译器来说其实都无所谓，它<strong>只是客观</strong>地去检查能否通过编译然后生成对应的代码。这些等价写法对应的汇编语言甚至一样，对应的程序的效能自然也是一样。这些写法迷惑的只是人类(编程的人和浏览代码的人)，我们需要有一个清晰的方式，保证自己不出错同时也让代码浏览者能快速理解。</p>
<p><br></p>
<p>引用和推荐阅读：</p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5zdHJvdXN0cnVwLmNvbS9ic19mYXEyLmh0bWwjd2hpdGVzcGFjZQ==" title="http://www.stroustrup.com/bs_faq2.html#whitespace">http://www.stroustrup.com/bs_faq2.html#whitespace<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvRG9jdW1lbnRhdGlvbi9wcm9jZXNzL2NvZGluZy1zdHlsZS5yc3Q=" title="https://www.kernel.org/doc/Documentation/process/coding-style.rst">https://www.kernel.org/doc/Documentation/process/coding-style.rst<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zb2Z0d2FyZWVuZ2luZWVyaW5nLnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy83MzA1L2ludC1pLW9yLWludC1pLW9yLWludC1p" title="https://softwareengineering.stackexchange.com/questions/7305/int-i-or-int-i-or-int-i">https://softwareengineering.stackexchange.com/questions/7305/int-i-or-int-i-or-int-i<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjk5MDcyNi9jb3JyZWN0LXdheS1vZi1kZWNsYXJpbmctcG9pbnRlci12YXJpYWJsZXMtaW4tYy1j" title="https://stackoverflow.com/questions/6990726/correct-way-of-declaring-pointer-variables-in-c-c">https://stackoverflow.com/questions/6990726/correct-way-of-declaring-pointer-variables-in-c-c<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTM4OTQyMjgvd2hlcmUtdG8tcHV0LXRoZS1zdGFyLWluLWMtYW5kLWMtcG9pbnRlci1ub3RhdGlvbg==" title="https://stackoverflow.com/questions/13894228/where-to-put-the-star-in-c-and-c-pointer-notation">https://stackoverflow.com/questions/13894228/where-to-put-the-star-in-c-and-c-pointer-notation<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjcwNDE2Ny90eXBlLWRlY2xhcmF0aW9uLXBvaW50ZXItYXN0ZXJpc2stcG9zaXRpb24=" title="https://stackoverflow.com/questions/2704167/type-declaration-pointer-asterisk-position">https://stackoverflow.com/questions/2704167/type-declaration-pointer-asterisk-position<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzk4Mzk1L3doeS1pcy10aGUtYXN0ZXJpc2stYmVmb3JlLXRoZS12YXJpYWJsZS1uYW1lLXJhdGhlci10aGFuLWFmdGVyLXRoZS10eXBl" title="https://stackoverflow.com/questions/398395/why-is-the-asterisk-before-the-variable-name-rather-than-after-the-type">https://stackoverflow.com/questions/398395/why-is-the-asterisk-before-the-variable-name-rather-than-after-the-type<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTgwNDAxL3BsYWNlbWVudC1vZi10aGUtYXN0ZXJpc2staW4tcG9pbnRlci1kZWNsYXJhdGlvbnM=" title="https://stackoverflow.com/questions/180401/placement-of-the-asterisk-in-pointer-declarations">https://stackoverflow.com/questions/180401/placement-of-the-asterisk-in-pointer-declarations<i class="fa fa-external-link"></i></span></p>
<p>(Stackoverflow统统是在问同一件问题)<br><!-- 
该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 --></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Programming languages</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Pointer</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-Shell] 195.tenth line</title>
    <url>/2020/02/18/Shell-Leetcode-195TenthLine/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>195.Tenth Line</p>
<p>Given a text file <code>file.txt</code>, print just the 10th line of the file.</p>
<p>Example:</p>
<p>Assume that <code>file.txt</code> has the following content:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Line 1</span><br><span class="line">Line 2</span><br><span class="line">Line 3</span><br><span class="line">Line 4</span><br><span class="line">Line 5</span><br><span class="line">Line 6</span><br><span class="line">Line 7</span><br><span class="line">Line 8</span><br><span class="line">Line 9</span><br><span class="line">Line 10</span><br></pre></td></tr></tbody></table></figure>
<p>Your script should output the tenth line, which is:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Line 10</span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<hr>
<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>需要注意一下它提供的note，其实test也涵盖了note提到的两点：</p>
<p>Note:</p>
<ol>
<li>If the file contains less than 10 lines, what should you output?</li>
<li>There’s at least three different solutions. Try to explore all possibilities.</li>
</ol>
<h1 id="尝试１"><a href="#尝试１" class="headerlink" title="尝试１"></a>尝试１</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">head -10 file.txt | tail -1</span><br></pre></td></tr></tbody></table></figure>
<p>缺点是默认了文件必须大于等于十行。</p>
<ul>
<li>如果文件少于十行, <code>head -10 file.txt</code>会输出整个文件(比如它仅有的８行)，<code>tail -1</code>之后获得对应的最后一行(比如第８行)。</li>
</ul>
<p><img data-src="/images/Leetcode/195_1.png" alt="195_1.png"></p>
<p><br></p>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">head -n 10 file.txt | tail -n +10</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>head -n 10 file.txt</code>: 得到前十行，或者整个文件(如果这个文件少于十行)。</li>
<li><code>tail -n +10</code>: 得到从第十行以及它后面的所有。</li>
</ul>
<blockquote>
<pre><code>   -n, --lines=[+]NUM
         output the last NUM lines, instead of the last 10; or use -n +NUM to output starting with line NUM
</code></pre></blockquote>
<p>这样如果文件少于十行，不会输出最后一行，而是输出为<strong>空</strong>。</p>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cat file.txt | sed -n <span class="string">'10p'</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>-n</code>: 只显示对应的行数。若没有会输出全部</li>
<li><code>'10p'</code>: 中的<code>p</code>指print</li>
</ul>
<blockquote>
<pre><code>   -n, --quiet, --silent
         suppress automatic printing of pattern space

   p      Print the current pattern space.

  number      Match only the specified line number (which increments  cumula‐
              tively  across  files, unless the -s option is specified on the
              command line).
</code></pre></blockquote>
<p><br></p>
<h1 id="解法３"><a href="#解法３" class="headerlink" title="解法３"></a>解法３</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cat file.txt | sed <span class="string">'10!d'</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>d</code>:　指删除</li>
</ul>
<blockquote>
<pre><code>   d      Delete pattern space.  Start next cycle.
</code></pre></blockquote>
<p><br></p>
<h1 id="解法４"><a href="#解法４" class="headerlink" title="解法４"></a>解法４</h1><p>这里有四种等价的使用<code>awk</code>的表达：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#awk example 1</span></span><br><span class="line">cat file.txt | awk <span class="string">'NR==10'</span></span><br><span class="line"><span class="comment">#awk example 2</span></span><br><span class="line">cat file.txt | awk <span class="string">'NR==10{print}'</span></span><br><span class="line"><span class="comment">#awk example 3</span></span><br><span class="line">cat file.txt | awk <span class="string">'{if(NR==10) print}'</span></span><br><span class="line"><span class="comment">#awk example 4 完整版</span></span><br><span class="line">cat file.txt | awk <span class="string">'BEGIN{}; { if(NR==10) {print;} }; END{};'</span></span><br></pre></td></tr></tbody></table></figure>
<p>引用和推荐阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdGVudGgtbGluZS8=" title="https://leetcode.com/problems/tenth-line/">https://leetcode.com/problems/tenth-line/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cDovL2JpZ2RhdHVtcy5uZXQvMjAxNi8wMi8yMi8zLXdheXMtdG8tZ2V0LXRoZS1udGgtbGluZS1vZi1hLWZpbGUtaW4tbGludXgv" title="http://bigdatums.net/2016/02/22/3-ways-to-get-the-nth-line-of-a-file-in-linux/">http://bigdatums.net/2016/02/22/3-ways-to-get-the-nth-line-of-a-file-in-linux/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdGVudGgtbGluZS9kaXNjdXNzLzU1NTQ0L1NoYXJlLWZvdXItZGlmZmVyZW50LXNvbHV0aW9uc++8mg==" title="https://leetcode.com/problems/tenth-line/discuss/55544/Share-four-different-solutions：">https://leetcode.com/problems/tenth-line/discuss/55544/Share-four-different-solutions：<i class="fa fa-external-link"></i></span> 有一些奇怪的解法<br><!-- 
该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 --></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Shell</tag>
        <tag>GNU Coreutils</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-Shell] 194.transpose file</title>
    <url>/2020/02/18/Shell-Leetcode-194TransposeFile/</url>
    <content><![CDATA[<p>194.Transpose File</p>
<p>Given a text file <code>file.txt</code>, transpose its content.</p>
<p>You may assume that each row has the same number of columns and each field is separated by the <code>' '</code> character.</p>
<p>Example:</p>
<p>If <code>file.txt</code> has the following content:<br></p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">name age</span><br><span class="line">alice 21</span><br><span class="line">ryan 30</span><br></pre></td></tr></tbody></table></figure><br>Output the following:<br><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">name alice ryan</span><br><span class="line">age 21 30</span><br></pre></td></tr></tbody></table></figure><p></p>
<a id="more"></a>
<hr>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">awk -F <span class="string">' '</span> <span class="string">'</span></span><br><span class="line"><span class="string">BEGIN { ORS=""; i=0; nf=1;}; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">{ </span></span><br><span class="line"><span class="string">    { for(line=1; line&lt;=NF; line++)</span></span><br><span class="line"><span class="string">        { N[FNR][line] = $line; nf=NF;}; i++</span></span><br><span class="line"><span class="string">    } </span></span><br><span class="line"><span class="string">}; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">END { for(itnf=1; itnf&lt;=nf; itnf++)</span></span><br><span class="line"><span class="string">        { for(it=1;it&lt;=i;it++) {</span></span><br><span class="line"><span class="string">            print N[it][itnf]; </span></span><br><span class="line"><span class="string">            { if(it != i) print " "; } </span></span><br><span class="line"><span class="string">        }; </span></span><br><span class="line"><span class="string">        print "\n"; </span></span><br><span class="line"><span class="string">        }</span></span><br><span class="line"><span class="string">}'</span>　file.txt</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>BEGIN { ORS=""; }</code>: 每次输出后不必自动换行, 直接连着输出下一个。(这题中输出空格和换行由我们自己控制。)<blockquote>
<p>ORS         The output record separator, by default a newline.</p>
</blockquote>
</li>
<li><code>i</code>为行号，自然从0开始计数。</li>
<li><code>NR</code>: 当前行号(current line number)，但是会在多个文件之间被累计。</li>
<li><code>FNR</code>: 当前文件的行号。</li>
<li><code>NF</code>: 当前行中字段的总数。</li>
<li>但是这题中我们的<strong>二维数组<code>N</code>两个维度的角标都从<code>1</code>开始</strong>。</li>
<li>思路就是使用一个二维数组用行的方式去存储，但是用列的方式去输出。(即Transpose这词的意思。)</li>
</ul>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">awk <span class="string">'</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">    for (i = 1; i &lt;= NF; i++) {</span></span><br><span class="line"><span class="string">        if (FNR == 1) {</span></span><br><span class="line"><span class="string">            t[i] = $i;</span></span><br><span class="line"><span class="string">        } else {</span></span><br><span class="line"><span class="string">            t[i] = t[i] " " $i</span></span><br><span class="line"><span class="string">        }</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">END {</span></span><br><span class="line"><span class="string">    for (i = 1; t[i] != ""; i++) {</span></span><br><span class="line"><span class="string">        print t[i]</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">'</span> file.txt</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>思路类似，但是没有用二位数组。</li>
<li><code>t[i] = t[i] " " $i</code>: 而是对源文件中每一行中的字段以此并入(append)数组的每一个位置。</li>
</ul>
<p>引用和推荐阅读:</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdHJhbnNwb3NlLWZpbGUv" title="https://leetcode.com/problems/transpose-file/">https://leetcode.com/problems/transpose-file/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdHJhbnNwb3NlLWZpbGUvZGlzY3Vzcy8xMTEzODIvU29sdXRpb24tdXNpbmctQVdLLXdpdGgtZXhwbGFuYXRpb25z" title="https://leetcode.com/problems/transpose-file/discuss/111382/Solution-using-AWK-with-explanations">https://leetcode.com/problems/transpose-file/discuss/111382/Solution-using-AWK-with-explanations<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI0MzMxNzM1LzgwNDk0MDg=" title="https://stackoverflow.com/a/24331735/8049408">https://stackoverflow.com/a/24331735/8049408<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3J5bW9pcmUuY29tL1VuaXgvQXdrLmh0bWw=" title="https://www.grymoire.com/Unix/Awk.html">https://www.grymoire.com/Unix/Awk.html<i class="fa fa-external-link"></i></span><br><!-- 
该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 --></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Shell</tag>
        <tag>GNU Coreutils</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-Shell] 193.valid phone numbers</title>
    <url>/2020/02/18/Shell-Leetcode-193ValidPhoneNumbers/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>193.Valid Phone Numbers</p>
<p>Given a text file <code>file.txt</code> that contains list of phone numbers (one per line), write a one liner bash script to print all valid phone numbers.</p>
<p>You may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)</p>
<p>You may also assume each line in the text file must not contain leading or trailing white spaces.</p>
<p>Example:</p>
<p>Assume that <code>file.txt</code> has the following content:<br></p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">987-123-4567</span><br><span class="line">123 456 7890</span><br><span class="line">(123) 456-7890</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>Your script should output the following valid phone numbers:<br></p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">987-123-4567</span><br><span class="line">(123) 456-7890</span><br></pre></td></tr></tbody></table></figure><p></p>
<a id="more"></a>
<hr>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="解法１"></a>解法１</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Read from the file file.txt and output all valid phone numbers to stdout.</span></span><br><span class="line">cat file.txt | grep -P <span class="string">'(^\(\d{3}\) \d{3}-\d{4}$)|(^\d{3}-\d{3}-\d{4}$)'</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">grep -P <span class="string">'^(\d{3}-|\(\d{3}\) )\d{3}-\d{4}$'</span> file.txt</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>\</code> 转义符: to escape next one trailing character</li>
</ul>
<blockquote>
<pre><code>   -P, --perl-regexp
          Interpret the pattern as a Perl-compatible regular expression (PCRE).  
          This is experimental and grep -P may warn of unimplemented features.
</code></pre></blockquote>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sed -n -r <span class="string">'/^([0-9]{3}-|\([0-9]{3}\) )[0-9]{3}-[0-9]{4}$/p'</span> file.txt</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<pre><code>   -n, --quiet, --silent
         suppress automatic printing of pattern space

  -E, -r, --regexp-extended
         use extended regular expressions in the script (for portability use POSIX -E).
</code></pre></blockquote>
<p><br></p>
<h1 id="解法３"><a href="#解法３" class="headerlink" title="解法３"></a>解法３</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">awk <span class="string">'/^([0-9]{3}-|\([0-9]{3}\) )[0-9]{3}-[0-9]{4}$/'</span> file.txt</span><br></pre></td></tr></tbody></table></figure>
<p>引用和推荐阅读：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdmFsaWQtcGhvbmUtbnVtYmVycy8=" title="https://leetcode.com/problems/valid-phone-numbers/">https://leetcode.com/problems/valid-phone-numbers/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdmFsaWQtcGhvbmUtbnVtYmVycy9kaXNjdXNzLzU1NDgxL1RocmVlLWRpZmZlcmVudC1zb2x1dGlvbnMtdXNpbmctZ3JlcC1zZWQtYW5kLWF3aw==" title="https://leetcode.com/problems/valid-phone-numbers/discuss/55481/Three-different-solutions-using-grep-sed-and-awk">https://leetcode.com/problems/valid-phone-numbers/discuss/55481/Three-different-solutions-using-grep-sed-and-awk<i class="fa fa-external-link"></i></span><br><!-- 
该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 --></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Shell</tag>
        <tag>GNU Coreutils</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode-Shell] 192.word frequency</title>
    <url>/2020/02/18/Shell-Leetcode-192wordfrequency/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>192.Word Frequency</p>
<p>Write a bash script to calculate the frequency of each word in a text file <code>words.txt</code>.</p>
<p>For simplicity sake, you may assume:</p>
<p><code>words.txt</code> contains only lowercase characters and space ‘ ‘ characters.<br>Each word must consist of lowercase characters only.<br>Words are separated by one or more whitespace characters.<br>Example:</p>
<p>Assume that <code>words.txt</code> has the following content:<br></p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">the day is sunny the the</span><br><span class="line">the sunny is is</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>Your script should output the following, sorted by descending frequency:<br></p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">the 4</span><br><span class="line">is 3</span><br><span class="line">sunny 2</span><br><span class="line">day 1</span><br></pre></td></tr></tbody></table></figure><p></p>
<a id="more"></a>
<hr>
<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>Note:</p>
<ul>
<li>Don’t worry about handling ties, it is guaranteed that each word’s frequency count is unique.</li>
<li>Could you write it in one-line using Unix pipes?</li>
</ul>
<h1 id="解法１"><a href="#解法１" class="headerlink" title="　解法１"></a>　解法１</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Read from the file words.txt and output the word frequency list to stdout.</span></span><br><span class="line">cat words.txt | awk -F <span class="string">' '</span> <span class="string">'{ for(i=1; i&lt;=NF; i++) print $i }'</span> | sort | uniq -c | sort -n -r | awk -F <span class="string">' '</span> <span class="string">'{ print $2, $1}'</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<pre><code>   The variable NF is set to the total number of fields in the input record.
</code></pre></blockquote>
<p><br></p>
<h1 id="解法２"><a href="#解法２" class="headerlink" title="解法２"></a>解法２</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cat words.txt | tr -s <span class="string">' '</span> <span class="string">'\n'</span> | sort | uniq -c | sort -n -r | awk <span class="string">'{ print $2, $1 }'</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>tr -s ' ' '\n'</code>:  <strong>将多个<code>' '</code>　替换为单个<code>\n</code></strong></li>
</ul>
<blockquote>
<p>tr - translate or delete characters</p>
<pre><code>   -s, --squeeze-repeats
          replace each sequence of a repeated character that is listed in the last specified SET, with a single occurrence of that character
</code></pre></blockquote>
<p><br></p>
<h1 id="解法３：与解法２对比"><a href="#解法３：与解法２对比" class="headerlink" title="解法３：与解法２对比"></a>解法３：与解法２对比</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cat words.txt | sed <span class="string">'s/\s/\n/g'</span> | sort | uniq -c | sort -n -r | awk <span class="string">'{ if($2 != "") print $2, $1 }'</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>sed 's/ /\n/g'</code>:  <strong>将单个<code>' '</code>　替换为单个<code>\n</code></strong></li>
<li>如果有多个<code>' '</code>也就会生成多个<code>'\n'</code>,但是我们只需要一个。</li>
<li>同时多生成的<code>'\n'</code>也会被计数。</li>
<li><code>if($2 != "")</code>：我们在<code>awk</code>输出的时候对<strong>空行(换行符)</strong>进行检查。</li>
</ul>
<p><br></p>
<h1 id="解法４"><a href="#解法４" class="headerlink" title="解法４"></a>解法４</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">awk <span class="string">'{ for (i=1; i&lt;=NF; i++) { ++D[$i]; } } END { for (i in D) { print i, D[i] } }'</span> words.txt | sort -n -r -k 2</span><br></pre></td></tr></tbody></table></figure>
<p>引用和推荐阅读:</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvd29yZC1mcmVxdWVuY3kv" title="https://leetcode.com/problems/word-frequency/">https://leetcode.com/problems/word-frequency/<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly91bml4LnN0YWNrZXhjaGFuZ2UuY29tL2EvMzc4NTUwLzMyMzIxMA==" title="https://unix.stackexchange.com/a/378550/323210">https://unix.stackexchange.com/a/378550/323210<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvd29yZC1mcmVxdWVuY3kvZGlzY3Vzcy81NTQ0My9NeS1zaW1wbGUtc29sdXRpb24tKG9uZS1saW5lLXdpdGgtcGlwZQ==" title="https://leetcode.com/problems/word-frequency/discuss/55443/My-simple-solution-(one-line-with-pipe">https://leetcode.com/problems/word-frequency/discuss/55443/My-simple-solution-(one-line-with-pipe<i class="fa fa-external-link"></i></span>)</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvd29yZC1mcmVxdWVuY3kvZGlzY3Vzcy81NTQ2Mi9Tb2x1dGlvbi11c2luZy1hd2stYW5kLXBpcGVzLXdpdGgtZXhwbGFpbmF0aW9u" title="https://leetcode.com/problems/word-frequency/discuss/55462/Solution-using-awk-and-pipes-with-explaination">https://leetcode.com/problems/word-frequency/discuss/55462/Solution-using-awk-and-pipes-with-explaination<i class="fa fa-external-link"></i></span><br><!-- 
该文章遵循[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh)，要求署名、非商业 、保持一致。在满足[创作共用版权协议 CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.zh) 的基础上可以转载，但请以超链接形式注明出处。文章仅代表作者的知识和看法，如有不同观点，可以回复并讨论。 --></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Shell</tag>
        <tag>GNU Coreutils</tag>
      </tags>
  </entry>
</search>
